["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js"],"~:js","shadow$provide.module$node_modules$chevrotain$lib$src$parse$parser$traits$error_handler=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.ErrorHandler=void 0;var exceptions_public_1=require(\"module$node_modules$chevrotain$lib$src$parse$exceptions_public\"),utils_1=require(\"module$node_modules$$chevrotain$utils$lib$src$api\"),lookahead_1=require(\"module$node_modules$chevrotain$lib$src$parse$grammar$lookahead\"),parser_1=require(\"module$node_modules$chevrotain$lib$src$parse$parser$parser\");\nglobal=function(){function ErrorHandler(){}ErrorHandler.prototype.initErrorHandler=function(config){this._errors=[];this.errorMessageProvider=utils_1.has(config,\"errorMessageProvider\")?config.errorMessageProvider:parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider};ErrorHandler.prototype.SAVE_ERROR=function(error){if(exceptions_public_1.isRecognitionException(error))return error.context={ruleStack:this.getHumanReadableRuleStack(),ruleOccurrenceStack:utils_1.cloneArr(this.RULE_OCCURRENCE_STACK)},this._errors.push(error),\nerror;throw Error(\"Trying to save an Error which is not a RecognitionException\");};Object.defineProperty(ErrorHandler.prototype,\"errors\",{get:function(){return utils_1.cloneArr(this._errors)},set:function(newErrors){this._errors=newErrors},enumerable:!1,configurable:!0});ErrorHandler.prototype.raiseEarlyExitException=function(occurrence,prodType,userDefinedErrMsg){var ruleName=this.getCurrRuleFullName(),ruleGrammar=this.getGAstProductions()[ruleName];occurrence=lookahead_1.getLookaheadPathsForOptionalProd(occurrence,\nruleGrammar,prodType,this.maxLookahead)[0];prodType=[];for(ruleGrammar=1;ruleGrammar<=this.maxLookahead;ruleGrammar++)prodType.push(this.LA(ruleGrammar));userDefinedErrMsg=this.errorMessageProvider.buildEarlyExitMessage({expectedIterationPaths:occurrence,actual:prodType,previous:this.LA(0),customUserDescription:userDefinedErrMsg,ruleName});throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(userDefinedErrMsg,this.LA(1),this.LA(0)));};ErrorHandler.prototype.raiseNoAltException=function(occurrence,\nerrMsgTypes){var ruleName=this.getCurrRuleFullName();ruleName=this.getGAstProductions()[ruleName];occurrence=lookahead_1.getLookaheadPathsForOr(occurrence,ruleName,this.maxLookahead);ruleName=[];for(var i=1;i<=this.maxLookahead;i++)ruleName.push(this.LA(i));i=this.LA(0);errMsgTypes=this.errorMessageProvider.buildNoViableAltMessage({expectedPathsPerAlt:occurrence,actual:ruleName,previous:i,customUserDescription:errMsgTypes,ruleName:this.getCurrRuleFullName()});throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsgTypes,\nthis.LA(1),i));};return ErrorHandler}();exports.ErrorHandler=global}","~:source","shadow$provide[\"module$node_modules$chevrotain$lib$src$parse$parser$traits$error_handler\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ErrorHandler = void 0;\nvar exceptions_public_1 = require(\"../../exceptions_public\");\nvar utils_1 = require(\"@chevrotain/utils\");\nvar lookahead_1 = require(\"../../grammar/lookahead\");\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar ErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n    }\n    ErrorHandler.prototype.initErrorHandler = function (config) {\n        this._errors = [];\n        this.errorMessageProvider = utils_1.has(config, \"errorMessageProvider\")\n            ? config.errorMessageProvider\n            : parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider;\n    };\n    ErrorHandler.prototype.SAVE_ERROR = function (error) {\n        if (exceptions_public_1.isRecognitionException(error)) {\n            error.context = {\n                ruleStack: this.getHumanReadableRuleStack(),\n                ruleOccurrenceStack: utils_1.cloneArr(this.RULE_OCCURRENCE_STACK)\n            };\n            this._errors.push(error);\n            return error;\n        }\n        else {\n            throw Error(\"Trying to save an Error which is not a RecognitionException\");\n        }\n    };\n    Object.defineProperty(ErrorHandler.prototype, \"errors\", {\n        get: function () {\n            return utils_1.cloneArr(this._errors);\n        },\n        set: function (newErrors) {\n            this._errors = newErrors;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // TODO: consider caching the error message computed information\n    ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\n        var ruleName = this.getCurrRuleFullName();\n        var ruleGrammar = this.getGAstProductions()[ruleName];\n        var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n        var insideProdPaths = lookAheadPathsPerAlternative[0];\n        var actualTokens = [];\n        for (var i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        var msg = this.errorMessageProvider.buildEarlyExitMessage({\n            expectedIterationPaths: insideProdPaths,\n            actual: actualTokens,\n            previous: this.LA(0),\n            customUserDescription: userDefinedErrMsg,\n            ruleName: ruleName\n        });\n        throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(msg, this.LA(1), this.LA(0)));\n    };\n    // TODO: consider caching the error message computed information\n    ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\n        var ruleName = this.getCurrRuleFullName();\n        var ruleGrammar = this.getGAstProductions()[ruleName];\n        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n        var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n        var actualTokens = [];\n        for (var i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        var previousToken = this.LA(0);\n        var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n            expectedPathsPerAlt: lookAheadPathsPerAlternative,\n            actual: actualTokens,\n            previous: previousToken,\n            customUserDescription: errMsgTypes,\n            ruleName: this.getCurrRuleFullName()\n        });\n        throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsg, this.LA(1), previousToken));\n    };\n    return ErrorHandler;\n}());\nexports.ErrorHandler = ErrorHandler;\n//# sourceMappingURL=error_handler.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$chevrotain$utils$lib$src$api","~$shadow.js","~$module$node_modules$chevrotain$lib$src$parse$exceptions_public","~$module$node_modules$chevrotain$lib$src$parse$parser$parser","~$module$node_modules$chevrotain$lib$src$parse$grammar$lookahead"]],"~:properties",["^5",["ruleName","ruleOccurrenceStack","customUserDescription","__esModule","errors","SAVE_ERROR","configurable","value","enumerable","context","expectedIterationPaths","previous","_errors","ruleStack","ErrorHandler","expectedPathsPerAlt","set","initErrorHandler","actual","errorMessageProvider","raiseNoAltException","get","raiseEarlyExitException"]],"~:compiled-at",1630917515714,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$chevrotain$lib$src$parse$parser$traits$error_handler.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/chevrotain/lib/src/parse/parser/traits/error_handler.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$chevrotain$lib$src$parse$parser$traits$error_handler\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.ErrorHandler = void 0;\\nvar exceptions_public_1 = require(\\\"../../exceptions_public\\\");\\nvar utils_1 = require(\\\"@chevrotain/utils\\\");\\nvar lookahead_1 = require(\\\"../../grammar/lookahead\\\");\\nvar parser_1 = require(\\\"../parser\\\");\\n/**\\n * Trait responsible for runtime parsing errors.\\n */\\nvar ErrorHandler = /** @class */ (function () {\\n    function ErrorHandler() {\\n    }\\n    ErrorHandler.prototype.initErrorHandler = function (config) {\\n        this._errors = [];\\n        this.errorMessageProvider = utils_1.has(config, \\\"errorMessageProvider\\\")\\n            ? config.errorMessageProvider\\n            : parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider;\\n    };\\n    ErrorHandler.prototype.SAVE_ERROR = function (error) {\\n        if (exceptions_public_1.isRecognitionException(error)) {\\n            error.context = {\\n                ruleStack: this.getHumanReadableRuleStack(),\\n                ruleOccurrenceStack: utils_1.cloneArr(this.RULE_OCCURRENCE_STACK)\\n            };\\n            this._errors.push(error);\\n            return error;\\n        }\\n        else {\\n            throw Error(\\\"Trying to save an Error which is not a RecognitionException\\\");\\n        }\\n    };\\n    Object.defineProperty(ErrorHandler.prototype, \\\"errors\\\", {\\n        get: function () {\\n            return utils_1.cloneArr(this._errors);\\n        },\\n        set: function (newErrors) {\\n            this._errors = newErrors;\\n        },\\n        enumerable: false,\\n        configurable: true\\n    });\\n    // TODO: consider caching the error message computed information\\n    ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\\n        var ruleName = this.getCurrRuleFullName();\\n        var ruleGrammar = this.getGAstProductions()[ruleName];\\n        var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\\n        var insideProdPaths = lookAheadPathsPerAlternative[0];\\n        var actualTokens = [];\\n        for (var i = 1; i <= this.maxLookahead; i++) {\\n            actualTokens.push(this.LA(i));\\n        }\\n        var msg = this.errorMessageProvider.buildEarlyExitMessage({\\n            expectedIterationPaths: insideProdPaths,\\n            actual: actualTokens,\\n            previous: this.LA(0),\\n            customUserDescription: userDefinedErrMsg,\\n            ruleName: ruleName\\n        });\\n        throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(msg, this.LA(1), this.LA(0)));\\n    };\\n    // TODO: consider caching the error message computed information\\n    ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\\n        var ruleName = this.getCurrRuleFullName();\\n        var ruleGrammar = this.getGAstProductions()[ruleName];\\n        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\\n        var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\\n        var actualTokens = [];\\n        for (var i = 1; i <= this.maxLookahead; i++) {\\n            actualTokens.push(this.LA(i));\\n        }\\n        var previousToken = this.LA(0);\\n        var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\\n            expectedPathsPerAlt: lookAheadPathsPerAlternative,\\n            actual: actualTokens,\\n            previous: previousToken,\\n            customUserDescription: errMsgTypes,\\n            ruleName: this.getCurrRuleFullName()\\n        });\\n        throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsg, this.LA(1), previousToken));\\n    };\\n    return ErrorHandler;\\n}());\\nexports.ErrorHandler = ErrorHandler;\\n//# sourceMappingURL=error_handler.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"ErrorHandler\",\"exceptions_public_1\",\"utils_1\",\"lookahead_1\",\"parser_1\",\"prototype\",\"initErrorHandler\",\"ErrorHandler.prototype.initErrorHandler\",\"config\",\"_errors\",\"errorMessageProvider\",\"has\",\"DEFAULT_PARSER_CONFIG\",\"SAVE_ERROR\",\"ErrorHandler.prototype.SAVE_ERROR\",\"error\",\"isRecognitionException\",\"context\",\"ruleStack\",\"getHumanReadableRuleStack\",\"ruleOccurrenceStack\",\"cloneArr\",\"RULE_OCCURRENCE_STACK\",\"push\",\"Error\",\"get\",\"set\",\"newErrors\",\"enumerable\",\"configurable\",\"raiseEarlyExitException\",\"ErrorHandler.prototype.raiseEarlyExitException\",\"occurrence\",\"prodType\",\"userDefinedErrMsg\",\"ruleName\",\"getCurrRuleFullName\",\"ruleGrammar\",\"getGAstProductions\",\"insideProdPaths\",\"getLookaheadPathsForOptionalProd\",\"lookAheadPathsPerAlternative\",\"maxLookahead\",\"actualTokens\",\"i\",\"LA\",\"msg\",\"buildEarlyExitMessage\",\"expectedIterationPaths\",\"actual\",\"previous\",\"customUserDescription\",\"EarlyExitException\",\"raiseNoAltException\",\"ErrorHandler.prototype.raiseNoAltException\",\"errMsgTypes\",\"getLookaheadPathsForOr\",\"previousToken\",\"errMsg\",\"buildNoViableAltMessage\",\"expectedPathsPerAlt\",\"NoViableAltException\"]\n}\n"]