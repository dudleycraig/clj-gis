["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/SMAAShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$SMAAShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.SMAAWeightsShader=exports.SMAAEdgesShader=exports.SMAABlendShader=void 0;global=require(\"module$node_modules$three$build$three_module\");require={defines:{SMAA_THRESHOLD:\"0.1\"},uniforms:{tDiffuse:{value:null},resolution:{value:new global.Vector2(1/1024,1/512)}},vertexShader:\"uniform vec2 resolution;\\nvarying vec2 vUv;\\nvarying vec4 vOffset[ 3 ];\\nvoid SMAAEdgeDetectionVS( vec2 texcoord ) {\\n\\tvOffset[ 0 ] \\x3d texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0,  1.0 );\\n\\tvOffset[ 1 ] \\x3d texcoord.xyxy + resolution.xyxy * vec4(  1.0, 0.0, 0.0, -1.0 );\\n\\tvOffset[ 2 ] \\x3d texcoord.xyxy + resolution.xyxy * vec4( -2.0, 0.0, 0.0,  2.0 );\\n}\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tSMAAEdgeDetectionVS( vUv );\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",\nfragmentShader:\"uniform sampler2D tDiffuse;\\nvarying vec2 vUv;\\nvarying vec4 vOffset[ 3 ];\\nvec4 SMAAColorEdgeDetectionPS( vec2 texcoord, vec4 offset[3], sampler2D colorTex ) {\\n\\tvec2 threshold \\x3d vec2( SMAA_THRESHOLD, SMAA_THRESHOLD );\\n\\tvec4 delta;\\n\\tvec3 C \\x3d texture2D( colorTex, texcoord ).rgb;\\n\\tvec3 Cleft \\x3d texture2D( colorTex, offset[0].xy ).rgb;\\n\\tvec3 t \\x3d abs( C - Cleft );\\n\\tdelta.x \\x3d max( max( t.r, t.g ), t.b );\\n\\tvec3 Ctop \\x3d texture2D( colorTex, offset[0].zw ).rgb;\\n\\tt \\x3d abs( C - Ctop );\\n\\tdelta.y \\x3d max( max( t.r, t.g ), t.b );\\n\\tvec2 edges \\x3d step( threshold, delta.xy );\\n\\tif ( dot( edges, vec2( 1.0, 1.0 ) ) \\x3d\\x3d 0.0 )\\n\\t\\tdiscard;\\n\\tvec3 Cright \\x3d texture2D( colorTex, offset[1].xy ).rgb;\\n\\tt \\x3d abs( C - Cright );\\n\\tdelta.z \\x3d max( max( t.r, t.g ), t.b );\\n\\tvec3 Cbottom  \\x3d texture2D( colorTex, offset[1].zw ).rgb;\\n\\tt \\x3d abs( C - Cbottom );\\n\\tdelta.w \\x3d max( max( t.r, t.g ), t.b );\\n\\tfloat maxDelta \\x3d max( max( max( delta.x, delta.y ), delta.z ), delta.w );\\n\\tvec3 Cleftleft  \\x3d texture2D( colorTex, offset[2].xy ).rgb;\\n\\tt \\x3d abs( C - Cleftleft );\\n\\tdelta.z \\x3d max( max( t.r, t.g ), t.b );\\n\\tvec3 Ctoptop \\x3d texture2D( colorTex, offset[2].zw ).rgb;\\n\\tt \\x3d abs( C - Ctoptop );\\n\\tdelta.w \\x3d max( max( t.r, t.g ), t.b );\\n\\tmaxDelta \\x3d max( max( maxDelta, delta.z ), delta.w );\\n\\tedges.xy *\\x3d step( 0.5 * maxDelta, delta.xy );\\n\\treturn vec4( edges, 0.0, 0.0 );\\n}\\nvoid main() {\\n\\tgl_FragColor \\x3d SMAAColorEdgeDetectionPS( vUv, vOffset, tDiffuse );\\n}\"};\nexports.SMAAEdgesShader=require;require={defines:{SMAA_MAX_SEARCH_STEPS:\"8\",SMAA_AREATEX_MAX_DISTANCE:\"16\",SMAA_AREATEX_PIXEL_SIZE:\"( 1.0 / vec2( 160.0, 560.0 ) )\",SMAA_AREATEX_SUBTEX_SIZE:\"( 1.0 / 7.0 )\"},uniforms:{tDiffuse:{value:null},tArea:{value:null},tSearch:{value:null},resolution:{value:new global.Vector2(1/1024,1/512)}},vertexShader:\"uniform vec2 resolution;\\nvarying vec2 vUv;\\nvarying vec4 vOffset[ 3 ];\\nvarying vec2 vPixcoord;\\nvoid SMAABlendingWeightCalculationVS( vec2 texcoord ) {\\n\\tvPixcoord \\x3d texcoord / resolution;\\n\\tvOffset[ 0 ] \\x3d texcoord.xyxy + resolution.xyxy * vec4( -0.25, 0.125, 1.25, 0.125 );\\n\\tvOffset[ 1 ] \\x3d texcoord.xyxy + resolution.xyxy * vec4( -0.125, 0.25, -0.125, -1.25 );\\n\\tvOffset[ 2 ] \\x3d vec4( vOffset[ 0 ].xz, vOffset[ 1 ].yw ) + vec4( -2.0, 2.0, -2.0, 2.0 ) * resolution.xxyy * float( SMAA_MAX_SEARCH_STEPS );\\n}\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tSMAABlendingWeightCalculationVS( vUv );\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",\nfragmentShader:\"#define SMAASampleLevelZeroOffset( tex, coord, offset ) texture2D( tex, coord + float( offset ) * resolution, 0.0 )\\nuniform sampler2D tDiffuse;\\nuniform sampler2D tArea;\\nuniform sampler2D tSearch;\\nuniform vec2 resolution;\\nvarying vec2 vUv;\\nvarying vec4 vOffset[3];\\nvarying vec2 vPixcoord;\\n#if __VERSION__ \\x3d\\x3d 100\\nvec2 round( vec2 x ) {\\n\\treturn sign( x ) * floor( abs( x ) + 0.5 );\\n}\\n#endif\\nfloat SMAASearchLength( sampler2D searchTex, vec2 e, float bias, float scale ) {\\n\\te.r \\x3d bias + e.r * scale;\\n\\treturn 255.0 * texture2D( searchTex, e, 0.0 ).r;\\n}\\nfloat SMAASearchXLeft( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\\n\\tvec2 e \\x3d vec2( 0.0, 1.0 );\\n\\tfor ( int i \\x3d 0; i \\x3c SMAA_MAX_SEARCH_STEPS; i ++ ) {\\n\\t\\te \\x3d texture2D( edgesTex, texcoord, 0.0 ).rg;\\n\\t\\ttexcoord -\\x3d vec2( 2.0, 0.0 ) * resolution;\\n\\t\\tif ( ! ( texcoord.x \\x3e end \\x26\\x26 e.g \\x3e 0.8281 \\x26\\x26 e.r \\x3d\\x3d 0.0 ) ) break;\\n\\t}\\n\\ttexcoord.x +\\x3d 0.25 * resolution.x;\\n\\ttexcoord.x +\\x3d resolution.x;\\n\\ttexcoord.x +\\x3d 2.0 * resolution.x;\\n\\ttexcoord.x -\\x3d resolution.x * SMAASearchLength(searchTex, e, 0.0, 0.5);\\n\\treturn texcoord.x;\\n}\\nfloat SMAASearchXRight( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\\n\\tvec2 e \\x3d vec2( 0.0, 1.0 );\\n\\tfor ( int i \\x3d 0; i \\x3c SMAA_MAX_SEARCH_STEPS; i ++ ) {\\n\\t\\te \\x3d texture2D( edgesTex, texcoord, 0.0 ).rg;\\n\\t\\ttexcoord +\\x3d vec2( 2.0, 0.0 ) * resolution;\\n\\t\\tif ( ! ( texcoord.x \\x3c end \\x26\\x26 e.g \\x3e 0.8281 \\x26\\x26 e.r \\x3d\\x3d 0.0 ) ) break;\\n\\t}\\n\\ttexcoord.x -\\x3d 0.25 * resolution.x;\\n\\ttexcoord.x -\\x3d resolution.x;\\n\\ttexcoord.x -\\x3d 2.0 * resolution.x;\\n\\ttexcoord.x +\\x3d resolution.x * SMAASearchLength( searchTex, e, 0.5, 0.5 );\\n\\treturn texcoord.x;\\n}\\nfloat SMAASearchYUp( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\\n\\tvec2 e \\x3d vec2( 1.0, 0.0 );\\n\\tfor ( int i \\x3d 0; i \\x3c SMAA_MAX_SEARCH_STEPS; i ++ ) {\\n\\t\\te \\x3d texture2D( edgesTex, texcoord, 0.0 ).rg;\\n\\t\\ttexcoord +\\x3d vec2( 0.0, 2.0 ) * resolution;\\n\\t\\tif ( ! ( texcoord.y \\x3e end \\x26\\x26 e.r \\x3e 0.8281 \\x26\\x26 e.g \\x3d\\x3d 0.0 ) ) break;\\n\\t}\\n\\ttexcoord.y -\\x3d 0.25 * resolution.y;\\n\\ttexcoord.y -\\x3d resolution.y;\\n\\ttexcoord.y -\\x3d 2.0 * resolution.y;\\n\\ttexcoord.y +\\x3d resolution.y * SMAASearchLength( searchTex, e.gr, 0.0, 0.5 );\\n\\treturn texcoord.y;\\n}\\nfloat SMAASearchYDown( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\\n\\tvec2 e \\x3d vec2( 1.0, 0.0 );\\n\\tfor ( int i \\x3d 0; i \\x3c SMAA_MAX_SEARCH_STEPS; i ++ ) {\\n\\t\\te \\x3d texture2D( edgesTex, texcoord, 0.0 ).rg;\\n\\t\\ttexcoord -\\x3d vec2( 0.0, 2.0 ) * resolution;\\n\\t\\tif ( ! ( texcoord.y \\x3c end \\x26\\x26 e.r \\x3e 0.8281 \\x26\\x26 e.g \\x3d\\x3d 0.0 ) ) break;\\n\\t}\\n\\ttexcoord.y +\\x3d 0.25 * resolution.y;\\n\\ttexcoord.y +\\x3d resolution.y;\\n\\ttexcoord.y +\\x3d 2.0 * resolution.y;\\n\\ttexcoord.y -\\x3d resolution.y * SMAASearchLength( searchTex, e.gr, 0.5, 0.5 );\\n\\treturn texcoord.y;\\n}\\nvec2 SMAAArea( sampler2D areaTex, vec2 dist, float e1, float e2, float offset ) {\\n\\tvec2 texcoord \\x3d float( SMAA_AREATEX_MAX_DISTANCE ) * round( 4.0 * vec2( e1, e2 ) ) + dist;\\n\\ttexcoord \\x3d SMAA_AREATEX_PIXEL_SIZE * texcoord + ( 0.5 * SMAA_AREATEX_PIXEL_SIZE );\\n\\ttexcoord.y +\\x3d SMAA_AREATEX_SUBTEX_SIZE * offset;\\n\\treturn texture2D( areaTex, texcoord, 0.0 ).rg;\\n}\\nvec4 SMAABlendingWeightCalculationPS( vec2 texcoord, vec2 pixcoord, vec4 offset[ 3 ], sampler2D edgesTex, sampler2D areaTex, sampler2D searchTex, ivec4 subsampleIndices ) {\\n\\tvec4 weights \\x3d vec4( 0.0, 0.0, 0.0, 0.0 );\\n\\tvec2 e \\x3d texture2D( edgesTex, texcoord ).rg;\\n\\tif ( e.g \\x3e 0.0 ) {\\n\\t\\tvec2 d;\\n\\t\\tvec2 coords;\\n\\t\\tcoords.x \\x3d SMAASearchXLeft( edgesTex, searchTex, offset[ 0 ].xy, offset[ 2 ].x );\\n\\t\\tcoords.y \\x3d offset[ 1 ].y;\\n\\t\\td.x \\x3d coords.x;\\n\\t\\tfloat e1 \\x3d texture2D( edgesTex, coords, 0.0 ).r;\\n\\t\\tcoords.x \\x3d SMAASearchXRight( edgesTex, searchTex, offset[ 0 ].zw, offset[ 2 ].y );\\n\\t\\td.y \\x3d coords.x;\\n\\t\\td \\x3d d / resolution.x - pixcoord.x;\\n\\t\\tvec2 sqrt_d \\x3d sqrt( abs( d ) );\\n\\t\\tcoords.y -\\x3d 1.0 * resolution.y;\\n\\t\\tfloat e2 \\x3d SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 1, 0 ) ).r;\\n\\t\\tweights.rg \\x3d SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.y ) );\\n\\t}\\n\\tif ( e.r \\x3e 0.0 ) {\\n\\t\\tvec2 d;\\n\\t\\tvec2 coords;\\n\\t\\tcoords.y \\x3d SMAASearchYUp( edgesTex, searchTex, offset[ 1 ].xy, offset[ 2 ].z );\\n\\t\\tcoords.x \\x3d offset[ 0 ].x;\\n\\t\\td.x \\x3d coords.y;\\n\\t\\tfloat e1 \\x3d texture2D( edgesTex, coords, 0.0 ).g;\\n\\t\\tcoords.y \\x3d SMAASearchYDown( edgesTex, searchTex, offset[ 1 ].zw, offset[ 2 ].w );\\n\\t\\td.y \\x3d coords.y;\\n\\t\\td \\x3d d / resolution.y - pixcoord.y;\\n\\t\\tvec2 sqrt_d \\x3d sqrt( abs( d ) );\\n\\t\\tcoords.y -\\x3d 1.0 * resolution.y;\\n\\t\\tfloat e2 \\x3d SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 0, 1 ) ).g;\\n\\t\\tweights.ba \\x3d SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.x ) );\\n\\t}\\n\\treturn weights;\\n}\\nvoid main() {\\n\\tgl_FragColor \\x3d SMAABlendingWeightCalculationPS( vUv, vPixcoord, vOffset, tDiffuse, tArea, tSearch, ivec4( 0.0 ) );\\n}\"};\nexports.SMAAWeightsShader=require;global={uniforms:{tDiffuse:{value:null},tColor:{value:null},resolution:{value:new global.Vector2(1/1024,1/512)}},vertexShader:\"uniform vec2 resolution;\\nvarying vec2 vUv;\\nvarying vec4 vOffset[ 2 ];\\nvoid SMAANeighborhoodBlendingVS( vec2 texcoord ) {\\n\\tvOffset[ 0 ] \\x3d texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0, 1.0 );\\n\\tvOffset[ 1 ] \\x3d texcoord.xyxy + resolution.xyxy * vec4( 1.0, 0.0, 0.0, -1.0 );\\n}\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tSMAANeighborhoodBlendingVS( vUv );\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",\nfragmentShader:\"uniform sampler2D tDiffuse;\\nuniform sampler2D tColor;\\nuniform vec2 resolution;\\nvarying vec2 vUv;\\nvarying vec4 vOffset[ 2 ];\\nvec4 SMAANeighborhoodBlendingPS( vec2 texcoord, vec4 offset[ 2 ], sampler2D colorTex, sampler2D blendTex ) {\\n\\tvec4 a;\\n\\ta.xz \\x3d texture2D( blendTex, texcoord ).xz;\\n\\ta.y \\x3d texture2D( blendTex, offset[ 1 ].zw ).g;\\n\\ta.w \\x3d texture2D( blendTex, offset[ 1 ].xy ).a;\\n\\tif ( dot(a, vec4( 1.0, 1.0, 1.0, 1.0 )) \\x3c 1e-5 ) {\\n\\t\\treturn texture2D( colorTex, texcoord, 0.0 );\\n\\t} else {\\n\\t\\tvec2 offset;\\n\\t\\toffset.x \\x3d a.a \\x3e a.b ? a.a : -a.b;\\n\\t\\toffset.y \\x3d a.g \\x3e a.r ? -a.g : a.r;\\n\\t\\tif ( abs( offset.x ) \\x3e abs( offset.y )) {\\n\\t\\t\\toffset.y \\x3d 0.0;\\n\\t\\t} else {\\n\\t\\t\\toffset.x \\x3d 0.0;\\n\\t\\t}\\n\\t\\tvec4 C \\x3d texture2D( colorTex, texcoord, 0.0 );\\n\\t\\ttexcoord +\\x3d sign( offset ) * resolution;\\n\\t\\tvec4 Cop \\x3d texture2D( colorTex, texcoord, 0.0 );\\n\\t\\tfloat s \\x3d abs( offset.x ) \\x3e abs( offset.y ) ? abs( offset.x ) : abs( offset.y );\\n\\t\\tC.xyz \\x3d pow(C.xyz, vec3(2.2));\\n\\t\\tCop.xyz \\x3d pow(Cop.xyz, vec3(2.2));\\n\\t\\tvec4 mixed \\x3d mix(C, Cop, s);\\n\\t\\tmixed.xyz \\x3d pow(mixed.xyz, vec3(1.0 / 2.2));\\n\\t\\treturn mixed;\\n\\t}\\n}\\nvoid main() {\\n\\tgl_FragColor \\x3d SMAANeighborhoodBlendingPS( vUv, vOffset, tColor, tDiffuse );\\n}\"};\nexports.SMAABlendShader=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$SMAAShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SMAAWeightsShader = exports.SMAAEdgesShader = exports.SMAABlendShader = void 0;\n\nvar _three = require(\"three\");\n\n/**\n * WebGL port of Subpixel Morphological Antialiasing (SMAA) v2.8\n * Preset: SMAA 1x Medium (with color edge detection)\n * https://github.com/iryoku/smaa/releases/tag/v2.8\n */\nvar SMAAEdgesShader = {\n  defines: {\n    SMAA_THRESHOLD: '0.1'\n  },\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: new _three.Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'void SMAAEdgeDetectionVS( vec2 texcoord ) {', '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0,  1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4(  1.0, 0.0, 0.0, -1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 2 ] = texcoord.xyxy + resolution.xyxy * vec4( -2.0, 0.0, 0.0,  2.0 );', // WebGL port note: Changed sign in W component\n  '}', 'void main() {', '\tvUv = uv;', '\tSMAAEdgeDetectionVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'vec4 SMAAColorEdgeDetectionPS( vec2 texcoord, vec4 offset[3], sampler2D colorTex ) {', '\tvec2 threshold = vec2( SMAA_THRESHOLD, SMAA_THRESHOLD );', // Calculate color deltas:\n  '\tvec4 delta;', '\tvec3 C = texture2D( colorTex, texcoord ).rgb;', '\tvec3 Cleft = texture2D( colorTex, offset[0].xy ).rgb;', '\tvec3 t = abs( C - Cleft );', '\tdelta.x = max( max( t.r, t.g ), t.b );', '\tvec3 Ctop = texture2D( colorTex, offset[0].zw ).rgb;', '\tt = abs( C - Ctop );', '\tdelta.y = max( max( t.r, t.g ), t.b );', // We do the usual threshold:\n  '\tvec2 edges = step( threshold, delta.xy );', // Then discard if there is no edge:\n  '\tif ( dot( edges, vec2( 1.0, 1.0 ) ) == 0.0 )', '\t\tdiscard;', // Calculate right and bottom deltas:\n  '\tvec3 Cright = texture2D( colorTex, offset[1].xy ).rgb;', '\tt = abs( C - Cright );', '\tdelta.z = max( max( t.r, t.g ), t.b );', '\tvec3 Cbottom  = texture2D( colorTex, offset[1].zw ).rgb;', '\tt = abs( C - Cbottom );', '\tdelta.w = max( max( t.r, t.g ), t.b );', // Calculate the maximum delta in the direct neighborhood:\n  '\tfloat maxDelta = max( max( max( delta.x, delta.y ), delta.z ), delta.w );', // Calculate left-left and top-top deltas:\n  '\tvec3 Cleftleft  = texture2D( colorTex, offset[2].xy ).rgb;', '\tt = abs( C - Cleftleft );', '\tdelta.z = max( max( t.r, t.g ), t.b );', '\tvec3 Ctoptop = texture2D( colorTex, offset[2].zw ).rgb;', '\tt = abs( C - Ctoptop );', '\tdelta.w = max( max( t.r, t.g ), t.b );', // Calculate the final maximum delta:\n  '\tmaxDelta = max( max( maxDelta, delta.z ), delta.w );', // Local contrast adaptation in action:\n  '\tedges.xy *= step( 0.5 * maxDelta, delta.xy );', '\treturn vec4( edges, 0.0, 0.0 );', '}', 'void main() {', '\tgl_FragColor = SMAAColorEdgeDetectionPS( vUv, vOffset, tDiffuse );', '}'].join('\\n')\n};\nexports.SMAAEdgesShader = SMAAEdgesShader;\nvar SMAAWeightsShader = {\n  defines: {\n    SMAA_MAX_SEARCH_STEPS: '8',\n    SMAA_AREATEX_MAX_DISTANCE: '16',\n    SMAA_AREATEX_PIXEL_SIZE: '( 1.0 / vec2( 160.0, 560.0 ) )',\n    SMAA_AREATEX_SUBTEX_SIZE: '( 1.0 / 7.0 )'\n  },\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tArea: {\n      value: null\n    },\n    tSearch: {\n      value: null\n    },\n    resolution: {\n      value: new _three.Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'varying vec2 vPixcoord;', 'void SMAABlendingWeightCalculationVS( vec2 texcoord ) {', '\tvPixcoord = texcoord / resolution;', // We will use these offsets for the searches later on (see @PSEUDO_GATHER4):\n  '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.25, 0.125, 1.25, 0.125 );', // WebGL port note: Changed sign in Y and W components\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.125, 0.25, -0.125, -1.25 );', // WebGL port note: Changed sign in Y and W components\n  // And these for the searches, they indicate the ends of the loops:\n  '\tvOffset[ 2 ] = vec4( vOffset[ 0 ].xz, vOffset[ 1 ].yw ) + vec4( -2.0, 2.0, -2.0, 2.0 ) * resolution.xxyy * float( SMAA_MAX_SEARCH_STEPS );', '}', 'void main() {', '\tvUv = uv;', '\tSMAABlendingWeightCalculationVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#define SMAASampleLevelZeroOffset( tex, coord, offset ) texture2D( tex, coord + float( offset ) * resolution, 0.0 )', 'uniform sampler2D tDiffuse;', 'uniform sampler2D tArea;', 'uniform sampler2D tSearch;', 'uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[3];', 'varying vec2 vPixcoord;', '#if __VERSION__ == 100', 'vec2 round( vec2 x ) {', '\treturn sign( x ) * floor( abs( x ) + 0.5 );', '}', '#endif', 'float SMAASearchLength( sampler2D searchTex, vec2 e, float bias, float scale ) {', // Not required if searchTex accesses are set to point:\n  // float2 SEARCH_TEX_PIXEL_SIZE = 1.0 / float2(66.0, 33.0);\n  // e = float2(bias, 0.0) + 0.5 * SEARCH_TEX_PIXEL_SIZE +\n  //     e * float2(scale, 1.0) * float2(64.0, 32.0) * SEARCH_TEX_PIXEL_SIZE;\n  '\te.r = bias + e.r * scale;', '\treturn 255.0 * texture2D( searchTex, e, 0.0 ).r;', '}', 'float SMAASearchXLeft( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {',\n  /**\n   * @PSEUDO_GATHER4\n   * This texcoord has been offset by (-0.25, -0.125) in the vertex shader to\n   * sample between edge, thus fetching four edges in a row.\n   * Sampling with different offsets in each direction allows to disambiguate\n   * which edges are active from the four fetched ones.\n   */\n  '\tvec2 e = vec2( 0.0, 1.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord -= vec2( 2.0, 0.0 ) * resolution;', '\t\tif ( ! ( texcoord.x > end && e.g > 0.8281 && e.r == 0.0 ) ) break;', '\t}', // We correct the previous (-0.25, -0.125) offset we applied:\n  '\ttexcoord.x += 0.25 * resolution.x;', // The searches are bias by 1, so adjust the coords accordingly:\n  '\ttexcoord.x += resolution.x;', // Disambiguate the length added by the last step:\n  '\ttexcoord.x += 2.0 * resolution.x;', // Undo last step\n  '\ttexcoord.x -= resolution.x * SMAASearchLength(searchTex, e, 0.0, 0.5);', '\treturn texcoord.x;', '}', 'float SMAASearchXRight( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 0.0, 1.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord += vec2( 2.0, 0.0 ) * resolution;', '\t\tif ( ! ( texcoord.x < end && e.g > 0.8281 && e.r == 0.0 ) ) break;', '\t}', '\ttexcoord.x -= 0.25 * resolution.x;', '\ttexcoord.x -= resolution.x;', '\ttexcoord.x -= 2.0 * resolution.x;', '\ttexcoord.x += resolution.x * SMAASearchLength( searchTex, e, 0.5, 0.5 );', '\treturn texcoord.x;', '}', 'float SMAASearchYUp( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 1.0, 0.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord += vec2( 0.0, 2.0 ) * resolution;', // WebGL port note: Changed sign\n  '\t\tif ( ! ( texcoord.y > end && e.r > 0.8281 && e.g == 0.0 ) ) break;', '\t}', '\ttexcoord.y -= 0.25 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= 2.0 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += resolution.y * SMAASearchLength( searchTex, e.gr, 0.0, 0.5 );', // WebGL port note: Changed sign\n  '\treturn texcoord.y;', '}', 'float SMAASearchYDown( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 1.0, 0.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord -= vec2( 0.0, 2.0 ) * resolution;', // WebGL port note: Changed sign\n  '\t\tif ( ! ( texcoord.y < end && e.r > 0.8281 && e.g == 0.0 ) ) break;', '\t}', '\ttexcoord.y += 0.25 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += 2.0 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= resolution.y * SMAASearchLength( searchTex, e.gr, 0.5, 0.5 );', // WebGL port note: Changed sign\n  '\treturn texcoord.y;', '}', 'vec2 SMAAArea( sampler2D areaTex, vec2 dist, float e1, float e2, float offset ) {', // Rounding prevents precision errors of bilinear filtering:\n  '\tvec2 texcoord = float( SMAA_AREATEX_MAX_DISTANCE ) * round( 4.0 * vec2( e1, e2 ) ) + dist;', // We do a scale and bias for mapping to texel space:\n  '\ttexcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + ( 0.5 * SMAA_AREATEX_PIXEL_SIZE );', // Move to proper place, according to the subpixel offset:\n  '\ttexcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;', '\treturn texture2D( areaTex, texcoord, 0.0 ).rg;', '}', 'vec4 SMAABlendingWeightCalculationPS( vec2 texcoord, vec2 pixcoord, vec4 offset[ 3 ], sampler2D edgesTex, sampler2D areaTex, sampler2D searchTex, ivec4 subsampleIndices ) {', '\tvec4 weights = vec4( 0.0, 0.0, 0.0, 0.0 );', '\tvec2 e = texture2D( edgesTex, texcoord ).rg;', '\tif ( e.g > 0.0 ) {', // Edge at north\n  '\t\tvec2 d;', // Find the distance to the left:\n  '\t\tvec2 coords;', '\t\tcoords.x = SMAASearchXLeft( edgesTex, searchTex, offset[ 0 ].xy, offset[ 2 ].x );', '\t\tcoords.y = offset[ 1 ].y;', // offset[1].y = texcoord.y - 0.25 * resolution.y (@CROSSING_OFFSET)\n  '\t\td.x = coords.x;', // Now fetch the left crossing edges, two at a time using bilinear\n  // filtering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to\n  // discern what value each edge has:\n  '\t\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).r;', // Find the distance to the right:\n  '\t\tcoords.x = SMAASearchXRight( edgesTex, searchTex, offset[ 0 ].zw, offset[ 2 ].y );', '\t\td.y = coords.x;', // We want the distances to be in pixel units (doing this here allow to\n  // better interleave arithmetic and memory accesses):\n  '\t\td = d / resolution.x - pixcoord.x;', // SMAAArea below needs a sqrt, as the areas texture is compressed\n  // quadratically:\n  '\t\tvec2 sqrt_d = sqrt( abs( d ) );', // Fetch the right crossing edges:\n  '\t\tcoords.y -= 1.0 * resolution.y;', // WebGL port note: Added\n  '\t\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 1, 0 ) ).r;', // Ok, we know how this pattern looks like, now it is time for getting\n  // the actual area:\n  '\t\tweights.rg = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.y ) );', '\t}', '\tif ( e.r > 0.0 ) {', // Edge at west\n  '\t\tvec2 d;', // Find the distance to the top:\n  '\t\tvec2 coords;', '\t\tcoords.y = SMAASearchYUp( edgesTex, searchTex, offset[ 1 ].xy, offset[ 2 ].z );', '\t\tcoords.x = offset[ 0 ].x;', // offset[1].x = texcoord.x - 0.25 * resolution.x;\n  '\t\td.x = coords.y;', // Fetch the top crossing edges:\n  '\t\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).g;', // Find the distance to the bottom:\n  '\t\tcoords.y = SMAASearchYDown( edgesTex, searchTex, offset[ 1 ].zw, offset[ 2 ].w );', '\t\td.y = coords.y;', // We want the distances to be in pixel units:\n  '\t\td = d / resolution.y - pixcoord.y;', // SMAAArea below needs a sqrt, as the areas texture is compressed\n  // quadratically:\n  '\t\tvec2 sqrt_d = sqrt( abs( d ) );', // Fetch the bottom crossing edges:\n  '\t\tcoords.y -= 1.0 * resolution.y;', // WebGL port note: Added\n  '\t\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 0, 1 ) ).g;', // Get the area for this direction:\n  '\t\tweights.ba = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.x ) );', '\t}', '\treturn weights;', '}', 'void main() {', '\tgl_FragColor = SMAABlendingWeightCalculationPS( vUv, vPixcoord, vOffset, tDiffuse, tArea, tSearch, ivec4( 0.0 ) );', '}'].join('\\n')\n};\nexports.SMAAWeightsShader = SMAAWeightsShader;\nvar SMAABlendShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tColor: {\n      value: null\n    },\n    resolution: {\n      value: new _three.Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 2 ];', 'void SMAANeighborhoodBlendingVS( vec2 texcoord ) {', '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0, 1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( 1.0, 0.0, 0.0, -1.0 );', // WebGL port note: Changed sign in W component\n  '}', 'void main() {', '\tvUv = uv;', '\tSMAANeighborhoodBlendingVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform sampler2D tColor;', 'uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 2 ];', 'vec4 SMAANeighborhoodBlendingPS( vec2 texcoord, vec4 offset[ 2 ], sampler2D colorTex, sampler2D blendTex ) {', // Fetch the blending weights for current pixel:\n  '\tvec4 a;', '\ta.xz = texture2D( blendTex, texcoord ).xz;', '\ta.y = texture2D( blendTex, offset[ 1 ].zw ).g;', '\ta.w = texture2D( blendTex, offset[ 1 ].xy ).a;', // Is there any blending weight with a value greater than 0.0?\n  '\tif ( dot(a, vec4( 1.0, 1.0, 1.0, 1.0 )) < 1e-5 ) {', '\t\treturn texture2D( colorTex, texcoord, 0.0 );', '\t} else {', // Up to 4 lines can be crossing a pixel (one through each edge). We\n  // favor blending by choosing the line with the maximum weight for each\n  // direction:\n  '\t\tvec2 offset;', '\t\toffset.x = a.a > a.b ? a.a : -a.b;', // left vs. right\n  '\t\toffset.y = a.g > a.r ? -a.g : a.r;', // top vs. bottom // WebGL port note: Changed signs\n  // Then we go in the direction that has the maximum weight:\n  '\t\tif ( abs( offset.x ) > abs( offset.y )) {', // horizontal vs. vertical\n  '\t\t\toffset.y = 0.0;', '\t\t} else {', '\t\t\toffset.x = 0.0;', '\t\t}', // Fetch the opposite color and lerp by hand:\n  '\t\tvec4 C = texture2D( colorTex, texcoord, 0.0 );', '\t\ttexcoord += sign( offset ) * resolution;', '\t\tvec4 Cop = texture2D( colorTex, texcoord, 0.0 );', '\t\tfloat s = abs( offset.x ) > abs( offset.y ) ? abs( offset.x ) : abs( offset.y );', // WebGL port note: Added gamma correction\n  '\t\tC.xyz = pow(C.xyz, vec3(2.2));', '\t\tCop.xyz = pow(Cop.xyz, vec3(2.2));', '\t\tvec4 mixed = mix(C, Cop, s);', '\t\tmixed.xyz = pow(mixed.xyz, vec3(1.0 / 2.2));', '\t\treturn mixed;', '\t}', '}', 'void main() {', '\tgl_FragColor = SMAANeighborhoodBlendingPS( vUv, vOffset, tColor, tDiffuse );', '}'].join('\\n')\n};\nexports.SMAABlendShader = SMAABlendShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["fragmentShader","SMAA_MAX_SEARCH_STEPS","SMAABlendShader","SMAAWeightsShader","__esModule","tDiffuse","defines","tColor","vertexShader","value","tArea","SMAAEdgesShader","SMAA_AREATEX_PIXEL_SIZE","uniforms","SMAA_AREATEX_MAX_DISTANCE","SMAA_AREATEX_SUBTEX_SIZE","resolution","tSearch","SMAA_THRESHOLD"]],"~:compiled-at",1630917515487,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$SMAAShader.js\",\n\"lineCount\":7,\n\"mappings\":\"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,iBAAR,CAA4BJ,OAAQK,CAAAA,eAApC,CAAsDL,OAAQM,CAAAA,eAA9D,CAAgF,IAAK,EAEjFC,OAAAA,CAAST,OAAA,CAAQ,8CAAR,CAOTO,QAAAA,CAAkB,CACpBG,QAAS,CACPC,eAAgB,KADT,CADW,CAIpBC,SAAU,CACRC,SAAU,CACRR,MAAO,IADC,CADF,CAIRS,WAAY,CACVT,MAAO,IAAII,MAAOM,CAAAA,OAAX,CAAmB,CAAnB,CAAuB,IAAvB,CAA6B,CAA7B,CAAiC,GAAjC,CADG,CAJJ,CAJU,CAYpBC,aAGkJ,ygBAf9H;AAgBpBC,eAQmL,6gDAxB/J,CA0BtBf;OAAQK,CAAAA,eAAR,CAA0BA,OACtBD,QAAAA,CAAoB,CACtBI,QAAS,CACPQ,sBAAuB,GADhB,CAEPC,0BAA2B,IAFpB,CAGPC,wBAAyB,gCAHlB,CAIPC,yBAA0B,eAJnB,CADa,CAOtBT,SAAU,CACRC,SAAU,CACRR,MAAO,IADC,CADF,CAIRiB,MAAO,CACLjB,MAAO,IADF,CAJC,CAORkB,QAAS,CACPlB,MAAO,IADA,CAPD,CAURS,WAAY,CACVT,MAAO,IAAII,MAAOM,CAAAA,OAAX,CAAmB,CAAnB,CAAuB,IAAvB,CAA6B,CAA7B,CAAiC,GAAjC,CADG,CAVJ,CAPY,CAqBtBC,aAI6S,2qBAzBvR;AA0BtBC,eA2D2P,qkKArFrO,CAuFxBf;OAAQI,CAAAA,iBAAR,CAA4BA,OACxBE,OAAAA,CAAkB,CACpBI,SAAU,CACRC,SAAU,CACRR,MAAO,IADC,CADF,CAIRmB,OAAQ,CACNnB,MAAO,IADD,CAJA,CAORS,WAAY,CACVT,MAAO,IAAII,MAAOM,CAAAA,OAAX,CAAmB,CAAnB,CAAuB,IAAvB,CAA6B,CAA7B,CAAiC,GAAjC,CADG,CAPJ,CADU,CAYpBC,aAEyJ,gcAdrI;AAepBC,eAWgS,8xCA1B5Q,CA4BtBf;OAAQM,CAAAA,eAAR,CAA0BA,MA9JsF;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/SMAAShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$SMAAShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.SMAAWeightsShader = exports.SMAAEdgesShader = exports.SMAABlendShader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\n/**\\n * WebGL port of Subpixel Morphological Antialiasing (SMAA) v2.8\\n * Preset: SMAA 1x Medium (with color edge detection)\\n * https://github.com/iryoku/smaa/releases/tag/v2.8\\n */\\nvar SMAAEdgesShader = {\\n  defines: {\\n    SMAA_THRESHOLD: '0.1'\\n  },\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    resolution: {\\n      value: new _three.Vector2(1 / 1024, 1 / 512)\\n    }\\n  },\\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'void SMAAEdgeDetectionVS( vec2 texcoord ) {', '\\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0,  1.0 );', // WebGL port note: Changed sign in W component\\n  '\\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4(  1.0, 0.0, 0.0, -1.0 );', // WebGL port note: Changed sign in W component\\n  '\\tvOffset[ 2 ] = texcoord.xyxy + resolution.xyxy * vec4( -2.0, 0.0, 0.0,  2.0 );', // WebGL port note: Changed sign in W component\\n  '}', 'void main() {', '\\tvUv = uv;', '\\tSMAAEdgeDetectionVS( vUv );', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'vec4 SMAAColorEdgeDetectionPS( vec2 texcoord, vec4 offset[3], sampler2D colorTex ) {', '\\tvec2 threshold = vec2( SMAA_THRESHOLD, SMAA_THRESHOLD );', // Calculate color deltas:\\n  '\\tvec4 delta;', '\\tvec3 C = texture2D( colorTex, texcoord ).rgb;', '\\tvec3 Cleft = texture2D( colorTex, offset[0].xy ).rgb;', '\\tvec3 t = abs( C - Cleft );', '\\tdelta.x = max( max( t.r, t.g ), t.b );', '\\tvec3 Ctop = texture2D( colorTex, offset[0].zw ).rgb;', '\\tt = abs( C - Ctop );', '\\tdelta.y = max( max( t.r, t.g ), t.b );', // We do the usual threshold:\\n  '\\tvec2 edges = step( threshold, delta.xy );', // Then discard if there is no edge:\\n  '\\tif ( dot( edges, vec2( 1.0, 1.0 ) ) == 0.0 )', '\\t\\tdiscard;', // Calculate right and bottom deltas:\\n  '\\tvec3 Cright = texture2D( colorTex, offset[1].xy ).rgb;', '\\tt = abs( C - Cright );', '\\tdelta.z = max( max( t.r, t.g ), t.b );', '\\tvec3 Cbottom  = texture2D( colorTex, offset[1].zw ).rgb;', '\\tt = abs( C - Cbottom );', '\\tdelta.w = max( max( t.r, t.g ), t.b );', // Calculate the maximum delta in the direct neighborhood:\\n  '\\tfloat maxDelta = max( max( max( delta.x, delta.y ), delta.z ), delta.w );', // Calculate left-left and top-top deltas:\\n  '\\tvec3 Cleftleft  = texture2D( colorTex, offset[2].xy ).rgb;', '\\tt = abs( C - Cleftleft );', '\\tdelta.z = max( max( t.r, t.g ), t.b );', '\\tvec3 Ctoptop = texture2D( colorTex, offset[2].zw ).rgb;', '\\tt = abs( C - Ctoptop );', '\\tdelta.w = max( max( t.r, t.g ), t.b );', // Calculate the final maximum delta:\\n  '\\tmaxDelta = max( max( maxDelta, delta.z ), delta.w );', // Local contrast adaptation in action:\\n  '\\tedges.xy *= step( 0.5 * maxDelta, delta.xy );', '\\treturn vec4( edges, 0.0, 0.0 );', '}', 'void main() {', '\\tgl_FragColor = SMAAColorEdgeDetectionPS( vUv, vOffset, tDiffuse );', '}'].join('\\\\n')\\n};\\nexports.SMAAEdgesShader = SMAAEdgesShader;\\nvar SMAAWeightsShader = {\\n  defines: {\\n    SMAA_MAX_SEARCH_STEPS: '8',\\n    SMAA_AREATEX_MAX_DISTANCE: '16',\\n    SMAA_AREATEX_PIXEL_SIZE: '( 1.0 / vec2( 160.0, 560.0 ) )',\\n    SMAA_AREATEX_SUBTEX_SIZE: '( 1.0 / 7.0 )'\\n  },\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    tArea: {\\n      value: null\\n    },\\n    tSearch: {\\n      value: null\\n    },\\n    resolution: {\\n      value: new _three.Vector2(1 / 1024, 1 / 512)\\n    }\\n  },\\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'varying vec2 vPixcoord;', 'void SMAABlendingWeightCalculationVS( vec2 texcoord ) {', '\\tvPixcoord = texcoord / resolution;', // We will use these offsets for the searches later on (see @PSEUDO_GATHER4):\\n  '\\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.25, 0.125, 1.25, 0.125 );', // WebGL port note: Changed sign in Y and W components\\n  '\\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.125, 0.25, -0.125, -1.25 );', // WebGL port note: Changed sign in Y and W components\\n  // And these for the searches, they indicate the ends of the loops:\\n  '\\tvOffset[ 2 ] = vec4( vOffset[ 0 ].xz, vOffset[ 1 ].yw ) + vec4( -2.0, 2.0, -2.0, 2.0 ) * resolution.xxyy * float( SMAA_MAX_SEARCH_STEPS );', '}', 'void main() {', '\\tvUv = uv;', '\\tSMAABlendingWeightCalculationVS( vUv );', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['#define SMAASampleLevelZeroOffset( tex, coord, offset ) texture2D( tex, coord + float( offset ) * resolution, 0.0 )', 'uniform sampler2D tDiffuse;', 'uniform sampler2D tArea;', 'uniform sampler2D tSearch;', 'uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[3];', 'varying vec2 vPixcoord;', '#if __VERSION__ == 100', 'vec2 round( vec2 x ) {', '\\treturn sign( x ) * floor( abs( x ) + 0.5 );', '}', '#endif', 'float SMAASearchLength( sampler2D searchTex, vec2 e, float bias, float scale ) {', // Not required if searchTex accesses are set to point:\\n  // float2 SEARCH_TEX_PIXEL_SIZE = 1.0 / float2(66.0, 33.0);\\n  // e = float2(bias, 0.0) + 0.5 * SEARCH_TEX_PIXEL_SIZE +\\n  //     e * float2(scale, 1.0) * float2(64.0, 32.0) * SEARCH_TEX_PIXEL_SIZE;\\n  '\\te.r = bias + e.r * scale;', '\\treturn 255.0 * texture2D( searchTex, e, 0.0 ).r;', '}', 'float SMAASearchXLeft( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {',\\n  /**\\n   * @PSEUDO_GATHER4\\n   * This texcoord has been offset by (-0.25, -0.125) in the vertex shader to\\n   * sample between edge, thus fetching four edges in a row.\\n   * Sampling with different offsets in each direction allows to disambiguate\\n   * which edges are active from the four fetched ones.\\n   */\\n  '\\tvec2 e = vec2( 0.0, 1.0 );', '\\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\\n  '\\t\\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\\t\\ttexcoord -= vec2( 2.0, 0.0 ) * resolution;', '\\t\\tif ( ! ( texcoord.x > end && e.g > 0.8281 && e.r == 0.0 ) ) break;', '\\t}', // We correct the previous (-0.25, -0.125) offset we applied:\\n  '\\ttexcoord.x += 0.25 * resolution.x;', // The searches are bias by 1, so adjust the coords accordingly:\\n  '\\ttexcoord.x += resolution.x;', // Disambiguate the length added by the last step:\\n  '\\ttexcoord.x += 2.0 * resolution.x;', // Undo last step\\n  '\\ttexcoord.x -= resolution.x * SMAASearchLength(searchTex, e, 0.0, 0.5);', '\\treturn texcoord.x;', '}', 'float SMAASearchXRight( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\\tvec2 e = vec2( 0.0, 1.0 );', '\\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\\n  '\\t\\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\\t\\ttexcoord += vec2( 2.0, 0.0 ) * resolution;', '\\t\\tif ( ! ( texcoord.x < end && e.g > 0.8281 && e.r == 0.0 ) ) break;', '\\t}', '\\ttexcoord.x -= 0.25 * resolution.x;', '\\ttexcoord.x -= resolution.x;', '\\ttexcoord.x -= 2.0 * resolution.x;', '\\ttexcoord.x += resolution.x * SMAASearchLength( searchTex, e, 0.5, 0.5 );', '\\treturn texcoord.x;', '}', 'float SMAASearchYUp( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\\tvec2 e = vec2( 1.0, 0.0 );', '\\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\\n  '\\t\\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\\t\\ttexcoord += vec2( 0.0, 2.0 ) * resolution;', // WebGL port note: Changed sign\\n  '\\t\\tif ( ! ( texcoord.y > end && e.r > 0.8281 && e.g == 0.0 ) ) break;', '\\t}', '\\ttexcoord.y -= 0.25 * resolution.y;', // WebGL port note: Changed sign\\n  '\\ttexcoord.y -= resolution.y;', // WebGL port note: Changed sign\\n  '\\ttexcoord.y -= 2.0 * resolution.y;', // WebGL port note: Changed sign\\n  '\\ttexcoord.y += resolution.y * SMAASearchLength( searchTex, e.gr, 0.0, 0.5 );', // WebGL port note: Changed sign\\n  '\\treturn texcoord.y;', '}', 'float SMAASearchYDown( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\\tvec2 e = vec2( 1.0, 0.0 );', '\\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\\n  '\\t\\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\\t\\ttexcoord -= vec2( 0.0, 2.0 ) * resolution;', // WebGL port note: Changed sign\\n  '\\t\\tif ( ! ( texcoord.y < end && e.r > 0.8281 && e.g == 0.0 ) ) break;', '\\t}', '\\ttexcoord.y += 0.25 * resolution.y;', // WebGL port note: Changed sign\\n  '\\ttexcoord.y += resolution.y;', // WebGL port note: Changed sign\\n  '\\ttexcoord.y += 2.0 * resolution.y;', // WebGL port note: Changed sign\\n  '\\ttexcoord.y -= resolution.y * SMAASearchLength( searchTex, e.gr, 0.5, 0.5 );', // WebGL port note: Changed sign\\n  '\\treturn texcoord.y;', '}', 'vec2 SMAAArea( sampler2D areaTex, vec2 dist, float e1, float e2, float offset ) {', // Rounding prevents precision errors of bilinear filtering:\\n  '\\tvec2 texcoord = float( SMAA_AREATEX_MAX_DISTANCE ) * round( 4.0 * vec2( e1, e2 ) ) + dist;', // We do a scale and bias for mapping to texel space:\\n  '\\ttexcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + ( 0.5 * SMAA_AREATEX_PIXEL_SIZE );', // Move to proper place, according to the subpixel offset:\\n  '\\ttexcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;', '\\treturn texture2D( areaTex, texcoord, 0.0 ).rg;', '}', 'vec4 SMAABlendingWeightCalculationPS( vec2 texcoord, vec2 pixcoord, vec4 offset[ 3 ], sampler2D edgesTex, sampler2D areaTex, sampler2D searchTex, ivec4 subsampleIndices ) {', '\\tvec4 weights = vec4( 0.0, 0.0, 0.0, 0.0 );', '\\tvec2 e = texture2D( edgesTex, texcoord ).rg;', '\\tif ( e.g > 0.0 ) {', // Edge at north\\n  '\\t\\tvec2 d;', // Find the distance to the left:\\n  '\\t\\tvec2 coords;', '\\t\\tcoords.x = SMAASearchXLeft( edgesTex, searchTex, offset[ 0 ].xy, offset[ 2 ].x );', '\\t\\tcoords.y = offset[ 1 ].y;', // offset[1].y = texcoord.y - 0.25 * resolution.y (@CROSSING_OFFSET)\\n  '\\t\\td.x = coords.x;', // Now fetch the left crossing edges, two at a time using bilinear\\n  // filtering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to\\n  // discern what value each edge has:\\n  '\\t\\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).r;', // Find the distance to the right:\\n  '\\t\\tcoords.x = SMAASearchXRight( edgesTex, searchTex, offset[ 0 ].zw, offset[ 2 ].y );', '\\t\\td.y = coords.x;', // We want the distances to be in pixel units (doing this here allow to\\n  // better interleave arithmetic and memory accesses):\\n  '\\t\\td = d / resolution.x - pixcoord.x;', // SMAAArea below needs a sqrt, as the areas texture is compressed\\n  // quadratically:\\n  '\\t\\tvec2 sqrt_d = sqrt( abs( d ) );', // Fetch the right crossing edges:\\n  '\\t\\tcoords.y -= 1.0 * resolution.y;', // WebGL port note: Added\\n  '\\t\\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 1, 0 ) ).r;', // Ok, we know how this pattern looks like, now it is time for getting\\n  // the actual area:\\n  '\\t\\tweights.rg = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.y ) );', '\\t}', '\\tif ( e.r > 0.0 ) {', // Edge at west\\n  '\\t\\tvec2 d;', // Find the distance to the top:\\n  '\\t\\tvec2 coords;', '\\t\\tcoords.y = SMAASearchYUp( edgesTex, searchTex, offset[ 1 ].xy, offset[ 2 ].z );', '\\t\\tcoords.x = offset[ 0 ].x;', // offset[1].x = texcoord.x - 0.25 * resolution.x;\\n  '\\t\\td.x = coords.y;', // Fetch the top crossing edges:\\n  '\\t\\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).g;', // Find the distance to the bottom:\\n  '\\t\\tcoords.y = SMAASearchYDown( edgesTex, searchTex, offset[ 1 ].zw, offset[ 2 ].w );', '\\t\\td.y = coords.y;', // We want the distances to be in pixel units:\\n  '\\t\\td = d / resolution.y - pixcoord.y;', // SMAAArea below needs a sqrt, as the areas texture is compressed\\n  // quadratically:\\n  '\\t\\tvec2 sqrt_d = sqrt( abs( d ) );', // Fetch the bottom crossing edges:\\n  '\\t\\tcoords.y -= 1.0 * resolution.y;', // WebGL port note: Added\\n  '\\t\\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 0, 1 ) ).g;', // Get the area for this direction:\\n  '\\t\\tweights.ba = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.x ) );', '\\t}', '\\treturn weights;', '}', 'void main() {', '\\tgl_FragColor = SMAABlendingWeightCalculationPS( vUv, vPixcoord, vOffset, tDiffuse, tArea, tSearch, ivec4( 0.0 ) );', '}'].join('\\\\n')\\n};\\nexports.SMAAWeightsShader = SMAAWeightsShader;\\nvar SMAABlendShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    tColor: {\\n      value: null\\n    },\\n    resolution: {\\n      value: new _three.Vector2(1 / 1024, 1 / 512)\\n    }\\n  },\\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 2 ];', 'void SMAANeighborhoodBlendingVS( vec2 texcoord ) {', '\\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0, 1.0 );', // WebGL port note: Changed sign in W component\\n  '\\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( 1.0, 0.0, 0.0, -1.0 );', // WebGL port note: Changed sign in W component\\n  '}', 'void main() {', '\\tvUv = uv;', '\\tSMAANeighborhoodBlendingVS( vUv );', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform sampler2D tColor;', 'uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 2 ];', 'vec4 SMAANeighborhoodBlendingPS( vec2 texcoord, vec4 offset[ 2 ], sampler2D colorTex, sampler2D blendTex ) {', // Fetch the blending weights for current pixel:\\n  '\\tvec4 a;', '\\ta.xz = texture2D( blendTex, texcoord ).xz;', '\\ta.y = texture2D( blendTex, offset[ 1 ].zw ).g;', '\\ta.w = texture2D( blendTex, offset[ 1 ].xy ).a;', // Is there any blending weight with a value greater than 0.0?\\n  '\\tif ( dot(a, vec4( 1.0, 1.0, 1.0, 1.0 )) < 1e-5 ) {', '\\t\\treturn texture2D( colorTex, texcoord, 0.0 );', '\\t} else {', // Up to 4 lines can be crossing a pixel (one through each edge). We\\n  // favor blending by choosing the line with the maximum weight for each\\n  // direction:\\n  '\\t\\tvec2 offset;', '\\t\\toffset.x = a.a > a.b ? a.a : -a.b;', // left vs. right\\n  '\\t\\toffset.y = a.g > a.r ? -a.g : a.r;', // top vs. bottom // WebGL port note: Changed signs\\n  // Then we go in the direction that has the maximum weight:\\n  '\\t\\tif ( abs( offset.x ) > abs( offset.y )) {', // horizontal vs. vertical\\n  '\\t\\t\\toffset.y = 0.0;', '\\t\\t} else {', '\\t\\t\\toffset.x = 0.0;', '\\t\\t}', // Fetch the opposite color and lerp by hand:\\n  '\\t\\tvec4 C = texture2D( colorTex, texcoord, 0.0 );', '\\t\\ttexcoord += sign( offset ) * resolution;', '\\t\\tvec4 Cop = texture2D( colorTex, texcoord, 0.0 );', '\\t\\tfloat s = abs( offset.x ) > abs( offset.y ) ? abs( offset.x ) : abs( offset.y );', // WebGL port note: Added gamma correction\\n  '\\t\\tC.xyz = pow(C.xyz, vec3(2.2));', '\\t\\tCop.xyz = pow(Cop.xyz, vec3(2.2));', '\\t\\tvec4 mixed = mix(C, Cop, s);', '\\t\\tmixed.xyz = pow(mixed.xyz, vec3(1.0 / 2.2));', '\\t\\treturn mixed;', '\\t}', '}', 'void main() {', '\\tgl_FragColor = SMAANeighborhoodBlendingPS( vUv, vOffset, tColor, tDiffuse );', '}'].join('\\\\n')\\n};\\nexports.SMAABlendShader = SMAABlendShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"SMAAWeightsShader\",\"SMAAEdgesShader\",\"SMAABlendShader\",\"_three\",\"defines\",\"SMAA_THRESHOLD\",\"uniforms\",\"tDiffuse\",\"resolution\",\"Vector2\",\"vertexShader\",\"fragmentShader\",\"SMAA_MAX_SEARCH_STEPS\",\"SMAA_AREATEX_MAX_DISTANCE\",\"SMAA_AREATEX_PIXEL_SIZE\",\"SMAA_AREATEX_SUBTEX_SIZE\",\"tArea\",\"tSearch\",\"tColor\"]\n}\n"]