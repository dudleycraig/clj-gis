["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@restart/hooks/cjs/useMergedRefs.js"],"~:js","shadow$provide.module$node_modules$$restart$hooks$cjs$useMergedRefs=function(global,require,module,exports){function mergeRefs(refA,refB){var a=toFnRef(refA),b=toFnRef(refB);return function(value){a&&a(value);b&&b(value)}}exports.__esModule=!0;exports.mergeRefs=mergeRefs;exports.default=void 0;var _react=require(\"module$node_modules$react$index\"),toFnRef=function(ref){return ref&&\"function\"!==typeof ref?function(value){ref.current=value}:ref};exports.default=function(refA,refB){return(0,_react.useMemo)(function(){return mergeRefs(refA,\nrefB)},[refA,refB])}}","~:source","shadow$provide[\"module$node_modules$$restart$hooks$cjs$useMergedRefs\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.mergeRefs = mergeRefs;\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nfunction mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\n\nfunction useMergedRefs(refA, refB) {\n  return (0, _react.useMemo)(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nvar _default = useMergedRefs;\nexports.default = _default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js"]],"~:properties",["^5",["__esModule","current","mergeRefs","default"]],"~:compiled-at",1630505482931,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$restart$hooks$cjs$useMergedRefs.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAejHC,QAASA,UAAS,CAACC,IAAD,CAAOC,IAAP,CAAa,CAC7B,IAAIC,EAAIC,OAAA,CAAQH,IAAR,CAAR,CACII,EAAID,OAAA,CAAQF,IAAR,CACR,OAAO,SAAS,CAACI,KAAD,CAAQ,CAClBH,CAAJ,EAAOA,CAAA,CAAEG,KAAF,CACHD,EAAJ,EAAOA,CAAA,CAAEC,KAAF,CAFe,CAHK,CAZ/BP,OAAQQ,CAAAA,UAAR,CAAqB,CAAA,CACrBR,QAAQC,CAAAA,SAAR,CAAoBA,SACpBD,QAAQS,CAAAA,OAAR,CAAkB,IAAK,EAEvB,KAAIC,OAASZ,OAAA,CAAQ,iCAAR,CAAb,CAEIO,QAAUA,QAAgB,CAACM,GAAD,CAAM,CAClC,MAAQA,IAAD,EAAuB,UAAvB,GAAQ,MAAOA,IAAf,CAA0C,QAAS,CAACJ,KAAD,CAAQ,CAChEI,GAAIC,CAAAA,OAAJ,CAAcL,KADkD,CAA3D,CAAoCI,GADT,CAuCpCX,QAAQS,CAAAA,OAAR,CAPAI,QAAsB,CAACX,IAAD,CAAOC,IAAP,CAAa,CACjC,MAAO,CAAC,CAAA,CAAGO,MAAOI,CAAAA,OAAX,EAAoB,QAAS,EAAG,CACrC,MAAOb,UAAA,CAAUC,IAAV;AAAgBC,IAAhB,CAD8B,CAAhC,CAEJ,CAACD,IAAD,CAAOC,IAAP,CAFI,CAD0B,CAzC8E;\",\n\"sources\":[\"node_modules/@restart/hooks/cjs/useMergedRefs.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$restart$hooks$cjs$useMergedRefs\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nexports.__esModule = true;\\nexports.mergeRefs = mergeRefs;\\nexports.default = void 0;\\n\\nvar _react = require(\\\"react\\\");\\n\\nvar toFnRef = function toFnRef(ref) {\\n  return !ref || typeof ref === 'function' ? ref : function (value) {\\n    ref.current = value;\\n  };\\n};\\n\\nfunction mergeRefs(refA, refB) {\\n  var a = toFnRef(refA);\\n  var b = toFnRef(refB);\\n  return function (value) {\\n    if (a) a(value);\\n    if (b) b(value);\\n  };\\n}\\n/**\\n * Create and returns a single callback ref composed from two other Refs.\\n *\\n * ```tsx\\n * const Button = React.forwardRef((props, ref) => {\\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\\n *   const mergedRef = useMergedRefs(ref, attachRef);\\n *\\n *   return <button ref={mergedRef} {...props}/>\\n * })\\n * ```\\n *\\n * @param refA A Callback or mutable Ref\\n * @param refB A Callback or mutable Ref\\n * @category refs\\n */\\n\\n\\nfunction useMergedRefs(refA, refB) {\\n  return (0, _react.useMemo)(function () {\\n    return mergeRefs(refA, refB);\\n  }, [refA, refB]);\\n}\\n\\nvar _default = useMergedRefs;\\nexports.default = _default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"mergeRefs\",\"refA\",\"refB\",\"a\",\"toFnRef\",\"b\",\"value\",\"__esModule\",\"default\",\"_react\",\"ref\",\"current\",\"useMergedRefs\",\"useMemo\"]\n}\n"]