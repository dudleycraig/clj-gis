["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/loaders/ColladaLoader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$loaders$ColladaLoader=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=\ndescriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);staticProps&&_defineProperties(Constructor,staticProps);return Constructor}function _getPrototypeOf(o$jscomp$0){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)};\nreturn _getPrototypeOf(o$jscomp$0)}function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&null!==superClass)throw new TypeError(\"Super expression must either be null or a function\");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}});superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o$jscomp$0,p$jscomp$0){_setPrototypeOf=Object.setPrototypeOf||function(o,p){o.__proto__=p;return o};\nreturn _setPrototypeOf(o$jscomp$0,p$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.ColladaLoader=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_TGALoader=require(\"module$node_modules$three_stdlib$loaders$TGALoader\");global=function(_Loader){function ColladaLoader(manager){if(!(this instanceof ColladaLoader))throw new TypeError(\"Cannot call a class as a function\");manager=_getPrototypeOf(ColladaLoader).call(this,manager);if(!manager||\"object\"!==\n_typeof(manager)&&\"function\"!==typeof manager){if(void 0===this)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");manager=this}return manager}_inherits(ColladaLoader,_Loader);_createClass(ColladaLoader,[{key:\"load\",value:function(url,onLoad,onProgress,onError){var scope=this,path=\"\"===scope.path?_three.LoaderUtils.extractUrlBase(url):scope.path,loader=new _three.FileLoader(scope.manager);loader.setPath(scope.path);loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);\nloader.load(url,function(text){try{onLoad(scope.parse(text,path))}catch(e){onError?onError(e):console.error(e),scope.manager.itemError(url)}},onProgress,onError)}},{key:\"parse\",value:function(text$jscomp$0,path){function getElementsByTagName(xml,name){var array=[];xml=xml.childNodes;for(var i=0,l=xml.length;i<l;i++){var child=xml[i];child.nodeName===name&&array.push(child)}return array}function parseFloats(text){if(0===text.length)return[];text=text.trim().split(/\\s+/);for(var array=Array(text.length),\ni=0,l=text.length;i<l;i++)array[i]=parseFloat(text[i]);return array}function parseInts(text){if(0===text.length)return[];text=text.trim().split(/\\s+/);for(var array=Array(text.length),i=0,l=text.length;i<l;i++)array[i]=parseInt(text[i]);return array}function parseId(text){return text.substring(1)}function parseLibrary(xml,libraryName,nodeName,parser){xml=getElementsByTagName(xml,libraryName)[0];if(void 0!==xml)for(nodeName=getElementsByTagName(xml,nodeName),xml=0;xml<nodeName.length;xml++)parser(nodeName[xml])}\nfunction buildLibrary(data,builder){for(var name in data)data[name].build=builder(data[name])}function getBuild(data,builder){if(void 0!==data.build)return data.build;data.build=builder(data);return data.build}function parseAnimation(xml){for(var data={sources:{},samplers:{},channels:{}},hasChildren=!1,i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"source\":var id=child.getAttribute(\"id\");data.sources[id]=parseSource(child);break;\ncase \"sampler\":id=child.getAttribute(\"id\");for(var JSCompiler_temp_const=data.samplers,data$jscomp$0={inputs:{}},i$jscomp$0=0,l$jscomp$0=child.childNodes.length;i$jscomp$0<l$jscomp$0;i$jscomp$0++){var child$jscomp$0=child.childNodes[i$jscomp$0];if(1===child$jscomp$0.nodeType)switch(child$jscomp$0.nodeName){case \"input\":var id$jscomp$0=parseId(child$jscomp$0.getAttribute(\"source\"));child$jscomp$0=child$jscomp$0.getAttribute(\"semantic\");data$jscomp$0.inputs[child$jscomp$0]=id$jscomp$0}}JSCompiler_temp_const[id]=\ndata$jscomp$0;break;case \"channel\":id=child.getAttribute(\"target\");JSCompiler_temp_const=data.channels;data$jscomp$0={};var parts=child.getAttribute(\"target\").split(\"/\");i$jscomp$0=parts.shift();l$jscomp$0=parts.shift();id$jscomp$0=-1!==l$jscomp$0.indexOf(\"(\");if(child$jscomp$0=-1!==l$jscomp$0.indexOf(\".\"))parts=l$jscomp$0.split(\".\"),l$jscomp$0=parts.shift(),data$jscomp$0.member=parts.shift();else if(id$jscomp$0){parts=l$jscomp$0.split(\"(\");l$jscomp$0=parts.shift();for(var i$jscomp$1=0;i$jscomp$1<\nparts.length;i$jscomp$1++)parts[i$jscomp$1]=parseInt(parts[i$jscomp$1].replace(/\\)/,\"\"));data$jscomp$0.indices=parts}data$jscomp$0.id=i$jscomp$0;data$jscomp$0.sid=l$jscomp$0;data$jscomp$0.arraySyntax=id$jscomp$0;data$jscomp$0.memberSyntax=child$jscomp$0;data$jscomp$0.sampler=parseId(child.getAttribute(\"source\"));JSCompiler_temp_const[id]=data$jscomp$0;break;case \"animation\":parseAnimation(child);hasChildren=!0;break;default:console.log(child)}}!1===hasChildren&&(library.animations[xml.getAttribute(\"id\")||\n_three.MathUtils.generateUUID()]=data)}function buildAnimation(data$jscomp$0){var tracks=[],channels=data$jscomp$0.channels,samplers=data$jscomp$0.samplers;data$jscomp$0=data$jscomp$0.sources;for(var target in channels)if(channels.hasOwnProperty(target)){var channel=channels[target];var JSCompiler_object_inline_name_6573=samplers[channel.sampler];var il;var JSCompiler_object_inline_keyframes_6574=data$jscomp$0[JSCompiler_object_inline_name_6573.inputs.INPUT];var outputSource=data$jscomp$0[JSCompiler_object_inline_name_6573.inputs.OUTPUT],\nnode=library.nodes[channel.id];JSCompiler_object_inline_name_6573=getNode(node.id);var jl=node.transforms[channel.sid];node=node.matrix.clone().transpose();var data={};switch(jl){case \"matrix\":var i=0;for(il=JSCompiler_object_inline_keyframes_6574.array.length;i<il;i++){var time=JSCompiler_object_inline_keyframes_6574.array[i];var stride=i*outputSource.stride;void 0===data[time]&&(data[time]={});if(!0===channel.arraySyntax)data[time][channel.indices[0]+4*channel.indices[1]]=outputSource.array[stride];\nelse{var j=0;for(jl=outputSource.stride;j<jl;j++)data[time][j]=outputSource.array[stride+j]}}break;case \"translate\":console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.',jl);break;case \"rotate\":console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.',jl);break;case \"scale\":console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.',jl)}channel=prepareAnimationData(data,node);JSCompiler_object_inline_name_6573=\nJSCompiler_object_inline_name_6573.uuid;JSCompiler_object_inline_keyframes_6574=channel;channel=tracks;outputSource=[];node=[];data=[];jl=[];j=0;for(il=JSCompiler_object_inline_keyframes_6574.length;j<il;j++)i=JSCompiler_object_inline_keyframes_6574[j],stride=i.time,matrix$jscomp$0.fromArray(i.value).transpose(),matrix$jscomp$0.decompose(position,quaternion,scale),outputSource.push(stride),node.push(position.x,position.y,position.z),data.push(quaternion.x,quaternion.y,quaternion.z,quaternion.w),jl.push(scale.x,\nscale.y,scale.z);0<node.length&&channel.push(new _three.VectorKeyframeTrack(JSCompiler_object_inline_name_6573+\".position\",outputSource,node));0<data.length&&channel.push(new _three.QuaternionKeyframeTrack(JSCompiler_object_inline_name_6573+\".quaternion\",outputSource,data));0<jl.length&&channel.push(new _three.VectorKeyframeTrack(JSCompiler_object_inline_name_6573+\".scale\",outputSource,jl))}return tracks}function prepareAnimationData(data,defaultMatrix){var keyframes=[],time;for(time in data)keyframes.push({time:parseFloat(time),\nvalue:data[time]});keyframes.sort(function(a,b){return a.time-b.time});for(data=0;16>data;data++)transformAnimationData(keyframes,data,defaultMatrix.elements[data]);return keyframes}function transformAnimationData(keyframes,property,defaultValue){var empty=!0,l;var i=0;for(l=keyframes.length;i<l;i++){var keyframe=keyframes[i];void 0===keyframe.value[property]?keyframe.value[property]=null:empty=!1}if(!0===empty)for(i=0,l=keyframes.length;i<l;i++)keyframe=keyframes[i],keyframe.value[property]=defaultValue;\nelse for(defaultValue=0,keyframe=keyframes.length;defaultValue<keyframe;defaultValue++)if(empty=keyframes[defaultValue],null===empty.value[property]){a:{for(i=defaultValue;0<=i;){l=keyframes[i];if(null!==l.value[property]){i=l;break a}i--}i=null}a:{for(l=defaultValue;l<keyframes.length;){var keyframe$jscomp$0=keyframes[l];if(null!==keyframe$jscomp$0.value[property]){l=keyframe$jscomp$0;break a}l++}l=null}empty.value[property]=null===i?l.value[property]:null===l?i.value[property]:0===l.time-i.time?\ni.value[property]:(empty.time-i.time)*(l.value[property]-i.value[property])/(l.time-i.time)+i.value[property]}}function buildAnimationClip(data){var tracks=[],name=data.name,duration=data.end-data.start||-1;data=data.animations;for(var i=0,il=data.length;i<il;i++)for(var animationTracks=getBuild(library.animations[data[i]],buildAnimation),j=0,jl=animationTracks.length;j<jl;j++)tracks.push(animationTracks[j]);return new _three.AnimationClip(name,duration,tracks)}function buildController(data){var build=\n{id:data.id},geometry=library.geometries[build.id];void 0!==data.skin&&(build.skin=buildSkin(data.skin),geometry.sources.skinIndices=build.skin.indices,geometry.sources.skinWeights=build.skin.weights);return build}function buildSkin(data){function descending(a,b){return b.weight-a.weight}var build={joints:[],indices:{array:[],stride:4},weights:{array:[],stride:4}},vertexWeights=data.vertexWeights,vcount=vertexWeights.vcount,v=vertexWeights.v,jointOffset=vertexWeights.inputs.JOINT.offset,weightOffset=\nvertexWeights.inputs.WEIGHT.offset,jointSource=data.sources[data.joints.inputs.JOINT],inverseSource=data.sources[data.joints.inputs.INV_BIND_MATRIX],weights=data.sources[vertexWeights.inputs.WEIGHT.id].array,stride=0,j,l;vertexWeights=0;for(l=vcount.length;vertexWeights<l;vertexWeights++){var jointCount=vcount[vertexWeights],vertexSkinData=[];for(j=0;j<jointCount;j++)vertexSkinData.push({index:v[stride+jointOffset],weight:weights[v[stride+weightOffset]]}),stride+=2;vertexSkinData.sort(descending);\nfor(j=0;4>j;j++)jointCount=vertexSkinData[j],void 0!==jointCount?(build.indices.array.push(jointCount.index),build.weights.array.push(jointCount.weight)):(build.indices.array.push(0),build.weights.array.push(0))}build.bindMatrix=data.bindShapeMatrix?(new _three.Matrix4).fromArray(data.bindShapeMatrix).transpose():(new _three.Matrix4).identity();vertexWeights=0;for(l=jointSource.array.length;vertexWeights<l;vertexWeights++)data=jointSource.array[vertexWeights],vcount=(new _three.Matrix4).fromArray(inverseSource.array,\nvertexWeights*inverseSource.stride).transpose(),build.joints.push({name:data,boneInverse:vcount});return build}function buildImage(data){return void 0!==data.build?data.build:data.init_from}function getImage(id){var data=library.images[id];if(void 0!==data)return getBuild(data,buildImage);console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\",id);return null}function parseEffectParameter(xml){for(var data={},i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"color\":data[child.nodeName]=\nparseFloats(child.textContent);break;case \"float\":data[child.nodeName]=parseFloat(child.textContent);break;case \"texture\":for(var JSCompiler_temp_const=child.nodeName,JSCompiler_temp_const$jscomp$0=child.getAttribute(\"texture\"),data$jscomp$0={technique:{}},i$jscomp$0=0,l$jscomp$0=child.childNodes.length;i$jscomp$0<l$jscomp$0;i$jscomp$0++){var child$jscomp$0=child.childNodes[i$jscomp$0];if(1===child$jscomp$0.nodeType)switch(child$jscomp$0.nodeName){case \"extra\":for(var data$jscomp$1=data$jscomp$0,\ni$jscomp$1=0,l$jscomp$1=child$jscomp$0.childNodes.length;i$jscomp$1<l$jscomp$1;i$jscomp$1++){var child$jscomp$1=child$jscomp$0.childNodes[i$jscomp$1];if(1===child$jscomp$1.nodeType)switch(child$jscomp$1.nodeName){case \"technique\":for(var data$jscomp$2=data$jscomp$1,i$jscomp$2=0,l$jscomp$2=child$jscomp$1.childNodes.length;i$jscomp$2<l$jscomp$2;i$jscomp$2++){var child$jscomp$2=child$jscomp$1.childNodes[i$jscomp$2];if(1===child$jscomp$2.nodeType)switch(child$jscomp$2.nodeName){case \"repeatU\":case \"repeatV\":case \"offsetU\":case \"offsetV\":data$jscomp$2.technique[child$jscomp$2.nodeName]=\nparseFloat(child$jscomp$2.textContent);break;case \"wrapU\":case \"wrapV\":\"TRUE\"===child$jscomp$2.textContent.toUpperCase()?data$jscomp$2.technique[child$jscomp$2.nodeName]=1:\"FALSE\"===child$jscomp$2.textContent.toUpperCase()?data$jscomp$2.technique[child$jscomp$2.nodeName]=0:data$jscomp$2.technique[child$jscomp$2.nodeName]=parseInt(child$jscomp$2.textContent)}}}}}}data[JSCompiler_temp_const]={id:JSCompiler_temp_const$jscomp$0,extra:data$jscomp$0}}}return data}function buildEffect(data){return data}\nfunction buildMaterial(data){function getTexture(textureObject){var sampler=effect.profile.samplers[textureObject.id];void 0!==sampler?sampler=getImage(effect.profile.surfaces[sampler.source].init_from):(console.warn(\"THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).\"),sampler=getImage(textureObject.id));if(null!==sampler){var loader=sampler.slice((sampler.lastIndexOf(\".\")-1>>>0)+2);loader=loader.toLowerCase();switch(loader){case \"tga\":loader=tgaLoader;break;default:loader=\ntextureLoader}if(void 0!==loader)return sampler=loader.load(sampler),textureObject=textureObject.extra,void 0!==textureObject&&void 0!==textureObject.technique&&0===Object.keys(textureObject.technique).length===!1?(textureObject=textureObject.technique,sampler.wrapS=textureObject.wrapU?_three.RepeatWrapping:_three.ClampToEdgeWrapping,sampler.wrapT=textureObject.wrapV?_three.RepeatWrapping:_three.ClampToEdgeWrapping,sampler.offset.set(textureObject.offsetU||0,textureObject.offsetV||0),sampler.repeat.set(textureObject.repeatU||\n1,textureObject.repeatV||1)):(sampler.wrapS=_three.RepeatWrapping,sampler.wrapT=_three.RepeatWrapping),sampler;console.warn(\"THREE.ColladaLoader: Loader for texture %s not found.\",sampler);return null}console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\",textureObject.id);return null}var effect=getBuild(library.effects[data.url],buildEffect),technique=effect.profile.technique,extra=effect.profile.extra;switch(technique.type){case \"phong\":case \"blinn\":var material=new _three.MeshPhongMaterial;\nbreak;case \"lambert\":material=new _three.MeshLambertMaterial;break;default:material=new _three.MeshBasicMaterial}material.name=data.name||\"\";data=technique.parameters;for(var key in data)switch(technique=data[key],key){case \"diffuse\":technique.color&&material.color.fromArray(technique.color);technique.texture&&(material.map=getTexture(technique.texture));break;case \"specular\":technique.color&&material.specular&&material.specular.fromArray(technique.color);technique.texture&&(material.specularMap=\ngetTexture(technique.texture));break;case \"bump\":technique.texture&&(material.normalMap=getTexture(technique.texture));break;case \"ambient\":technique.texture&&(material.lightMap=getTexture(technique.texture));break;case \"shininess\":technique[\"float\"]&&material.shininess&&(material.shininess=technique[\"float\"]);break;case \"emission\":technique.color&&material.emissive&&material.emissive.fromArray(technique.color),technique.texture&&(material.emissiveMap=getTexture(technique.texture))}key=data.transparent;\ndata=data.transparency;void 0===data&&key&&(data={\"float\":1});void 0===key&&data&&(key={opaque:\"A_ONE\",data:{color:[1,1,1,1]}});if(key&&data)if(key.data.texture)material.transparent=!0;else{technique=key.data.color;switch(key.opaque){case \"A_ONE\":material.opacity=technique[3]*data[\"float\"];break;case \"RGB_ZERO\":material.opacity=1-technique[0]*data[\"float\"];break;case \"A_ZERO\":material.opacity=1-technique[3]*data[\"float\"];break;case \"RGB_ONE\":material.opacity=technique[0]*data[\"float\"];break;default:console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.',\nkey.opaque)}1>material.opacity&&(material.transparent=!0)}void 0!==extra&&void 0!==extra.technique&&1===extra.technique.double_sided&&(material.side=_three.DoubleSide);return material}function buildCamera(data){switch(data.optics.technique){case \"perspective\":var camera=new _three.PerspectiveCamera(data.optics.parameters.yfov,data.optics.parameters.aspect_ratio,data.optics.parameters.znear,data.optics.parameters.zfar);break;case \"orthographic\":camera=data.optics.parameters.ymag;var xmag=data.optics.parameters.xmag,\naspectRatio=data.optics.parameters.aspect_ratio;xmag=void 0===xmag?camera*aspectRatio:xmag;camera=void 0===camera?xmag/aspectRatio:camera;xmag*=.5;camera*=.5;camera=new _three.OrthographicCamera(-xmag,xmag,camera,-camera,data.optics.parameters.znear,data.optics.parameters.zfar);break;default:camera=new _three.PerspectiveCamera}camera.name=data.name||\"\";return camera}function buildLight(data){switch(data.technique){case \"directional\":var light=new _three.DirectionalLight;break;case \"point\":light=new _three.PointLight;\nbreak;case \"spot\":light=new _three.SpotLight;break;case \"ambient\":light=new _three.AmbientLight}data.parameters.color&&light.color.copy(data.parameters.color);data.parameters.distance&&(light.distance=data.parameters.distance);return light}function parseSource(xml){for(var data={array:[],stride:3},i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"float_array\":data.array=parseFloats(child.textContent);break;case \"Name_array\":child=child.textContent;\nif(0===child.length)child=[];else{child=child.trim().split(/\\s+/);for(var array=Array(child.length),i$jscomp$0=0,l=child.length;i$jscomp$0<l;i$jscomp$0++)array[i$jscomp$0]=child[i$jscomp$0];child=array}data.array=child;break;case \"technique_common\":child=getElementsByTagName(child,\"accessor\")[0],void 0!==child&&(data.stride=parseInt(child.getAttribute(\"stride\")))}}return data}function buildGeometry(data){var build={},sources=data.sources,vertices=data.vertices,primitives=data.primitives;if(0===primitives.length)return{};\ndata={};for(var i=0;i<primitives.length;i++){var primitive=primitives[i];void 0===data[primitive.type]&&(data[primitive.type]=[]);data[primitive.type].push(primitive)}for(var type in data){i=data[type];primitive=primitives=0;for(var l=i.length;primitive<l;primitive++)!0===i[primitive].hasUV&&primitives++;0<primitives&&primitives<i.length&&(i.uvsNeedsFix=!0);primitives=type;primitive=sources;l=vertices;for(var build$jscomp$0={},JSCompiler_object_inline_array_6559=[],JSCompiler_object_inline_stride_6560=\n0,JSCompiler_object_inline_array_6561=[],JSCompiler_object_inline_stride_6562=0,JSCompiler_object_inline_array_6563=[],JSCompiler_object_inline_stride_6564=0,JSCompiler_object_inline_array_6565=[],JSCompiler_object_inline_stride_6566=0,JSCompiler_object_inline_array_6567=[],JSCompiler_object_inline_stride_6568=0,JSCompiler_object_inline_array_6569=[],JSCompiler_object_inline_array_6571=[],geometry=new _three.BufferGeometry,materialKeys=[],start=0,p=0;p<i.length;p++){var primitive$jscomp$0=i[p],inputs=\nprimitive$jscomp$0.inputs,_count=0;switch(primitive$jscomp$0.type){case \"lines\":case \"linestrips\":_count=2*primitive$jscomp$0.count;break;case \"triangles\":_count=3*primitive$jscomp$0.count;break;case \"polylist\":for(var g=0;g<primitive$jscomp$0.count;g++){var vc=primitive$jscomp$0.vcount[g];switch(vc){case 3:_count+=3;break;case 4:_count+=6;break;default:_count+=3*(vc-2)}}break;default:console.warn(\"THREE.ColladaLoader: Unknow primitive type:\",primitive$jscomp$0.type)}geometry.addGroup(start,_count,\np);start+=_count;primitive$jscomp$0.material&&materialKeys.push(primitive$jscomp$0.material);for(var name in inputs)switch(_count=inputs[name],name){case \"VERTEX\":for(var key in l)switch(g=l[key],key){case \"POSITION\":vc=JSCompiler_object_inline_array_6559.length;buildGeometryData(primitive$jscomp$0,primitive[g],_count.offset,JSCompiler_object_inline_array_6559);JSCompiler_object_inline_stride_6560=primitive[g].stride;primitive.skinWeights&&primitive.skinIndices&&(buildGeometryData(primitive$jscomp$0,\nprimitive.skinIndices,_count.offset,JSCompiler_object_inline_array_6569),buildGeometryData(primitive$jscomp$0,primitive.skinWeights,_count.offset,JSCompiler_object_inline_array_6571));if(!1===primitive$jscomp$0.hasUV&&!0===i.uvsNeedsFix)for(g=(JSCompiler_object_inline_array_6559.length-vc)/JSCompiler_object_inline_stride_6560,vc=0;vc<g;vc++)JSCompiler_object_inline_array_6563.push(0,0);break;case \"NORMAL\":buildGeometryData(primitive$jscomp$0,primitive[g],_count.offset,JSCompiler_object_inline_array_6561);\nJSCompiler_object_inline_stride_6562=primitive[g].stride;break;case \"COLOR\":buildGeometryData(primitive$jscomp$0,primitive[g],_count.offset,JSCompiler_object_inline_array_6567);JSCompiler_object_inline_stride_6568=primitive[g].stride;break;case \"TEXCOORD\":buildGeometryData(primitive$jscomp$0,primitive[g],_count.offset,JSCompiler_object_inline_array_6563);JSCompiler_object_inline_stride_6564=primitive[g].stride;break;case \"TEXCOORD1\":buildGeometryData(primitive$jscomp$0,primitive[g],_count.offset,\nJSCompiler_object_inline_array_6565);JSCompiler_object_inline_stride_6564=primitive[g].stride;break;default:console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.',key)}break;case \"NORMAL\":buildGeometryData(primitive$jscomp$0,primitive[_count.id],_count.offset,JSCompiler_object_inline_array_6561);JSCompiler_object_inline_stride_6562=primitive[_count.id].stride;break;case \"COLOR\":buildGeometryData(primitive$jscomp$0,primitive[_count.id],_count.offset,JSCompiler_object_inline_array_6567);\nJSCompiler_object_inline_stride_6568=primitive[_count.id].stride;break;case \"TEXCOORD\":buildGeometryData(primitive$jscomp$0,primitive[_count.id],_count.offset,JSCompiler_object_inline_array_6563);JSCompiler_object_inline_stride_6564=primitive[_count.id].stride;break;case \"TEXCOORD1\":buildGeometryData(primitive$jscomp$0,primitive[_count.id],_count.offset,JSCompiler_object_inline_array_6565),JSCompiler_object_inline_stride_6566=primitive[_count.id].stride}}0<JSCompiler_object_inline_array_6559.length&&\ngeometry.setAttribute(\"position\",new _three.Float32BufferAttribute(JSCompiler_object_inline_array_6559,JSCompiler_object_inline_stride_6560));0<JSCompiler_object_inline_array_6561.length&&geometry.setAttribute(\"normal\",new _three.Float32BufferAttribute(JSCompiler_object_inline_array_6561,JSCompiler_object_inline_stride_6562));0<JSCompiler_object_inline_array_6567.length&&geometry.setAttribute(\"color\",new _three.Float32BufferAttribute(JSCompiler_object_inline_array_6567,JSCompiler_object_inline_stride_6568));\n0<JSCompiler_object_inline_array_6563.length&&geometry.setAttribute(\"uv\",new _three.Float32BufferAttribute(JSCompiler_object_inline_array_6563,JSCompiler_object_inline_stride_6564));0<JSCompiler_object_inline_array_6565.length&&geometry.setAttribute(\"uv2\",new _three.Float32BufferAttribute(JSCompiler_object_inline_array_6565,JSCompiler_object_inline_stride_6566));0<JSCompiler_object_inline_array_6569.length&&geometry.setAttribute(\"skinIndex\",new _three.Float32BufferAttribute(JSCompiler_object_inline_array_6569,\n4));0<JSCompiler_object_inline_array_6571.length&&geometry.setAttribute(\"skinWeight\",new _three.Float32BufferAttribute(JSCompiler_object_inline_array_6571,4));build$jscomp$0.data=geometry;build$jscomp$0.type=i[0].type;build$jscomp$0.materialKeys=materialKeys;build[primitives]=build$jscomp$0}return build}function buildGeometryData(primitive,source,offset,array){function pushVector(i){i=indices[i+offset]*sourceStride;for(var length=i+sourceStride;i<length;i++)array.push(sourceArray[i])}var indices=\nprimitive.p,stride=primitive.stride,vcount=primitive.vcount,sourceArray=source.array,sourceStride=source.stride;if(void 0!==primitive.vcount){source=primitive=0;for(var l=vcount.length;source<l;source++){var _count3=vcount[source];if(4===_count3){var b=primitive+1*stride,c=primitive+2*stride,d=primitive+3*stride;pushVector(primitive+0*stride);pushVector(b);pushVector(d);pushVector(b);pushVector(c);pushVector(d)}else if(3===_count3)b=primitive+1*stride,c=primitive+2*stride,pushVector(primitive+0*stride),\npushVector(b),pushVector(c);else if(4<_count3)for(b=1,c=_count3-2;b<=c;b++){d=primitive+stride*b;var _c2=primitive+stride*(b+1);pushVector(primitive+0*stride);pushVector(d);pushVector(_c2)}primitive+=stride*_count3}}else for(vcount=0,primitive=indices.length;vcount<primitive;vcount+=stride)pushVector(vcount)}function buildKinematicsModel(data){return void 0!==data.build?data.build:data}function parseKinematicsLink(xml){for(var data={sid:xml.getAttribute(\"sid\"),name:xml.getAttribute(\"name\")||\"\",attachments:[],\ntransforms:[]},i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"attachment_full\":for(var JSCompiler_temp_const=data.attachments,JSCompiler_temp_const$jscomp$0=JSCompiler_temp_const.push,data$jscomp$0={joint:child.getAttribute(\"joint\").split(\"/\").pop(),transforms:[],links:[]},i$jscomp$0=0;i$jscomp$0<child.childNodes.length;i$jscomp$0++){var child$jscomp$0=child.childNodes[i$jscomp$0];if(1===child$jscomp$0.nodeType)switch(child$jscomp$0.nodeName){case \"link\":data$jscomp$0.links.push(parseKinematicsLink(child$jscomp$0));\nbreak;case \"matrix\":case \"translate\":case \"rotate\":data$jscomp$0.transforms.push(parseKinematicsTransform(child$jscomp$0))}}JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,data$jscomp$0);break;case \"matrix\":case \"translate\":case \"rotate\":data.transforms.push(parseKinematicsTransform(child))}}return data}function parseKinematicsTransform(xml){var data={type:xml.nodeName};xml=parseFloats(xml.textContent);switch(data.type){case \"matrix\":data.obj=new _three.Matrix4;data.obj.fromArray(xml).transpose();\nbreak;case \"translate\":data.obj=new _three.Vector3;data.obj.fromArray(xml);break;case \"rotate\":data.obj=new _three.Vector3,data.obj.fromArray(xml),data.angle=_three.MathUtils.degToRad(xml[3])}return data}function buildKinematicsScene(data){return void 0!==data.build?data.build:data}function parseNode(xml){for(var data={name:xml.getAttribute(\"name\")||\"\",type:xml.getAttribute(\"type\"),id:xml.getAttribute(\"id\"),sid:xml.getAttribute(\"sid\"),matrix:new _three.Matrix4,nodes:[],instanceCameras:[],instanceControllers:[],\ninstanceLights:[],instanceGeometries:[],instanceNodes:[],transforms:{}},i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"node\":data.nodes.push(child.getAttribute(\"id\"));parseNode(child);break;case \"instance_camera\":data.instanceCameras.push(parseId(child.getAttribute(\"url\")));break;case \"instance_controller\":data.instanceControllers.push(parseNodeInstance(child));break;case \"instance_light\":data.instanceLights.push(parseId(child.getAttribute(\"url\")));\nbreak;case \"instance_geometry\":data.instanceGeometries.push(parseNodeInstance(child));break;case \"instance_node\":data.instanceNodes.push(parseId(child.getAttribute(\"url\")));break;case \"matrix\":var array=parseFloats(child.textContent);data.matrix.multiply(matrix$jscomp$0.fromArray(array).transpose());data.transforms[child.getAttribute(\"sid\")]=child.nodeName;break;case \"translate\":array=parseFloats(child.textContent);vector.fromArray(array);data.matrix.multiply(matrix$jscomp$0.makeTranslation(vector.x,\nvector.y,vector.z));data.transforms[child.getAttribute(\"sid\")]=child.nodeName;break;case \"rotate\":array=parseFloats(child.textContent);var angle=_three.MathUtils.degToRad(array[3]);data.matrix.multiply(matrix$jscomp$0.makeRotationAxis(vector.fromArray(array),angle));data.transforms[child.getAttribute(\"sid\")]=child.nodeName;break;case \"scale\":array=parseFloats(child.textContent);data.matrix.scale(vector.fromArray(array));data.transforms[child.getAttribute(\"sid\")]=child.nodeName;break;case \"extra\":break;\ndefault:console.log(child)}}void 0!==library.nodes[data.id]?console.warn(\"THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.\",data.id):library.nodes[data.id]=data;return data}function parseNodeInstance(xml){for(var data={id:parseId(xml.getAttribute(\"url\")),materials:{},skeletons:[]},i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];switch(child.nodeName){case \"bind_material\":child=child.getElementsByTagName(\"instance_material\");for(var j=\n0;j<child.length;j++){var instance=child[j],symbol=instance.getAttribute(\"symbol\");instance=instance.getAttribute(\"target\");data.materials[symbol]=parseId(instance)}break;case \"skeleton\":data.skeletons.push(parseId(child.textContent))}}return data}function buildBoneHierarchy(root,joints,boneData){root.traverse(function(object){if(!0===object.isBone){for(var boneInverse,i=0;i<joints.length;i++){var joint=joints[i];if(joint.name===object.name){boneInverse=joint.boneInverse;break}}void 0===boneInverse&&\n(boneInverse=new _three.Matrix4);boneData.push({bone:object,boneInverse,processed:!1})}})}function buildNode(data$jscomp$1){for(var objects=[],matrix=data$jscomp$1.matrix,nodes=data$jscomp$1.nodes,type=data$jscomp$1.type,instanceCameras=data$jscomp$1.instanceCameras,instanceControllers=data$jscomp$1.instanceControllers,instanceLights=data$jscomp$1.instanceLights,instanceGeometries=data$jscomp$1.instanceGeometries,instanceNodes=data$jscomp$1.instanceNodes,i=0,l=nodes.length;i<l;i++)objects.push(getNode(nodes[i]));\ni=0;for(l=instanceCameras.length;i<l;i++){var instanceCamera=instanceCameras[i];var data=library.cameras[instanceCamera];void 0!==data?instanceCamera=getBuild(data,buildCamera):(console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\",instanceCamera),instanceCamera=null);null!==instanceCamera&&objects.push(instanceCamera.clone())}instanceCameras=0;for(i=instanceControllers.length;instanceCameras<i;instanceCameras++){data=instanceControllers[instanceCameras];l=getBuild(library.controllers[data.id],\nbuildController);instanceCamera=getBuild(library.geometries[l.id],buildGeometry);instanceCamera=buildObjects(instanceCamera,data.materials);var data$jscomp$0=data.skeletons;var joints=l.skin.joints,boneData=[],sortedBoneData=[];for(data=0;data<data$jscomp$0.length;data++){var j=data$jscomp$0[data];if(void 0!==library.nodes[j])j=getNode(j),buildBoneHierarchy(j,joints,boneData);else if(void 0!==library.visualScenes[j]){j=library.visualScenes[j].children;for(var _j=0;_j<j.length;_j++){var child=j[_j];\n\"JOINT\"===child.type&&(child=getNode(child.id),buildBoneHierarchy(child,joints,boneData))}}else console.error(\"THREE.ColladaLoader: Unable to find root bone of skeleton with ID:\",j)}for(data=0;data<joints.length;data++)for(j=0;j<boneData.length;j++)if(data$jscomp$0=boneData[j],data$jscomp$0.bone.name===joints[data].name){sortedBoneData[data]=data$jscomp$0;data$jscomp$0.processed=!0;break}for(data=0;data<boneData.length;data++)data$jscomp$0=boneData[data],!1===data$jscomp$0.processed&&(sortedBoneData.push(data$jscomp$0),\ndata$jscomp$0.processed=!0);joints=[];boneData=[];for(data=0;data<sortedBoneData.length;data++)data$jscomp$0=sortedBoneData[data],joints.push(data$jscomp$0.bone),boneData.push(data$jscomp$0.boneInverse);data=new _three.Skeleton(joints,boneData);sortedBoneData=0;for(joints=instanceCamera.length;sortedBoneData<joints;sortedBoneData++)boneData=instanceCamera[sortedBoneData],boneData.isSkinnedMesh&&(boneData.bind(data,l.skin.bindMatrix),boneData.normalizeSkinWeights()),objects.push(boneData)}instanceControllers=\n0;for(instanceCameras=instanceLights.length;instanceControllers<instanceCameras;instanceControllers++)i=instanceLights[instanceControllers],l=library.lights[i],void 0!==l?i=getBuild(l,buildLight):(console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\",i),i=null),null!==i&&objects.push(i.clone());instanceLights=0;for(instanceControllers=instanceGeometries.length;instanceLights<instanceControllers;instanceLights++)for(instanceCameras=instanceGeometries[instanceLights],i=getBuild(library.geometries[instanceCameras.id],\nbuildGeometry),instanceCameras=buildObjects(i,instanceCameras.materials),i=0,l=instanceCameras.length;i<l;i++)objects.push(instanceCameras[i]);instanceGeometries=0;for(instanceLights=instanceNodes.length;instanceGeometries<instanceLights;instanceGeometries++)objects.push(getNode(instanceNodes[instanceGeometries]).clone());if(0===nodes.length&&1===objects.length)nodes=objects[0];else for(nodes=\"JOINT\"===type?new _three.Bone:new _three.Group,instanceNodes=0;instanceNodes<objects.length;instanceNodes++)nodes.add(objects[instanceNodes]);\nnodes.name=\"JOINT\"===type?data$jscomp$1.sid:data$jscomp$1.name;nodes.matrix.copy(matrix);nodes.matrix.decompose(nodes.position,nodes.quaternion,nodes.scale);return nodes}function buildObjects(geometries,instanceMaterials){var objects=[],type;for(type in geometries){var geometry=geometries[type],keys=geometry.materialKeys;var materials=instanceMaterials;for(var materials$jscomp$0=[],i=0,l=keys.length;i<l;i++){var id=materials[keys[i]];void 0===id?(console.warn(\"THREE.ColladaLoader: Material with key %s not found. Apply fallback material.\",\nkeys[i]),materials$jscomp$0.push(fallbackMaterial)):materials$jscomp$0.push(getBuild(library.materials[id],buildMaterial))}materials=materials$jscomp$0;0===materials.length&&(\"lines\"===type||\"linestrips\"===type?materials.push(new _three.LineBasicMaterial):materials.push(new _three.MeshPhongMaterial));if(keys=void 0!==geometry.data.attributes.skinIndex)for(materials$jscomp$0=0,i=materials.length;materials$jscomp$0<i;materials$jscomp$0++)materials[materials$jscomp$0].skinning=!0;materials=1===materials.length?\nmaterials[0]:materials;materials$jscomp$0=void 0;switch(type){case \"lines\":materials$jscomp$0=new _three.LineSegments(geometry.data,materials);break;case \"linestrips\":materials$jscomp$0=new _three.Line(geometry.data,materials);break;case \"triangles\":case \"polylist\":materials$jscomp$0=keys?new _three.SkinnedMesh(geometry.data,materials):new _three.Mesh(geometry.data,materials)}objects.push(materials$jscomp$0)}return objects}function getNode(id){return getBuild(library.nodes[id],buildNode)}function buildVisualScene(data){var group=\nnew _three.Group;group.name=data.name;data=data.children;for(var i=0;i<data.length;i++)group.add(getNode(data[i].id));return group}function parserErrorToText(parserError){var result=\"\";for(parserError=[parserError];parserError.length;){var node=parserError.shift();node.nodeType===Node.TEXT_NODE?result+=node.textContent:(result+=\"\\n\",parserError.push.apply(parserError,node.childNodes))}return result.trim()}var position=new _three.Vector3,scale=new _three.Vector3,quaternion=new _three.Quaternion,matrix$jscomp$0=\nnew _three.Matrix4,vector=new _three.Vector3,fallbackMaterial=new _three.MeshBasicMaterial({color:16711935});if(0===text$jscomp$0.length)return{scene:new _three.Scene};text$jscomp$0=(new DOMParser).parseFromString(text$jscomp$0,\"application/xml\");var collada=getElementsByTagName(text$jscomp$0,\"COLLADA\")[0];text$jscomp$0=text$jscomp$0.getElementsByTagName(\"parsererror\")[0];if(void 0!==text$jscomp$0)return path=(path=getElementsByTagName(text$jscomp$0,\"div\")[0])?path.textContent:parserErrorToText(text$jscomp$0),\nconsole.error(\"THREE.ColladaLoader: Failed to parse collada file.\\n\",path),null;text$jscomp$0=collada.getAttribute(\"version\");console.log(\"THREE.ColladaLoader: File version\",text$jscomp$0);text$jscomp$0=function(xml){var JSCompiler_inline_result=getElementsByTagName(xml,\"unit\")[0];JSCompiler_inline_result=void 0!==JSCompiler_inline_result&&!0===JSCompiler_inline_result.hasAttribute(\"meter\")?parseFloat(JSCompiler_inline_result.getAttribute(\"meter\")):1;xml=getElementsByTagName(xml,\"up_axis\")[0];return{unit:JSCompiler_inline_result,\nupAxis:void 0!==xml?xml.textContent:\"Y_UP\"}}(getElementsByTagName(collada,\"asset\")[0]);var textureLoader=new _three.TextureLoader(this.manager);textureLoader.setPath(this.resourcePath||path).setCrossOrigin(this.crossOrigin);if(_TGALoader.TGALoader){var tgaLoader=new _TGALoader.TGALoader(this.manager);tgaLoader.setPath(this.resourcePath||path)}var animations=[],kinematics={},count=0,library={animations:{},clips:{},controllers:{},images:{},effects:{},materials:{},cameras:{},lights:{},geometries:{},\nnodes:{},visualScenes:{},kinematicsModels:{},physicsModels:{},kinematicsScenes:{}};parseLibrary(collada,\"library_animations\",\"animation\",parseAnimation);parseLibrary(collada,\"library_animation_clips\",\"animation_clip\",function(xml){for(var data={name:xml.getAttribute(\"id\")||\"default\",start:parseFloat(xml.getAttribute(\"start\")||0),end:parseFloat(xml.getAttribute(\"end\")||0),animations:[]},i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"instance_animation\":data.animations.push(parseId(child.getAttribute(\"url\")))}}library.clips[xml.getAttribute(\"id\")]=\ndata});parseLibrary(collada,\"library_controllers\",\"controller\",function(xml){for(var data={},i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"skin\":data.id=parseId(child.getAttribute(\"source\"));for(var data$jscomp$0={sources:{}},i$jscomp$0=0,l$jscomp$0=child.childNodes.length;i$jscomp$0<l$jscomp$0;i$jscomp$0++){var child$jscomp$0=child.childNodes[i$jscomp$0];if(1===child$jscomp$0.nodeType)switch(child$jscomp$0.nodeName){case \"bind_shape_matrix\":data$jscomp$0.bindShapeMatrix=\nparseFloats(child$jscomp$0.textContent);break;case \"source\":var id=child$jscomp$0.getAttribute(\"id\");data$jscomp$0.sources[id]=parseSource(child$jscomp$0);break;case \"joints\":id={inputs:{}};for(var i$jscomp$1=0,l$jscomp$1=child$jscomp$0.childNodes.length;i$jscomp$1<l$jscomp$1;i$jscomp$1++){var child$jscomp$1=child$jscomp$0.childNodes[i$jscomp$1];if(1===child$jscomp$1.nodeType)switch(child$jscomp$1.nodeName){case \"input\":var semantic=child$jscomp$1.getAttribute(\"semantic\");child$jscomp$1=parseId(child$jscomp$1.getAttribute(\"source\"));\nid.inputs[semantic]=child$jscomp$1}}data$jscomp$0.joints=id;break;case \"vertex_weights\":id={inputs:{}};i$jscomp$1=0;for(l$jscomp$1=child$jscomp$0.childNodes.length;i$jscomp$1<l$jscomp$1;i$jscomp$1++){var child$jscomp$2=child$jscomp$0.childNodes[i$jscomp$1];if(1===child$jscomp$2.nodeType)switch(child$jscomp$2.nodeName){case \"input\":semantic=child$jscomp$2.getAttribute(\"semantic\");child$jscomp$1=parseId(child$jscomp$2.getAttribute(\"source\"));child$jscomp$2=parseInt(child$jscomp$2.getAttribute(\"offset\"));\nid.inputs[semantic]={id:child$jscomp$1,offset:child$jscomp$2};break;case \"vcount\":id.vcount=parseInts(child$jscomp$2.textContent);break;case \"v\":id.v=parseInts(child$jscomp$2.textContent)}}data$jscomp$0.vertexWeights=id}}data.skin=data$jscomp$0;break;case \"morph\":data.id=parseId(child.getAttribute(\"source\")),console.warn(\"THREE.ColladaLoader: Morph target animation not supported yet.\")}}library.controllers[xml.getAttribute(\"id\")]=data});parseLibrary(collada,\"library_images\",\"image\",function(xml){var data=\n{init_from:getElementsByTagName(xml,\"init_from\")[0].textContent};library.images[xml.getAttribute(\"id\")]=data});parseLibrary(collada,\"library_effects\",\"effect\",function(xml){for(var data={},i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"profile_COMMON\":for(var data$jscomp$0={surfaces:{},samplers:{}},i$jscomp$0=0,l$jscomp$0=child.childNodes.length;i$jscomp$0<l$jscomp$0;i$jscomp$0++){var child$jscomp$0=child.childNodes[i$jscomp$0];\nif(1===child$jscomp$0.nodeType)switch(child$jscomp$0.nodeName){case \"newparam\":for(var data$jscomp$1=data$jscomp$0,sid=child$jscomp$0.getAttribute(\"sid\"),i$jscomp$1=0,l$jscomp$1=child$jscomp$0.childNodes.length;i$jscomp$1<l$jscomp$1;i$jscomp$1++){var child$jscomp$1=child$jscomp$0.childNodes[i$jscomp$1];if(1===child$jscomp$1.nodeType)switch(child$jscomp$1.nodeName){case \"surface\":for(var JSCompiler_temp_const=data$jscomp$1.surfaces,data$jscomp$2={},i$jscomp$2=0,l$jscomp$2=child$jscomp$1.childNodes.length;i$jscomp$2<\nl$jscomp$2;i$jscomp$2++){var child$jscomp$2=child$jscomp$1.childNodes[i$jscomp$2];if(1===child$jscomp$2.nodeType)switch(child$jscomp$2.nodeName){case \"init_from\":data$jscomp$2.init_from=child$jscomp$2.textContent}}JSCompiler_temp_const[sid]=data$jscomp$2;break;case \"sampler2D\":JSCompiler_temp_const=data$jscomp$1.samplers;data$jscomp$2={};i$jscomp$2=0;for(l$jscomp$2=child$jscomp$1.childNodes.length;i$jscomp$2<l$jscomp$2;i$jscomp$2++)if(child$jscomp$2=child$jscomp$1.childNodes[i$jscomp$2],1===child$jscomp$2.nodeType)switch(child$jscomp$2.nodeName){case \"source\":data$jscomp$2.source=\nchild$jscomp$2.textContent}JSCompiler_temp_const[sid]=data$jscomp$2}}break;case \"technique\":data$jscomp$1={};sid=0;for(i$jscomp$1=child$jscomp$0.childNodes.length;sid<i$jscomp$1;sid++)if(l$jscomp$1=child$jscomp$0.childNodes[sid],1===l$jscomp$1.nodeType)switch(l$jscomp$1.nodeName){case \"constant\":case \"lambert\":case \"blinn\":case \"phong\":data$jscomp$1.type=l$jscomp$1.nodeName;JSCompiler_temp_const={};child$jscomp$1=0;for(data$jscomp$2=l$jscomp$1.childNodes.length;child$jscomp$1<data$jscomp$2;child$jscomp$1++)if(i$jscomp$2=\nl$jscomp$1.childNodes[child$jscomp$1],1===i$jscomp$2.nodeType)switch(i$jscomp$2.nodeName){case \"emission\":case \"diffuse\":case \"specular\":case \"bump\":case \"ambient\":case \"shininess\":case \"transparency\":JSCompiler_temp_const[i$jscomp$2.nodeName]=parseEffectParameter(i$jscomp$2);break;case \"transparent\":JSCompiler_temp_const[i$jscomp$2.nodeName]={opaque:i$jscomp$2.getAttribute(\"opaque\"),data:parseEffectParameter(i$jscomp$2)}}data$jscomp$1.parameters=JSCompiler_temp_const}data$jscomp$0.technique=data$jscomp$1;\nbreak;case \"extra\":data$jscomp$1={};sid=0;for(i$jscomp$1=child$jscomp$0.childNodes.length;sid<i$jscomp$1;sid++)if(l$jscomp$1=child$jscomp$0.childNodes[sid],1===l$jscomp$1.nodeType)switch(l$jscomp$1.nodeName){case \"technique\":JSCompiler_temp_const={};child$jscomp$1=0;for(data$jscomp$2=l$jscomp$1.childNodes.length;child$jscomp$1<data$jscomp$2;child$jscomp$1++)if(i$jscomp$2=l$jscomp$1.childNodes[child$jscomp$1],1===i$jscomp$2.nodeType)switch(i$jscomp$2.nodeName){case \"double_sided\":JSCompiler_temp_const[i$jscomp$2.nodeName]=\nparseInt(i$jscomp$2.textContent)}data$jscomp$1.technique=JSCompiler_temp_const}data$jscomp$0.extra=data$jscomp$1}}data.profile=data$jscomp$0}}library.effects[xml.getAttribute(\"id\")]=data});parseLibrary(collada,\"library_materials\",\"material\",function(xml){for(var data={name:xml.getAttribute(\"name\")},i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"instance_effect\":data.url=parseId(child.getAttribute(\"url\"))}}library.materials[xml.getAttribute(\"id\")]=\ndata});parseLibrary(collada,\"library_cameras\",\"camera\",function(xml){for(var data={name:xml.getAttribute(\"name\")},i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"optics\":a:{for(var i$jscomp$0=0;i$jscomp$0<child.childNodes.length;i$jscomp$0++){var child$jscomp$0=child.childNodes[i$jscomp$0];switch(child$jscomp$0.nodeName){case \"technique_common\":child=child$jscomp$0;i$jscomp$0={};for(child$jscomp$0=0;child$jscomp$0<child.childNodes.length;child$jscomp$0++){var child$jscomp$1=\nchild.childNodes[child$jscomp$0];switch(child$jscomp$1.nodeName){case \"perspective\":case \"orthographic\":i$jscomp$0.technique=child$jscomp$1.nodeName;for(var data$jscomp$0={},i$jscomp$1=0;i$jscomp$1<child$jscomp$1.childNodes.length;i$jscomp$1++){var child$jscomp$2=child$jscomp$1.childNodes[i$jscomp$1];switch(child$jscomp$2.nodeName){case \"xfov\":case \"yfov\":case \"xmag\":case \"ymag\":case \"znear\":case \"zfar\":case \"aspect_ratio\":data$jscomp$0[child$jscomp$2.nodeName]=parseFloat(child$jscomp$2.textContent)}}i$jscomp$0.parameters=\ndata$jscomp$0}}child=i$jscomp$0;break a}}child={}}data.optics=child}}library.cameras[xml.getAttribute(\"id\")]=data});parseLibrary(collada,\"library_lights\",\"light\",function(xml){for(var data={},i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"technique_common\":data=child;child={};for(var i$jscomp$0=0,l$jscomp$0=data.childNodes.length;i$jscomp$0<l$jscomp$0;i$jscomp$0++){var child$jscomp$0=data.childNodes[i$jscomp$0];if(1===child$jscomp$0.nodeType)switch(child$jscomp$0.nodeName){case \"directional\":case \"point\":case \"spot\":case \"ambient\":child.technique=\nchild$jscomp$0.nodeName;for(var data$jscomp$0={},i$jscomp$1=0,l$jscomp$1=child$jscomp$0.childNodes.length;i$jscomp$1<l$jscomp$1;i$jscomp$1++){var child$jscomp$1=child$jscomp$0.childNodes[i$jscomp$1];if(1===child$jscomp$1.nodeType)switch(child$jscomp$1.nodeName){case \"color\":child$jscomp$1=parseFloats(child$jscomp$1.textContent);data$jscomp$0.color=(new _three.Color).fromArray(child$jscomp$1);break;case \"falloff_angle\":data$jscomp$0.falloffAngle=parseFloat(child$jscomp$1.textContent);break;case \"quadratic_attenuation\":child$jscomp$1=\nparseFloat(child$jscomp$1.textContent),data$jscomp$0.distance=child$jscomp$1?Math.sqrt(1/child$jscomp$1):0}}child.parameters=data$jscomp$0}}data=child}}library.lights[xml.getAttribute(\"id\")]=data});parseLibrary(collada,\"library_geometries\",\"geometry\",function(xml){var data={name:xml.getAttribute(\"name\"),sources:{},vertices:{},primitives:[]},mesh=getElementsByTagName(xml,\"mesh\")[0];if(void 0!==mesh){for(var i=0;i<mesh.childNodes.length;i++){var child=mesh.childNodes[i];if(1===child.nodeType){var id=\nchild.getAttribute(\"id\");switch(child.nodeName){case \"source\":data.sources[id]=parseSource(child);break;case \"vertices\":id=child;var data$jscomp$0={};for(child=0;child<id.childNodes.length;child++){var child$jscomp$0=id.childNodes[child];1===child$jscomp$0.nodeType&&(data$jscomp$0[child$jscomp$0.getAttribute(\"semantic\")]=parseId(child$jscomp$0.getAttribute(\"source\")))}data.vertices=data$jscomp$0;break;case \"polygons\":console.warn(\"THREE.ColladaLoader: Unsupported primitive type: \",child.nodeName);\nbreak;case \"lines\":case \"linestrips\":case \"polylist\":case \"triangles\":id=data.primitives;data$jscomp$0=id.push;child$jscomp$0={type:child.nodeName,material:child.getAttribute(\"material\"),count:parseInt(child.getAttribute(\"count\")),inputs:{},stride:0,hasUV:!1};for(var i$jscomp$0=0,l=child.childNodes.length;i$jscomp$0<l;i$jscomp$0++){var child$jscomp$1=child.childNodes[i$jscomp$0];if(1===child$jscomp$1.nodeType)switch(child$jscomp$1.nodeName){case \"input\":var id$jscomp$0=parseId(child$jscomp$1.getAttribute(\"source\")),\nsemantic=child$jscomp$1.getAttribute(\"semantic\"),offset=parseInt(child$jscomp$1.getAttribute(\"offset\"));child$jscomp$1=parseInt(child$jscomp$1.getAttribute(\"set\"));child$jscomp$0.inputs[0<child$jscomp$1?semantic+child$jscomp$1:semantic]={id:id$jscomp$0,offset};child$jscomp$0.stride=Math.max(child$jscomp$0.stride,offset+1);\"TEXCOORD\"===semantic&&(child$jscomp$0.hasUV=!0);break;case \"vcount\":child$jscomp$0.vcount=parseInts(child$jscomp$1.textContent);break;case \"p\":child$jscomp$0.p=parseInts(child$jscomp$1.textContent)}}data$jscomp$0.call(id,\nchild$jscomp$0);break;default:console.log(child)}}}library.geometries[xml.getAttribute(\"id\")]=data}});parseLibrary(collada,\"library_nodes\",\"node\",parseNode);parseLibrary(collada,\"library_visual_scenes\",\"visual_scene\",function(xml){for(var data={name:xml.getAttribute(\"name\"),children:[]},elements=xml.getElementsByTagName(\"node\"),i=0;i<elements.length;i++){var element=elements[i];!1===element.hasAttribute(\"id\")&&element.setAttribute(\"id\",\"three_default_\"+count++)}elements=getElementsByTagName(xml,\"node\");\nfor(i=0;i<elements.length;i++)data.children.push(parseNode(elements[i]));library.visualScenes[xml.getAttribute(\"id\")]=data});parseLibrary(collada,\"library_kinematics_models\",\"kinematics_model\",function(xml){for(var data={name:xml.getAttribute(\"name\")||\"\",joints:{},links:[]},i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"technique_common\":for(var data$jscomp$0=data,i$jscomp$0=0;i$jscomp$0<child.childNodes.length;i$jscomp$0++){var child$jscomp$0=\nchild.childNodes[i$jscomp$0];if(1===child$jscomp$0.nodeType)switch(child$jscomp$0.nodeName){case \"joint\":for(var JSCompiler_temp_const=data$jscomp$0.joints,JSCompiler_temp_const$jscomp$0=child$jscomp$0.getAttribute(\"sid\"),data$jscomp$1=void 0,i$jscomp$1=0;i$jscomp$1<child$jscomp$0.childNodes.length;i$jscomp$1++){var child$jscomp$1=child$jscomp$0.childNodes[i$jscomp$1];if(1===child$jscomp$1.nodeType)switch(child$jscomp$1.nodeName){case \"prismatic\":case \"revolute\":data$jscomp$1=child$jscomp$1;child$jscomp$1=\n{sid:data$jscomp$1.getAttribute(\"sid\"),name:data$jscomp$1.getAttribute(\"name\")||\"\",axis:new _three.Vector3,limits:{min:0,max:0},type:data$jscomp$1.nodeName,\"static\":!1,zeroPosition:0,middlePosition:0};for(var i$jscomp$2=0;i$jscomp$2<data$jscomp$1.childNodes.length;i$jscomp$2++){var child$jscomp$2=data$jscomp$1.childNodes[i$jscomp$2];if(1===child$jscomp$2.nodeType)switch(child$jscomp$2.nodeName){case \"axis\":var array=parseFloats(child$jscomp$2.textContent);child$jscomp$1.axis.fromArray(array);break;\ncase \"limits\":array=child$jscomp$2.getElementsByTagName(\"max\")[0],child$jscomp$2=child$jscomp$2.getElementsByTagName(\"min\")[0],child$jscomp$1.limits.max=parseFloat(array.textContent),child$jscomp$1.limits.min=parseFloat(child$jscomp$2.textContent)}}child$jscomp$1.limits.min>=child$jscomp$1.limits.max&&(child$jscomp$1[\"static\"]=!0);child$jscomp$1.middlePosition=(child$jscomp$1.limits.min+child$jscomp$1.limits.max)/2;data$jscomp$1=child$jscomp$1}}JSCompiler_temp_const[JSCompiler_temp_const$jscomp$0]=\ndata$jscomp$1;break;case \"link\":data$jscomp$0.links.push(parseKinematicsLink(child$jscomp$0))}}}}library.kinematicsModels[xml.getAttribute(\"id\")]=data});parseLibrary(collada,\"library_physics_models\",\"physics_model\",function(xml$jscomp$0){for(var data={name:xml$jscomp$0.getAttribute(\"name\")||\"\",rigidBodies:{}},i=0;i<xml$jscomp$0.childNodes.length;i++){var child=xml$jscomp$0.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"rigid_body\":data.rigidBodies[child.getAttribute(\"name\")]={};\nvar xml=child;child=data.rigidBodies[child.getAttribute(\"name\")];for(var i$jscomp$0=0;i$jscomp$0<xml.childNodes.length;i$jscomp$0++){var child$jscomp$0=xml.childNodes[i$jscomp$0];if(1===child$jscomp$0.nodeType)switch(child$jscomp$0.nodeName){case \"technique_common\":for(var data$jscomp$0=child,i$jscomp$1=0;i$jscomp$1<child$jscomp$0.childNodes.length;i$jscomp$1++){var child$jscomp$1=child$jscomp$0.childNodes[i$jscomp$1];if(1===child$jscomp$1.nodeType)switch(child$jscomp$1.nodeName){case \"inertia\":data$jscomp$0.inertia=\nparseFloats(child$jscomp$1.textContent);break;case \"mass\":data$jscomp$0.mass=parseFloats(child$jscomp$1.textContent)[0]}}}}}}library.physicsModels[xml$jscomp$0.getAttribute(\"id\")]=data});parseLibrary(collada,\"scene\",\"instance_kinematics_scene\",function(xml){for(var data={bindJointAxis:[]},i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"bind_joint_axis\":for(var JSCompiler_temp_const=data.bindJointAxis,JSCompiler_temp_const$jscomp$0=JSCompiler_temp_const.push,\ndata$jscomp$0={target:child.getAttribute(\"target\").split(\"/\").pop()},i$jscomp$0=0;i$jscomp$0<child.childNodes.length;i$jscomp$0++){var child$jscomp$0=child.childNodes[i$jscomp$0];if(1===child$jscomp$0.nodeType)switch(child$jscomp$0.nodeName){case \"axis\":child$jscomp$0=child$jscomp$0.getElementsByTagName(\"param\")[0],data$jscomp$0.axis=child$jscomp$0.textContent,child$jscomp$0=data$jscomp$0.axis.split(\"inst_\").pop().split(\"axis\")[0],data$jscomp$0.jointIndex=child$jscomp$0.substr(0,child$jscomp$0.length-\n1)}}JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,data$jscomp$0)}}library.kinematicsScenes[parseId(xml.getAttribute(\"url\"))]=data});buildLibrary(library.animations,buildAnimation);buildLibrary(library.clips,buildAnimationClip);buildLibrary(library.controllers,buildController);buildLibrary(library.images,buildImage);buildLibrary(library.effects,buildEffect);buildLibrary(library.materials,buildMaterial);buildLibrary(library.cameras,buildCamera);buildLibrary(library.lights,buildLight);buildLibrary(library.geometries,\nbuildGeometry);buildLibrary(library.visualScenes,buildVisualScene);(function(){var clips=library.clips;if(0===Object.keys(clips).length===!0){if(0===Object.keys(library.animations).length===!1){clips=[];for(var id in library.animations)for(var animationTracks=getBuild(library.animations[id],buildAnimation),i=0,l=animationTracks.length;i<l;i++)clips.push(animationTracks[i]);animations.push(new _three.AnimationClip(\"default\",-1,clips))}}else for(animationTracks in clips)animations.push(getBuild(library.clips[animationTracks],\nbuildAnimationClip))})();(function(){function connect(jointIndex,visualElement){var visualElementName=visualElement.getAttribute(\"name\"),joint=kinematicsModel.joints[jointIndex];visualScene.traverse(function(object){if(object.name===visualElementName){for(var transforms=[],xml=collada.querySelector('[id\\x3d\"'+visualElement.id+'\"]'),i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(1===child.nodeType)switch(child.nodeName){case \"matrix\":var array=parseFloats(child.textContent);var _vector=\n(new _three.Matrix4).fromArray(array).transpose();transforms.push({sid:child.getAttribute(\"sid\"),type:child.nodeName,obj:_vector});break;case \"translate\":case \"scale\":array=parseFloats(child.textContent);_vector=(new _three.Vector3).fromArray(array);transforms.push({sid:child.getAttribute(\"sid\"),type:child.nodeName,obj:_vector});break;case \"rotate\":array=parseFloats(child.textContent),_vector=(new _three.Vector3).fromArray(array),array=_three.MathUtils.degToRad(array[3]),transforms.push({sid:child.getAttribute(\"sid\"),\ntype:child.nodeName,obj:_vector,angle:array})}}jointMap[jointIndex]={object,transforms,joint,position:joint.zeroPosition}}})}var kinematicsModelId=Object.keys(library.kinematicsModels)[0],kinematicsSceneId=Object.keys(library.kinematicsScenes)[0],visualSceneId=Object.keys(library.visualScenes)[0];if(void 0!==kinematicsModelId&&void 0!==kinematicsSceneId){var kinematicsModel=getBuild(library.kinematicsModels[kinematicsModelId],buildKinematicsModel);kinematicsModelId=getBuild(library.kinematicsScenes[kinematicsSceneId],\nbuildKinematicsScene);var visualScene=getBuild(library.visualScenes[visualSceneId],buildVisualScene);visualSceneId=kinematicsModelId.bindJointAxis;var jointMap={};kinematicsModelId=0;for(kinematicsSceneId=visualSceneId.length;kinematicsModelId<kinematicsSceneId;kinematicsModelId++){var axis=visualSceneId[kinematicsModelId],targetElement=collada.querySelector('[sid\\x3d\"'+axis.target+'\"]');targetElement&&connect(axis.jointIndex,targetElement.parentElement)}var m0=new _three.Matrix4;kinematics={joints:kinematicsModel&&\nkinematicsModel.joints,getJointValue:function(jointIndex){var jointData=jointMap[jointIndex];if(jointData)return jointData.position;console.warn(\"THREE.ColladaLoader: Joint \"+jointIndex+\" doesn't exist.\")},setJointValue:function(jointIndex,value){var jointData=jointMap[jointIndex];if(jointData){var joint=jointData.joint;if(value>joint.limits.max||value<joint.limits.min)console.warn(\"THREE.ColladaLoader: Joint \"+jointIndex+\" value \"+value+\" outside of limits (min: \"+joint.limits.min+\", max: \"+joint.limits.max+\n\").\");else if(joint[\"static\"])console.warn(\"THREE.ColladaLoader: Joint \"+jointIndex+\" is static.\");else{var object=jointData.object,_axis=joint.axis;jointData=jointData.transforms;matrix$jscomp$0.identity();for(var _i2=0;_i2<jointData.length;_i2++){var transform=jointData[_i2];if(transform.sid&&-1!==transform.sid.indexOf(jointIndex))switch(joint.type){case \"revolute\":matrix$jscomp$0.multiply(m0.makeRotationAxis(_axis,_three.MathUtils.degToRad(value)));break;case \"prismatic\":matrix$jscomp$0.multiply(m0.makeTranslation(_axis.x*\nvalue,_axis.y*value,_axis.z*value));break;default:console.warn(\"THREE.ColladaLoader: Unknown joint type: \"+joint.type)}else switch(transform.type){case \"matrix\":matrix$jscomp$0.multiply(transform.obj);break;case \"translate\":matrix$jscomp$0.multiply(m0.makeTranslation(transform.obj.x,transform.obj.y,transform.obj.z));break;case \"scale\":matrix$jscomp$0.scale(transform.obj);break;case \"rotate\":matrix$jscomp$0.multiply(m0.makeRotationAxis(transform.obj,transform.angle))}}object.matrix.copy(matrix$jscomp$0);\nobject.matrix.decompose(object.position,object.quaternion,object.scale);jointMap[jointIndex].position=value}}else console.log(\"THREE.ColladaLoader: \"+jointIndex+\" does not exist.\")}}}})();path=function(xml){xml=getElementsByTagName(xml,\"instance_visual_scene\")[0];return getBuild(library.visualScenes[parseId(xml.getAttribute(\"url\"))],buildVisualScene)}(getElementsByTagName(collada,\"scene\")[0]);path.animations=animations;\"Z_UP\"===text$jscomp$0.upAxis&&path.quaternion.setFromEuler(new _three.Euler(-Math.PI/\n2,0,0));path.scale.multiplyScalar(text$jscomp$0.unit);return{get animations(){console.warn(\"THREE.ColladaLoader: Please access animations over scene.animations now.\");return animations},kinematics,library,scene:path}}}]);return ColladaLoader}(_three.Loader);exports.ColladaLoader=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$loaders$ColladaLoader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColladaLoader = void 0;\n\nvar _three = require(\"three\");\n\nvar _TGALoader = require(\"./TGALoader.js\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar ColladaLoader =\n/*#__PURE__*/\nfunction (_Loader) {\n  _inherits(ColladaLoader, _Loader);\n\n  function ColladaLoader(manager) {\n    _classCallCheck(this, ColladaLoader);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ColladaLoader).call(this, manager));\n  }\n\n  _createClass(ColladaLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? _three.LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new _three.FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text, path) {\n      function getElementsByTagName(xml, name) {\n        // Non recursive xml.getElementsByTagName() ...\n        var array = [];\n        var childNodes = xml.childNodes;\n\n        for (var i = 0, l = childNodes.length; i < l; i++) {\n          var child = childNodes[i];\n\n          if (child.nodeName === name) {\n            array.push(child);\n          }\n        }\n\n        return array;\n      }\n\n      function parseStrings(text) {\n        if (text.length === 0) return [];\n        var parts = text.trim().split(/\\s+/);\n        var array = new Array(parts.length);\n\n        for (var i = 0, l = parts.length; i < l; i++) {\n          array[i] = parts[i];\n        }\n\n        return array;\n      }\n\n      function parseFloats(text) {\n        if (text.length === 0) return [];\n        var parts = text.trim().split(/\\s+/);\n        var array = new Array(parts.length);\n\n        for (var i = 0, l = parts.length; i < l; i++) {\n          array[i] = parseFloat(parts[i]);\n        }\n\n        return array;\n      }\n\n      function parseInts(text) {\n        if (text.length === 0) return [];\n        var parts = text.trim().split(/\\s+/);\n        var array = new Array(parts.length);\n\n        for (var i = 0, l = parts.length; i < l; i++) {\n          array[i] = parseInt(parts[i]);\n        }\n\n        return array;\n      }\n\n      function parseId(text) {\n        return text.substring(1);\n      }\n\n      function generateId() {\n        return 'three_default_' + count++;\n      }\n\n      function isEmpty(object) {\n        return Object.keys(object).length === 0;\n      } // asset\n\n\n      function parseAsset(xml) {\n        return {\n          unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n          upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n        };\n      }\n\n      function parseAssetUnit(xml) {\n        if (xml !== undefined && xml.hasAttribute('meter') === true) {\n          return parseFloat(xml.getAttribute('meter'));\n        } else {\n          return 1; // default 1 meter\n        }\n      }\n\n      function parseAssetUpAxis(xml) {\n        return xml !== undefined ? xml.textContent : 'Y_UP';\n      } // library\n\n\n      function parseLibrary(xml, libraryName, nodeName, parser) {\n        var library = getElementsByTagName(xml, libraryName)[0];\n\n        if (library !== undefined) {\n          var elements = getElementsByTagName(library, nodeName);\n\n          for (var i = 0; i < elements.length; i++) {\n            parser(elements[i]);\n          }\n        }\n      }\n\n      function buildLibrary(data, builder) {\n        for (var name in data) {\n          var object = data[name];\n          object.build = builder(data[name]);\n        }\n      } // get\n\n\n      function getBuild(data, builder) {\n        if (data.build !== undefined) return data.build;\n        data.build = builder(data);\n        return data.build;\n      } // animation\n\n\n      function parseAnimation(xml) {\n        var data = {\n          sources: {},\n          samplers: {},\n          channels: {}\n        };\n        var hasChildren = false;\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n          var id = void 0;\n\n          switch (child.nodeName) {\n            case 'source':\n              id = child.getAttribute('id');\n              data.sources[id] = parseSource(child);\n              break;\n\n            case 'sampler':\n              id = child.getAttribute('id');\n              data.samplers[id] = parseAnimationSampler(child);\n              break;\n\n            case 'channel':\n              id = child.getAttribute('target');\n              data.channels[id] = parseAnimationChannel(child);\n              break;\n\n            case 'animation':\n              // hierarchy of related animations\n              parseAnimation(child);\n              hasChildren = true;\n              break;\n\n            default:\n              console.log(child);\n          }\n        }\n\n        if (hasChildren === false) {\n          // since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\n          library.animations[xml.getAttribute('id') || _three.MathUtils.generateUUID()] = data;\n        }\n      }\n\n      function parseAnimationSampler(xml) {\n        var data = {\n          inputs: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'input':\n              var id = parseId(child.getAttribute('source'));\n              var semantic = child.getAttribute('semantic');\n              data.inputs[semantic] = id;\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseAnimationChannel(xml) {\n        var data = {};\n        var target = xml.getAttribute('target'); // parsing SID Addressing Syntax\n\n        var parts = target.split('/');\n        var id = parts.shift();\n        var sid = parts.shift(); // check selection syntax\n\n        var arraySyntax = sid.indexOf('(') !== -1;\n        var memberSyntax = sid.indexOf('.') !== -1;\n\n        if (memberSyntax) {\n          //  member selection access\n          parts = sid.split('.');\n          sid = parts.shift();\n          data.member = parts.shift();\n        } else if (arraySyntax) {\n          // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n          var indices = sid.split('(');\n          sid = indices.shift();\n\n          for (var i = 0; i < indices.length; i++) {\n            indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n          }\n\n          data.indices = indices;\n        }\n\n        data.id = id;\n        data.sid = sid;\n        data.arraySyntax = arraySyntax;\n        data.memberSyntax = memberSyntax;\n        data.sampler = parseId(xml.getAttribute('source'));\n        return data;\n      }\n\n      function buildAnimation(data) {\n        var tracks = [];\n        var channels = data.channels;\n        var samplers = data.samplers;\n        var sources = data.sources;\n\n        for (var target in channels) {\n          if (channels.hasOwnProperty(target)) {\n            var channel = channels[target];\n            var sampler = samplers[channel.sampler];\n            var inputId = sampler.inputs.INPUT;\n            var outputId = sampler.inputs.OUTPUT;\n            var inputSource = sources[inputId];\n            var outputSource = sources[outputId];\n            var animation = buildAnimationChannel(channel, inputSource, outputSource);\n            createKeyframeTracks(animation, tracks);\n          }\n        }\n\n        return tracks;\n      }\n\n      function getAnimation(id) {\n        return getBuild(library.animations[id], buildAnimation);\n      }\n\n      function buildAnimationChannel(channel, inputSource, outputSource) {\n        var node = library.nodes[channel.id];\n        var object3D = getNode(node.id);\n        var transform = node.transforms[channel.sid];\n        var defaultMatrix = node.matrix.clone().transpose();\n        var time, stride;\n        var i, il, j, jl;\n        var data = {}; // the collada spec allows the animation of data in various ways.\n        // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n        switch (transform) {\n          case 'matrix':\n            for (i = 0, il = inputSource.array.length; i < il; i++) {\n              time = inputSource.array[i];\n              stride = i * outputSource.stride;\n              if (data[time] === undefined) data[time] = {};\n\n              if (channel.arraySyntax === true) {\n                var value = outputSource.array[stride];\n                var index = channel.indices[0] + 4 * channel.indices[1];\n                data[time][index] = value;\n              } else {\n                for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                  data[time][j] = outputSource.array[stride + j];\n                }\n              }\n            }\n\n            break;\n\n          case 'translate':\n            console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n            break;\n\n          case 'rotate':\n            console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n            break;\n\n          case 'scale':\n            console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n            break;\n        }\n\n        var keyframes = prepareAnimationData(data, defaultMatrix);\n        var animation = {\n          name: object3D.uuid,\n          keyframes: keyframes\n        };\n        return animation;\n      }\n\n      function prepareAnimationData(data, defaultMatrix) {\n        var keyframes = []; // transfer data into a sortable array\n\n        for (var time in data) {\n          keyframes.push({\n            time: parseFloat(time),\n            value: data[time]\n          });\n        } // ensure keyframes are sorted by time\n\n\n        keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\n\n        for (var i = 0; i < 16; i++) {\n          transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n        }\n\n        return keyframes; // array sort function\n\n        function ascending(a, b) {\n          return a.time - b.time;\n        }\n      }\n\n      var position = new _three.Vector3();\n      var scale = new _three.Vector3();\n      var quaternion = new _three.Quaternion();\n\n      function createKeyframeTracks(animation, tracks) {\n        var keyframes = animation.keyframes;\n        var name = animation.name;\n        var times = [];\n        var positionData = [];\n        var quaternionData = [];\n        var scaleData = [];\n\n        for (var i = 0, l = keyframes.length; i < l; i++) {\n          var keyframe = keyframes[i];\n          var time = keyframe.time;\n          var value = keyframe.value;\n          matrix.fromArray(value).transpose();\n          matrix.decompose(position, quaternion, scale);\n          times.push(time);\n          positionData.push(position.x, position.y, position.z);\n          quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n          scaleData.push(scale.x, scale.y, scale.z);\n        }\n\n        if (positionData.length > 0) tracks.push(new _three.VectorKeyframeTrack(name + '.position', times, positionData));\n\n        if (quaternionData.length > 0) {\n          tracks.push(new _three.QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n        }\n\n        if (scaleData.length > 0) tracks.push(new _three.VectorKeyframeTrack(name + '.scale', times, scaleData));\n        return tracks;\n      }\n\n      function transformAnimationData(keyframes, property, defaultValue) {\n        var keyframe;\n        var empty = true;\n        var i, l; // check, if values of a property are missing in our keyframes\n\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n\n          if (keyframe.value[property] === undefined) {\n            keyframe.value[property] = null; // mark as missing\n          } else {\n            empty = false;\n          }\n        }\n\n        if (empty === true) {\n          // no values at all, so we set a default value\n          for (i = 0, l = keyframes.length; i < l; i++) {\n            keyframe = keyframes[i];\n            keyframe.value[property] = defaultValue;\n          }\n        } else {\n          // filling gaps\n          createMissingKeyframes(keyframes, property);\n        }\n      }\n\n      function createMissingKeyframes(keyframes, property) {\n        var prev, next;\n\n        for (var i = 0, l = keyframes.length; i < l; i++) {\n          var keyframe = keyframes[i];\n\n          if (keyframe.value[property] === null) {\n            prev = getPrev(keyframes, i, property);\n            next = getNext(keyframes, i, property);\n\n            if (prev === null) {\n              keyframe.value[property] = next.value[property];\n              continue;\n            }\n\n            if (next === null) {\n              keyframe.value[property] = prev.value[property];\n              continue;\n            }\n\n            interpolate(keyframe, prev, next, property);\n          }\n        }\n      }\n\n      function getPrev(keyframes, i, property) {\n        while (i >= 0) {\n          var keyframe = keyframes[i];\n          if (keyframe.value[property] !== null) return keyframe;\n          i--;\n        }\n\n        return null;\n      }\n\n      function getNext(keyframes, i, property) {\n        while (i < keyframes.length) {\n          var keyframe = keyframes[i];\n          if (keyframe.value[property] !== null) return keyframe;\n          i++;\n        }\n\n        return null;\n      }\n\n      function interpolate(key, prev, next, property) {\n        if (next.time - prev.time === 0) {\n          key.value[property] = prev.value[property];\n          return;\n        }\n\n        key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n      } // animation clips\n\n\n      function parseAnimationClip(xml) {\n        var data = {\n          name: xml.getAttribute('id') || 'default',\n          start: parseFloat(xml.getAttribute('start') || 0),\n          end: parseFloat(xml.getAttribute('end') || 0),\n          animations: []\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'instance_animation':\n              data.animations.push(parseId(child.getAttribute('url')));\n              break;\n          }\n        }\n\n        library.clips[xml.getAttribute('id')] = data;\n      }\n\n      function buildAnimationClip(data) {\n        var tracks = [];\n        var name = data.name;\n        var duration = data.end - data.start || -1;\n        var animations = data.animations;\n\n        for (var i = 0, il = animations.length; i < il; i++) {\n          var animationTracks = getAnimation(animations[i]);\n\n          for (var j = 0, jl = animationTracks.length; j < jl; j++) {\n            tracks.push(animationTracks[j]);\n          }\n        }\n\n        return new _three.AnimationClip(name, duration, tracks);\n      }\n\n      function getAnimationClip(id) {\n        return getBuild(library.clips[id], buildAnimationClip);\n      } // controller\n\n\n      function parseController(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'skin':\n              // there is exactly one skin per controller\n              data.id = parseId(child.getAttribute('source'));\n              data.skin = parseSkin(child);\n              break;\n\n            case 'morph':\n              data.id = parseId(child.getAttribute('source'));\n              console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n              break;\n          }\n        }\n\n        library.controllers[xml.getAttribute('id')] = data;\n      }\n\n      function parseSkin(xml) {\n        var data = {\n          sources: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'bind_shape_matrix':\n              data.bindShapeMatrix = parseFloats(child.textContent);\n              break;\n\n            case 'source':\n              var id = child.getAttribute('id');\n              data.sources[id] = parseSource(child);\n              break;\n\n            case 'joints':\n              data.joints = parseJoints(child);\n              break;\n\n            case 'vertex_weights':\n              data.vertexWeights = parseVertexWeights(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseJoints(xml) {\n        var data = {\n          inputs: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'input':\n              var semantic = child.getAttribute('semantic');\n              var id = parseId(child.getAttribute('source'));\n              data.inputs[semantic] = id;\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseVertexWeights(xml) {\n        var data = {\n          inputs: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'input':\n              var semantic = child.getAttribute('semantic');\n              var id = parseId(child.getAttribute('source'));\n              var offset = parseInt(child.getAttribute('offset'));\n              data.inputs[semantic] = {\n                id: id,\n                offset: offset\n              };\n              break;\n\n            case 'vcount':\n              data.vcount = parseInts(child.textContent);\n              break;\n\n            case 'v':\n              data.v = parseInts(child.textContent);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildController(data) {\n        var build = {\n          id: data.id\n        };\n        var geometry = library.geometries[build.id];\n\n        if (data.skin !== undefined) {\n          build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n          geometry.sources.skinIndices = build.skin.indices;\n          geometry.sources.skinWeights = build.skin.weights;\n        }\n\n        return build;\n      }\n\n      function buildSkin(data) {\n        var BONE_LIMIT = 4;\n        var build = {\n          joints: [],\n          // this must be an array to preserve the joint order\n          indices: {\n            array: [],\n            stride: BONE_LIMIT\n          },\n          weights: {\n            array: [],\n            stride: BONE_LIMIT\n          }\n        };\n        var sources = data.sources;\n        var vertexWeights = data.vertexWeights;\n        var vcount = vertexWeights.vcount;\n        var v = vertexWeights.v;\n        var jointOffset = vertexWeights.inputs.JOINT.offset;\n        var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n        var jointSource = data.sources[data.joints.inputs.JOINT];\n        var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n        var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n        var stride = 0;\n        var i, j, l; // procces skin data for each vertex\n\n        for (i = 0, l = vcount.length; i < l; i++) {\n          var jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n\n          var vertexSkinData = [];\n\n          for (j = 0; j < jointCount; j++) {\n            var skinIndex = v[stride + jointOffset];\n            var weightId = v[stride + weightOffset];\n            var skinWeight = weights[weightId];\n            vertexSkinData.push({\n              index: skinIndex,\n              weight: skinWeight\n            });\n            stride += 2;\n          } // we sort the joints in descending order based on the weights.\n          // this ensures, we only procced the most important joints of the vertex\n\n\n          vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\n          // the order of the skin data matches the order of vertices\n\n          for (j = 0; j < BONE_LIMIT; j++) {\n            var d = vertexSkinData[j];\n\n            if (d !== undefined) {\n              build.indices.array.push(d.index);\n              build.weights.array.push(d.weight);\n            } else {\n              build.indices.array.push(0);\n              build.weights.array.push(0);\n            }\n          }\n        } // setup bind matrix\n\n\n        if (data.bindShapeMatrix) {\n          build.bindMatrix = new _three.Matrix4().fromArray(data.bindShapeMatrix).transpose();\n        } else {\n          build.bindMatrix = new _three.Matrix4().identity();\n        } // process bones and inverse bind matrix data\n\n\n        for (i = 0, l = jointSource.array.length; i < l; i++) {\n          var name = jointSource.array[i];\n          var boneInverse = new _three.Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n          build.joints.push({\n            name: name,\n            boneInverse: boneInverse\n          });\n        }\n\n        return build; // array sort function\n\n        function descending(a, b) {\n          return b.weight - a.weight;\n        }\n      }\n\n      function getController(id) {\n        return getBuild(library.controllers[id], buildController);\n      } // image\n\n\n      function parseImage(xml) {\n        var data = {\n          init_from: getElementsByTagName(xml, 'init_from')[0].textContent\n        };\n        library.images[xml.getAttribute('id')] = data;\n      }\n\n      function buildImage(data) {\n        if (data.build !== undefined) return data.build;\n        return data.init_from;\n      }\n\n      function getImage(id) {\n        var data = library.images[id];\n\n        if (data !== undefined) {\n          return getBuild(data, buildImage);\n        }\n\n        console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n        return null;\n      } // effect\n\n\n      function parseEffect(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'profile_COMMON':\n              data.profile = parseEffectProfileCOMMON(child);\n              break;\n          }\n        }\n\n        library.effects[xml.getAttribute('id')] = data;\n      }\n\n      function parseEffectProfileCOMMON(xml) {\n        var data = {\n          surfaces: {},\n          samplers: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'newparam':\n              parseEffectNewparam(child, data);\n              break;\n\n            case 'technique':\n              data.technique = parseEffectTechnique(child);\n              break;\n\n            case 'extra':\n              data.extra = parseEffectExtra(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectNewparam(xml, data) {\n        var sid = xml.getAttribute('sid');\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'surface':\n              data.surfaces[sid] = parseEffectSurface(child);\n              break;\n\n            case 'sampler2D':\n              data.samplers[sid] = parseEffectSampler(child);\n              break;\n          }\n        }\n      }\n\n      function parseEffectSurface(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'init_from':\n              data.init_from = child.textContent;\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectSampler(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'source':\n              data.source = child.textContent;\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectTechnique(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'constant':\n            case 'lambert':\n            case 'blinn':\n            case 'phong':\n              data.type = child.nodeName;\n              data.parameters = parseEffectParameters(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectParameters(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'emission':\n            case 'diffuse':\n            case 'specular':\n            case 'bump':\n            case 'ambient':\n            case 'shininess':\n            case 'transparency':\n              data[child.nodeName] = parseEffectParameter(child);\n              break;\n\n            case 'transparent':\n              data[child.nodeName] = {\n                opaque: child.getAttribute('opaque'),\n                data: parseEffectParameter(child)\n              };\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectParameter(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'color':\n              data[child.nodeName] = parseFloats(child.textContent);\n              break;\n\n            case 'float':\n              data[child.nodeName] = parseFloat(child.textContent);\n              break;\n\n            case 'texture':\n              data[child.nodeName] = {\n                id: child.getAttribute('texture'),\n                extra: parseEffectParameterTexture(child)\n              };\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectParameterTexture(xml) {\n        var data = {\n          technique: {}\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'extra':\n              parseEffectParameterTextureExtra(child, data);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectParameterTextureExtra(xml, data) {\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'technique':\n              parseEffectParameterTextureExtraTechnique(child, data);\n              break;\n          }\n        }\n      }\n\n      function parseEffectParameterTextureExtraTechnique(xml, data) {\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'repeatU':\n            case 'repeatV':\n            case 'offsetU':\n            case 'offsetV':\n              data.technique[child.nodeName] = parseFloat(child.textContent);\n              break;\n\n            case 'wrapU':\n            case 'wrapV':\n              // some files have values for wrapU/wrapV which become NaN via parseInt\n              if (child.textContent.toUpperCase() === 'TRUE') {\n                data.technique[child.nodeName] = 1;\n              } else if (child.textContent.toUpperCase() === 'FALSE') {\n                data.technique[child.nodeName] = 0;\n              } else {\n                data.technique[child.nodeName] = parseInt(child.textContent);\n              }\n\n              break;\n          }\n        }\n      }\n\n      function parseEffectExtra(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'technique':\n              data.technique = parseEffectExtraTechnique(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseEffectExtraTechnique(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'double_sided':\n              data[child.nodeName] = parseInt(child.textContent);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildEffect(data) {\n        return data;\n      }\n\n      function getEffect(id) {\n        return getBuild(library.effects[id], buildEffect);\n      } // material\n\n\n      function parseMaterial(xml) {\n        var data = {\n          name: xml.getAttribute('name')\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'instance_effect':\n              data.url = parseId(child.getAttribute('url'));\n              break;\n          }\n        }\n\n        library.materials[xml.getAttribute('id')] = data;\n      }\n\n      function getTextureLoader(image) {\n        var loader;\n        var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n\n        extension = extension.toLowerCase();\n\n        switch (extension) {\n          case 'tga':\n            loader = tgaLoader;\n            break;\n\n          default:\n            loader = textureLoader;\n        }\n\n        return loader;\n      }\n\n      function buildMaterial(data) {\n        var effect = getEffect(data.url);\n        var technique = effect.profile.technique;\n        var extra = effect.profile.extra;\n        var material;\n\n        switch (technique.type) {\n          case 'phong':\n          case 'blinn':\n            material = new _three.MeshPhongMaterial();\n            break;\n\n          case 'lambert':\n            material = new _three.MeshLambertMaterial();\n            break;\n\n          default:\n            material = new _three.MeshBasicMaterial();\n            break;\n        }\n\n        material.name = data.name || '';\n\n        function getTexture(textureObject) {\n          var sampler = effect.profile.samplers[textureObject.id];\n          var image = null; // get image\n\n          if (sampler !== undefined) {\n            var surface = effect.profile.surfaces[sampler.source];\n            image = getImage(surface.init_from);\n          } else {\n            console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n            image = getImage(textureObject.id);\n          } // create texture if image is avaiable\n\n\n          if (image !== null) {\n            var loader = getTextureLoader(image);\n\n            if (loader !== undefined) {\n              var texture = loader.load(image);\n              var _extra = textureObject.extra;\n\n              if (_extra !== undefined && _extra.technique !== undefined && isEmpty(_extra.technique) === false) {\n                var _technique = _extra.technique;\n                texture.wrapS = _technique.wrapU ? _three.RepeatWrapping : _three.ClampToEdgeWrapping;\n                texture.wrapT = _technique.wrapV ? _three.RepeatWrapping : _three.ClampToEdgeWrapping;\n                texture.offset.set(_technique.offsetU || 0, _technique.offsetV || 0);\n                texture.repeat.set(_technique.repeatU || 1, _technique.repeatV || 1);\n              } else {\n                texture.wrapS = _three.RepeatWrapping;\n                texture.wrapT = _three.RepeatWrapping;\n              }\n\n              return texture;\n            } else {\n              console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n              return null;\n            }\n          } else {\n            console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\", textureObject.id);\n            return null;\n          }\n        }\n\n        var parameters = technique.parameters;\n\n        for (var key in parameters) {\n          var parameter = parameters[key];\n\n          switch (key) {\n            case 'diffuse':\n              if (parameter.color) material.color.fromArray(parameter.color);\n              if (parameter.texture) material.map = getTexture(parameter.texture);\n              break;\n\n            case 'specular':\n              if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\n              if (parameter.texture) material.specularMap = getTexture(parameter.texture);\n              break;\n\n            case 'bump':\n              if (parameter.texture) material.normalMap = getTexture(parameter.texture);\n              break;\n\n            case 'ambient':\n              if (parameter.texture) material.lightMap = getTexture(parameter.texture);\n              break;\n\n            case 'shininess':\n              if (parameter[\"float\"] && material.shininess) material.shininess = parameter[\"float\"];\n              break;\n\n            case 'emission':\n              if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\n              if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);\n              break;\n          }\n        } //\n\n\n        var transparent = parameters['transparent'];\n        var transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\n\n        if (transparency === undefined && transparent) {\n          transparency = {\n            \"float\": 1\n          };\n        } // <transparent> does not exist but <transparency>\n\n\n        if (transparent === undefined && transparency) {\n          transparent = {\n            opaque: 'A_ONE',\n            data: {\n              color: [1, 1, 1, 1]\n            }\n          };\n        }\n\n        if (transparent && transparency) {\n          // handle case if a texture exists but no color\n          if (transparent.data.texture) {\n            // we do not set an alpha map (see #13792)\n            material.transparent = true;\n          } else {\n            var color = transparent.data.color;\n\n            switch (transparent.opaque) {\n              case 'A_ONE':\n                material.opacity = color[3] * transparency[\"float\"];\n                break;\n\n              case 'RGB_ZERO':\n                material.opacity = 1 - color[0] * transparency[\"float\"];\n                break;\n\n              case 'A_ZERO':\n                material.opacity = 1 - color[3] * transparency[\"float\"];\n                break;\n\n              case 'RGB_ONE':\n                material.opacity = color[0] * transparency[\"float\"];\n                break;\n\n              default:\n                console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n            }\n\n            if (material.opacity < 1) material.transparent = true;\n          }\n        } //\n\n\n        if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n          material.side = _three.DoubleSide;\n        }\n\n        return material;\n      }\n\n      function getMaterial(id) {\n        return getBuild(library.materials[id], buildMaterial);\n      } // camera\n\n\n      function parseCamera(xml) {\n        var data = {\n          name: xml.getAttribute('name')\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'optics':\n              data.optics = parseCameraOptics(child);\n              break;\n          }\n        }\n\n        library.cameras[xml.getAttribute('id')] = data;\n      }\n\n      function parseCameraOptics(xml) {\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n\n          switch (child.nodeName) {\n            case 'technique_common':\n              return parseCameraTechnique(child);\n          }\n        }\n\n        return {};\n      }\n\n      function parseCameraTechnique(xml) {\n        var data = {};\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n\n          switch (child.nodeName) {\n            case 'perspective':\n            case 'orthographic':\n              data.technique = child.nodeName;\n              data.parameters = parseCameraParameters(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseCameraParameters(xml) {\n        var data = {};\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n\n          switch (child.nodeName) {\n            case 'xfov':\n            case 'yfov':\n            case 'xmag':\n            case 'ymag':\n            case 'znear':\n            case 'zfar':\n            case 'aspect_ratio':\n              data[child.nodeName] = parseFloat(child.textContent);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildCamera(data) {\n        var camera;\n\n        switch (data.optics.technique) {\n          case 'perspective':\n            camera = new _three.PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n            break;\n\n          case 'orthographic':\n            var ymag = data.optics.parameters.ymag;\n            var xmag = data.optics.parameters.xmag;\n            var aspectRatio = data.optics.parameters.aspect_ratio;\n            xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n            ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n            xmag *= 0.5;\n            ymag *= 0.5;\n            camera = new _three.OrthographicCamera(-xmag, xmag, ymag, -ymag, // left, right, top, bottom\n            data.optics.parameters.znear, data.optics.parameters.zfar);\n            break;\n\n          default:\n            camera = new _three.PerspectiveCamera();\n            break;\n        }\n\n        camera.name = data.name || '';\n        return camera;\n      }\n\n      function getCamera(id) {\n        var data = library.cameras[id];\n\n        if (data !== undefined) {\n          return getBuild(data, buildCamera);\n        }\n\n        console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n        return null;\n      } // light\n\n\n      function parseLight(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'technique_common':\n              data = parseLightTechnique(child);\n              break;\n          }\n        }\n\n        library.lights[xml.getAttribute('id')] = data;\n      }\n\n      function parseLightTechnique(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'directional':\n            case 'point':\n            case 'spot':\n            case 'ambient':\n              data.technique = child.nodeName;\n              data.parameters = parseLightParameters(child);\n          }\n        }\n\n        return data;\n      }\n\n      function parseLightParameters(xml) {\n        var data = {};\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'color':\n              var array = parseFloats(child.textContent);\n              data.color = new _three.Color().fromArray(array);\n              break;\n\n            case 'falloff_angle':\n              data.falloffAngle = parseFloat(child.textContent);\n              break;\n\n            case 'quadratic_attenuation':\n              var f = parseFloat(child.textContent);\n              data.distance = f ? Math.sqrt(1 / f) : 0;\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildLight(data) {\n        var light;\n\n        switch (data.technique) {\n          case 'directional':\n            light = new _three.DirectionalLight();\n            break;\n\n          case 'point':\n            light = new _three.PointLight();\n            break;\n\n          case 'spot':\n            light = new _three.SpotLight();\n            break;\n\n          case 'ambient':\n            light = new _three.AmbientLight();\n            break;\n        }\n\n        if (data.parameters.color) light.color.copy(data.parameters.color);\n        if (data.parameters.distance) light.distance = data.parameters.distance;\n        return light;\n      }\n\n      function getLight(id) {\n        var data = library.lights[id];\n\n        if (data !== undefined) {\n          return getBuild(data, buildLight);\n        }\n\n        console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n        return null;\n      } // geometry\n\n\n      function parseGeometry(xml) {\n        var data = {\n          name: xml.getAttribute('name'),\n          sources: {},\n          vertices: {},\n          primitives: []\n        };\n        var mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\n        if (mesh === undefined) return;\n\n        for (var i = 0; i < mesh.childNodes.length; i++) {\n          var child = mesh.childNodes[i];\n          if (child.nodeType !== 1) continue;\n          var id = child.getAttribute('id');\n\n          switch (child.nodeName) {\n            case 'source':\n              data.sources[id] = parseSource(child);\n              break;\n\n            case 'vertices':\n              // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n              data.vertices = parseGeometryVertices(child);\n              break;\n\n            case 'polygons':\n              console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n              break;\n\n            case 'lines':\n            case 'linestrips':\n            case 'polylist':\n            case 'triangles':\n              data.primitives.push(parseGeometryPrimitive(child));\n              break;\n\n            default:\n              console.log(child);\n          }\n        }\n\n        library.geometries[xml.getAttribute('id')] = data;\n      }\n\n      function parseSource(xml) {\n        var data = {\n          array: [],\n          stride: 3\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'float_array':\n              data.array = parseFloats(child.textContent);\n              break;\n\n            case 'Name_array':\n              data.array = parseStrings(child.textContent);\n              break;\n\n            case 'technique_common':\n              var accessor = getElementsByTagName(child, 'accessor')[0];\n\n              if (accessor !== undefined) {\n                data.stride = parseInt(accessor.getAttribute('stride'));\n              }\n\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseGeometryVertices(xml) {\n        var data = {};\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n          data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n        }\n\n        return data;\n      }\n\n      function parseGeometryPrimitive(xml) {\n        var primitive = {\n          type: xml.nodeName,\n          material: xml.getAttribute('material'),\n          count: parseInt(xml.getAttribute('count')),\n          inputs: {},\n          stride: 0,\n          hasUV: false\n        };\n\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'input':\n              var id = parseId(child.getAttribute('source'));\n              var semantic = child.getAttribute('semantic');\n              var offset = parseInt(child.getAttribute('offset'));\n              var set = parseInt(child.getAttribute('set'));\n              var inputname = set > 0 ? semantic + set : semantic;\n              primitive.inputs[inputname] = {\n                id: id,\n                offset: offset\n              };\n              primitive.stride = Math.max(primitive.stride, offset + 1);\n              if (semantic === 'TEXCOORD') primitive.hasUV = true;\n              break;\n\n            case 'vcount':\n              primitive.vcount = parseInts(child.textContent);\n              break;\n\n            case 'p':\n              primitive.p = parseInts(child.textContent);\n              break;\n          }\n        }\n\n        return primitive;\n      }\n\n      function groupPrimitives(primitives) {\n        var build = {};\n\n        for (var i = 0; i < primitives.length; i++) {\n          var primitive = primitives[i];\n          if (build[primitive.type] === undefined) build[primitive.type] = [];\n          build[primitive.type].push(primitive);\n        }\n\n        return build;\n      }\n\n      function checkUVCoordinates(primitives) {\n        var count = 0;\n\n        for (var i = 0, l = primitives.length; i < l; i++) {\n          var primitive = primitives[i];\n\n          if (primitive.hasUV === true) {\n            count++;\n          }\n        }\n\n        if (count > 0 && count < primitives.length) {\n          primitives.uvsNeedsFix = true;\n        }\n      }\n\n      function buildGeometry(data) {\n        var build = {};\n        var sources = data.sources;\n        var vertices = data.vertices;\n        var primitives = data.primitives;\n        if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\n        // first, we group all primitives by their type\n\n        var groupedPrimitives = groupPrimitives(primitives);\n\n        for (var type in groupedPrimitives) {\n          var primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n          checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\n\n          build[type] = buildGeometryType(primitiveType, sources, vertices);\n        }\n\n        return build;\n      }\n\n      function buildGeometryType(primitives, sources, vertices) {\n        var build = {};\n        var position = {\n          array: [],\n          stride: 0\n        };\n        var normal = {\n          array: [],\n          stride: 0\n        };\n        var uv = {\n          array: [],\n          stride: 0\n        };\n        var uv2 = {\n          array: [],\n          stride: 0\n        };\n        var color = {\n          array: [],\n          stride: 0\n        };\n        var skinIndex = {\n          array: [],\n          stride: 4\n        };\n        var skinWeight = {\n          array: [],\n          stride: 4\n        };\n        var geometry = new _three.BufferGeometry();\n        var materialKeys = [];\n        var start = 0;\n\n        for (var p = 0; p < primitives.length; p++) {\n          var primitive = primitives[p];\n          var inputs = primitive.inputs; // groups\n\n          var _count = 0;\n\n          switch (primitive.type) {\n            case 'lines':\n            case 'linestrips':\n              _count = primitive.count * 2;\n              break;\n\n            case 'triangles':\n              _count = primitive.count * 3;\n              break;\n\n            case 'polylist':\n              for (var g = 0; g < primitive.count; g++) {\n                var vc = primitive.vcount[g];\n\n                switch (vc) {\n                  case 3:\n                    _count += 3; // single triangle\n\n                    break;\n\n                  case 4:\n                    _count += 6; // quad, subdivided into two triangles\n\n                    break;\n\n                  default:\n                    _count += (vc - 2) * 3; // polylist with more than four vertices\n\n                    break;\n                }\n              }\n\n              break;\n\n            default:\n              console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n          }\n\n          geometry.addGroup(start, _count, p);\n          start += _count; // material\n\n          if (primitive.material) {\n            materialKeys.push(primitive.material);\n          } // geometry data\n\n\n          for (var name in inputs) {\n            var input = inputs[name];\n\n            switch (name) {\n              case 'VERTEX':\n                for (var key in vertices) {\n                  var id = vertices[key];\n\n                  switch (key) {\n                    case 'POSITION':\n                      var prevLength = position.array.length;\n                      buildGeometryData(primitive, sources[id], input.offset, position.array);\n                      position.stride = sources[id].stride;\n\n                      if (sources.skinWeights && sources.skinIndices) {\n                        buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                        buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                      } // see #3803\n\n\n                      if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                        var _count2 = (position.array.length - prevLength) / position.stride;\n\n                        for (var i = 0; i < _count2; i++) {\n                          // fill missing uv coordinates\n                          uv.array.push(0, 0);\n                        }\n                      }\n\n                      break;\n\n                    case 'NORMAL':\n                      buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                      normal.stride = sources[id].stride;\n                      break;\n\n                    case 'COLOR':\n                      buildGeometryData(primitive, sources[id], input.offset, color.array);\n                      color.stride = sources[id].stride;\n                      break;\n\n                    case 'TEXCOORD':\n                      buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                      uv.stride = sources[id].stride;\n                      break;\n\n                    case 'TEXCOORD1':\n                      buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                      uv.stride = sources[id].stride;\n                      break;\n\n                    default:\n                      console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                  }\n                }\n\n                break;\n\n              case 'NORMAL':\n                buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n                normal.stride = sources[input.id].stride;\n                break;\n\n              case 'COLOR':\n                buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n                color.stride = sources[input.id].stride;\n                break;\n\n              case 'TEXCOORD':\n                buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n                uv.stride = sources[input.id].stride;\n                break;\n\n              case 'TEXCOORD1':\n                buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n                uv2.stride = sources[input.id].stride;\n                break;\n            }\n          }\n        } // build geometry\n\n\n        if (position.array.length > 0) {\n          geometry.setAttribute('position', new _three.Float32BufferAttribute(position.array, position.stride));\n        }\n\n        if (normal.array.length > 0) {\n          geometry.setAttribute('normal', new _three.Float32BufferAttribute(normal.array, normal.stride));\n        }\n\n        if (color.array.length > 0) geometry.setAttribute('color', new _three.Float32BufferAttribute(color.array, color.stride));\n        if (uv.array.length > 0) geometry.setAttribute('uv', new _three.Float32BufferAttribute(uv.array, uv.stride));\n        if (uv2.array.length > 0) geometry.setAttribute('uv2', new _three.Float32BufferAttribute(uv2.array, uv2.stride));\n\n        if (skinIndex.array.length > 0) {\n          geometry.setAttribute('skinIndex', new _three.Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n        }\n\n        if (skinWeight.array.length > 0) {\n          geometry.setAttribute('skinWeight', new _three.Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n        }\n\n        build.data = geometry;\n        build.type = primitives[0].type;\n        build.materialKeys = materialKeys;\n        return build;\n      }\n\n      function buildGeometryData(primitive, source, offset, array) {\n        var indices = primitive.p;\n        var stride = primitive.stride;\n        var vcount = primitive.vcount;\n\n        function pushVector(i) {\n          var index = indices[i + offset] * sourceStride;\n          var length = index + sourceStride;\n\n          for (; index < length; index++) {\n            array.push(sourceArray[index]);\n          }\n        }\n\n        var sourceArray = source.array;\n        var sourceStride = source.stride;\n\n        if (primitive.vcount !== undefined) {\n          var index = 0;\n\n          for (var i = 0, l = vcount.length; i < l; i++) {\n            var _count3 = vcount[i];\n\n            if (_count3 === 4) {\n              var a = index + stride * 0;\n              var b = index + stride * 1;\n              var c = index + stride * 2;\n              var d = index + stride * 3;\n              pushVector(a);\n              pushVector(b);\n              pushVector(d);\n              pushVector(b);\n              pushVector(c);\n              pushVector(d);\n            } else if (_count3 === 3) {\n              var _a = index + stride * 0;\n\n              var _b = index + stride * 1;\n\n              var _c = index + stride * 2;\n\n              pushVector(_a);\n              pushVector(_b);\n              pushVector(_c);\n            } else if (_count3 > 4) {\n              for (var k = 1, kl = _count3 - 2; k <= kl; k++) {\n                var _a2 = index + stride * 0;\n\n                var _b2 = index + stride * k;\n\n                var _c2 = index + stride * (k + 1);\n\n                pushVector(_a2);\n                pushVector(_b2);\n                pushVector(_c2);\n              }\n            }\n\n            index += stride * _count3;\n          }\n        } else {\n          for (var _i = 0, _l = indices.length; _i < _l; _i += stride) {\n            pushVector(_i);\n          }\n        }\n      }\n\n      function getGeometry(id) {\n        return getBuild(library.geometries[id], buildGeometry);\n      } // kinematics\n\n\n      function parseKinematicsModel(xml) {\n        var data = {\n          name: xml.getAttribute('name') || '',\n          joints: {},\n          links: []\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'technique_common':\n              parseKinematicsTechniqueCommon(child, data);\n              break;\n          }\n        }\n\n        library.kinematicsModels[xml.getAttribute('id')] = data;\n      }\n\n      function buildKinematicsModel(data) {\n        if (data.build !== undefined) return data.build;\n        return data;\n      }\n\n      function getKinematicsModel(id) {\n        return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n      }\n\n      function parseKinematicsTechniqueCommon(xml, data) {\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'joint':\n              data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n              break;\n\n            case 'link':\n              data.links.push(parseKinematicsLink(child));\n              break;\n          }\n        }\n      }\n\n      function parseKinematicsJoint(xml) {\n        var data;\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'prismatic':\n            case 'revolute':\n              data = parseKinematicsJointParameter(child);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseKinematicsJointParameter(xml) {\n        var data = {\n          sid: xml.getAttribute('sid'),\n          name: xml.getAttribute('name') || '',\n          axis: new _three.Vector3(),\n          limits: {\n            min: 0,\n            max: 0\n          },\n          type: xml.nodeName,\n          \"static\": false,\n          zeroPosition: 0,\n          middlePosition: 0\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'axis':\n              var array = parseFloats(child.textContent);\n              data.axis.fromArray(array);\n              break;\n\n            case 'limits':\n              var max = child.getElementsByTagName('max')[0];\n              var min = child.getElementsByTagName('min')[0];\n              data.limits.max = parseFloat(max.textContent);\n              data.limits.min = parseFloat(min.textContent);\n              break;\n          }\n        } // if min is equal to or greater than max, consider the joint static\n\n\n        if (data.limits.min >= data.limits.max) {\n          data[\"static\"] = true;\n        } // calculate middle position\n\n\n        data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n        return data;\n      }\n\n      function parseKinematicsLink(xml) {\n        var data = {\n          sid: xml.getAttribute('sid'),\n          name: xml.getAttribute('name') || '',\n          attachments: [],\n          transforms: []\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'attachment_full':\n              data.attachments.push(parseKinematicsAttachment(child));\n              break;\n\n            case 'matrix':\n            case 'translate':\n            case 'rotate':\n              data.transforms.push(parseKinematicsTransform(child));\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseKinematicsAttachment(xml) {\n        var data = {\n          joint: xml.getAttribute('joint').split('/').pop(),\n          transforms: [],\n          links: []\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'link':\n              data.links.push(parseKinematicsLink(child));\n              break;\n\n            case 'matrix':\n            case 'translate':\n            case 'rotate':\n              data.transforms.push(parseKinematicsTransform(child));\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function parseKinematicsTransform(xml) {\n        var data = {\n          type: xml.nodeName\n        };\n        var array = parseFloats(xml.textContent);\n\n        switch (data.type) {\n          case 'matrix':\n            data.obj = new _three.Matrix4();\n            data.obj.fromArray(array).transpose();\n            break;\n\n          case 'translate':\n            data.obj = new _three.Vector3();\n            data.obj.fromArray(array);\n            break;\n\n          case 'rotate':\n            data.obj = new _three.Vector3();\n            data.obj.fromArray(array);\n            data.angle = _three.MathUtils.degToRad(array[3]);\n            break;\n        }\n\n        return data;\n      } // physics\n\n\n      function parsePhysicsModel(xml) {\n        var data = {\n          name: xml.getAttribute('name') || '',\n          rigidBodies: {}\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'rigid_body':\n              data.rigidBodies[child.getAttribute('name')] = {};\n              parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n              break;\n          }\n        }\n\n        library.physicsModels[xml.getAttribute('id')] = data;\n      }\n\n      function parsePhysicsRigidBody(xml, data) {\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'technique_common':\n              parsePhysicsTechniqueCommon(child, data);\n              break;\n          }\n        }\n      }\n\n      function parsePhysicsTechniqueCommon(xml, data) {\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'inertia':\n              data.inertia = parseFloats(child.textContent);\n              break;\n\n            case 'mass':\n              data.mass = parseFloats(child.textContent)[0];\n              break;\n          }\n        }\n      } // scene\n\n\n      function parseKinematicsScene(xml) {\n        var data = {\n          bindJointAxis: []\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'bind_joint_axis':\n              data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n              break;\n          }\n        }\n\n        library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n      }\n\n      function parseKinematicsBindJointAxis(xml) {\n        var data = {\n          target: xml.getAttribute('target').split('/').pop()\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          switch (child.nodeName) {\n            case 'axis':\n              var param = child.getElementsByTagName('param')[0];\n              data.axis = param.textContent;\n              var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n              data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildKinematicsScene(data) {\n        if (data.build !== undefined) return data.build;\n        return data;\n      }\n\n      function getKinematicsScene(id) {\n        return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n      }\n\n      function setupKinematics() {\n        var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n        var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n        var visualSceneId = Object.keys(library.visualScenes)[0];\n        if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\n        var kinematicsModel = getKinematicsModel(kinematicsModelId);\n        var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n        var visualScene = getVisualScene(visualSceneId);\n        var bindJointAxis = kinematicsScene.bindJointAxis;\n        var jointMap = {};\n\n        for (var i = 0, l = bindJointAxis.length; i < l; i++) {\n          var axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n          var targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n\n          if (targetElement) {\n            // get the parent of the transform element\n            var parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\n\n            connect(axis.jointIndex, parentVisualElement);\n          }\n        }\n\n        function connect(jointIndex, visualElement) {\n          var visualElementName = visualElement.getAttribute('name');\n          var joint = kinematicsModel.joints[jointIndex];\n          visualScene.traverse(function (object) {\n            if (object.name === visualElementName) {\n              jointMap[jointIndex] = {\n                object: object,\n                transforms: buildTransformList(visualElement),\n                joint: joint,\n                position: joint.zeroPosition\n              };\n            }\n          });\n        }\n\n        var m0 = new _three.Matrix4();\n        kinematics = {\n          joints: kinematicsModel && kinematicsModel.joints,\n          getJointValue: function getJointValue(jointIndex) {\n            var jointData = jointMap[jointIndex];\n\n            if (jointData) {\n              return jointData.position;\n            } else {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \" doesn't exist.\");\n            }\n          },\n          setJointValue: function setJointValue(jointIndex, value) {\n            var jointData = jointMap[jointIndex];\n\n            if (jointData) {\n              var joint = jointData.joint;\n\n              if (value > joint.limits.max || value < joint.limits.min) {\n                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n              } else if (joint[\"static\"]) {\n                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n              } else {\n                var object = jointData.object;\n                var _axis = joint.axis;\n                var transforms = jointData.transforms;\n                matrix.identity(); // each update, we have to apply all transforms in the correct order\n\n                for (var _i2 = 0; _i2 < transforms.length; _i2++) {\n                  var transform = transforms[_i2]; // if there is a connection of the transform node with a joint, apply the joint value\n\n                  if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                    switch (joint.type) {\n                      case 'revolute':\n                        matrix.multiply(m0.makeRotationAxis(_axis, _three.MathUtils.degToRad(value)));\n                        break;\n\n                      case 'prismatic':\n                        matrix.multiply(m0.makeTranslation(_axis.x * value, _axis.y * value, _axis.z * value));\n                        break;\n\n                      default:\n                        console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                        break;\n                    }\n                  } else {\n                    switch (transform.type) {\n                      case 'matrix':\n                        matrix.multiply(transform.obj);\n                        break;\n\n                      case 'translate':\n                        matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                        break;\n\n                      case 'scale':\n                        matrix.scale(transform.obj);\n                        break;\n\n                      case 'rotate':\n                        matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                        break;\n                    }\n                  }\n                }\n\n                object.matrix.copy(matrix);\n                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                jointMap[jointIndex].position = value;\n              }\n            } else {\n              console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n            }\n          }\n        };\n      }\n\n      function buildTransformList(node) {\n        var transforms = [];\n        var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n\n          var array = void 0,\n              _vector = void 0;\n\n          switch (child.nodeName) {\n            case 'matrix':\n              array = parseFloats(child.textContent);\n\n              var _matrix = new _three.Matrix4().fromArray(array).transpose();\n\n              transforms.push({\n                sid: child.getAttribute('sid'),\n                type: child.nodeName,\n                obj: _matrix\n              });\n              break;\n\n            case 'translate':\n            case 'scale':\n              array = parseFloats(child.textContent);\n              _vector = new _three.Vector3().fromArray(array);\n              transforms.push({\n                sid: child.getAttribute('sid'),\n                type: child.nodeName,\n                obj: _vector\n              });\n              break;\n\n            case 'rotate':\n              array = parseFloats(child.textContent);\n              _vector = new _three.Vector3().fromArray(array);\n\n              var angle = _three.MathUtils.degToRad(array[3]);\n\n              transforms.push({\n                sid: child.getAttribute('sid'),\n                type: child.nodeName,\n                obj: _vector,\n                angle: angle\n              });\n              break;\n          }\n        }\n\n        return transforms;\n      } // nodes\n\n\n      function prepareNodes(xml) {\n        var elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\n\n        for (var i = 0; i < elements.length; i++) {\n          var element = elements[i];\n\n          if (element.hasAttribute('id') === false) {\n            element.setAttribute('id', generateId());\n          }\n        }\n      }\n\n      var matrix = new _three.Matrix4();\n      var vector = new _three.Vector3();\n\n      function parseNode(xml) {\n        var data = {\n          name: xml.getAttribute('name') || '',\n          type: xml.getAttribute('type'),\n          id: xml.getAttribute('id'),\n          sid: xml.getAttribute('sid'),\n          matrix: new _three.Matrix4(),\n          nodes: [],\n          instanceCameras: [],\n          instanceControllers: [],\n          instanceLights: [],\n          instanceGeometries: [],\n          instanceNodes: [],\n          transforms: {}\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n          if (child.nodeType !== 1) continue;\n          var array = void 0;\n\n          switch (child.nodeName) {\n            case 'node':\n              data.nodes.push(child.getAttribute('id'));\n              parseNode(child);\n              break;\n\n            case 'instance_camera':\n              data.instanceCameras.push(parseId(child.getAttribute('url')));\n              break;\n\n            case 'instance_controller':\n              data.instanceControllers.push(parseNodeInstance(child));\n              break;\n\n            case 'instance_light':\n              data.instanceLights.push(parseId(child.getAttribute('url')));\n              break;\n\n            case 'instance_geometry':\n              data.instanceGeometries.push(parseNodeInstance(child));\n              break;\n\n            case 'instance_node':\n              data.instanceNodes.push(parseId(child.getAttribute('url')));\n              break;\n\n            case 'matrix':\n              array = parseFloats(child.textContent);\n              data.matrix.multiply(matrix.fromArray(array).transpose());\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\n              break;\n\n            case 'translate':\n              array = parseFloats(child.textContent);\n              vector.fromArray(array);\n              data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\n              break;\n\n            case 'rotate':\n              array = parseFloats(child.textContent);\n\n              var angle = _three.MathUtils.degToRad(array[3]);\n\n              data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\n              break;\n\n            case 'scale':\n              array = parseFloats(child.textContent);\n              data.matrix.scale(vector.fromArray(array));\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\n              break;\n\n            case 'extra':\n              break;\n\n            default:\n              console.log(child);\n          }\n        }\n\n        if (hasNode(data.id)) {\n          console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n        } else {\n          library.nodes[data.id] = data;\n        }\n\n        return data;\n      }\n\n      function parseNodeInstance(xml) {\n        var data = {\n          id: parseId(xml.getAttribute('url')),\n          materials: {},\n          skeletons: []\n        };\n\n        for (var i = 0; i < xml.childNodes.length; i++) {\n          var child = xml.childNodes[i];\n\n          switch (child.nodeName) {\n            case 'bind_material':\n              var instances = child.getElementsByTagName('instance_material');\n\n              for (var j = 0; j < instances.length; j++) {\n                var instance = instances[j];\n                var symbol = instance.getAttribute('symbol');\n                var target = instance.getAttribute('target');\n                data.materials[symbol] = parseId(target);\n              }\n\n              break;\n\n            case 'skeleton':\n              data.skeletons.push(parseId(child.textContent));\n              break;\n          }\n        }\n\n        return data;\n      }\n\n      function buildSkeleton(skeletons, joints) {\n        var boneData = [];\n        var sortedBoneData = [];\n        var i, j, data; // a skeleton can have multiple root bones. collada expresses this\n        // situtation with multiple \"skeleton\" tags per controller instance\n\n        for (i = 0; i < skeletons.length; i++) {\n          var skeleton = skeletons[i];\n          var root = void 0;\n\n          if (hasNode(skeleton)) {\n            root = getNode(skeleton);\n            buildBoneHierarchy(root, joints, boneData);\n          } else if (hasVisualScene(skeleton)) {\n            // handle case where the skeleton refers to the visual scene (#13335)\n            var visualScene = library.visualScenes[skeleton];\n            var children = visualScene.children;\n\n            for (var _j = 0; _j < children.length; _j++) {\n              var child = children[_j];\n\n              if (child.type === 'JOINT') {\n                var _root = getNode(child.id);\n\n                buildBoneHierarchy(_root, joints, boneData);\n              }\n            }\n          } else {\n            console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n          }\n        } // sort bone data (the order is defined in the corresponding controller)\n\n\n        for (i = 0; i < joints.length; i++) {\n          for (j = 0; j < boneData.length; j++) {\n            data = boneData[j];\n\n            if (data.bone.name === joints[i].name) {\n              sortedBoneData[i] = data;\n              data.processed = true;\n              break;\n            }\n          }\n        } // add unprocessed bone data at the end of the list\n\n\n        for (i = 0; i < boneData.length; i++) {\n          data = boneData[i];\n\n          if (data.processed === false) {\n            sortedBoneData.push(data);\n            data.processed = true;\n          }\n        } // setup arrays for skeleton creation\n\n\n        var bones = [];\n        var boneInverses = [];\n\n        for (i = 0; i < sortedBoneData.length; i++) {\n          data = sortedBoneData[i];\n          bones.push(data.bone);\n          boneInverses.push(data.boneInverse);\n        }\n\n        return new _three.Skeleton(bones, boneInverses);\n      }\n\n      function buildBoneHierarchy(root, joints, boneData) {\n        // setup bone data from visual scene\n        root.traverse(function (object) {\n          if (object.isBone === true) {\n            var boneInverse; // retrieve the boneInverse from the controller data\n\n            for (var i = 0; i < joints.length; i++) {\n              var joint = joints[i];\n\n              if (joint.name === object.name) {\n                boneInverse = joint.boneInverse;\n                break;\n              }\n            }\n\n            if (boneInverse === undefined) {\n              // Unfortunately, there can be joints in the visual scene that are not part of the\n              // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n              // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n              // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n              // ensure a correct animation of the model.\n              boneInverse = new _three.Matrix4();\n            }\n\n            boneData.push({\n              bone: object,\n              boneInverse: boneInverse,\n              processed: false\n            });\n          }\n        });\n      }\n\n      function buildNode(data) {\n        var objects = [];\n        var matrix = data.matrix;\n        var nodes = data.nodes;\n        var type = data.type;\n        var instanceCameras = data.instanceCameras;\n        var instanceControllers = data.instanceControllers;\n        var instanceLights = data.instanceLights;\n        var instanceGeometries = data.instanceGeometries;\n        var instanceNodes = data.instanceNodes; // nodes\n\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          objects.push(getNode(nodes[i]));\n        } // instance cameras\n\n\n        for (var _i3 = 0, _l2 = instanceCameras.length; _i3 < _l2; _i3++) {\n          var instanceCamera = getCamera(instanceCameras[_i3]);\n\n          if (instanceCamera !== null) {\n            objects.push(instanceCamera.clone());\n          }\n        } // instance controllers\n\n\n        for (var _i4 = 0, _l3 = instanceControllers.length; _i4 < _l3; _i4++) {\n          var instance = instanceControllers[_i4];\n          var controller = getController(instance.id);\n          var geometries = getGeometry(controller.id);\n          var newObjects = buildObjects(geometries, instance.materials);\n          var skeletons = instance.skeletons;\n          var joints = controller.skin.joints;\n          var skeleton = buildSkeleton(skeletons, joints);\n\n          for (var j = 0, jl = newObjects.length; j < jl; j++) {\n            var _object = newObjects[j];\n\n            if (_object.isSkinnedMesh) {\n              _object.bind(skeleton, controller.skin.bindMatrix);\n\n              _object.normalizeSkinWeights();\n            }\n\n            objects.push(_object);\n          }\n        } // instance lights\n\n\n        for (var _i5 = 0, _l4 = instanceLights.length; _i5 < _l4; _i5++) {\n          var instanceLight = getLight(instanceLights[_i5]);\n\n          if (instanceLight !== null) {\n            objects.push(instanceLight.clone());\n          }\n        } // instance geometries\n\n\n        for (var _i6 = 0, _l5 = instanceGeometries.length; _i6 < _l5; _i6++) {\n          var _instance = instanceGeometries[_i6]; // a single geometry instance in collada can lead to multiple object3Ds.\n          // this is the case when primitives are combined like triangles and lines\n\n          var _geometries = getGeometry(_instance.id);\n\n          var _newObjects = buildObjects(_geometries, _instance.materials);\n\n          for (var _j2 = 0, _jl = _newObjects.length; _j2 < _jl; _j2++) {\n            objects.push(_newObjects[_j2]);\n          }\n        } // instance nodes\n\n\n        for (var _i7 = 0, _l6 = instanceNodes.length; _i7 < _l6; _i7++) {\n          objects.push(getNode(instanceNodes[_i7]).clone());\n        }\n\n        var object;\n\n        if (nodes.length === 0 && objects.length === 1) {\n          object = objects[0];\n        } else {\n          object = type === 'JOINT' ? new _three.Bone() : new _three.Group();\n\n          for (var _i8 = 0; _i8 < objects.length; _i8++) {\n            object.add(objects[_i8]);\n          }\n        }\n\n        object.name = type === 'JOINT' ? data.sid : data.name;\n        object.matrix.copy(matrix);\n        object.matrix.decompose(object.position, object.quaternion, object.scale);\n        return object;\n      }\n\n      var fallbackMaterial = new _three.MeshBasicMaterial({\n        color: 0xff00ff\n      });\n\n      function resolveMaterialBinding(keys, instanceMaterials) {\n        var materials = [];\n\n        for (var i = 0, l = keys.length; i < l; i++) {\n          var id = instanceMaterials[keys[i]];\n\n          if (id === undefined) {\n            console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n            materials.push(fallbackMaterial);\n          } else {\n            materials.push(getMaterial(id));\n          }\n        }\n\n        return materials;\n      }\n\n      function buildObjects(geometries, instanceMaterials) {\n        var objects = [];\n\n        for (var type in geometries) {\n          var geometry = geometries[type];\n          var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\n\n          if (materials.length === 0) {\n            if (type === 'lines' || type === 'linestrips') {\n              materials.push(new _three.LineBasicMaterial());\n            } else {\n              materials.push(new _three.MeshPhongMaterial());\n            }\n          } // regard skinning\n\n\n          var skinning = geometry.data.attributes.skinIndex !== undefined;\n\n          if (skinning) {\n            for (var i = 0, l = materials.length; i < l; i++) {\n              materials[i].skinning = true;\n            }\n          } // choose between a single or multi materials (material array)\n\n\n          var material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\n\n          var object = void 0;\n\n          switch (type) {\n            case 'lines':\n              object = new _three.LineSegments(geometry.data, material);\n              break;\n\n            case 'linestrips':\n              object = new _three.Line(geometry.data, material);\n              break;\n\n            case 'triangles':\n            case 'polylist':\n              if (skinning) {\n                object = new _three.SkinnedMesh(geometry.data, material);\n              } else {\n                object = new _three.Mesh(geometry.data, material);\n              }\n\n              break;\n          }\n\n          objects.push(object);\n        }\n\n        return objects;\n      }\n\n      function hasNode(id) {\n        return library.nodes[id] !== undefined;\n      }\n\n      function getNode(id) {\n        return getBuild(library.nodes[id], buildNode);\n      } // visual scenes\n\n\n      function parseVisualScene(xml) {\n        var data = {\n          name: xml.getAttribute('name'),\n          children: []\n        };\n        prepareNodes(xml);\n        var elements = getElementsByTagName(xml, 'node');\n\n        for (var i = 0; i < elements.length; i++) {\n          data.children.push(parseNode(elements[i]));\n        }\n\n        library.visualScenes[xml.getAttribute('id')] = data;\n      }\n\n      function buildVisualScene(data) {\n        var group = new _three.Group();\n        group.name = data.name;\n        var children = data.children;\n\n        for (var i = 0; i < children.length; i++) {\n          var child = children[i];\n          group.add(getNode(child.id));\n        }\n\n        return group;\n      }\n\n      function hasVisualScene(id) {\n        return library.visualScenes[id] !== undefined;\n      }\n\n      function getVisualScene(id) {\n        return getBuild(library.visualScenes[id], buildVisualScene);\n      } // scenes\n\n\n      function parseScene(xml) {\n        var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n        return getVisualScene(parseId(instance.getAttribute('url')));\n      }\n\n      function setupAnimations() {\n        var clips = library.clips;\n\n        if (isEmpty(clips) === true) {\n          if (isEmpty(library.animations) === false) {\n            // if there are animations but no clips, we create a default clip for playback\n            var tracks = [];\n\n            for (var id in library.animations) {\n              var animationTracks = getAnimation(id);\n\n              for (var i = 0, l = animationTracks.length; i < l; i++) {\n                tracks.push(animationTracks[i]);\n              }\n            }\n\n            animations.push(new _three.AnimationClip('default', -1, tracks));\n          }\n        } else {\n          for (var _id in clips) {\n            animations.push(getAnimationClip(_id));\n          }\n        }\n      } // convert the parser error element into text with each child elements text\n      // separated by new lines.\n\n\n      function parserErrorToText(parserError) {\n        var result = '';\n        var stack = [parserError];\n\n        while (stack.length) {\n          var node = stack.shift();\n\n          if (node.nodeType === Node.TEXT_NODE) {\n            result += node.textContent;\n          } else {\n            result += '\\n';\n            stack.push.apply(stack, node.childNodes);\n          }\n        }\n\n        return result.trim();\n      }\n\n      if (text.length === 0) {\n        return {\n          scene: new _three.Scene()\n        };\n      }\n\n      var xml = new DOMParser().parseFromString(text, 'application/xml');\n      var collada = getElementsByTagName(xml, 'COLLADA')[0];\n      var parserError = xml.getElementsByTagName('parsererror')[0];\n\n      if (parserError !== undefined) {\n        // Chrome will return parser error with a div in it\n        var errorElement = getElementsByTagName(parserError, 'div')[0];\n        var errorText;\n\n        if (errorElement) {\n          errorText = errorElement.textContent;\n        } else {\n          errorText = parserErrorToText(parserError);\n        }\n\n        console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n        return null;\n      } // metadata\n\n\n      var version = collada.getAttribute('version');\n      console.log('THREE.ColladaLoader: File version', version);\n      var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n      var textureLoader = new _three.TextureLoader(this.manager);\n      textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      var tgaLoader;\n\n      if (_TGALoader.TGALoader) {\n        tgaLoader = new _TGALoader.TGALoader(this.manager);\n        tgaLoader.setPath(this.resourcePath || path);\n      } //\n\n\n      var animations = [];\n      var kinematics = {};\n      var count = 0; //\n\n      var library = {\n        animations: {},\n        clips: {},\n        controllers: {},\n        images: {},\n        effects: {},\n        materials: {},\n        cameras: {},\n        lights: {},\n        geometries: {},\n        nodes: {},\n        visualScenes: {},\n        kinematicsModels: {},\n        physicsModels: {},\n        kinematicsScenes: {}\n      };\n      parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n      parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n      parseLibrary(collada, 'library_controllers', 'controller', parseController);\n      parseLibrary(collada, 'library_images', 'image', parseImage);\n      parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n      parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n      parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n      parseLibrary(collada, 'library_lights', 'light', parseLight);\n      parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n      parseLibrary(collada, 'library_nodes', 'node', parseNode);\n      parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n      parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n      parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n      parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n      buildLibrary(library.animations, buildAnimation);\n      buildLibrary(library.clips, buildAnimationClip);\n      buildLibrary(library.controllers, buildController);\n      buildLibrary(library.images, buildImage);\n      buildLibrary(library.effects, buildEffect);\n      buildLibrary(library.materials, buildMaterial);\n      buildLibrary(library.cameras, buildCamera);\n      buildLibrary(library.lights, buildLight);\n      buildLibrary(library.geometries, buildGeometry);\n      buildLibrary(library.visualScenes, buildVisualScene);\n      setupAnimations();\n      setupKinematics();\n      var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n      scene.animations = animations;\n\n      if (asset.upAxis === 'Z_UP') {\n        scene.quaternion.setFromEuler(new _three.Euler(-Math.PI / 2, 0, 0));\n      }\n\n      scene.scale.multiplyScalar(asset.unit);\n      return {\n        get animations() {\n          console.warn('THREE.ColladaLoader: Please access animations over scene.animations now.');\n          return animations;\n        },\n\n        kinematics: kinematics,\n        library: library,\n        scene: scene\n      };\n    }\n  }]);\n\n  return ColladaLoader;\n}(_three.Loader);\n\nexports.ColladaLoader = ColladaLoader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_stdlib$loaders$TGALoader","~$shadow.js"]],"~:properties",["^5",["bindShapeMatrix","sources","skin","lightMap","map","getJointValue","weights","object","wrapS","member","kinematicsModels","min","optics","hasUV","samplers","url","index","offset","primitives","controllers","obj","prototype","bone","skinning","visualScenes","physicsModels","transparent","side","lights","p","joint","geometries","key","matrix","arraySyntax","children","init_from","__esModule","max","surfaces","axis","profile","vertexWeights","clips","v","instanceControllers","jointIndex","inertia","id","normalMap","effects","count","materials","skinIndices","processed","angle","position","name","configurable","emissiveMap","value","instanceCameras","instanceNodes","enumerable","vertices","middlePosition","technique","start","upAxis","build","bindJointAxis","writable","opaque","shininess","distance","skeletons","time","instanceLights","skinWeights","links","boneInverse","zeroPosition","nodes","animations","ColladaLoader","images","source","type","wrapT","__proto__","instanceGeometries","target","cameras","library","transforms","joints","unit","vcount","falloffAngle","extra","specularMap","inputs","memberSyntax","mass","bindMatrix","kinematics","setJointValue","kinematicsScenes","limits","materialKeys","parameters","uvsNeedsFix","sampler","data","attachments","color","array","opacity","end","weight","stride","rigidBodies","constructor","scene","indices","channels","sid","material"]],"~:compiled-at",1630917515641,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$loaders$ColladaLoader.js\",\n\"lineCount\":111,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/loaders/ColladaLoader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$loaders$ColladaLoader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.ColladaLoader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _TGALoader = require(\\\"./TGALoader.js\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nvar ColladaLoader =\\n/*#__PURE__*/\\nfunction (_Loader) {\\n  _inherits(ColladaLoader, _Loader);\\n\\n  function ColladaLoader(manager) {\\n    _classCallCheck(this, ColladaLoader);\\n\\n    return _possibleConstructorReturn(this, _getPrototypeOf(ColladaLoader).call(this, manager));\\n  }\\n\\n  _createClass(ColladaLoader, [{\\n    key: \\\"load\\\",\\n    value: function load(url, onLoad, onProgress, onError) {\\n      var scope = this;\\n      var path = scope.path === '' ? _three.LoaderUtils.extractUrlBase(url) : scope.path;\\n      var loader = new _three.FileLoader(scope.manager);\\n      loader.setPath(scope.path);\\n      loader.setRequestHeader(scope.requestHeader);\\n      loader.setWithCredentials(scope.withCredentials);\\n      loader.load(url, function (text) {\\n        try {\\n          onLoad(scope.parse(text, path));\\n        } catch (e) {\\n          if (onError) {\\n            onError(e);\\n          } else {\\n            console.error(e);\\n          }\\n\\n          scope.manager.itemError(url);\\n        }\\n      }, onProgress, onError);\\n    }\\n  }, {\\n    key: \\\"parse\\\",\\n    value: function parse(text, path) {\\n      function getElementsByTagName(xml, name) {\\n        // Non recursive xml.getElementsByTagName() ...\\n        var array = [];\\n        var childNodes = xml.childNodes;\\n\\n        for (var i = 0, l = childNodes.length; i < l; i++) {\\n          var child = childNodes[i];\\n\\n          if (child.nodeName === name) {\\n            array.push(child);\\n          }\\n        }\\n\\n        return array;\\n      }\\n\\n      function parseStrings(text) {\\n        if (text.length === 0) return [];\\n        var parts = text.trim().split(/\\\\s+/);\\n        var array = new Array(parts.length);\\n\\n        for (var i = 0, l = parts.length; i < l; i++) {\\n          array[i] = parts[i];\\n        }\\n\\n        return array;\\n      }\\n\\n      function parseFloats(text) {\\n        if (text.length === 0) return [];\\n        var parts = text.trim().split(/\\\\s+/);\\n        var array = new Array(parts.length);\\n\\n        for (var i = 0, l = parts.length; i < l; i++) {\\n          array[i] = parseFloat(parts[i]);\\n        }\\n\\n        return array;\\n      }\\n\\n      function parseInts(text) {\\n        if (text.length === 0) return [];\\n        var parts = text.trim().split(/\\\\s+/);\\n        var array = new Array(parts.length);\\n\\n        for (var i = 0, l = parts.length; i < l; i++) {\\n          array[i] = parseInt(parts[i]);\\n        }\\n\\n        return array;\\n      }\\n\\n      function parseId(text) {\\n        return text.substring(1);\\n      }\\n\\n      function generateId() {\\n        return 'three_default_' + count++;\\n      }\\n\\n      function isEmpty(object) {\\n        return Object.keys(object).length === 0;\\n      } // asset\\n\\n\\n      function parseAsset(xml) {\\n        return {\\n          unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\\n          upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\\n        };\\n      }\\n\\n      function parseAssetUnit(xml) {\\n        if (xml !== undefined && xml.hasAttribute('meter') === true) {\\n          return parseFloat(xml.getAttribute('meter'));\\n        } else {\\n          return 1; // default 1 meter\\n        }\\n      }\\n\\n      function parseAssetUpAxis(xml) {\\n        return xml !== undefined ? xml.textContent : 'Y_UP';\\n      } // library\\n\\n\\n      function parseLibrary(xml, libraryName, nodeName, parser) {\\n        var library = getElementsByTagName(xml, libraryName)[0];\\n\\n        if (library !== undefined) {\\n          var elements = getElementsByTagName(library, nodeName);\\n\\n          for (var i = 0; i < elements.length; i++) {\\n            parser(elements[i]);\\n          }\\n        }\\n      }\\n\\n      function buildLibrary(data, builder) {\\n        for (var name in data) {\\n          var object = data[name];\\n          object.build = builder(data[name]);\\n        }\\n      } // get\\n\\n\\n      function getBuild(data, builder) {\\n        if (data.build !== undefined) return data.build;\\n        data.build = builder(data);\\n        return data.build;\\n      } // animation\\n\\n\\n      function parseAnimation(xml) {\\n        var data = {\\n          sources: {},\\n          samplers: {},\\n          channels: {}\\n        };\\n        var hasChildren = false;\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n          var id = void 0;\\n\\n          switch (child.nodeName) {\\n            case 'source':\\n              id = child.getAttribute('id');\\n              data.sources[id] = parseSource(child);\\n              break;\\n\\n            case 'sampler':\\n              id = child.getAttribute('id');\\n              data.samplers[id] = parseAnimationSampler(child);\\n              break;\\n\\n            case 'channel':\\n              id = child.getAttribute('target');\\n              data.channels[id] = parseAnimationChannel(child);\\n              break;\\n\\n            case 'animation':\\n              // hierarchy of related animations\\n              parseAnimation(child);\\n              hasChildren = true;\\n              break;\\n\\n            default:\\n              console.log(child);\\n          }\\n        }\\n\\n        if (hasChildren === false) {\\n          // since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\\n          library.animations[xml.getAttribute('id') || _three.MathUtils.generateUUID()] = data;\\n        }\\n      }\\n\\n      function parseAnimationSampler(xml) {\\n        var data = {\\n          inputs: {}\\n        };\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'input':\\n              var id = parseId(child.getAttribute('source'));\\n              var semantic = child.getAttribute('semantic');\\n              data.inputs[semantic] = id;\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseAnimationChannel(xml) {\\n        var data = {};\\n        var target = xml.getAttribute('target'); // parsing SID Addressing Syntax\\n\\n        var parts = target.split('/');\\n        var id = parts.shift();\\n        var sid = parts.shift(); // check selection syntax\\n\\n        var arraySyntax = sid.indexOf('(') !== -1;\\n        var memberSyntax = sid.indexOf('.') !== -1;\\n\\n        if (memberSyntax) {\\n          //  member selection access\\n          parts = sid.split('.');\\n          sid = parts.shift();\\n          data.member = parts.shift();\\n        } else if (arraySyntax) {\\n          // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\\n          var indices = sid.split('(');\\n          sid = indices.shift();\\n\\n          for (var i = 0; i < indices.length; i++) {\\n            indices[i] = parseInt(indices[i].replace(/\\\\)/, ''));\\n          }\\n\\n          data.indices = indices;\\n        }\\n\\n        data.id = id;\\n        data.sid = sid;\\n        data.arraySyntax = arraySyntax;\\n        data.memberSyntax = memberSyntax;\\n        data.sampler = parseId(xml.getAttribute('source'));\\n        return data;\\n      }\\n\\n      function buildAnimation(data) {\\n        var tracks = [];\\n        var channels = data.channels;\\n        var samplers = data.samplers;\\n        var sources = data.sources;\\n\\n        for (var target in channels) {\\n          if (channels.hasOwnProperty(target)) {\\n            var channel = channels[target];\\n            var sampler = samplers[channel.sampler];\\n            var inputId = sampler.inputs.INPUT;\\n            var outputId = sampler.inputs.OUTPUT;\\n            var inputSource = sources[inputId];\\n            var outputSource = sources[outputId];\\n            var animation = buildAnimationChannel(channel, inputSource, outputSource);\\n            createKeyframeTracks(animation, tracks);\\n          }\\n        }\\n\\n        return tracks;\\n      }\\n\\n      function getAnimation(id) {\\n        return getBuild(library.animations[id], buildAnimation);\\n      }\\n\\n      function buildAnimationChannel(channel, inputSource, outputSource) {\\n        var node = library.nodes[channel.id];\\n        var object3D = getNode(node.id);\\n        var transform = node.transforms[channel.sid];\\n        var defaultMatrix = node.matrix.clone().transpose();\\n        var time, stride;\\n        var i, il, j, jl;\\n        var data = {}; // the collada spec allows the animation of data in various ways.\\n        // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\\n\\n        switch (transform) {\\n          case 'matrix':\\n            for (i = 0, il = inputSource.array.length; i < il; i++) {\\n              time = inputSource.array[i];\\n              stride = i * outputSource.stride;\\n              if (data[time] === undefined) data[time] = {};\\n\\n              if (channel.arraySyntax === true) {\\n                var value = outputSource.array[stride];\\n                var index = channel.indices[0] + 4 * channel.indices[1];\\n                data[time][index] = value;\\n              } else {\\n                for (j = 0, jl = outputSource.stride; j < jl; j++) {\\n                  data[time][j] = outputSource.array[stride + j];\\n                }\\n              }\\n            }\\n\\n            break;\\n\\n          case 'translate':\\n            console.warn('THREE.ColladaLoader: Animation transform type \\\"%s\\\" not yet implemented.', transform);\\n            break;\\n\\n          case 'rotate':\\n            console.warn('THREE.ColladaLoader: Animation transform type \\\"%s\\\" not yet implemented.', transform);\\n            break;\\n\\n          case 'scale':\\n            console.warn('THREE.ColladaLoader: Animation transform type \\\"%s\\\" not yet implemented.', transform);\\n            break;\\n        }\\n\\n        var keyframes = prepareAnimationData(data, defaultMatrix);\\n        var animation = {\\n          name: object3D.uuid,\\n          keyframes: keyframes\\n        };\\n        return animation;\\n      }\\n\\n      function prepareAnimationData(data, defaultMatrix) {\\n        var keyframes = []; // transfer data into a sortable array\\n\\n        for (var time in data) {\\n          keyframes.push({\\n            time: parseFloat(time),\\n            value: data[time]\\n          });\\n        } // ensure keyframes are sorted by time\\n\\n\\n        keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\\n\\n        for (var i = 0; i < 16; i++) {\\n          transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\\n        }\\n\\n        return keyframes; // array sort function\\n\\n        function ascending(a, b) {\\n          return a.time - b.time;\\n        }\\n      }\\n\\n      var position = new _three.Vector3();\\n      var scale = new _three.Vector3();\\n      var quaternion = new _three.Quaternion();\\n\\n      function createKeyframeTracks(animation, tracks) {\\n        var keyframes = animation.keyframes;\\n        var name = animation.name;\\n        var times = [];\\n        var positionData = [];\\n        var quaternionData = [];\\n        var scaleData = [];\\n\\n        for (var i = 0, l = keyframes.length; i < l; i++) {\\n          var keyframe = keyframes[i];\\n          var time = keyframe.time;\\n          var value = keyframe.value;\\n          matrix.fromArray(value).transpose();\\n          matrix.decompose(position, quaternion, scale);\\n          times.push(time);\\n          positionData.push(position.x, position.y, position.z);\\n          quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\\n          scaleData.push(scale.x, scale.y, scale.z);\\n        }\\n\\n        if (positionData.length > 0) tracks.push(new _three.VectorKeyframeTrack(name + '.position', times, positionData));\\n\\n        if (quaternionData.length > 0) {\\n          tracks.push(new _three.QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\\n        }\\n\\n        if (scaleData.length > 0) tracks.push(new _three.VectorKeyframeTrack(name + '.scale', times, scaleData));\\n        return tracks;\\n      }\\n\\n      function transformAnimationData(keyframes, property, defaultValue) {\\n        var keyframe;\\n        var empty = true;\\n        var i, l; // check, if values of a property are missing in our keyframes\\n\\n        for (i = 0, l = keyframes.length; i < l; i++) {\\n          keyframe = keyframes[i];\\n\\n          if (keyframe.value[property] === undefined) {\\n            keyframe.value[property] = null; // mark as missing\\n          } else {\\n            empty = false;\\n          }\\n        }\\n\\n        if (empty === true) {\\n          // no values at all, so we set a default value\\n          for (i = 0, l = keyframes.length; i < l; i++) {\\n            keyframe = keyframes[i];\\n            keyframe.value[property] = defaultValue;\\n          }\\n        } else {\\n          // filling gaps\\n          createMissingKeyframes(keyframes, property);\\n        }\\n      }\\n\\n      function createMissingKeyframes(keyframes, property) {\\n        var prev, next;\\n\\n        for (var i = 0, l = keyframes.length; i < l; i++) {\\n          var keyframe = keyframes[i];\\n\\n          if (keyframe.value[property] === null) {\\n            prev = getPrev(keyframes, i, property);\\n            next = getNext(keyframes, i, property);\\n\\n            if (prev === null) {\\n              keyframe.value[property] = next.value[property];\\n              continue;\\n            }\\n\\n            if (next === null) {\\n              keyframe.value[property] = prev.value[property];\\n              continue;\\n            }\\n\\n            interpolate(keyframe, prev, next, property);\\n          }\\n        }\\n      }\\n\\n      function getPrev(keyframes, i, property) {\\n        while (i >= 0) {\\n          var keyframe = keyframes[i];\\n          if (keyframe.value[property] !== null) return keyframe;\\n          i--;\\n        }\\n\\n        return null;\\n      }\\n\\n      function getNext(keyframes, i, property) {\\n        while (i < keyframes.length) {\\n          var keyframe = keyframes[i];\\n          if (keyframe.value[property] !== null) return keyframe;\\n          i++;\\n        }\\n\\n        return null;\\n      }\\n\\n      function interpolate(key, prev, next, property) {\\n        if (next.time - prev.time === 0) {\\n          key.value[property] = prev.value[property];\\n          return;\\n        }\\n\\n        key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\\n      } // animation clips\\n\\n\\n      function parseAnimationClip(xml) {\\n        var data = {\\n          name: xml.getAttribute('id') || 'default',\\n          start: parseFloat(xml.getAttribute('start') || 0),\\n          end: parseFloat(xml.getAttribute('end') || 0),\\n          animations: []\\n        };\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'instance_animation':\\n              data.animations.push(parseId(child.getAttribute('url')));\\n              break;\\n          }\\n        }\\n\\n        library.clips[xml.getAttribute('id')] = data;\\n      }\\n\\n      function buildAnimationClip(data) {\\n        var tracks = [];\\n        var name = data.name;\\n        var duration = data.end - data.start || -1;\\n        var animations = data.animations;\\n\\n        for (var i = 0, il = animations.length; i < il; i++) {\\n          var animationTracks = getAnimation(animations[i]);\\n\\n          for (var j = 0, jl = animationTracks.length; j < jl; j++) {\\n            tracks.push(animationTracks[j]);\\n          }\\n        }\\n\\n        return new _three.AnimationClip(name, duration, tracks);\\n      }\\n\\n      function getAnimationClip(id) {\\n        return getBuild(library.clips[id], buildAnimationClip);\\n      } // controller\\n\\n\\n      function parseController(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'skin':\\n              // there is exactly one skin per controller\\n              data.id = parseId(child.getAttribute('source'));\\n              data.skin = parseSkin(child);\\n              break;\\n\\n            case 'morph':\\n              data.id = parseId(child.getAttribute('source'));\\n              console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\\n              break;\\n          }\\n        }\\n\\n        library.controllers[xml.getAttribute('id')] = data;\\n      }\\n\\n      function parseSkin(xml) {\\n        var data = {\\n          sources: {}\\n        };\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'bind_shape_matrix':\\n              data.bindShapeMatrix = parseFloats(child.textContent);\\n              break;\\n\\n            case 'source':\\n              var id = child.getAttribute('id');\\n              data.sources[id] = parseSource(child);\\n              break;\\n\\n            case 'joints':\\n              data.joints = parseJoints(child);\\n              break;\\n\\n            case 'vertex_weights':\\n              data.vertexWeights = parseVertexWeights(child);\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseJoints(xml) {\\n        var data = {\\n          inputs: {}\\n        };\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'input':\\n              var semantic = child.getAttribute('semantic');\\n              var id = parseId(child.getAttribute('source'));\\n              data.inputs[semantic] = id;\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseVertexWeights(xml) {\\n        var data = {\\n          inputs: {}\\n        };\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'input':\\n              var semantic = child.getAttribute('semantic');\\n              var id = parseId(child.getAttribute('source'));\\n              var offset = parseInt(child.getAttribute('offset'));\\n              data.inputs[semantic] = {\\n                id: id,\\n                offset: offset\\n              };\\n              break;\\n\\n            case 'vcount':\\n              data.vcount = parseInts(child.textContent);\\n              break;\\n\\n            case 'v':\\n              data.v = parseInts(child.textContent);\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function buildController(data) {\\n        var build = {\\n          id: data.id\\n        };\\n        var geometry = library.geometries[build.id];\\n\\n        if (data.skin !== undefined) {\\n          build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\\n\\n          geometry.sources.skinIndices = build.skin.indices;\\n          geometry.sources.skinWeights = build.skin.weights;\\n        }\\n\\n        return build;\\n      }\\n\\n      function buildSkin(data) {\\n        var BONE_LIMIT = 4;\\n        var build = {\\n          joints: [],\\n          // this must be an array to preserve the joint order\\n          indices: {\\n            array: [],\\n            stride: BONE_LIMIT\\n          },\\n          weights: {\\n            array: [],\\n            stride: BONE_LIMIT\\n          }\\n        };\\n        var sources = data.sources;\\n        var vertexWeights = data.vertexWeights;\\n        var vcount = vertexWeights.vcount;\\n        var v = vertexWeights.v;\\n        var jointOffset = vertexWeights.inputs.JOINT.offset;\\n        var weightOffset = vertexWeights.inputs.WEIGHT.offset;\\n        var jointSource = data.sources[data.joints.inputs.JOINT];\\n        var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\\n        var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\\n        var stride = 0;\\n        var i, j, l; // procces skin data for each vertex\\n\\n        for (i = 0, l = vcount.length; i < l; i++) {\\n          var jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\\n\\n          var vertexSkinData = [];\\n\\n          for (j = 0; j < jointCount; j++) {\\n            var skinIndex = v[stride + jointOffset];\\n            var weightId = v[stride + weightOffset];\\n            var skinWeight = weights[weightId];\\n            vertexSkinData.push({\\n              index: skinIndex,\\n              weight: skinWeight\\n            });\\n            stride += 2;\\n          } // we sort the joints in descending order based on the weights.\\n          // this ensures, we only procced the most important joints of the vertex\\n\\n\\n          vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\\n          // the order of the skin data matches the order of vertices\\n\\n          for (j = 0; j < BONE_LIMIT; j++) {\\n            var d = vertexSkinData[j];\\n\\n            if (d !== undefined) {\\n              build.indices.array.push(d.index);\\n              build.weights.array.push(d.weight);\\n            } else {\\n              build.indices.array.push(0);\\n              build.weights.array.push(0);\\n            }\\n          }\\n        } // setup bind matrix\\n\\n\\n        if (data.bindShapeMatrix) {\\n          build.bindMatrix = new _three.Matrix4().fromArray(data.bindShapeMatrix).transpose();\\n        } else {\\n          build.bindMatrix = new _three.Matrix4().identity();\\n        } // process bones and inverse bind matrix data\\n\\n\\n        for (i = 0, l = jointSource.array.length; i < l; i++) {\\n          var name = jointSource.array[i];\\n          var boneInverse = new _three.Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\\n          build.joints.push({\\n            name: name,\\n            boneInverse: boneInverse\\n          });\\n        }\\n\\n        return build; // array sort function\\n\\n        function descending(a, b) {\\n          return b.weight - a.weight;\\n        }\\n      }\\n\\n      function getController(id) {\\n        return getBuild(library.controllers[id], buildController);\\n      } // image\\n\\n\\n      function parseImage(xml) {\\n        var data = {\\n          init_from: getElementsByTagName(xml, 'init_from')[0].textContent\\n        };\\n        library.images[xml.getAttribute('id')] = data;\\n      }\\n\\n      function buildImage(data) {\\n        if (data.build !== undefined) return data.build;\\n        return data.init_from;\\n      }\\n\\n      function getImage(id) {\\n        var data = library.images[id];\\n\\n        if (data !== undefined) {\\n          return getBuild(data, buildImage);\\n        }\\n\\n        console.warn(\\\"THREE.ColladaLoader: Couldn't find image with ID:\\\", id);\\n        return null;\\n      } // effect\\n\\n\\n      function parseEffect(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'profile_COMMON':\\n              data.profile = parseEffectProfileCOMMON(child);\\n              break;\\n          }\\n        }\\n\\n        library.effects[xml.getAttribute('id')] = data;\\n      }\\n\\n      function parseEffectProfileCOMMON(xml) {\\n        var data = {\\n          surfaces: {},\\n          samplers: {}\\n        };\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'newparam':\\n              parseEffectNewparam(child, data);\\n              break;\\n\\n            case 'technique':\\n              data.technique = parseEffectTechnique(child);\\n              break;\\n\\n            case 'extra':\\n              data.extra = parseEffectExtra(child);\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseEffectNewparam(xml, data) {\\n        var sid = xml.getAttribute('sid');\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'surface':\\n              data.surfaces[sid] = parseEffectSurface(child);\\n              break;\\n\\n            case 'sampler2D':\\n              data.samplers[sid] = parseEffectSampler(child);\\n              break;\\n          }\\n        }\\n      }\\n\\n      function parseEffectSurface(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'init_from':\\n              data.init_from = child.textContent;\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseEffectSampler(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'source':\\n              data.source = child.textContent;\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseEffectTechnique(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'constant':\\n            case 'lambert':\\n            case 'blinn':\\n            case 'phong':\\n              data.type = child.nodeName;\\n              data.parameters = parseEffectParameters(child);\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseEffectParameters(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'emission':\\n            case 'diffuse':\\n            case 'specular':\\n            case 'bump':\\n            case 'ambient':\\n            case 'shininess':\\n            case 'transparency':\\n              data[child.nodeName] = parseEffectParameter(child);\\n              break;\\n\\n            case 'transparent':\\n              data[child.nodeName] = {\\n                opaque: child.getAttribute('opaque'),\\n                data: parseEffectParameter(child)\\n              };\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseEffectParameter(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'color':\\n              data[child.nodeName] = parseFloats(child.textContent);\\n              break;\\n\\n            case 'float':\\n              data[child.nodeName] = parseFloat(child.textContent);\\n              break;\\n\\n            case 'texture':\\n              data[child.nodeName] = {\\n                id: child.getAttribute('texture'),\\n                extra: parseEffectParameterTexture(child)\\n              };\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseEffectParameterTexture(xml) {\\n        var data = {\\n          technique: {}\\n        };\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'extra':\\n              parseEffectParameterTextureExtra(child, data);\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseEffectParameterTextureExtra(xml, data) {\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'technique':\\n              parseEffectParameterTextureExtraTechnique(child, data);\\n              break;\\n          }\\n        }\\n      }\\n\\n      function parseEffectParameterTextureExtraTechnique(xml, data) {\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'repeatU':\\n            case 'repeatV':\\n            case 'offsetU':\\n            case 'offsetV':\\n              data.technique[child.nodeName] = parseFloat(child.textContent);\\n              break;\\n\\n            case 'wrapU':\\n            case 'wrapV':\\n              // some files have values for wrapU/wrapV which become NaN via parseInt\\n              if (child.textContent.toUpperCase() === 'TRUE') {\\n                data.technique[child.nodeName] = 1;\\n              } else if (child.textContent.toUpperCase() === 'FALSE') {\\n                data.technique[child.nodeName] = 0;\\n              } else {\\n                data.technique[child.nodeName] = parseInt(child.textContent);\\n              }\\n\\n              break;\\n          }\\n        }\\n      }\\n\\n      function parseEffectExtra(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'technique':\\n              data.technique = parseEffectExtraTechnique(child);\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseEffectExtraTechnique(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'double_sided':\\n              data[child.nodeName] = parseInt(child.textContent);\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function buildEffect(data) {\\n        return data;\\n      }\\n\\n      function getEffect(id) {\\n        return getBuild(library.effects[id], buildEffect);\\n      } // material\\n\\n\\n      function parseMaterial(xml) {\\n        var data = {\\n          name: xml.getAttribute('name')\\n        };\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'instance_effect':\\n              data.url = parseId(child.getAttribute('url'));\\n              break;\\n          }\\n        }\\n\\n        library.materials[xml.getAttribute('id')] = data;\\n      }\\n\\n      function getTextureLoader(image) {\\n        var loader;\\n        var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\\n\\n        extension = extension.toLowerCase();\\n\\n        switch (extension) {\\n          case 'tga':\\n            loader = tgaLoader;\\n            break;\\n\\n          default:\\n            loader = textureLoader;\\n        }\\n\\n        return loader;\\n      }\\n\\n      function buildMaterial(data) {\\n        var effect = getEffect(data.url);\\n        var technique = effect.profile.technique;\\n        var extra = effect.profile.extra;\\n        var material;\\n\\n        switch (technique.type) {\\n          case 'phong':\\n          case 'blinn':\\n            material = new _three.MeshPhongMaterial();\\n            break;\\n\\n          case 'lambert':\\n            material = new _three.MeshLambertMaterial();\\n            break;\\n\\n          default:\\n            material = new _three.MeshBasicMaterial();\\n            break;\\n        }\\n\\n        material.name = data.name || '';\\n\\n        function getTexture(textureObject) {\\n          var sampler = effect.profile.samplers[textureObject.id];\\n          var image = null; // get image\\n\\n          if (sampler !== undefined) {\\n            var surface = effect.profile.surfaces[sampler.source];\\n            image = getImage(surface.init_from);\\n          } else {\\n            console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\\n            image = getImage(textureObject.id);\\n          } // create texture if image is avaiable\\n\\n\\n          if (image !== null) {\\n            var loader = getTextureLoader(image);\\n\\n            if (loader !== undefined) {\\n              var texture = loader.load(image);\\n              var _extra = textureObject.extra;\\n\\n              if (_extra !== undefined && _extra.technique !== undefined && isEmpty(_extra.technique) === false) {\\n                var _technique = _extra.technique;\\n                texture.wrapS = _technique.wrapU ? _three.RepeatWrapping : _three.ClampToEdgeWrapping;\\n                texture.wrapT = _technique.wrapV ? _three.RepeatWrapping : _three.ClampToEdgeWrapping;\\n                texture.offset.set(_technique.offsetU || 0, _technique.offsetV || 0);\\n                texture.repeat.set(_technique.repeatU || 1, _technique.repeatV || 1);\\n              } else {\\n                texture.wrapS = _three.RepeatWrapping;\\n                texture.wrapT = _three.RepeatWrapping;\\n              }\\n\\n              return texture;\\n            } else {\\n              console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\\n              return null;\\n            }\\n          } else {\\n            console.warn(\\\"THREE.ColladaLoader: Couldn't create texture with ID:\\\", textureObject.id);\\n            return null;\\n          }\\n        }\\n\\n        var parameters = technique.parameters;\\n\\n        for (var key in parameters) {\\n          var parameter = parameters[key];\\n\\n          switch (key) {\\n            case 'diffuse':\\n              if (parameter.color) material.color.fromArray(parameter.color);\\n              if (parameter.texture) material.map = getTexture(parameter.texture);\\n              break;\\n\\n            case 'specular':\\n              if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\\n              if (parameter.texture) material.specularMap = getTexture(parameter.texture);\\n              break;\\n\\n            case 'bump':\\n              if (parameter.texture) material.normalMap = getTexture(parameter.texture);\\n              break;\\n\\n            case 'ambient':\\n              if (parameter.texture) material.lightMap = getTexture(parameter.texture);\\n              break;\\n\\n            case 'shininess':\\n              if (parameter[\\\"float\\\"] && material.shininess) material.shininess = parameter[\\\"float\\\"];\\n              break;\\n\\n            case 'emission':\\n              if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\\n              if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);\\n              break;\\n          }\\n        } //\\n\\n\\n        var transparent = parameters['transparent'];\\n        var transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\\n\\n        if (transparency === undefined && transparent) {\\n          transparency = {\\n            \\\"float\\\": 1\\n          };\\n        } // <transparent> does not exist but <transparency>\\n\\n\\n        if (transparent === undefined && transparency) {\\n          transparent = {\\n            opaque: 'A_ONE',\\n            data: {\\n              color: [1, 1, 1, 1]\\n            }\\n          };\\n        }\\n\\n        if (transparent && transparency) {\\n          // handle case if a texture exists but no color\\n          if (transparent.data.texture) {\\n            // we do not set an alpha map (see #13792)\\n            material.transparent = true;\\n          } else {\\n            var color = transparent.data.color;\\n\\n            switch (transparent.opaque) {\\n              case 'A_ONE':\\n                material.opacity = color[3] * transparency[\\\"float\\\"];\\n                break;\\n\\n              case 'RGB_ZERO':\\n                material.opacity = 1 - color[0] * transparency[\\\"float\\\"];\\n                break;\\n\\n              case 'A_ZERO':\\n                material.opacity = 1 - color[3] * transparency[\\\"float\\\"];\\n                break;\\n\\n              case 'RGB_ONE':\\n                material.opacity = color[0] * transparency[\\\"float\\\"];\\n                break;\\n\\n              default:\\n                console.warn('THREE.ColladaLoader: Invalid opaque type \\\"%s\\\" of transparent tag.', transparent.opaque);\\n            }\\n\\n            if (material.opacity < 1) material.transparent = true;\\n          }\\n        } //\\n\\n\\n        if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\\n          material.side = _three.DoubleSide;\\n        }\\n\\n        return material;\\n      }\\n\\n      function getMaterial(id) {\\n        return getBuild(library.materials[id], buildMaterial);\\n      } // camera\\n\\n\\n      function parseCamera(xml) {\\n        var data = {\\n          name: xml.getAttribute('name')\\n        };\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'optics':\\n              data.optics = parseCameraOptics(child);\\n              break;\\n          }\\n        }\\n\\n        library.cameras[xml.getAttribute('id')] = data;\\n      }\\n\\n      function parseCameraOptics(xml) {\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n\\n          switch (child.nodeName) {\\n            case 'technique_common':\\n              return parseCameraTechnique(child);\\n          }\\n        }\\n\\n        return {};\\n      }\\n\\n      function parseCameraTechnique(xml) {\\n        var data = {};\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n\\n          switch (child.nodeName) {\\n            case 'perspective':\\n            case 'orthographic':\\n              data.technique = child.nodeName;\\n              data.parameters = parseCameraParameters(child);\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseCameraParameters(xml) {\\n        var data = {};\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n\\n          switch (child.nodeName) {\\n            case 'xfov':\\n            case 'yfov':\\n            case 'xmag':\\n            case 'ymag':\\n            case 'znear':\\n            case 'zfar':\\n            case 'aspect_ratio':\\n              data[child.nodeName] = parseFloat(child.textContent);\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function buildCamera(data) {\\n        var camera;\\n\\n        switch (data.optics.technique) {\\n          case 'perspective':\\n            camera = new _three.PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\\n            break;\\n\\n          case 'orthographic':\\n            var ymag = data.optics.parameters.ymag;\\n            var xmag = data.optics.parameters.xmag;\\n            var aspectRatio = data.optics.parameters.aspect_ratio;\\n            xmag = xmag === undefined ? ymag * aspectRatio : xmag;\\n            ymag = ymag === undefined ? xmag / aspectRatio : ymag;\\n            xmag *= 0.5;\\n            ymag *= 0.5;\\n            camera = new _three.OrthographicCamera(-xmag, xmag, ymag, -ymag, // left, right, top, bottom\\n            data.optics.parameters.znear, data.optics.parameters.zfar);\\n            break;\\n\\n          default:\\n            camera = new _three.PerspectiveCamera();\\n            break;\\n        }\\n\\n        camera.name = data.name || '';\\n        return camera;\\n      }\\n\\n      function getCamera(id) {\\n        var data = library.cameras[id];\\n\\n        if (data !== undefined) {\\n          return getBuild(data, buildCamera);\\n        }\\n\\n        console.warn(\\\"THREE.ColladaLoader: Couldn't find camera with ID:\\\", id);\\n        return null;\\n      } // light\\n\\n\\n      function parseLight(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'technique_common':\\n              data = parseLightTechnique(child);\\n              break;\\n          }\\n        }\\n\\n        library.lights[xml.getAttribute('id')] = data;\\n      }\\n\\n      function parseLightTechnique(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'directional':\\n            case 'point':\\n            case 'spot':\\n            case 'ambient':\\n              data.technique = child.nodeName;\\n              data.parameters = parseLightParameters(child);\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseLightParameters(xml) {\\n        var data = {};\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'color':\\n              var array = parseFloats(child.textContent);\\n              data.color = new _three.Color().fromArray(array);\\n              break;\\n\\n            case 'falloff_angle':\\n              data.falloffAngle = parseFloat(child.textContent);\\n              break;\\n\\n            case 'quadratic_attenuation':\\n              var f = parseFloat(child.textContent);\\n              data.distance = f ? Math.sqrt(1 / f) : 0;\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function buildLight(data) {\\n        var light;\\n\\n        switch (data.technique) {\\n          case 'directional':\\n            light = new _three.DirectionalLight();\\n            break;\\n\\n          case 'point':\\n            light = new _three.PointLight();\\n            break;\\n\\n          case 'spot':\\n            light = new _three.SpotLight();\\n            break;\\n\\n          case 'ambient':\\n            light = new _three.AmbientLight();\\n            break;\\n        }\\n\\n        if (data.parameters.color) light.color.copy(data.parameters.color);\\n        if (data.parameters.distance) light.distance = data.parameters.distance;\\n        return light;\\n      }\\n\\n      function getLight(id) {\\n        var data = library.lights[id];\\n\\n        if (data !== undefined) {\\n          return getBuild(data, buildLight);\\n        }\\n\\n        console.warn(\\\"THREE.ColladaLoader: Couldn't find light with ID:\\\", id);\\n        return null;\\n      } // geometry\\n\\n\\n      function parseGeometry(xml) {\\n        var data = {\\n          name: xml.getAttribute('name'),\\n          sources: {},\\n          vertices: {},\\n          primitives: []\\n        };\\n        var mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\\n\\n        if (mesh === undefined) return;\\n\\n        for (var i = 0; i < mesh.childNodes.length; i++) {\\n          var child = mesh.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n          var id = child.getAttribute('id');\\n\\n          switch (child.nodeName) {\\n            case 'source':\\n              data.sources[id] = parseSource(child);\\n              break;\\n\\n            case 'vertices':\\n              // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\\n              data.vertices = parseGeometryVertices(child);\\n              break;\\n\\n            case 'polygons':\\n              console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\\n              break;\\n\\n            case 'lines':\\n            case 'linestrips':\\n            case 'polylist':\\n            case 'triangles':\\n              data.primitives.push(parseGeometryPrimitive(child));\\n              break;\\n\\n            default:\\n              console.log(child);\\n          }\\n        }\\n\\n        library.geometries[xml.getAttribute('id')] = data;\\n      }\\n\\n      function parseSource(xml) {\\n        var data = {\\n          array: [],\\n          stride: 3\\n        };\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'float_array':\\n              data.array = parseFloats(child.textContent);\\n              break;\\n\\n            case 'Name_array':\\n              data.array = parseStrings(child.textContent);\\n              break;\\n\\n            case 'technique_common':\\n              var accessor = getElementsByTagName(child, 'accessor')[0];\\n\\n              if (accessor !== undefined) {\\n                data.stride = parseInt(accessor.getAttribute('stride'));\\n              }\\n\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseGeometryVertices(xml) {\\n        var data = {};\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n          data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseGeometryPrimitive(xml) {\\n        var primitive = {\\n          type: xml.nodeName,\\n          material: xml.getAttribute('material'),\\n          count: parseInt(xml.getAttribute('count')),\\n          inputs: {},\\n          stride: 0,\\n          hasUV: false\\n        };\\n\\n        for (var i = 0, l = xml.childNodes.length; i < l; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'input':\\n              var id = parseId(child.getAttribute('source'));\\n              var semantic = child.getAttribute('semantic');\\n              var offset = parseInt(child.getAttribute('offset'));\\n              var set = parseInt(child.getAttribute('set'));\\n              var inputname = set > 0 ? semantic + set : semantic;\\n              primitive.inputs[inputname] = {\\n                id: id,\\n                offset: offset\\n              };\\n              primitive.stride = Math.max(primitive.stride, offset + 1);\\n              if (semantic === 'TEXCOORD') primitive.hasUV = true;\\n              break;\\n\\n            case 'vcount':\\n              primitive.vcount = parseInts(child.textContent);\\n              break;\\n\\n            case 'p':\\n              primitive.p = parseInts(child.textContent);\\n              break;\\n          }\\n        }\\n\\n        return primitive;\\n      }\\n\\n      function groupPrimitives(primitives) {\\n        var build = {};\\n\\n        for (var i = 0; i < primitives.length; i++) {\\n          var primitive = primitives[i];\\n          if (build[primitive.type] === undefined) build[primitive.type] = [];\\n          build[primitive.type].push(primitive);\\n        }\\n\\n        return build;\\n      }\\n\\n      function checkUVCoordinates(primitives) {\\n        var count = 0;\\n\\n        for (var i = 0, l = primitives.length; i < l; i++) {\\n          var primitive = primitives[i];\\n\\n          if (primitive.hasUV === true) {\\n            count++;\\n          }\\n        }\\n\\n        if (count > 0 && count < primitives.length) {\\n          primitives.uvsNeedsFix = true;\\n        }\\n      }\\n\\n      function buildGeometry(data) {\\n        var build = {};\\n        var sources = data.sources;\\n        var vertices = data.vertices;\\n        var primitives = data.primitives;\\n        if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\\n        // first, we group all primitives by their type\\n\\n        var groupedPrimitives = groupPrimitives(primitives);\\n\\n        for (var type in groupedPrimitives) {\\n          var primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\\n\\n          checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\\n\\n          build[type] = buildGeometryType(primitiveType, sources, vertices);\\n        }\\n\\n        return build;\\n      }\\n\\n      function buildGeometryType(primitives, sources, vertices) {\\n        var build = {};\\n        var position = {\\n          array: [],\\n          stride: 0\\n        };\\n        var normal = {\\n          array: [],\\n          stride: 0\\n        };\\n        var uv = {\\n          array: [],\\n          stride: 0\\n        };\\n        var uv2 = {\\n          array: [],\\n          stride: 0\\n        };\\n        var color = {\\n          array: [],\\n          stride: 0\\n        };\\n        var skinIndex = {\\n          array: [],\\n          stride: 4\\n        };\\n        var skinWeight = {\\n          array: [],\\n          stride: 4\\n        };\\n        var geometry = new _three.BufferGeometry();\\n        var materialKeys = [];\\n        var start = 0;\\n\\n        for (var p = 0; p < primitives.length; p++) {\\n          var primitive = primitives[p];\\n          var inputs = primitive.inputs; // groups\\n\\n          var _count = 0;\\n\\n          switch (primitive.type) {\\n            case 'lines':\\n            case 'linestrips':\\n              _count = primitive.count * 2;\\n              break;\\n\\n            case 'triangles':\\n              _count = primitive.count * 3;\\n              break;\\n\\n            case 'polylist':\\n              for (var g = 0; g < primitive.count; g++) {\\n                var vc = primitive.vcount[g];\\n\\n                switch (vc) {\\n                  case 3:\\n                    _count += 3; // single triangle\\n\\n                    break;\\n\\n                  case 4:\\n                    _count += 6; // quad, subdivided into two triangles\\n\\n                    break;\\n\\n                  default:\\n                    _count += (vc - 2) * 3; // polylist with more than four vertices\\n\\n                    break;\\n                }\\n              }\\n\\n              break;\\n\\n            default:\\n              console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\\n          }\\n\\n          geometry.addGroup(start, _count, p);\\n          start += _count; // material\\n\\n          if (primitive.material) {\\n            materialKeys.push(primitive.material);\\n          } // geometry data\\n\\n\\n          for (var name in inputs) {\\n            var input = inputs[name];\\n\\n            switch (name) {\\n              case 'VERTEX':\\n                for (var key in vertices) {\\n                  var id = vertices[key];\\n\\n                  switch (key) {\\n                    case 'POSITION':\\n                      var prevLength = position.array.length;\\n                      buildGeometryData(primitive, sources[id], input.offset, position.array);\\n                      position.stride = sources[id].stride;\\n\\n                      if (sources.skinWeights && sources.skinIndices) {\\n                        buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\\n                        buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\\n                      } // see #3803\\n\\n\\n                      if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\\n                        var _count2 = (position.array.length - prevLength) / position.stride;\\n\\n                        for (var i = 0; i < _count2; i++) {\\n                          // fill missing uv coordinates\\n                          uv.array.push(0, 0);\\n                        }\\n                      }\\n\\n                      break;\\n\\n                    case 'NORMAL':\\n                      buildGeometryData(primitive, sources[id], input.offset, normal.array);\\n                      normal.stride = sources[id].stride;\\n                      break;\\n\\n                    case 'COLOR':\\n                      buildGeometryData(primitive, sources[id], input.offset, color.array);\\n                      color.stride = sources[id].stride;\\n                      break;\\n\\n                    case 'TEXCOORD':\\n                      buildGeometryData(primitive, sources[id], input.offset, uv.array);\\n                      uv.stride = sources[id].stride;\\n                      break;\\n\\n                    case 'TEXCOORD1':\\n                      buildGeometryData(primitive, sources[id], input.offset, uv2.array);\\n                      uv.stride = sources[id].stride;\\n                      break;\\n\\n                    default:\\n                      console.warn('THREE.ColladaLoader: Semantic \\\"%s\\\" not handled in geometry build process.', key);\\n                  }\\n                }\\n\\n                break;\\n\\n              case 'NORMAL':\\n                buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\\n                normal.stride = sources[input.id].stride;\\n                break;\\n\\n              case 'COLOR':\\n                buildGeometryData(primitive, sources[input.id], input.offset, color.array);\\n                color.stride = sources[input.id].stride;\\n                break;\\n\\n              case 'TEXCOORD':\\n                buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\\n                uv.stride = sources[input.id].stride;\\n                break;\\n\\n              case 'TEXCOORD1':\\n                buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\\n                uv2.stride = sources[input.id].stride;\\n                break;\\n            }\\n          }\\n        } // build geometry\\n\\n\\n        if (position.array.length > 0) {\\n          geometry.setAttribute('position', new _three.Float32BufferAttribute(position.array, position.stride));\\n        }\\n\\n        if (normal.array.length > 0) {\\n          geometry.setAttribute('normal', new _three.Float32BufferAttribute(normal.array, normal.stride));\\n        }\\n\\n        if (color.array.length > 0) geometry.setAttribute('color', new _three.Float32BufferAttribute(color.array, color.stride));\\n        if (uv.array.length > 0) geometry.setAttribute('uv', new _three.Float32BufferAttribute(uv.array, uv.stride));\\n        if (uv2.array.length > 0) geometry.setAttribute('uv2', new _three.Float32BufferAttribute(uv2.array, uv2.stride));\\n\\n        if (skinIndex.array.length > 0) {\\n          geometry.setAttribute('skinIndex', new _three.Float32BufferAttribute(skinIndex.array, skinIndex.stride));\\n        }\\n\\n        if (skinWeight.array.length > 0) {\\n          geometry.setAttribute('skinWeight', new _three.Float32BufferAttribute(skinWeight.array, skinWeight.stride));\\n        }\\n\\n        build.data = geometry;\\n        build.type = primitives[0].type;\\n        build.materialKeys = materialKeys;\\n        return build;\\n      }\\n\\n      function buildGeometryData(primitive, source, offset, array) {\\n        var indices = primitive.p;\\n        var stride = primitive.stride;\\n        var vcount = primitive.vcount;\\n\\n        function pushVector(i) {\\n          var index = indices[i + offset] * sourceStride;\\n          var length = index + sourceStride;\\n\\n          for (; index < length; index++) {\\n            array.push(sourceArray[index]);\\n          }\\n        }\\n\\n        var sourceArray = source.array;\\n        var sourceStride = source.stride;\\n\\n        if (primitive.vcount !== undefined) {\\n          var index = 0;\\n\\n          for (var i = 0, l = vcount.length; i < l; i++) {\\n            var _count3 = vcount[i];\\n\\n            if (_count3 === 4) {\\n              var a = index + stride * 0;\\n              var b = index + stride * 1;\\n              var c = index + stride * 2;\\n              var d = index + stride * 3;\\n              pushVector(a);\\n              pushVector(b);\\n              pushVector(d);\\n              pushVector(b);\\n              pushVector(c);\\n              pushVector(d);\\n            } else if (_count3 === 3) {\\n              var _a = index + stride * 0;\\n\\n              var _b = index + stride * 1;\\n\\n              var _c = index + stride * 2;\\n\\n              pushVector(_a);\\n              pushVector(_b);\\n              pushVector(_c);\\n            } else if (_count3 > 4) {\\n              for (var k = 1, kl = _count3 - 2; k <= kl; k++) {\\n                var _a2 = index + stride * 0;\\n\\n                var _b2 = index + stride * k;\\n\\n                var _c2 = index + stride * (k + 1);\\n\\n                pushVector(_a2);\\n                pushVector(_b2);\\n                pushVector(_c2);\\n              }\\n            }\\n\\n            index += stride * _count3;\\n          }\\n        } else {\\n          for (var _i = 0, _l = indices.length; _i < _l; _i += stride) {\\n            pushVector(_i);\\n          }\\n        }\\n      }\\n\\n      function getGeometry(id) {\\n        return getBuild(library.geometries[id], buildGeometry);\\n      } // kinematics\\n\\n\\n      function parseKinematicsModel(xml) {\\n        var data = {\\n          name: xml.getAttribute('name') || '',\\n          joints: {},\\n          links: []\\n        };\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'technique_common':\\n              parseKinematicsTechniqueCommon(child, data);\\n              break;\\n          }\\n        }\\n\\n        library.kinematicsModels[xml.getAttribute('id')] = data;\\n      }\\n\\n      function buildKinematicsModel(data) {\\n        if (data.build !== undefined) return data.build;\\n        return data;\\n      }\\n\\n      function getKinematicsModel(id) {\\n        return getBuild(library.kinematicsModels[id], buildKinematicsModel);\\n      }\\n\\n      function parseKinematicsTechniqueCommon(xml, data) {\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'joint':\\n              data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\\n              break;\\n\\n            case 'link':\\n              data.links.push(parseKinematicsLink(child));\\n              break;\\n          }\\n        }\\n      }\\n\\n      function parseKinematicsJoint(xml) {\\n        var data;\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'prismatic':\\n            case 'revolute':\\n              data = parseKinematicsJointParameter(child);\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseKinematicsJointParameter(xml) {\\n        var data = {\\n          sid: xml.getAttribute('sid'),\\n          name: xml.getAttribute('name') || '',\\n          axis: new _three.Vector3(),\\n          limits: {\\n            min: 0,\\n            max: 0\\n          },\\n          type: xml.nodeName,\\n          \\\"static\\\": false,\\n          zeroPosition: 0,\\n          middlePosition: 0\\n        };\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'axis':\\n              var array = parseFloats(child.textContent);\\n              data.axis.fromArray(array);\\n              break;\\n\\n            case 'limits':\\n              var max = child.getElementsByTagName('max')[0];\\n              var min = child.getElementsByTagName('min')[0];\\n              data.limits.max = parseFloat(max.textContent);\\n              data.limits.min = parseFloat(min.textContent);\\n              break;\\n          }\\n        } // if min is equal to or greater than max, consider the joint static\\n\\n\\n        if (data.limits.min >= data.limits.max) {\\n          data[\\\"static\\\"] = true;\\n        } // calculate middle position\\n\\n\\n        data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\\n        return data;\\n      }\\n\\n      function parseKinematicsLink(xml) {\\n        var data = {\\n          sid: xml.getAttribute('sid'),\\n          name: xml.getAttribute('name') || '',\\n          attachments: [],\\n          transforms: []\\n        };\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'attachment_full':\\n              data.attachments.push(parseKinematicsAttachment(child));\\n              break;\\n\\n            case 'matrix':\\n            case 'translate':\\n            case 'rotate':\\n              data.transforms.push(parseKinematicsTransform(child));\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseKinematicsAttachment(xml) {\\n        var data = {\\n          joint: xml.getAttribute('joint').split('/').pop(),\\n          transforms: [],\\n          links: []\\n        };\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'link':\\n              data.links.push(parseKinematicsLink(child));\\n              break;\\n\\n            case 'matrix':\\n            case 'translate':\\n            case 'rotate':\\n              data.transforms.push(parseKinematicsTransform(child));\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseKinematicsTransform(xml) {\\n        var data = {\\n          type: xml.nodeName\\n        };\\n        var array = parseFloats(xml.textContent);\\n\\n        switch (data.type) {\\n          case 'matrix':\\n            data.obj = new _three.Matrix4();\\n            data.obj.fromArray(array).transpose();\\n            break;\\n\\n          case 'translate':\\n            data.obj = new _three.Vector3();\\n            data.obj.fromArray(array);\\n            break;\\n\\n          case 'rotate':\\n            data.obj = new _three.Vector3();\\n            data.obj.fromArray(array);\\n            data.angle = _three.MathUtils.degToRad(array[3]);\\n            break;\\n        }\\n\\n        return data;\\n      } // physics\\n\\n\\n      function parsePhysicsModel(xml) {\\n        var data = {\\n          name: xml.getAttribute('name') || '',\\n          rigidBodies: {}\\n        };\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'rigid_body':\\n              data.rigidBodies[child.getAttribute('name')] = {};\\n              parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\\n              break;\\n          }\\n        }\\n\\n        library.physicsModels[xml.getAttribute('id')] = data;\\n      }\\n\\n      function parsePhysicsRigidBody(xml, data) {\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'technique_common':\\n              parsePhysicsTechniqueCommon(child, data);\\n              break;\\n          }\\n        }\\n      }\\n\\n      function parsePhysicsTechniqueCommon(xml, data) {\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'inertia':\\n              data.inertia = parseFloats(child.textContent);\\n              break;\\n\\n            case 'mass':\\n              data.mass = parseFloats(child.textContent)[0];\\n              break;\\n          }\\n        }\\n      } // scene\\n\\n\\n      function parseKinematicsScene(xml) {\\n        var data = {\\n          bindJointAxis: []\\n        };\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'bind_joint_axis':\\n              data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\\n              break;\\n          }\\n        }\\n\\n        library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\\n      }\\n\\n      function parseKinematicsBindJointAxis(xml) {\\n        var data = {\\n          target: xml.getAttribute('target').split('/').pop()\\n        };\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          switch (child.nodeName) {\\n            case 'axis':\\n              var param = child.getElementsByTagName('param')[0];\\n              data.axis = param.textContent;\\n              var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\\n              data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function buildKinematicsScene(data) {\\n        if (data.build !== undefined) return data.build;\\n        return data;\\n      }\\n\\n      function getKinematicsScene(id) {\\n        return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\\n      }\\n\\n      function setupKinematics() {\\n        var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\\n        var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\\n        var visualSceneId = Object.keys(library.visualScenes)[0];\\n        if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\\n        var kinematicsModel = getKinematicsModel(kinematicsModelId);\\n        var kinematicsScene = getKinematicsScene(kinematicsSceneId);\\n        var visualScene = getVisualScene(visualSceneId);\\n        var bindJointAxis = kinematicsScene.bindJointAxis;\\n        var jointMap = {};\\n\\n        for (var i = 0, l = bindJointAxis.length; i < l; i++) {\\n          var axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\\n\\n          var targetElement = collada.querySelector('[sid=\\\"' + axis.target + '\\\"]');\\n\\n          if (targetElement) {\\n            // get the parent of the transform element\\n            var parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\\n\\n            connect(axis.jointIndex, parentVisualElement);\\n          }\\n        }\\n\\n        function connect(jointIndex, visualElement) {\\n          var visualElementName = visualElement.getAttribute('name');\\n          var joint = kinematicsModel.joints[jointIndex];\\n          visualScene.traverse(function (object) {\\n            if (object.name === visualElementName) {\\n              jointMap[jointIndex] = {\\n                object: object,\\n                transforms: buildTransformList(visualElement),\\n                joint: joint,\\n                position: joint.zeroPosition\\n              };\\n            }\\n          });\\n        }\\n\\n        var m0 = new _three.Matrix4();\\n        kinematics = {\\n          joints: kinematicsModel && kinematicsModel.joints,\\n          getJointValue: function getJointValue(jointIndex) {\\n            var jointData = jointMap[jointIndex];\\n\\n            if (jointData) {\\n              return jointData.position;\\n            } else {\\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \\\" doesn't exist.\\\");\\n            }\\n          },\\n          setJointValue: function setJointValue(jointIndex, value) {\\n            var jointData = jointMap[jointIndex];\\n\\n            if (jointData) {\\n              var joint = jointData.joint;\\n\\n              if (value > joint.limits.max || value < joint.limits.min) {\\n                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\\n              } else if (joint[\\\"static\\\"]) {\\n                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\\n              } else {\\n                var object = jointData.object;\\n                var _axis = joint.axis;\\n                var transforms = jointData.transforms;\\n                matrix.identity(); // each update, we have to apply all transforms in the correct order\\n\\n                for (var _i2 = 0; _i2 < transforms.length; _i2++) {\\n                  var transform = transforms[_i2]; // if there is a connection of the transform node with a joint, apply the joint value\\n\\n                  if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\\n                    switch (joint.type) {\\n                      case 'revolute':\\n                        matrix.multiply(m0.makeRotationAxis(_axis, _three.MathUtils.degToRad(value)));\\n                        break;\\n\\n                      case 'prismatic':\\n                        matrix.multiply(m0.makeTranslation(_axis.x * value, _axis.y * value, _axis.z * value));\\n                        break;\\n\\n                      default:\\n                        console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\\n                        break;\\n                    }\\n                  } else {\\n                    switch (transform.type) {\\n                      case 'matrix':\\n                        matrix.multiply(transform.obj);\\n                        break;\\n\\n                      case 'translate':\\n                        matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\\n                        break;\\n\\n                      case 'scale':\\n                        matrix.scale(transform.obj);\\n                        break;\\n\\n                      case 'rotate':\\n                        matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\\n                        break;\\n                    }\\n                  }\\n                }\\n\\n                object.matrix.copy(matrix);\\n                object.matrix.decompose(object.position, object.quaternion, object.scale);\\n                jointMap[jointIndex].position = value;\\n              }\\n            } else {\\n              console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\\n            }\\n          }\\n        };\\n      }\\n\\n      function buildTransformList(node) {\\n        var transforms = [];\\n        var xml = collada.querySelector('[id=\\\"' + node.id + '\\\"]');\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n\\n          var array = void 0,\\n              _vector = void 0;\\n\\n          switch (child.nodeName) {\\n            case 'matrix':\\n              array = parseFloats(child.textContent);\\n\\n              var _matrix = new _three.Matrix4().fromArray(array).transpose();\\n\\n              transforms.push({\\n                sid: child.getAttribute('sid'),\\n                type: child.nodeName,\\n                obj: _matrix\\n              });\\n              break;\\n\\n            case 'translate':\\n            case 'scale':\\n              array = parseFloats(child.textContent);\\n              _vector = new _three.Vector3().fromArray(array);\\n              transforms.push({\\n                sid: child.getAttribute('sid'),\\n                type: child.nodeName,\\n                obj: _vector\\n              });\\n              break;\\n\\n            case 'rotate':\\n              array = parseFloats(child.textContent);\\n              _vector = new _three.Vector3().fromArray(array);\\n\\n              var angle = _three.MathUtils.degToRad(array[3]);\\n\\n              transforms.push({\\n                sid: child.getAttribute('sid'),\\n                type: child.nodeName,\\n                obj: _vector,\\n                angle: angle\\n              });\\n              break;\\n          }\\n        }\\n\\n        return transforms;\\n      } // nodes\\n\\n\\n      function prepareNodes(xml) {\\n        var elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\\n\\n        for (var i = 0; i < elements.length; i++) {\\n          var element = elements[i];\\n\\n          if (element.hasAttribute('id') === false) {\\n            element.setAttribute('id', generateId());\\n          }\\n        }\\n      }\\n\\n      var matrix = new _three.Matrix4();\\n      var vector = new _three.Vector3();\\n\\n      function parseNode(xml) {\\n        var data = {\\n          name: xml.getAttribute('name') || '',\\n          type: xml.getAttribute('type'),\\n          id: xml.getAttribute('id'),\\n          sid: xml.getAttribute('sid'),\\n          matrix: new _three.Matrix4(),\\n          nodes: [],\\n          instanceCameras: [],\\n          instanceControllers: [],\\n          instanceLights: [],\\n          instanceGeometries: [],\\n          instanceNodes: [],\\n          transforms: {}\\n        };\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n          if (child.nodeType !== 1) continue;\\n          var array = void 0;\\n\\n          switch (child.nodeName) {\\n            case 'node':\\n              data.nodes.push(child.getAttribute('id'));\\n              parseNode(child);\\n              break;\\n\\n            case 'instance_camera':\\n              data.instanceCameras.push(parseId(child.getAttribute('url')));\\n              break;\\n\\n            case 'instance_controller':\\n              data.instanceControllers.push(parseNodeInstance(child));\\n              break;\\n\\n            case 'instance_light':\\n              data.instanceLights.push(parseId(child.getAttribute('url')));\\n              break;\\n\\n            case 'instance_geometry':\\n              data.instanceGeometries.push(parseNodeInstance(child));\\n              break;\\n\\n            case 'instance_node':\\n              data.instanceNodes.push(parseId(child.getAttribute('url')));\\n              break;\\n\\n            case 'matrix':\\n              array = parseFloats(child.textContent);\\n              data.matrix.multiply(matrix.fromArray(array).transpose());\\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\\n              break;\\n\\n            case 'translate':\\n              array = parseFloats(child.textContent);\\n              vector.fromArray(array);\\n              data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\\n              break;\\n\\n            case 'rotate':\\n              array = parseFloats(child.textContent);\\n\\n              var angle = _three.MathUtils.degToRad(array[3]);\\n\\n              data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\\n              break;\\n\\n            case 'scale':\\n              array = parseFloats(child.textContent);\\n              data.matrix.scale(vector.fromArray(array));\\n              data.transforms[child.getAttribute('sid')] = child.nodeName;\\n              break;\\n\\n            case 'extra':\\n              break;\\n\\n            default:\\n              console.log(child);\\n          }\\n        }\\n\\n        if (hasNode(data.id)) {\\n          console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\\n        } else {\\n          library.nodes[data.id] = data;\\n        }\\n\\n        return data;\\n      }\\n\\n      function parseNodeInstance(xml) {\\n        var data = {\\n          id: parseId(xml.getAttribute('url')),\\n          materials: {},\\n          skeletons: []\\n        };\\n\\n        for (var i = 0; i < xml.childNodes.length; i++) {\\n          var child = xml.childNodes[i];\\n\\n          switch (child.nodeName) {\\n            case 'bind_material':\\n              var instances = child.getElementsByTagName('instance_material');\\n\\n              for (var j = 0; j < instances.length; j++) {\\n                var instance = instances[j];\\n                var symbol = instance.getAttribute('symbol');\\n                var target = instance.getAttribute('target');\\n                data.materials[symbol] = parseId(target);\\n              }\\n\\n              break;\\n\\n            case 'skeleton':\\n              data.skeletons.push(parseId(child.textContent));\\n              break;\\n          }\\n        }\\n\\n        return data;\\n      }\\n\\n      function buildSkeleton(skeletons, joints) {\\n        var boneData = [];\\n        var sortedBoneData = [];\\n        var i, j, data; // a skeleton can have multiple root bones. collada expresses this\\n        // situtation with multiple \\\"skeleton\\\" tags per controller instance\\n\\n        for (i = 0; i < skeletons.length; i++) {\\n          var skeleton = skeletons[i];\\n          var root = void 0;\\n\\n          if (hasNode(skeleton)) {\\n            root = getNode(skeleton);\\n            buildBoneHierarchy(root, joints, boneData);\\n          } else if (hasVisualScene(skeleton)) {\\n            // handle case where the skeleton refers to the visual scene (#13335)\\n            var visualScene = library.visualScenes[skeleton];\\n            var children = visualScene.children;\\n\\n            for (var _j = 0; _j < children.length; _j++) {\\n              var child = children[_j];\\n\\n              if (child.type === 'JOINT') {\\n                var _root = getNode(child.id);\\n\\n                buildBoneHierarchy(_root, joints, boneData);\\n              }\\n            }\\n          } else {\\n            console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\\n          }\\n        } // sort bone data (the order is defined in the corresponding controller)\\n\\n\\n        for (i = 0; i < joints.length; i++) {\\n          for (j = 0; j < boneData.length; j++) {\\n            data = boneData[j];\\n\\n            if (data.bone.name === joints[i].name) {\\n              sortedBoneData[i] = data;\\n              data.processed = true;\\n              break;\\n            }\\n          }\\n        } // add unprocessed bone data at the end of the list\\n\\n\\n        for (i = 0; i < boneData.length; i++) {\\n          data = boneData[i];\\n\\n          if (data.processed === false) {\\n            sortedBoneData.push(data);\\n            data.processed = true;\\n          }\\n        } // setup arrays for skeleton creation\\n\\n\\n        var bones = [];\\n        var boneInverses = [];\\n\\n        for (i = 0; i < sortedBoneData.length; i++) {\\n          data = sortedBoneData[i];\\n          bones.push(data.bone);\\n          boneInverses.push(data.boneInverse);\\n        }\\n\\n        return new _three.Skeleton(bones, boneInverses);\\n      }\\n\\n      function buildBoneHierarchy(root, joints, boneData) {\\n        // setup bone data from visual scene\\n        root.traverse(function (object) {\\n          if (object.isBone === true) {\\n            var boneInverse; // retrieve the boneInverse from the controller data\\n\\n            for (var i = 0; i < joints.length; i++) {\\n              var joint = joints[i];\\n\\n              if (joint.name === object.name) {\\n                boneInverse = joint.boneInverse;\\n                break;\\n              }\\n            }\\n\\n            if (boneInverse === undefined) {\\n              // Unfortunately, there can be joints in the visual scene that are not part of the\\n              // corresponding controller. In this case, we have to create a dummy boneInverse matrix\\n              // for the respective bone. This bone won't affect any vertices, because there are no skin indices\\n              // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\\n              // ensure a correct animation of the model.\\n              boneInverse = new _three.Matrix4();\\n            }\\n\\n            boneData.push({\\n              bone: object,\\n              boneInverse: boneInverse,\\n              processed: false\\n            });\\n          }\\n        });\\n      }\\n\\n      function buildNode(data) {\\n        var objects = [];\\n        var matrix = data.matrix;\\n        var nodes = data.nodes;\\n        var type = data.type;\\n        var instanceCameras = data.instanceCameras;\\n        var instanceControllers = data.instanceControllers;\\n        var instanceLights = data.instanceLights;\\n        var instanceGeometries = data.instanceGeometries;\\n        var instanceNodes = data.instanceNodes; // nodes\\n\\n        for (var i = 0, l = nodes.length; i < l; i++) {\\n          objects.push(getNode(nodes[i]));\\n        } // instance cameras\\n\\n\\n        for (var _i3 = 0, _l2 = instanceCameras.length; _i3 < _l2; _i3++) {\\n          var instanceCamera = getCamera(instanceCameras[_i3]);\\n\\n          if (instanceCamera !== null) {\\n            objects.push(instanceCamera.clone());\\n          }\\n        } // instance controllers\\n\\n\\n        for (var _i4 = 0, _l3 = instanceControllers.length; _i4 < _l3; _i4++) {\\n          var instance = instanceControllers[_i4];\\n          var controller = getController(instance.id);\\n          var geometries = getGeometry(controller.id);\\n          var newObjects = buildObjects(geometries, instance.materials);\\n          var skeletons = instance.skeletons;\\n          var joints = controller.skin.joints;\\n          var skeleton = buildSkeleton(skeletons, joints);\\n\\n          for (var j = 0, jl = newObjects.length; j < jl; j++) {\\n            var _object = newObjects[j];\\n\\n            if (_object.isSkinnedMesh) {\\n              _object.bind(skeleton, controller.skin.bindMatrix);\\n\\n              _object.normalizeSkinWeights();\\n            }\\n\\n            objects.push(_object);\\n          }\\n        } // instance lights\\n\\n\\n        for (var _i5 = 0, _l4 = instanceLights.length; _i5 < _l4; _i5++) {\\n          var instanceLight = getLight(instanceLights[_i5]);\\n\\n          if (instanceLight !== null) {\\n            objects.push(instanceLight.clone());\\n          }\\n        } // instance geometries\\n\\n\\n        for (var _i6 = 0, _l5 = instanceGeometries.length; _i6 < _l5; _i6++) {\\n          var _instance = instanceGeometries[_i6]; // a single geometry instance in collada can lead to multiple object3Ds.\\n          // this is the case when primitives are combined like triangles and lines\\n\\n          var _geometries = getGeometry(_instance.id);\\n\\n          var _newObjects = buildObjects(_geometries, _instance.materials);\\n\\n          for (var _j2 = 0, _jl = _newObjects.length; _j2 < _jl; _j2++) {\\n            objects.push(_newObjects[_j2]);\\n          }\\n        } // instance nodes\\n\\n\\n        for (var _i7 = 0, _l6 = instanceNodes.length; _i7 < _l6; _i7++) {\\n          objects.push(getNode(instanceNodes[_i7]).clone());\\n        }\\n\\n        var object;\\n\\n        if (nodes.length === 0 && objects.length === 1) {\\n          object = objects[0];\\n        } else {\\n          object = type === 'JOINT' ? new _three.Bone() : new _three.Group();\\n\\n          for (var _i8 = 0; _i8 < objects.length; _i8++) {\\n            object.add(objects[_i8]);\\n          }\\n        }\\n\\n        object.name = type === 'JOINT' ? data.sid : data.name;\\n        object.matrix.copy(matrix);\\n        object.matrix.decompose(object.position, object.quaternion, object.scale);\\n        return object;\\n      }\\n\\n      var fallbackMaterial = new _three.MeshBasicMaterial({\\n        color: 0xff00ff\\n      });\\n\\n      function resolveMaterialBinding(keys, instanceMaterials) {\\n        var materials = [];\\n\\n        for (var i = 0, l = keys.length; i < l; i++) {\\n          var id = instanceMaterials[keys[i]];\\n\\n          if (id === undefined) {\\n            console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\\n            materials.push(fallbackMaterial);\\n          } else {\\n            materials.push(getMaterial(id));\\n          }\\n        }\\n\\n        return materials;\\n      }\\n\\n      function buildObjects(geometries, instanceMaterials) {\\n        var objects = [];\\n\\n        for (var type in geometries) {\\n          var geometry = geometries[type];\\n          var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\\n\\n          if (materials.length === 0) {\\n            if (type === 'lines' || type === 'linestrips') {\\n              materials.push(new _three.LineBasicMaterial());\\n            } else {\\n              materials.push(new _three.MeshPhongMaterial());\\n            }\\n          } // regard skinning\\n\\n\\n          var skinning = geometry.data.attributes.skinIndex !== undefined;\\n\\n          if (skinning) {\\n            for (var i = 0, l = materials.length; i < l; i++) {\\n              materials[i].skinning = true;\\n            }\\n          } // choose between a single or multi materials (material array)\\n\\n\\n          var material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\\n\\n          var object = void 0;\\n\\n          switch (type) {\\n            case 'lines':\\n              object = new _three.LineSegments(geometry.data, material);\\n              break;\\n\\n            case 'linestrips':\\n              object = new _three.Line(geometry.data, material);\\n              break;\\n\\n            case 'triangles':\\n            case 'polylist':\\n              if (skinning) {\\n                object = new _three.SkinnedMesh(geometry.data, material);\\n              } else {\\n                object = new _three.Mesh(geometry.data, material);\\n              }\\n\\n              break;\\n          }\\n\\n          objects.push(object);\\n        }\\n\\n        return objects;\\n      }\\n\\n      function hasNode(id) {\\n        return library.nodes[id] !== undefined;\\n      }\\n\\n      function getNode(id) {\\n        return getBuild(library.nodes[id], buildNode);\\n      } // visual scenes\\n\\n\\n      function parseVisualScene(xml) {\\n        var data = {\\n          name: xml.getAttribute('name'),\\n          children: []\\n        };\\n        prepareNodes(xml);\\n        var elements = getElementsByTagName(xml, 'node');\\n\\n        for (var i = 0; i < elements.length; i++) {\\n          data.children.push(parseNode(elements[i]));\\n        }\\n\\n        library.visualScenes[xml.getAttribute('id')] = data;\\n      }\\n\\n      function buildVisualScene(data) {\\n        var group = new _three.Group();\\n        group.name = data.name;\\n        var children = data.children;\\n\\n        for (var i = 0; i < children.length; i++) {\\n          var child = children[i];\\n          group.add(getNode(child.id));\\n        }\\n\\n        return group;\\n      }\\n\\n      function hasVisualScene(id) {\\n        return library.visualScenes[id] !== undefined;\\n      }\\n\\n      function getVisualScene(id) {\\n        return getBuild(library.visualScenes[id], buildVisualScene);\\n      } // scenes\\n\\n\\n      function parseScene(xml) {\\n        var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\\n        return getVisualScene(parseId(instance.getAttribute('url')));\\n      }\\n\\n      function setupAnimations() {\\n        var clips = library.clips;\\n\\n        if (isEmpty(clips) === true) {\\n          if (isEmpty(library.animations) === false) {\\n            // if there are animations but no clips, we create a default clip for playback\\n            var tracks = [];\\n\\n            for (var id in library.animations) {\\n              var animationTracks = getAnimation(id);\\n\\n              for (var i = 0, l = animationTracks.length; i < l; i++) {\\n                tracks.push(animationTracks[i]);\\n              }\\n            }\\n\\n            animations.push(new _three.AnimationClip('default', -1, tracks));\\n          }\\n        } else {\\n          for (var _id in clips) {\\n            animations.push(getAnimationClip(_id));\\n          }\\n        }\\n      } // convert the parser error element into text with each child elements text\\n      // separated by new lines.\\n\\n\\n      function parserErrorToText(parserError) {\\n        var result = '';\\n        var stack = [parserError];\\n\\n        while (stack.length) {\\n          var node = stack.shift();\\n\\n          if (node.nodeType === Node.TEXT_NODE) {\\n            result += node.textContent;\\n          } else {\\n            result += '\\\\n';\\n            stack.push.apply(stack, node.childNodes);\\n          }\\n        }\\n\\n        return result.trim();\\n      }\\n\\n      if (text.length === 0) {\\n        return {\\n          scene: new _three.Scene()\\n        };\\n      }\\n\\n      var xml = new DOMParser().parseFromString(text, 'application/xml');\\n      var collada = getElementsByTagName(xml, 'COLLADA')[0];\\n      var parserError = xml.getElementsByTagName('parsererror')[0];\\n\\n      if (parserError !== undefined) {\\n        // Chrome will return parser error with a div in it\\n        var errorElement = getElementsByTagName(parserError, 'div')[0];\\n        var errorText;\\n\\n        if (errorElement) {\\n          errorText = errorElement.textContent;\\n        } else {\\n          errorText = parserErrorToText(parserError);\\n        }\\n\\n        console.error('THREE.ColladaLoader: Failed to parse collada file.\\\\n', errorText);\\n        return null;\\n      } // metadata\\n\\n\\n      var version = collada.getAttribute('version');\\n      console.log('THREE.ColladaLoader: File version', version);\\n      var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\\n      var textureLoader = new _three.TextureLoader(this.manager);\\n      textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\\n      var tgaLoader;\\n\\n      if (_TGALoader.TGALoader) {\\n        tgaLoader = new _TGALoader.TGALoader(this.manager);\\n        tgaLoader.setPath(this.resourcePath || path);\\n      } //\\n\\n\\n      var animations = [];\\n      var kinematics = {};\\n      var count = 0; //\\n\\n      var library = {\\n        animations: {},\\n        clips: {},\\n        controllers: {},\\n        images: {},\\n        effects: {},\\n        materials: {},\\n        cameras: {},\\n        lights: {},\\n        geometries: {},\\n        nodes: {},\\n        visualScenes: {},\\n        kinematicsModels: {},\\n        physicsModels: {},\\n        kinematicsScenes: {}\\n      };\\n      parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\\n      parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\\n      parseLibrary(collada, 'library_controllers', 'controller', parseController);\\n      parseLibrary(collada, 'library_images', 'image', parseImage);\\n      parseLibrary(collada, 'library_effects', 'effect', parseEffect);\\n      parseLibrary(collada, 'library_materials', 'material', parseMaterial);\\n      parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\\n      parseLibrary(collada, 'library_lights', 'light', parseLight);\\n      parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\\n      parseLibrary(collada, 'library_nodes', 'node', parseNode);\\n      parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\\n      parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\\n      parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\\n      parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\\n      buildLibrary(library.animations, buildAnimation);\\n      buildLibrary(library.clips, buildAnimationClip);\\n      buildLibrary(library.controllers, buildController);\\n      buildLibrary(library.images, buildImage);\\n      buildLibrary(library.effects, buildEffect);\\n      buildLibrary(library.materials, buildMaterial);\\n      buildLibrary(library.cameras, buildCamera);\\n      buildLibrary(library.lights, buildLight);\\n      buildLibrary(library.geometries, buildGeometry);\\n      buildLibrary(library.visualScenes, buildVisualScene);\\n      setupAnimations();\\n      setupKinematics();\\n      var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\\n      scene.animations = animations;\\n\\n      if (asset.upAxis === 'Z_UP') {\\n        scene.quaternion.setFromEuler(new _three.Euler(-Math.PI / 2, 0, 0));\\n      }\\n\\n      scene.scale.multiplyScalar(asset.unit);\\n      return {\\n        get animations() {\\n          console.warn('THREE.ColladaLoader: Please access animations over scene.animations now.');\\n          return animations;\\n        },\\n\\n        kinematics: kinematics,\\n        library: library,\\n        scene: scene\\n      };\\n    }\\n  }]);\\n\\n  return ColladaLoader;\\n}(_three.Loader);\\n\\nexports.ColladaLoader = ColladaLoader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"_getPrototypeOf\",\"o\",\"setPrototypeOf\",\"getPrototypeOf\",\"__proto__\",\"_inherits\",\"subClass\",\"superClass\",\"TypeError\",\"create\",\"value\",\"_setPrototypeOf\",\"p\",\"ColladaLoader\",\"_three\",\"_TGALoader\",\"_Loader\",\"manager\",\"instance\",\"call\",\"self\",\"ReferenceError\",\"load\",\"url\",\"onLoad\",\"onProgress\",\"onError\",\"scope\",\"path\",\"LoaderUtils\",\"extractUrlBase\",\"loader\",\"FileLoader\",\"setPath\",\"setRequestHeader\",\"requestHeader\",\"setWithCredentials\",\"withCredentials\",\"text\",\"parse\",\"e\",\"console\",\"error\",\"itemError\",\"getElementsByTagName\",\"xml\",\"name\",\"array\",\"childNodes\",\"l\",\"child\",\"nodeName\",\"push\",\"parseFloats\",\"parts\",\"trim\",\"split\",\"Array\",\"parseFloat\",\"parseInts\",\"parseInt\",\"parseId\",\"substring\",\"parseLibrary\",\"libraryName\",\"parser\",\"library\",\"undefined\",\"elements\",\"buildLibrary\",\"data\",\"builder\",\"object\",\"build\",\"getBuild\",\"parseAnimation\",\"sources\",\"samplers\",\"channels\",\"hasChildren\",\"nodeType\",\"id\",\"getAttribute\",\"parseSource\",\"inputs\",\"semantic\",\"shift\",\"sid\",\"arraySyntax\",\"indexOf\",\"memberSyntax\",\"member\",\"indices\",\"replace\",\"sampler\",\"log\",\"animations\",\"MathUtils\",\"generateUUID\",\"buildAnimation\",\"tracks\",\"hasOwnProperty\",\"channel\",\"il\",\"inputSource\",\"INPUT\",\"outputSource\",\"OUTPUT\",\"node\",\"nodes\",\"object3D\",\"getNode\",\"transform\",\"transforms\",\"defaultMatrix\",\"matrix\",\"clone\",\"transpose\",\"time\",\"stride\",\"j\",\"jl\",\"warn\",\"keyframes\",\"prepareAnimationData\",\"uuid\",\"times\",\"positionData\",\"quaternionData\",\"scaleData\",\"keyframe\",\"fromArray\",\"decompose\",\"position\",\"quaternion\",\"scale\",\"x\",\"y\",\"z\",\"w\",\"VectorKeyframeTrack\",\"QuaternionKeyframeTrack\",\"sort\",\"ascending\",\"a\",\"b\",\"transformAnimationData\",\"property\",\"defaultValue\",\"empty\",\"prev\",\"next\",\"buildAnimationClip\",\"duration\",\"end\",\"start\",\"animationTracks\",\"AnimationClip\",\"buildController\",\"geometry\",\"geometries\",\"skin\",\"buildSkin\",\"skinIndices\",\"skinWeights\",\"weights\",\"descending\",\"weight\",\"joints\",\"BONE_LIMIT\",\"vertexWeights\",\"vcount\",\"v\",\"jointOffset\",\"JOINT\",\"offset\",\"weightOffset\",\"WEIGHT\",\"jointSource\",\"inverseSource\",\"INV_BIND_MATRIX\",\"jointCount\",\"vertexSkinData\",\"index\",\"skinIndex\",\"skinWeight\",\"weightId\",\"d\",\"bindMatrix\",\"bindShapeMatrix\",\"Matrix4\",\"identity\",\"boneInverse\",\"buildImage\",\"init_from\",\"getImage\",\"images\",\"parseEffectParameter\",\"textContent\",\"technique\",\"toUpperCase\",\"extra\",\"buildEffect\",\"buildMaterial\",\"getTexture\",\"textureObject\",\"effect\",\"profile\",\"image\",\"surfaces\",\"surface\",\"source\",\"extension\",\"slice\",\"lastIndexOf\",\"toLowerCase\",\"tgaLoader\",\"textureLoader\",\"texture\",\"_extra\",\"keys\",\"_technique\",\"wrapS\",\"wrapU\",\"RepeatWrapping\",\"ClampToEdgeWrapping\",\"wrapT\",\"wrapV\",\"set\",\"offsetU\",\"offsetV\",\"repeat\",\"repeatU\",\"repeatV\",\"effects\",\"type\",\"material\",\"MeshPhongMaterial\",\"MeshLambertMaterial\",\"MeshBasicMaterial\",\"parameters\",\"parameter\",\"color\",\"map\",\"specular\",\"specularMap\",\"normalMap\",\"lightMap\",\"shininess\",\"emissive\",\"emissiveMap\",\"transparent\",\"transparency\",\"opaque\",\"opacity\",\"double_sided\",\"side\",\"DoubleSide\",\"buildCamera\",\"optics\",\"camera\",\"PerspectiveCamera\",\"yfov\",\"aspect_ratio\",\"znear\",\"zfar\",\"ymag\",\"xmag\",\"aspectRatio\",\"OrthographicCamera\",\"buildLight\",\"light\",\"DirectionalLight\",\"PointLight\",\"SpotLight\",\"AmbientLight\",\"copy\",\"distance\",\"accessor\",\"buildGeometry\",\"vertices\",\"primitives\",\"primitive\",\"primitiveType\",\"count\",\"hasUV\",\"uvsNeedsFix\",\"BufferGeometry\",\"materialKeys\",\"_count\",\"g\",\"vc\",\"addGroup\",\"input\",\"prevLength\",\"buildGeometryData\",\"_count2\",\"setAttribute\",\"Float32BufferAttribute\",\"pushVector\",\"sourceStride\",\"sourceArray\",\"_count3\",\"c\",\"_b\",\"_c\",\"k\",\"kl\",\"_b2\",\"_c2\",\"_i\",\"_l\",\"buildKinematicsModel\",\"parseKinematicsLink\",\"attachments\",\"joint\",\"pop\",\"links\",\"parseKinematicsTransform\",\"Vector3\",\"angle\",\"degToRad\",\"buildKinematicsScene\",\"parseNode\",\"instanceCameras\",\"instanceControllers\",\"instanceLights\",\"instanceGeometries\",\"instanceNodes\",\"parseNodeInstance\",\"multiply\",\"vector\",\"makeTranslation\",\"makeRotationAxis\",\"materials\",\"skeletons\",\"instances\",\"symbol\",\"buildBoneHierarchy\",\"root\",\"boneData\",\"traverse\",\"isBone\",\"bone\",\"processed\",\"buildNode\",\"objects\",\"_i3\",\"_l2\",\"cameras\",\"instanceCamera\",\"_i4\",\"_l3\",\"controller\",\"controllers\",\"newObjects\",\"buildObjects\",\"sortedBoneData\",\"skeleton\",\"visualScenes\",\"children\",\"visualScene\",\"_j\",\"_root\",\"bones\",\"boneInverses\",\"Skeleton\",\"_object\",\"isSkinnedMesh\",\"bind\",\"normalizeSkinWeights\",\"_i5\",\"_l4\",\"lights\",\"instanceLight\",\"_i6\",\"_l5\",\"_instance\",\"_jl\",\"_geometries\",\"_newObjects\",\"_j2\",\"_i7\",\"_l6\",\"_i8\",\"Bone\",\"Group\",\"add\",\"instanceMaterials\",\"fallbackMaterial\",\"LineBasicMaterial\",\"skinning\",\"attributes\",\"LineSegments\",\"Line\",\"SkinnedMesh\",\"Mesh\",\"buildVisualScene\",\"group\",\"parserErrorToText\",\"parserError\",\"result\",\"stack\",\"Node\",\"TEXT_NODE\",\"apply\",\"Quaternion\",\"scene\",\"Scene\",\"parseFromString\",\"DOMParser\",\"collada\",\"errorText\",\"errorElement\",\"version\",\"asset\",\"parseAsset\",\"hasAttribute\",\"unit\",\"upAxis\",\"TextureLoader\",\"resourcePath\",\"setCrossOrigin\",\"crossOrigin\",\"TGALoader\",\"kinematics\",\"clips\",\"kinematicsModels\",\"physicsModels\",\"kinematicsScenes\",\"parseAnimationClip\",\"parseController\",\"parseImage\",\"parseEffect\",\"parseMaterial\",\"parseCamera\",\"parseLight\",\"Color\",\"falloffAngle\",\"f\",\"Math\",\"sqrt\",\"parseGeometry\",\"mesh\",\"inputname\",\"max\",\"parseVisualScene\",\"element\",\"parseKinematicsModel\",\"axis\",\"limits\",\"min\",\"zeroPosition\",\"middlePosition\",\"parsePhysicsModel\",\"rigidBodies\",\"inertia\",\"mass\",\"parseKinematicsScene\",\"bindJointAxis\",\"param\",\"tmpJointIndex\",\"jointIndex\",\"substr\",\"setupAnimations\",\"_id\",\"setupKinematics\",\"connect\",\"visualElement\",\"visualElementName\",\"kinematicsModel\",\"querySelector\",\"_matrix\",\"_vector\",\"jointMap\",\"kinematicsModelId\",\"kinematicsSceneId\",\"visualSceneId\",\"kinematicsScene\",\"targetElement\",\"parentElement\",\"m0\",\"getJointValue\",\"jointData\",\"setJointValue\",\"_axis\",\"_i2\",\"parseScene\",\"setFromEuler\",\"Euler\",\"PI\",\"multiplyScalar\",\"Loader\"]\n}\n"]