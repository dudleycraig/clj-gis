["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@blueprintjs/core/lib/cjs/components/hotkeys/hotkeysEvents.js"],"~:js","shadow$provide.module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeysEvents=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.HotkeysEvents=exports.HotkeyScope=void 0;var react_1=require(\"module$node_modules$react$index\"),utils_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$common$utils$index\"),hotkey_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkey\"),hotkeyParser_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeyParser\"),\nhotkeysDialog_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeysDialog\"),HotkeyScope;(function(HotkeyScope){HotkeyScope.LOCAL=\"local\";HotkeyScope.GLOBAL=\"global\"})(HotkeyScope=exports.HotkeyScope||(exports.HotkeyScope={}));global=function(){function HotkeysEvents(scope){var _this=this;this.scope=scope;this.actions=[];this.handleKeyDown=function(e){var combo=hotkeyParser_1.getKeyCombo(e);!_this.isTextInput(e)&&hotkeyParser_1.comboMatches(hotkeyParser_1.parseKeyCombo(\"?\"),\ncombo)?hotkeysDialog_1.isHotkeysDialogShowing()?hotkeysDialog_1.hideHotkeysDialogAfterDelay():hotkeysDialog_1.showHotkeysDialog(_this.actions.map(function(action){return action.props})):hotkeysDialog_1.isHotkeysDialogShowing()||_this.invokeNamedCallbackIfComboRecognized(combo,\"onKeyDown\",e)};this.handleKeyUp=function(e){hotkeysDialog_1.isHotkeysDialogShowing()||_this.invokeNamedCallbackIfComboRecognized(hotkeyParser_1.getKeyCombo(e),\"onKeyUp\",e)}}HotkeysEvents.prototype.count=function(){return this.actions.length};\nHotkeysEvents.prototype.clear=function(){this.actions=[]};HotkeysEvents.prototype.setHotkeys=function(props){var _this=this,actions=[];react_1.Children.forEach(props.children,function(child){utils_1.isElementOfType(child,hotkey_1.Hotkey)&&_this.isScope(child.props)&&actions.push({combo:hotkeyParser_1.parseKeyCombo(child.props.combo),props:child.props})});this.actions=actions};HotkeysEvents.prototype.invokeNamedCallbackIfComboRecognized=function(combo,callbackName,e){for(var _a,_b,isTextInput=this.isTextInput(e),\n_i=0,_c=this.actions;_i<_c.length;_i++){var action=_c[_i];isTextInput&&!action.props.allowInInput||action.props.disabled||!hotkeyParser_1.comboMatches(action.combo,combo)||(action.props.preventDefault&&e.preventDefault(),action.props.stopPropagation&&(e.isPropagationStopped=!0,e.stopPropagation()),null===(_b=(_a=action.props)[callbackName])||void 0===_b?void 0:_b.call(_a,e))}};HotkeysEvents.prototype.isScope=function(props){return(props.global?HotkeyScope.GLOBAL:HotkeyScope.LOCAL)===this.scope};HotkeysEvents.prototype.isTextInput=\nfunction(e){e=e.target;if(null==e||null==e.closest)return!1;e=e.closest(\"input, textarea, [contenteditable\\x3dtrue]\");if(null==e)return!1;if(\"input\"===e.tagName.toLowerCase()){var inputType=e.type;if(\"checkbox\"===inputType||\"radio\"===inputType)return!1}return e.readOnly?!1:!0};return HotkeysEvents}();exports.HotkeysEvents=global}","~:source","shadow$provide[\"module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeysEvents\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HotkeysEvents = exports.HotkeyScope = void 0;\nvar react_1 = require(\"react\");\nvar utils_1 = require(\"../../common/utils\");\nvar hotkey_1 = require(\"./hotkey\");\nvar hotkeyParser_1 = require(\"./hotkeyParser\");\nvar hotkeysDialog_1 = require(\"./hotkeysDialog\");\nvar SHOW_DIALOG_KEY = \"?\";\nvar HotkeyScope;\n(function (HotkeyScope) {\n    HotkeyScope[\"LOCAL\"] = \"local\";\n    HotkeyScope[\"GLOBAL\"] = \"global\";\n})(HotkeyScope = exports.HotkeyScope || (exports.HotkeyScope = {}));\nvar HotkeysEvents = /** @class */ (function () {\n    function HotkeysEvents(scope) {\n        var _this = this;\n        this.scope = scope;\n        this.actions = [];\n        this.handleKeyDown = function (e) {\n            var combo = hotkeyParser_1.getKeyCombo(e);\n            var isTextInput = _this.isTextInput(e);\n            if (!isTextInput && hotkeyParser_1.comboMatches(hotkeyParser_1.parseKeyCombo(SHOW_DIALOG_KEY), combo)) {\n                if (hotkeysDialog_1.isHotkeysDialogShowing()) {\n                    hotkeysDialog_1.hideHotkeysDialogAfterDelay();\n                }\n                else {\n                    hotkeysDialog_1.showHotkeysDialog(_this.actions.map(function (action) { return action.props; }));\n                }\n                return;\n            }\n            else if (hotkeysDialog_1.isHotkeysDialogShowing()) {\n                return;\n            }\n            _this.invokeNamedCallbackIfComboRecognized(combo, \"onKeyDown\", e);\n        };\n        this.handleKeyUp = function (e) {\n            if (hotkeysDialog_1.isHotkeysDialogShowing()) {\n                return;\n            }\n            _this.invokeNamedCallbackIfComboRecognized(hotkeyParser_1.getKeyCombo(e), \"onKeyUp\", e);\n        };\n    }\n    HotkeysEvents.prototype.count = function () {\n        return this.actions.length;\n    };\n    HotkeysEvents.prototype.clear = function () {\n        this.actions = [];\n    };\n    HotkeysEvents.prototype.setHotkeys = function (props) {\n        var _this = this;\n        var actions = [];\n        react_1.Children.forEach(props.children, function (child) {\n            if (utils_1.isElementOfType(child, hotkey_1.Hotkey) && _this.isScope(child.props)) {\n                actions.push({\n                    combo: hotkeyParser_1.parseKeyCombo(child.props.combo),\n                    props: child.props,\n                });\n            }\n        });\n        this.actions = actions;\n    };\n    HotkeysEvents.prototype.invokeNamedCallbackIfComboRecognized = function (combo, callbackName, e) {\n        var _a, _b;\n        var isTextInput = this.isTextInput(e);\n        for (var _i = 0, _c = this.actions; _i < _c.length; _i++) {\n            var action = _c[_i];\n            var shouldIgnore = (isTextInput && !action.props.allowInInput) || action.props.disabled;\n            if (!shouldIgnore && hotkeyParser_1.comboMatches(action.combo, combo)) {\n                if (action.props.preventDefault) {\n                    e.preventDefault();\n                }\n                if (action.props.stopPropagation) {\n                    // set a flag just for unit testing. not meant to be referenced in feature work.\n                    e.isPropagationStopped = true;\n                    e.stopPropagation();\n                }\n                (_b = (_a = action.props)[callbackName]) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n            }\n        }\n    };\n    HotkeysEvents.prototype.isScope = function (props) {\n        return (props.global ? HotkeyScope.GLOBAL : HotkeyScope.LOCAL) === this.scope;\n    };\n    HotkeysEvents.prototype.isTextInput = function (e) {\n        var elem = e.target;\n        // we check these cases for unit testing, but this should not happen\n        // during normal operation\n        if (elem == null || elem.closest == null) {\n            return false;\n        }\n        var editable = elem.closest(\"input, textarea, [contenteditable=true]\");\n        if (editable == null) {\n            return false;\n        }\n        // don't let checkboxes, switches, and radio buttons prevent hotkey behavior\n        if (editable.tagName.toLowerCase() === \"input\") {\n            var inputType = editable.type;\n            if (inputType === \"checkbox\" || inputType === \"radio\") {\n                return false;\n            }\n        }\n        // don't let read-only fields prevent hotkey behavior\n        if (editable.readOnly) {\n            return false;\n        }\n        return true;\n    };\n    return HotkeysEvents;\n}());\nexports.HotkeysEvents = HotkeysEvents;\n//# sourceMappingURL=hotkeysEvents.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeyParser","~$module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeysDialog","~$module$node_modules$react$index","~$shadow.js","~$module$node_modules$$blueprintjs$core$lib$cjs$common$utils$index","~$module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkey"]],"~:properties",["^5",["HotkeyScope","isScope","handleKeyUp","__esModule","count","combo","value","invokeNamedCallbackIfComboRecognized","scope","handleKeyDown","props","isTextInput","isPropagationStopped","clear","HotkeysEvents","setHotkeys","actions"]],"~:compiled-at",1630405505192,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeysEvents.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@blueprintjs/core/lib/cjs/components/hotkeys/hotkeysEvents.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeysEvents\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n/*\\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.HotkeysEvents = exports.HotkeyScope = void 0;\\nvar react_1 = require(\\\"react\\\");\\nvar utils_1 = require(\\\"../../common/utils\\\");\\nvar hotkey_1 = require(\\\"./hotkey\\\");\\nvar hotkeyParser_1 = require(\\\"./hotkeyParser\\\");\\nvar hotkeysDialog_1 = require(\\\"./hotkeysDialog\\\");\\nvar SHOW_DIALOG_KEY = \\\"?\\\";\\nvar HotkeyScope;\\n(function (HotkeyScope) {\\n    HotkeyScope[\\\"LOCAL\\\"] = \\\"local\\\";\\n    HotkeyScope[\\\"GLOBAL\\\"] = \\\"global\\\";\\n})(HotkeyScope = exports.HotkeyScope || (exports.HotkeyScope = {}));\\nvar HotkeysEvents = /** @class */ (function () {\\n    function HotkeysEvents(scope) {\\n        var _this = this;\\n        this.scope = scope;\\n        this.actions = [];\\n        this.handleKeyDown = function (e) {\\n            var combo = hotkeyParser_1.getKeyCombo(e);\\n            var isTextInput = _this.isTextInput(e);\\n            if (!isTextInput && hotkeyParser_1.comboMatches(hotkeyParser_1.parseKeyCombo(SHOW_DIALOG_KEY), combo)) {\\n                if (hotkeysDialog_1.isHotkeysDialogShowing()) {\\n                    hotkeysDialog_1.hideHotkeysDialogAfterDelay();\\n                }\\n                else {\\n                    hotkeysDialog_1.showHotkeysDialog(_this.actions.map(function (action) { return action.props; }));\\n                }\\n                return;\\n            }\\n            else if (hotkeysDialog_1.isHotkeysDialogShowing()) {\\n                return;\\n            }\\n            _this.invokeNamedCallbackIfComboRecognized(combo, \\\"onKeyDown\\\", e);\\n        };\\n        this.handleKeyUp = function (e) {\\n            if (hotkeysDialog_1.isHotkeysDialogShowing()) {\\n                return;\\n            }\\n            _this.invokeNamedCallbackIfComboRecognized(hotkeyParser_1.getKeyCombo(e), \\\"onKeyUp\\\", e);\\n        };\\n    }\\n    HotkeysEvents.prototype.count = function () {\\n        return this.actions.length;\\n    };\\n    HotkeysEvents.prototype.clear = function () {\\n        this.actions = [];\\n    };\\n    HotkeysEvents.prototype.setHotkeys = function (props) {\\n        var _this = this;\\n        var actions = [];\\n        react_1.Children.forEach(props.children, function (child) {\\n            if (utils_1.isElementOfType(child, hotkey_1.Hotkey) && _this.isScope(child.props)) {\\n                actions.push({\\n                    combo: hotkeyParser_1.parseKeyCombo(child.props.combo),\\n                    props: child.props,\\n                });\\n            }\\n        });\\n        this.actions = actions;\\n    };\\n    HotkeysEvents.prototype.invokeNamedCallbackIfComboRecognized = function (combo, callbackName, e) {\\n        var _a, _b;\\n        var isTextInput = this.isTextInput(e);\\n        for (var _i = 0, _c = this.actions; _i < _c.length; _i++) {\\n            var action = _c[_i];\\n            var shouldIgnore = (isTextInput && !action.props.allowInInput) || action.props.disabled;\\n            if (!shouldIgnore && hotkeyParser_1.comboMatches(action.combo, combo)) {\\n                if (action.props.preventDefault) {\\n                    e.preventDefault();\\n                }\\n                if (action.props.stopPropagation) {\\n                    // set a flag just for unit testing. not meant to be referenced in feature work.\\n                    e.isPropagationStopped = true;\\n                    e.stopPropagation();\\n                }\\n                (_b = (_a = action.props)[callbackName]) === null || _b === void 0 ? void 0 : _b.call(_a, e);\\n            }\\n        }\\n    };\\n    HotkeysEvents.prototype.isScope = function (props) {\\n        return (props.global ? HotkeyScope.GLOBAL : HotkeyScope.LOCAL) === this.scope;\\n    };\\n    HotkeysEvents.prototype.isTextInput = function (e) {\\n        var elem = e.target;\\n        // we check these cases for unit testing, but this should not happen\\n        // during normal operation\\n        if (elem == null || elem.closest == null) {\\n            return false;\\n        }\\n        var editable = elem.closest(\\\"input, textarea, [contenteditable=true]\\\");\\n        if (editable == null) {\\n            return false;\\n        }\\n        // don't let checkboxes, switches, and radio buttons prevent hotkey behavior\\n        if (editable.tagName.toLowerCase() === \\\"input\\\") {\\n            var inputType = editable.type;\\n            if (inputType === \\\"checkbox\\\" || inputType === \\\"radio\\\") {\\n                return false;\\n            }\\n        }\\n        // don't let read-only fields prevent hotkey behavior\\n        if (editable.readOnly) {\\n            return false;\\n        }\\n        return true;\\n    };\\n    return HotkeysEvents;\\n}());\\nexports.HotkeysEvents = HotkeysEvents;\\n//# sourceMappingURL=hotkeysEvents.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"HotkeysEvents\",\"HotkeyScope\",\"react_1\",\"utils_1\",\"hotkey_1\",\"hotkeyParser_1\",\"hotkeysDialog_1\",\"scope\",\"_this\",\"actions\",\"handleKeyDown\",\"this.handleKeyDown\",\"e\",\"combo\",\"getKeyCombo\",\"isTextInput\",\"comboMatches\",\"parseKeyCombo\",\"SHOW_DIALOG_KEY\",\"isHotkeysDialogShowing\",\"hideHotkeysDialogAfterDelay\",\"showHotkeysDialog\",\"map\",\"action\",\"props\",\"invokeNamedCallbackIfComboRecognized\",\"handleKeyUp\",\"this.handleKeyUp\",\"prototype\",\"count\",\"HotkeysEvents.prototype.count\",\"length\",\"clear\",\"HotkeysEvents.prototype.clear\",\"setHotkeys\",\"HotkeysEvents.prototype.setHotkeys\",\"Children\",\"forEach\",\"children\",\"child\",\"isElementOfType\",\"Hotkey\",\"isScope\",\"push\",\"HotkeysEvents.prototype.invokeNamedCallbackIfComboRecognized\",\"callbackName\",\"_a\",\"_b\",\"_i\",\"_c\",\"allowInInput\",\"disabled\",\"preventDefault\",\"stopPropagation\",\"isPropagationStopped\",\"call\",\"HotkeysEvents.prototype.isScope\",\"GLOBAL\",\"LOCAL\",\"HotkeysEvents.prototype.isTextInput\",\"elem\",\"target\",\"closest\",\"editable\",\"tagName\",\"toLowerCase\",\"inputType\",\"type\",\"readOnly\"]\n}\n"]