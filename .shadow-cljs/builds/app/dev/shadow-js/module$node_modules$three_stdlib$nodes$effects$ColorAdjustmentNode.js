["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/nodes/effects/ColorAdjustmentNode.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$nodes$effects$ColorAdjustmentNode=function(global,require,module,exports){function ColorAdjustmentNode(rgb,adjustment,method){_TempNode.TempNode.call(this,\"v3\");this.rgb=rgb;this.adjustment=adjustment;this.method=method||ColorAdjustmentNode.SATURATION}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.ColorAdjustmentNode=ColorAdjustmentNode;var _TempNode=require(\"module$node_modules$three_stdlib$nodes$core$TempNode\"),_FunctionNode=require(\"module$node_modules$three_stdlib$nodes$core$FunctionNode\"),\n_LuminanceNode=require(\"module$node_modules$three_stdlib$nodes$effects$LuminanceNode\");ColorAdjustmentNode.Nodes=function(){var hue=new _FunctionNode.FunctionNode(\"vec3 hue(vec3 rgb, float adjustment) {\\n\\tconst mat3 RGBtoYIQ \\x3d mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);\\n\\tconst mat3 YIQtoRGB \\x3d mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.107, 1.7046);\\n\\tvec3 yiq \\x3d RGBtoYIQ * rgb;\\n\\tfloat hue \\x3d atan(yiq.z, yiq.y) + adjustment;\\n\\tfloat chroma \\x3d sqrt(yiq.z * yiq.z + yiq.y * yiq.y);\\n\\treturn YIQtoRGB * vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));\\n}\"),\nsaturation=new _FunctionNode.FunctionNode(\"vec3 saturation(vec3 rgb, float adjustment) {\\n\\tvec3 intensity \\x3d vec3( luminance( rgb ) );\\n\\treturn mix( intensity, rgb, adjustment );\\n}\",[_LuminanceNode.LuminanceNode.Nodes.luminance]),vibrance=new _FunctionNode.FunctionNode(\"vec3 vibrance(vec3 rgb, float adjustment) {\\n\\tfloat average \\x3d (rgb.r + rgb.g + rgb.b) / 3.0;\\n\\tfloat mx \\x3d max(rgb.r, max(rgb.g, rgb.b));\\n\\tfloat amt \\x3d (mx - average) * (-3.0 * adjustment);\\n\\treturn mix(rgb.rgb, vec3(mx), amt);\\n}\");\nreturn{hue,saturation,vibrance}}();ColorAdjustmentNode.SATURATION=\"saturation\";ColorAdjustmentNode.HUE=\"hue\";ColorAdjustmentNode.VIBRANCE=\"vibrance\";ColorAdjustmentNode.BRIGHTNESS=\"brightness\";ColorAdjustmentNode.CONTRAST=\"contrast\";ColorAdjustmentNode.prototype=Object.create(_TempNode.TempNode.prototype);ColorAdjustmentNode.prototype.constructor=ColorAdjustmentNode;ColorAdjustmentNode.prototype.nodeType=\"ColorAdjustment\";ColorAdjustmentNode.prototype.hashProperties=[\"method\"];ColorAdjustmentNode.prototype.generate=\nfunction(builder,output){var rgb=this.rgb.build(builder,\"v3\"),adjustment=this.adjustment.build(builder,\"f\");switch(this.method){case ColorAdjustmentNode.BRIGHTNESS:return builder.format(\"( \"+rgb+\" + \"+adjustment+\" )\",this.getType(builder),output);case ColorAdjustmentNode.CONTRAST:return builder.format(\"( \"+rgb+\" * \"+adjustment+\" )\",this.getType(builder),output)}var method=builder.include(ColorAdjustmentNode.Nodes[this.method]);return builder.format(method+\"( \"+rgb+\", \"+adjustment+\" )\",this.getType(builder),\noutput)};ColorAdjustmentNode.prototype.copy=function(source){_TempNode.TempNode.prototype.copy.call(this,source);this.rgb=source.rgb;this.adjustment=source.adjustment;this.method=source.method;return this};ColorAdjustmentNode.prototype.toJSON=function(meta){var data=this.getJSONNode(meta);data||(data=this.createJSONNode(meta),data.rgb=this.rgb.toJSON(meta).uuid,data.adjustment=this.adjustment.toJSON(meta).uuid,data.method=this.method);return data}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$nodes$effects$ColorAdjustmentNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorAdjustmentNode = ColorAdjustmentNode;\n\nvar _TempNode = require(\"../core/TempNode.js\");\n\nvar _FunctionNode = require(\"../core/FunctionNode.js\");\n\nvar _LuminanceNode = require(\"./LuminanceNode.js\");\n\nfunction ColorAdjustmentNode(rgb, adjustment, method) {\n  _TempNode.TempNode.call(this, 'v3');\n\n  this.rgb = rgb;\n  this.adjustment = adjustment;\n  this.method = method || ColorAdjustmentNode.SATURATION;\n}\n\nColorAdjustmentNode.Nodes = function () {\n  var hue = new _FunctionNode.FunctionNode(['vec3 hue(vec3 rgb, float adjustment) {', '\tconst mat3 RGBtoYIQ = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);', '\tconst mat3 YIQtoRGB = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.107, 1.7046);', '\tvec3 yiq = RGBtoYIQ * rgb;', '\tfloat hue = atan(yiq.z, yiq.y) + adjustment;', '\tfloat chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);', '\treturn YIQtoRGB * vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));', '}'].join('\\n'));\n  var saturation = new _FunctionNode.FunctionNode([// Algorithm from Chapter 16 of OpenGL Shading Language\n  'vec3 saturation(vec3 rgb, float adjustment) {', '\tvec3 intensity = vec3( luminance( rgb ) );', '\treturn mix( intensity, rgb, adjustment );', '}'].join('\\n'), [_LuminanceNode.LuminanceNode.Nodes.luminance]); // include LuminanceNode function\n\n  var vibrance = new _FunctionNode.FunctionNode([// Shader by Evan Wallace adapted by @lo-th\n  'vec3 vibrance(vec3 rgb, float adjustment) {', '\tfloat average = (rgb.r + rgb.g + rgb.b) / 3.0;', '\tfloat mx = max(rgb.r, max(rgb.g, rgb.b));', '\tfloat amt = (mx - average) * (-3.0 * adjustment);', '\treturn mix(rgb.rgb, vec3(mx), amt);', '}'].join('\\n'));\n  return {\n    hue: hue,\n    saturation: saturation,\n    vibrance: vibrance\n  };\n}();\n\nColorAdjustmentNode.SATURATION = 'saturation';\nColorAdjustmentNode.HUE = 'hue';\nColorAdjustmentNode.VIBRANCE = 'vibrance';\nColorAdjustmentNode.BRIGHTNESS = 'brightness';\nColorAdjustmentNode.CONTRAST = 'contrast';\nColorAdjustmentNode.prototype = Object.create(_TempNode.TempNode.prototype);\nColorAdjustmentNode.prototype.constructor = ColorAdjustmentNode;\nColorAdjustmentNode.prototype.nodeType = 'ColorAdjustment';\nColorAdjustmentNode.prototype.hashProperties = ['method'];\n\nColorAdjustmentNode.prototype.generate = function (builder, output) {\n  var rgb = this.rgb.build(builder, 'v3'),\n      adjustment = this.adjustment.build(builder, 'f');\n\n  switch (this.method) {\n    case ColorAdjustmentNode.BRIGHTNESS:\n      return builder.format('( ' + rgb + ' + ' + adjustment + ' )', this.getType(builder), output);\n\n    case ColorAdjustmentNode.CONTRAST:\n      return builder.format('( ' + rgb + ' * ' + adjustment + ' )', this.getType(builder), output);\n  }\n\n  var method = builder.include(ColorAdjustmentNode.Nodes[this.method]);\n  return builder.format(method + '( ' + rgb + ', ' + adjustment + ' )', this.getType(builder), output);\n};\n\nColorAdjustmentNode.prototype.copy = function (source) {\n  _TempNode.TempNode.prototype.copy.call(this, source);\n\n  this.rgb = source.rgb;\n  this.adjustment = source.adjustment;\n  this.method = source.method;\n  return this;\n};\n\nColorAdjustmentNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.rgb = this.rgb.toJSON(meta).uuid;\n    data.adjustment = this.adjustment.toJSON(meta).uuid;\n    data.method = this.method;\n  }\n\n  return data;\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three_stdlib$nodes$core$FunctionNode","~$module$node_modules$three_stdlib$nodes$effects$LuminanceNode","~$shadow.js","~$module$node_modules$three_stdlib$nodes$core$TempNode"]],"~:properties",["^5",["Nodes","rgb","copy","prototype","method","__esModule","saturation","generate","SATURATION","nodeType","hashProperties","value","hue","VIBRANCE","HUE","ColorAdjustmentNode","adjustment","vibrance","CONTRAST","BRIGHTNESS","constructor","toJSON"]],"~:compiled-at",1630917515267,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$nodes$effects$ColorAdjustmentNode.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/nodes/effects/ColorAdjustmentNode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$nodes$effects$ColorAdjustmentNode\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.ColorAdjustmentNode = ColorAdjustmentNode;\\n\\nvar _TempNode = require(\\\"../core/TempNode.js\\\");\\n\\nvar _FunctionNode = require(\\\"../core/FunctionNode.js\\\");\\n\\nvar _LuminanceNode = require(\\\"./LuminanceNode.js\\\");\\n\\nfunction ColorAdjustmentNode(rgb, adjustment, method) {\\n  _TempNode.TempNode.call(this, 'v3');\\n\\n  this.rgb = rgb;\\n  this.adjustment = adjustment;\\n  this.method = method || ColorAdjustmentNode.SATURATION;\\n}\\n\\nColorAdjustmentNode.Nodes = function () {\\n  var hue = new _FunctionNode.FunctionNode(['vec3 hue(vec3 rgb, float adjustment) {', '\\tconst mat3 RGBtoYIQ = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);', '\\tconst mat3 YIQtoRGB = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.107, 1.7046);', '\\tvec3 yiq = RGBtoYIQ * rgb;', '\\tfloat hue = atan(yiq.z, yiq.y) + adjustment;', '\\tfloat chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);', '\\treturn YIQtoRGB * vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));', '}'].join('\\\\n'));\\n  var saturation = new _FunctionNode.FunctionNode([// Algorithm from Chapter 16 of OpenGL Shading Language\\n  'vec3 saturation(vec3 rgb, float adjustment) {', '\\tvec3 intensity = vec3( luminance( rgb ) );', '\\treturn mix( intensity, rgb, adjustment );', '}'].join('\\\\n'), [_LuminanceNode.LuminanceNode.Nodes.luminance]); // include LuminanceNode function\\n\\n  var vibrance = new _FunctionNode.FunctionNode([// Shader by Evan Wallace adapted by @lo-th\\n  'vec3 vibrance(vec3 rgb, float adjustment) {', '\\tfloat average = (rgb.r + rgb.g + rgb.b) / 3.0;', '\\tfloat mx = max(rgb.r, max(rgb.g, rgb.b));', '\\tfloat amt = (mx - average) * (-3.0 * adjustment);', '\\treturn mix(rgb.rgb, vec3(mx), amt);', '}'].join('\\\\n'));\\n  return {\\n    hue: hue,\\n    saturation: saturation,\\n    vibrance: vibrance\\n  };\\n}();\\n\\nColorAdjustmentNode.SATURATION = 'saturation';\\nColorAdjustmentNode.HUE = 'hue';\\nColorAdjustmentNode.VIBRANCE = 'vibrance';\\nColorAdjustmentNode.BRIGHTNESS = 'brightness';\\nColorAdjustmentNode.CONTRAST = 'contrast';\\nColorAdjustmentNode.prototype = Object.create(_TempNode.TempNode.prototype);\\nColorAdjustmentNode.prototype.constructor = ColorAdjustmentNode;\\nColorAdjustmentNode.prototype.nodeType = 'ColorAdjustment';\\nColorAdjustmentNode.prototype.hashProperties = ['method'];\\n\\nColorAdjustmentNode.prototype.generate = function (builder, output) {\\n  var rgb = this.rgb.build(builder, 'v3'),\\n      adjustment = this.adjustment.build(builder, 'f');\\n\\n  switch (this.method) {\\n    case ColorAdjustmentNode.BRIGHTNESS:\\n      return builder.format('( ' + rgb + ' + ' + adjustment + ' )', this.getType(builder), output);\\n\\n    case ColorAdjustmentNode.CONTRAST:\\n      return builder.format('( ' + rgb + ' * ' + adjustment + ' )', this.getType(builder), output);\\n  }\\n\\n  var method = builder.include(ColorAdjustmentNode.Nodes[this.method]);\\n  return builder.format(method + '( ' + rgb + ', ' + adjustment + ' )', this.getType(builder), output);\\n};\\n\\nColorAdjustmentNode.prototype.copy = function (source) {\\n  _TempNode.TempNode.prototype.copy.call(this, source);\\n\\n  this.rgb = source.rgb;\\n  this.adjustment = source.adjustment;\\n  this.method = source.method;\\n  return this;\\n};\\n\\nColorAdjustmentNode.prototype.toJSON = function (meta) {\\n  var data = this.getJSONNode(meta);\\n\\n  if (!data) {\\n    data = this.createJSONNode(meta);\\n    data.rgb = this.rgb.toJSON(meta).uuid;\\n    data.adjustment = this.adjustment.toJSON(meta).uuid;\\n    data.method = this.method;\\n  }\\n\\n  return data;\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"ColorAdjustmentNode\",\"rgb\",\"adjustment\",\"method\",\"_TempNode\",\"TempNode\",\"call\",\"SATURATION\",\"Object\",\"defineProperty\",\"value\",\"_FunctionNode\",\"_LuminanceNode\",\"Nodes\",\"hue\",\"FunctionNode\",\"saturation\",\"LuminanceNode\",\"luminance\",\"vibrance\",\"HUE\",\"VIBRANCE\",\"BRIGHTNESS\",\"CONTRAST\",\"prototype\",\"create\",\"constructor\",\"nodeType\",\"hashProperties\",\"generate\",\"ColorAdjustmentNode.prototype.generate\",\"builder\",\"output\",\"build\",\"format\",\"getType\",\"include\",\"copy\",\"ColorAdjustmentNode.prototype.copy\",\"source\",\"toJSON\",\"ColorAdjustmentNode.prototype.toJSON\",\"meta\",\"data\",\"getJSONNode\",\"createJSONNode\",\"uuid\"]\n}\n"]