["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/RGBShiftShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$RGBShiftShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.RGBShiftShader=void 0;exports.RGBShiftShader={uniforms:{tDiffuse:{value:null},amount:{value:.005},angle:{value:0}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform sampler2D tDiffuse;\\nuniform float amount;\\nuniform float angle;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec2 offset \\x3d amount * vec2( cos(angle), sin(angle));\\n\\tvec4 cr \\x3d texture2D(tDiffuse, vUv + offset);\\n\\tvec4 cga \\x3d texture2D(tDiffuse, vUv);\\n\\tvec4 cb \\x3d texture2D(tDiffuse, vUv - offset);\\n\\tgl_FragColor \\x3d vec4(cr.r, cga.g, cb.b, cga.a);\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$RGBShiftShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RGBShiftShader = void 0;\n\n/**\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\nvar RGBShiftShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    amount: {\n      value: 0.005\n    },\n    angle: {\n      value: 0.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float amount;', 'uniform float angle;', 'varying vec2 vUv;', 'void main() {', '\tvec2 offset = amount * vec2( cos(angle), sin(angle));', '\tvec4 cr = texture2D(tDiffuse, vUv + offset);', '\tvec4 cga = texture2D(tDiffuse, vUv);', '\tvec4 cb = texture2D(tDiffuse, vUv - offset);', '\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);', '}'].join('\\n')\n};\nexports.RGBShiftShader = RGBShiftShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","__esModule","tDiffuse","angle","vertexShader","value","RGBShiftShader","amount","uniforms"]],"~:compiled-at",1630917515581,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$RGBShiftShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,cAAR,CAAyB,IAAK,EA0B9BJ,QAAQI,CAAAA,cAAR,CAfqBA,CACnBC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,OAAQ,CACNJ,MAAO,IADD,CAJA,CAORK,MAAO,CACLL,MAAO,CADF,CAPC,CADSC,CAYnBK,aAAiJ,qIAZ9HL,CAanBM,eAA+X,iXAb5WN,CAjB+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/RGBShiftShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$RGBShiftShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.RGBShiftShader = void 0;\\n\\n/**\\n * RGB Shift Shader\\n * Shifts red and blue channels from center in opposite directions\\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\\n * by Tom Butterworth / http://kriss.cx/tom/\\n *\\n * amount: shift distance (1 is width of input)\\n * angle: shift angle in radians\\n */\\nvar RGBShiftShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    amount: {\\n      value: 0.005\\n    },\\n    angle: {\\n      value: 0.0\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float amount;', 'uniform float angle;', 'varying vec2 vUv;', 'void main() {', '\\tvec2 offset = amount * vec2( cos(angle), sin(angle));', '\\tvec4 cr = texture2D(tDiffuse, vUv + offset);', '\\tvec4 cga = texture2D(tDiffuse, vUv);', '\\tvec4 cb = texture2D(tDiffuse, vUv - offset);', '\\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);', '}'].join('\\\\n')\\n};\\nexports.RGBShiftShader = RGBShiftShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"RGBShiftShader\",\"uniforms\",\"tDiffuse\",\"amount\",\"angle\",\"vertexShader\",\"fragmentShader\"]\n}\n"]