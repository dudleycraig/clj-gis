["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"~:js","shadow$provide.module$node_modules$$react_three$drei$materials$MeshReflectorMaterial=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];\ndescriptor.enumerable=descriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);staticProps&&_defineProperties(Constructor,staticProps);return Constructor}function _getPrototypeOf(o$jscomp$0){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||\nObject.getPrototypeOf(o)};return _getPrototypeOf(o$jscomp$0)}function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&null!==superClass)throw new TypeError(\"Super expression must either be null or a function\");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}});superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o$jscomp$0,p$jscomp$0){_setPrototypeOf=Object.setPrototypeOf||function(o,\np){o.__proto__=p;return o};return _setPrototypeOf(o$jscomp$0,p$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.MeshReflectorMaterial=void 0;global=function(_MeshStandardMaterial){function MeshReflectorMaterial(){var parameters=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};if(!(this instanceof MeshReflectorMaterial))throw new TypeError(\"Cannot call a class as a function\");var _this=_getPrototypeOf(MeshReflectorMaterial).call(this,parameters);if(!_this||\"object\"!==\n_typeof(_this)&&\"function\"!==typeof _this){if(void 0===this)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");_this=this}_this._debug={value:0};_this._tDepth={value:null};_this._distortionMap={value:null};_this._tDiffuse={value:null};_this._u_mipmap_0={value:null};_this._u_mipmap_1={value:null};_this._u_mipmap_2={value:null};_this._u_mipmap_3={value:null};_this._u_mipmap_4={value:null};_this._u_mipmap_5={value:null};_this._u_mipmap_6={value:null};_this._u_mipmap_7=\n{value:null};_this._u_mipmap_res_0={value:null};_this._u_mipmap_res_1={value:null};_this._u_mipmap_res_2={value:null};_this._u_mipmap_res_3={value:null};_this._u_mipmap_res_4={value:null};_this._u_mipmap_res_5={value:null};_this._u_mipmap_res_6={value:null};_this._u_mipmap_res_7={value:null};_this._textureMatrix={value:null};_this._mirror={value:0};_this._mixBlur={value:0};_this._blurStrength={value:.5};_this._minDepthThreshold={value:.9};_this._maxDepthThreshold={value:1};_this._depthScale={value:0};\n_this._depthToBlurRatioBias={value:.25};_this._distortion={value:1};_this.setValues(parameters);return _this}_inherits(MeshReflectorMaterial,_MeshStandardMaterial);_createClass(MeshReflectorMaterial,[{key:\"onBeforeCompile\",value:function(shader){var _shader$defines;null!=(_shader$defines=shader.defines)&&_shader$defines.USE_UV||(shader.defines.USE_UV=\"\");shader.uniforms.debug=this._debug;shader.uniforms.tDiffuse=this._tDiffuse;shader.uniforms.tDepth=this._tDepth;shader.uniforms.distortionMap=this._distortionMap;\nshader.uniforms.u_mipmap_0=this._u_mipmap_0;shader.uniforms.u_mipmap_1=this._u_mipmap_1;shader.uniforms.u_mipmap_2=this._u_mipmap_2;shader.uniforms.u_mipmap_3=this._u_mipmap_3;shader.uniforms.u_mipmap_4=this._u_mipmap_4;shader.uniforms.u_mipmap_5=this._u_mipmap_5;shader.uniforms.u_mipmap_6=this._u_mipmap_6;shader.uniforms.u_mipmap_7=this._u_mipmap_7;shader.uniforms.u_mipmap_res_0=this._u_mipmap_res_0;shader.uniforms.u_mipmap_res_1=this._u_mipmap_res_1;shader.uniforms.u_mipmap_res_2=this._u_mipmap_res_2;\nshader.uniforms.u_mipmap_res_3=this._u_mipmap_res_3;shader.uniforms.u_mipmap_res_4=this._u_mipmap_res_4;shader.uniforms.u_mipmap_res_5=this._u_mipmap_res_5;shader.uniforms.u_mipmap_res_6=this._u_mipmap_res_6;shader.uniforms.u_mipmap_res_7=this._u_mipmap_res_7;shader.uniforms.textureMatrix=this._textureMatrix;shader.uniforms.mirror=this._mirror;shader.uniforms.mixBlur=this._mixBlur;shader.uniforms.mixStrength=this._blurStrength;shader.uniforms.minDepthThreshold=this._minDepthThreshold;shader.uniforms.maxDepthThreshold=\nthis._maxDepthThreshold;shader.uniforms.depthScale=this._depthScale;shader.uniforms.depthToBlurRatioBias=this._depthToBlurRatioBias;shader.uniforms.distortion=this._distortion;shader.vertexShader=\"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \".concat(shader.vertexShader);shader.vertexShader=shader.vertexShader.replace(\"#include \\x3cproject_vertex\\x3e\",\"#include \\x3cproject_vertex\\x3e\\n        my_vUv \\x3d textureMatrix * vec4( position, 1.0 );\\n        gl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\nshader.fragmentShader=\"\\n        uniform int debug;\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDepth;\\n        uniform sampler2D distortionMap;\\n        uniform sampler2D u_mipmap_0;\\n        uniform sampler2D u_mipmap_1;\\n        uniform sampler2D u_mipmap_2;\\n        uniform sampler2D u_mipmap_3;\\n        uniform sampler2D u_mipmap_4;\\n        uniform sampler2D u_mipmap_5;\\n        uniform sampler2D u_mipmap_6;\\n        uniform sampler2D u_mipmap_7;\\n        uniform vec2 u_mipmap_res_0;\\n        uniform vec2 u_mipmap_res_1;\\n        uniform vec2 u_mipmap_res_2;\\n        uniform vec2 u_mipmap_res_3;\\n        uniform vec2 u_mipmap_res_4;\\n        uniform vec2 u_mipmap_res_5;\\n        uniform vec2 u_mipmap_res_6;\\n        uniform vec2 u_mipmap_res_7;\\n        uniform float distortion;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec4 my_vUv;  \\n        \\n        // from http://www.java-gaming.org/index.php?topic\\x3d35123.0\\n        vec4 cubic( float v ) {\\n          vec4 n \\x3d vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\\n          vec4 s \\x3d n * n * n;\\n          float x \\x3d s.x;\\n          float y \\x3d s.y - 4.0 * s.x;\\n          float z \\x3d s.z - 4.0 * s.y + 6.0 * s.x;\\n          float w \\x3d 6.0 - x - y - z;\\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\\n        }\\n        \\n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\\n          vec2 invTexSize \\x3d 1.0 / texSize;\\n          texCoords \\x3d texCoords * texSize - 0.5;\\n          vec2 fxy \\x3d fract( texCoords );\\n          texCoords -\\x3d fxy;\\n\\n          vec4 xcubic \\x3d cubic( fxy.x );\\n          vec4 ycubic \\x3d cubic( fxy.y );\\n          vec4 c \\x3d texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\\n          vec4 s \\x3d vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\\n\\n          vec4 offset \\x3d c + vec4( xcubic.yw, ycubic.yw ) / s;\\n          offset *\\x3d invTexSize.xxyy;\\n        \\n          vec4 sample0 \\x3d texture2D( sampler, offset.xz);\\n          vec4 sample1 \\x3d texture2D( sampler, offset.yz);\\n          vec4 sample2 \\x3d texture2D( sampler, offset.xw);\\n          vec4 sample3 \\x3d texture2D( sampler, offset.yw);\\n        \\n          float sx \\x3d s.x / ( s.x + s.y );\\n          float sy \\x3d s.z / ( s.z + s.w );\\n\\n          return mix(\\n            mix(\\n              sample3,\\n              sample2,\\n              sx\\n            ),\\n            mix(\\n              sample1,\\n              sample0,\\n              sx\\n            ),\\n            sy\\n          );\\n        }\\n\\n\\n        \".concat(shader.fragmentShader);\nshader.fragmentShader=shader.fragmentShader.replace(\"#include \\x3cemissivemap_fragment\\x3e\",\"#include \\x3cemissivemap_fragment\\x3e\\n    \\n      float depthFactor \\x3d 1.0;\\n      float distortionFactor \\x3d 0.0;\\n      vec3 my_normal \\x3d vec3(0.0);\\n      float reflectorRoughnessFactor \\x3d roughness;\\n      vec3 coord \\x3d my_vUv.xyz / my_vUv.w;\\n\\n      #ifdef USE_DISTORTION\\n        distortionFactor \\x3d texture2D(distortionMap, vUv).r * distortion;\\n      #endif\\n\\n      #ifdef USE_NORMALMAP\\n        vec4 normalColor \\x3d texture2D(normalMap, vUv * normalScale);\\n        my_normal \\x3d normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\\n      #endif\\n\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness \\x3d texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *\\x3d reflectorTexelRoughness.g;\\n      #endif\\n\\n      vec2 proj_vUv \\x3d coord.xy + coord.z * my_normal.xz * 0.01;\\n      proj_vUv.x +\\x3d distortionFactor;\\n      proj_vUv.y +\\x3d distortionFactor;\\n      \\n      float lod \\x3d 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\\n\\n      #ifdef USE_DEPTH\\n        vec4 depth \\x3d texture2D(tDepth, proj_vUv);\\n        depthFactor \\x3d smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n        depthFactor *\\x3d depthScale;\\n        depthFactor \\x3d max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\\n      #endif\\n\\n      vec4 baseColor \\x3d texture2D(tDiffuse, proj_vUv);\\n      vec4 mixedColor;\\n\\n      float _lod \\x3d (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\\n      if (_lod \\x3c 1.) {\\n        vec4 one \\x3d textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\\n        vec4 two \\x3d textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        mixedColor \\x3d mix(one, two, _lod);\\n      } else if (_lod \\x3c 2.) {\\n        vec4 one \\x3d textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        vec4 two \\x3d textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        mixedColor \\x3d mix(one, two, _lod - 1.0);\\n      } else if (_lod \\x3c 3.) {\\n        vec4 one \\x3d textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        vec4 two \\x3d textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        mixedColor \\x3d mix(one, two, _lod - 2.0);\\n      } else if (_lod \\x3c 4.) {\\n        vec4 one \\x3d textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        vec4 two \\x3d textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        mixedColor \\x3d mix(one, two, _lod - 3.0);\\n      } else if (_lod \\x3c 5.) {\\n        vec4 one \\x3d textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        vec4 two \\x3d textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        mixedColor \\x3d mix(one, two, _lod - 4.0);\\n      } else if (_lod \\x3c 6.) {\\n        vec4 one \\x3d textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        vec4 two \\x3d textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        mixedColor \\x3d mix(one, two, _lod - 5.0);\\n      } else if (_lod \\x3c 7.) {\\n        vec4 one \\x3d textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        vec4 two \\x3d textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor \\x3d mix(one, two, _lod - 6.0);\\n      } else {\\n        vec4 one \\x3d textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor \\x3d mix(one, baseColor, _lod - 7.0);\\n      }\\n\\n      mixedColor.rgb *\\x3d depthFactor;\\n      diffuseColor.rgb \\x3d diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \\n      diffuseColor \\x3d sRGBToLinear(diffuseColor);\\n\\n      if (debug \\x3d\\x3d 1) {\\n        diffuseColor \\x3d sRGBToLinear(vec4(vec3(depthFactor), 1.0));\\n      }\\n      if (debug \\x3d\\x3d 2) {\\n        diffuseColor \\x3d sRGBToLinear(texture2D(tDiffuse, proj_vUv));\\n      }\\n      if (debug \\x3d\\x3d 3) {\\n        diffuseColor \\x3d sRGBToLinear(texture2D(distortionMap, vUv));\\n      }\\n      if (debug \\x3d\\x3d 4) {\\n        diffuseColor \\x3d sRGBToLinear(vec4(vec3(lod), 1.0));\\n      }\\n      \")}},\n{key:\"tDiffuse\",get:function(){return this._tDiffuse.value},set:function(v){this._tDiffuse.value=v}},{key:\"tDepth\",get:function(){return this._tDepth.value},set:function(v){this._tDepth.value=v}},{key:\"distortionMap\",get:function(){return this._distortionMap.value},set:function(v){this._distortionMap.value=v}},{key:\"u_mipmap_0\",get:function(){return this._u_mipmap_0.value},set:function(v){this._u_mipmap_0.value=v}},{key:\"u_mipmap_1\",get:function(){return this._u_mipmap_1.value},set:function(v){this._u_mipmap_1.value=\nv}},{key:\"u_mipmap_2\",get:function(){return this._u_mipmap_2.value},set:function(v){this._u_mipmap_2.value=v}},{key:\"u_mipmap_3\",get:function(){return this._u_mipmap_3.value},set:function(v){this._u_mipmap_3.value=v}},{key:\"u_mipmap_4\",get:function(){return this._u_mipmap_4.value},set:function(v){this._u_mipmap_4.value=v}},{key:\"u_mipmap_5\",get:function(){return this._u_mipmap_5.value},set:function(v){this._u_mipmap_5.value=v}},{key:\"u_mipmap_6\",get:function(){return this._u_mipmap_6.value},set:function(v){this._u_mipmap_6.value=\nv}},{key:\"u_mipmap_7\",get:function(){return this._u_mipmap_7.value},set:function(v){this._u_mipmap_7.value=v}},{key:\"u_mipmap_res_0\",get:function(){return this._u_mipmap_res_0.value},set:function(v){this._u_mipmap_res_0.value=v}},{key:\"u_mipmap_res_1\",get:function(){return this._u_mipmap_res_1.value},set:function(v){this._u_mipmap_res_1.value=v}},{key:\"u_mipmap_res_2\",get:function(){return this._u_mipmap_res_2.value},set:function(v){this._u_mipmap_res_2.value=v}},{key:\"u_mipmap_res_3\",get:function(){return this._u_mipmap_res_3.value},\nset:function(v){this._u_mipmap_res_3.value=v}},{key:\"u_mipmap_res_4\",get:function(){return this._u_mipmap_res_4.value},set:function(v){this._u_mipmap_res_4.value=v}},{key:\"u_mipmap_res_5\",get:function(){return this._u_mipmap_res_5.value},set:function(v){this._u_mipmap_res_5.value=v}},{key:\"u_mipmap_res_6\",get:function(){return this._u_mipmap_res_6.value},set:function(v){this._u_mipmap_res_6.value=v}},{key:\"u_mipmap_res_7\",get:function(){return this._u_mipmap_res_7.value},set:function(v){this._u_mipmap_res_7.value=\nv}},{key:\"textureMatrix\",get:function(){return this._textureMatrix.value},set:function(v){this._textureMatrix.value=v}},{key:\"mirror\",get:function(){return this._mirror.value},set:function(v){this._mirror.value=v}},{key:\"mixBlur\",get:function(){return this._mixBlur.value},set:function(v){this._mixBlur.value=v}},{key:\"mixStrength\",get:function(){return this._blurStrength.value},set:function(v){this._blurStrength.value=v}},{key:\"minDepthThreshold\",get:function(){return this._minDepthThreshold.value},\nset:function(v){this._minDepthThreshold.value=v}},{key:\"maxDepthThreshold\",get:function(){return this._maxDepthThreshold.value},set:function(v){this._maxDepthThreshold.value=v}},{key:\"depthScale\",get:function(){return this._depthScale.value},set:function(v){this._depthScale.value=v}},{key:\"debug\",get:function(){return this._debug.value},set:function(v){this._debug.value=v}},{key:\"depthToBlurRatioBias\",get:function(){return this._depthToBlurRatioBias.value},set:function(v){this._depthToBlurRatioBias.value=\nv}},{key:\"distortion\",get:function(){return this._distortion.value},set:function(v){this._distortion.value=v}}]);return MeshReflectorMaterial}(require(\"module$node_modules$three$build$three_module\").MeshStandardMaterial);exports.MeshReflectorMaterial=global}","~:source","shadow$provide[\"module$node_modules$$react_three$drei$materials$MeshReflectorMaterial\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MeshReflectorMaterial = void 0;\n\nvar _three = require(\"three\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar MeshReflectorMaterial =\n/*#__PURE__*/\nfunction (_MeshStandardMaterial) {\n  _inherits(MeshReflectorMaterial, _MeshStandardMaterial);\n\n  function MeshReflectorMaterial() {\n    var _this;\n\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, MeshReflectorMaterial);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MeshReflectorMaterial).call(this, parameters));\n    _this._debug = {\n      value: 0\n    };\n    _this._tDepth = {\n      value: null\n    };\n    _this._distortionMap = {\n      value: null\n    };\n    _this._tDiffuse = {\n      value: null\n    };\n    _this._u_mipmap_0 = {\n      value: null\n    };\n    _this._u_mipmap_1 = {\n      value: null\n    };\n    _this._u_mipmap_2 = {\n      value: null\n    };\n    _this._u_mipmap_3 = {\n      value: null\n    };\n    _this._u_mipmap_4 = {\n      value: null\n    };\n    _this._u_mipmap_5 = {\n      value: null\n    };\n    _this._u_mipmap_6 = {\n      value: null\n    };\n    _this._u_mipmap_7 = {\n      value: null\n    };\n    _this._u_mipmap_res_0 = {\n      value: null\n    };\n    _this._u_mipmap_res_1 = {\n      value: null\n    };\n    _this._u_mipmap_res_2 = {\n      value: null\n    };\n    _this._u_mipmap_res_3 = {\n      value: null\n    };\n    _this._u_mipmap_res_4 = {\n      value: null\n    };\n    _this._u_mipmap_res_5 = {\n      value: null\n    };\n    _this._u_mipmap_res_6 = {\n      value: null\n    };\n    _this._u_mipmap_res_7 = {\n      value: null\n    };\n    _this._textureMatrix = {\n      value: null\n    };\n    _this._mirror = {\n      value: 0.0\n    };\n    _this._mixBlur = {\n      value: 0.0\n    };\n    _this._blurStrength = {\n      value: 0.5\n    };\n    _this._minDepthThreshold = {\n      value: 0.9\n    };\n    _this._maxDepthThreshold = {\n      value: 1\n    };\n    _this._depthScale = {\n      value: 0\n    };\n    _this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    _this._distortion = {\n      value: 1\n    };\n\n    _this.setValues(parameters);\n\n    return _this;\n  }\n\n  _createClass(MeshReflectorMaterial, [{\n    key: \"onBeforeCompile\",\n    value: function onBeforeCompile(shader) {\n      var _shader$defines;\n\n      if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n        shader.defines.USE_UV = '';\n      }\n\n      shader.uniforms.debug = this._debug;\n      shader.uniforms.tDiffuse = this._tDiffuse;\n      shader.uniforms.tDepth = this._tDepth;\n      shader.uniforms.distortionMap = this._distortionMap;\n      shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n      shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n      shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n      shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n      shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n      shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n      shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n      shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n      shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n      shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n      shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n      shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n      shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n      shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n      shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n      shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n      shader.uniforms.textureMatrix = this._textureMatrix;\n      shader.uniforms.mirror = this._mirror;\n      shader.uniforms.mixBlur = this._mixBlur;\n      shader.uniforms.mixStrength = this._blurStrength;\n      shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n      shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n      shader.uniforms.depthScale = this._depthScale;\n      shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n      shader.uniforms.distortion = this._distortion;\n      shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \".concat(shader.vertexShader);\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n      shader.fragmentShader = \"\\n        uniform int debug;\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDepth;\\n        uniform sampler2D distortionMap;\\n        uniform sampler2D u_mipmap_0;\\n        uniform sampler2D u_mipmap_1;\\n        uniform sampler2D u_mipmap_2;\\n        uniform sampler2D u_mipmap_3;\\n        uniform sampler2D u_mipmap_4;\\n        uniform sampler2D u_mipmap_5;\\n        uniform sampler2D u_mipmap_6;\\n        uniform sampler2D u_mipmap_7;\\n        uniform vec2 u_mipmap_res_0;\\n        uniform vec2 u_mipmap_res_1;\\n        uniform vec2 u_mipmap_res_2;\\n        uniform vec2 u_mipmap_res_3;\\n        uniform vec2 u_mipmap_res_4;\\n        uniform vec2 u_mipmap_res_5;\\n        uniform vec2 u_mipmap_res_6;\\n        uniform vec2 u_mipmap_res_7;\\n        uniform float distortion;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec4 my_vUv;  \\n        \\n        // from http://www.java-gaming.org/index.php?topic=35123.0\\n        vec4 cubic( float v ) {\\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\\n          vec4 s = n * n * n;\\n          float x = s.x;\\n          float y = s.y - 4.0 * s.x;\\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\\n          float w = 6.0 - x - y - z;\\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\\n        }\\n        \\n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\\n          vec2 invTexSize = 1.0 / texSize;\\n          texCoords = texCoords * texSize - 0.5;\\n          vec2 fxy = fract( texCoords );\\n          texCoords -= fxy;\\n\\n          vec4 xcubic = cubic( fxy.x );\\n          vec4 ycubic = cubic( fxy.y );\\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\\n\\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\\n          offset *= invTexSize.xxyy;\\n        \\n          vec4 sample0 = texture2D( sampler, offset.xz);\\n          vec4 sample1 = texture2D( sampler, offset.yz);\\n          vec4 sample2 = texture2D( sampler, offset.xw);\\n          vec4 sample3 = texture2D( sampler, offset.yw);\\n        \\n          float sx = s.x / ( s.x + s.y );\\n          float sy = s.z / ( s.z + s.w );\\n\\n          return mix(\\n            mix(\\n              sample3,\\n              sample2,\\n              sx\\n            ),\\n            mix(\\n              sample1,\\n              sample0,\\n              sx\\n            ),\\n            sy\\n          );\\n        }\\n\\n\\n        \".concat(shader.fragmentShader);\n      shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n    \\n      float depthFactor = 1.0;\\n      float distortionFactor = 0.0;\\n      vec3 my_normal = vec3(0.0);\\n      float reflectorRoughnessFactor = roughness;\\n      vec3 coord = my_vUv.xyz / my_vUv.w;\\n\\n      #ifdef USE_DISTORTION\\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\\n      #endif\\n\\n      #ifdef USE_NORMALMAP\\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\\n      #endif\\n\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n\\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\\n      proj_vUv.x += distortionFactor;\\n      proj_vUv.y += distortionFactor;\\n      \\n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\\n\\n      #ifdef USE_DEPTH\\n        vec4 depth = texture2D(tDepth, proj_vUv);\\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n        depthFactor *= depthScale;\\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\\n      #endif\\n\\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\\n      vec4 mixedColor;\\n\\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\\n      if (_lod < 1.) {\\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        mixedColor = mix(one, two, _lod);\\n      } else if (_lod < 2.) {\\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        mixedColor = mix(one, two, _lod - 1.0);\\n      } else if (_lod < 3.) {\\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        mixedColor = mix(one, two, _lod - 2.0);\\n      } else if (_lod < 4.) {\\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        mixedColor = mix(one, two, _lod - 3.0);\\n      } else if (_lod < 5.) {\\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        mixedColor = mix(one, two, _lod - 4.0);\\n      } else if (_lod < 6.) {\\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        mixedColor = mix(one, two, _lod - 5.0);\\n      } else if (_lod < 7.) {\\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, two, _lod - 6.0);\\n      } else {\\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, baseColor, _lod - 7.0);\\n      }\\n\\n      mixedColor.rgb *= depthFactor;\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \\n      diffuseColor = sRGBToLinear(diffuseColor);\\n\\n      if (debug == 1) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\\n      }\\n      if (debug == 2) {\\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\\n      }\\n      if (debug == 3) {\\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\\n      }\\n      if (debug == 4) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\\n      }\\n      \");\n    }\n  }, {\n    key: \"tDiffuse\",\n    get: function get() {\n      return this._tDiffuse.value;\n    },\n    set: function set(v) {\n      this._tDiffuse.value = v;\n    }\n  }, {\n    key: \"tDepth\",\n    get: function get() {\n      return this._tDepth.value;\n    },\n    set: function set(v) {\n      this._tDepth.value = v;\n    }\n  }, {\n    key: \"distortionMap\",\n    get: function get() {\n      return this._distortionMap.value;\n    },\n    set: function set(v) {\n      this._distortionMap.value = v;\n    }\n  }, {\n    key: \"u_mipmap_0\",\n    get: function get() {\n      return this._u_mipmap_0.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_0.value = v;\n    }\n  }, {\n    key: \"u_mipmap_1\",\n    get: function get() {\n      return this._u_mipmap_1.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_1.value = v;\n    }\n  }, {\n    key: \"u_mipmap_2\",\n    get: function get() {\n      return this._u_mipmap_2.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_2.value = v;\n    }\n  }, {\n    key: \"u_mipmap_3\",\n    get: function get() {\n      return this._u_mipmap_3.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_3.value = v;\n    }\n  }, {\n    key: \"u_mipmap_4\",\n    get: function get() {\n      return this._u_mipmap_4.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_4.value = v;\n    }\n  }, {\n    key: \"u_mipmap_5\",\n    get: function get() {\n      return this._u_mipmap_5.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_5.value = v;\n    }\n  }, {\n    key: \"u_mipmap_6\",\n    get: function get() {\n      return this._u_mipmap_6.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_6.value = v;\n    }\n  }, {\n    key: \"u_mipmap_7\",\n    get: function get() {\n      return this._u_mipmap_7.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_7.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_0\",\n    get: function get() {\n      return this._u_mipmap_res_0.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_0.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_1\",\n    get: function get() {\n      return this._u_mipmap_res_1.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_1.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_2\",\n    get: function get() {\n      return this._u_mipmap_res_2.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_2.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_3\",\n    get: function get() {\n      return this._u_mipmap_res_3.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_3.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_4\",\n    get: function get() {\n      return this._u_mipmap_res_4.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_4.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_5\",\n    get: function get() {\n      return this._u_mipmap_res_5.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_5.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_6\",\n    get: function get() {\n      return this._u_mipmap_res_6.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_6.value = v;\n    }\n  }, {\n    key: \"u_mipmap_res_7\",\n    get: function get() {\n      return this._u_mipmap_res_7.value;\n    },\n    set: function set(v) {\n      this._u_mipmap_res_7.value = v;\n    }\n  }, {\n    key: \"textureMatrix\",\n    get: function get() {\n      return this._textureMatrix.value;\n    },\n    set: function set(v) {\n      this._textureMatrix.value = v;\n    }\n  }, {\n    key: \"mirror\",\n    get: function get() {\n      return this._mirror.value;\n    },\n    set: function set(v) {\n      this._mirror.value = v;\n    }\n  }, {\n    key: \"mixBlur\",\n    get: function get() {\n      return this._mixBlur.value;\n    },\n    set: function set(v) {\n      this._mixBlur.value = v;\n    }\n  }, {\n    key: \"mixStrength\",\n    get: function get() {\n      return this._blurStrength.value;\n    },\n    set: function set(v) {\n      this._blurStrength.value = v;\n    }\n  }, {\n    key: \"minDepthThreshold\",\n    get: function get() {\n      return this._minDepthThreshold.value;\n    },\n    set: function set(v) {\n      this._minDepthThreshold.value = v;\n    }\n  }, {\n    key: \"maxDepthThreshold\",\n    get: function get() {\n      return this._maxDepthThreshold.value;\n    },\n    set: function set(v) {\n      this._maxDepthThreshold.value = v;\n    }\n  }, {\n    key: \"depthScale\",\n    get: function get() {\n      return this._depthScale.value;\n    },\n    set: function set(v) {\n      this._depthScale.value = v;\n    }\n  }, {\n    key: \"debug\",\n    get: function get() {\n      return this._debug.value;\n    },\n    set: function set(v) {\n      this._debug.value = v;\n    }\n  }, {\n    key: \"depthToBlurRatioBias\",\n    get: function get() {\n      return this._depthToBlurRatioBias.value;\n    },\n    set: function set(v) {\n      this._depthToBlurRatioBias.value = v;\n    }\n  }, {\n    key: \"distortion\",\n    get: function get() {\n      return this._distortion.value;\n    },\n    set: function set(v) {\n      this._distortion.value = v;\n    }\n  }]);\n\n  return MeshReflectorMaterial;\n}(_three.MeshStandardMaterial);\n\nexports.MeshReflectorMaterial = MeshReflectorMaterial;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["fragmentShader","u_mipmap_4","u_mipmap_res_6","u_mipmap_1","u_mipmap_res_7","depthToBlurRatioBias","u_mipmap_7","textureMatrix","_depthScale","prototype","_u_mipmap_6","u_mipmap_res_0","_u_mipmap_2","key","__esModule","u_mipmap_res_5","_u_mipmap_res_2","_u_mipmap_res_3","_u_mipmap_5","u_mipmap_res_1","MeshReflectorMaterial","tDiffuse","depthScale","_mixBlur","u_mipmap_res_4","u_mipmap_res_2","vertexShader","_u_mipmap_0","_distortion","configurable","_textureMatrix","value","enumerable","u_mipmap_3","_debug","_mirror","tDepth","_u_mipmap_res_7","writable","_u_mipmap_res_5","debug","u_mipmap_res_3","distortion","_u_mipmap_7","mirror","_depthToBlurRatioBias","_u_mipmap_4","_minDepthThreshold","_tDiffuse","__proto__","u_mipmap_6","mixBlur","_u_mipmap_res_0","_distortionMap","_u_mipmap_res_1","set","distortionMap","_blurStrength","_u_mipmap_1","_maxDepthThreshold","u_mipmap_0","minDepthThreshold","u_mipmap_5","_u_mipmap_3","get","mixStrength","_u_mipmap_res_6","maxDepthThreshold","USE_UV","constructor","u_mipmap_2","_u_mipmap_res_4","_tDepth"]],"~:compiled-at",1630917516157,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$react_three$drei$materials$MeshReflectorMaterial.js\",\n\"lineCount\":19,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@react-three/drei/materials/MeshReflectorMaterial.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$react_three$drei$materials$MeshReflectorMaterial\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.MeshReflectorMaterial = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nvar MeshReflectorMaterial =\\n/*#__PURE__*/\\nfunction (_MeshStandardMaterial) {\\n  _inherits(MeshReflectorMaterial, _MeshStandardMaterial);\\n\\n  function MeshReflectorMaterial() {\\n    var _this;\\n\\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n    _classCallCheck(this, MeshReflectorMaterial);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MeshReflectorMaterial).call(this, parameters));\\n    _this._debug = {\\n      value: 0\\n    };\\n    _this._tDepth = {\\n      value: null\\n    };\\n    _this._distortionMap = {\\n      value: null\\n    };\\n    _this._tDiffuse = {\\n      value: null\\n    };\\n    _this._u_mipmap_0 = {\\n      value: null\\n    };\\n    _this._u_mipmap_1 = {\\n      value: null\\n    };\\n    _this._u_mipmap_2 = {\\n      value: null\\n    };\\n    _this._u_mipmap_3 = {\\n      value: null\\n    };\\n    _this._u_mipmap_4 = {\\n      value: null\\n    };\\n    _this._u_mipmap_5 = {\\n      value: null\\n    };\\n    _this._u_mipmap_6 = {\\n      value: null\\n    };\\n    _this._u_mipmap_7 = {\\n      value: null\\n    };\\n    _this._u_mipmap_res_0 = {\\n      value: null\\n    };\\n    _this._u_mipmap_res_1 = {\\n      value: null\\n    };\\n    _this._u_mipmap_res_2 = {\\n      value: null\\n    };\\n    _this._u_mipmap_res_3 = {\\n      value: null\\n    };\\n    _this._u_mipmap_res_4 = {\\n      value: null\\n    };\\n    _this._u_mipmap_res_5 = {\\n      value: null\\n    };\\n    _this._u_mipmap_res_6 = {\\n      value: null\\n    };\\n    _this._u_mipmap_res_7 = {\\n      value: null\\n    };\\n    _this._textureMatrix = {\\n      value: null\\n    };\\n    _this._mirror = {\\n      value: 0.0\\n    };\\n    _this._mixBlur = {\\n      value: 0.0\\n    };\\n    _this._blurStrength = {\\n      value: 0.5\\n    };\\n    _this._minDepthThreshold = {\\n      value: 0.9\\n    };\\n    _this._maxDepthThreshold = {\\n      value: 1\\n    };\\n    _this._depthScale = {\\n      value: 0\\n    };\\n    _this._depthToBlurRatioBias = {\\n      value: 0.25\\n    };\\n    _this._distortion = {\\n      value: 1\\n    };\\n\\n    _this.setValues(parameters);\\n\\n    return _this;\\n  }\\n\\n  _createClass(MeshReflectorMaterial, [{\\n    key: \\\"onBeforeCompile\\\",\\n    value: function onBeforeCompile(shader) {\\n      var _shader$defines;\\n\\n      if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\\n        shader.defines.USE_UV = '';\\n      }\\n\\n      shader.uniforms.debug = this._debug;\\n      shader.uniforms.tDiffuse = this._tDiffuse;\\n      shader.uniforms.tDepth = this._tDepth;\\n      shader.uniforms.distortionMap = this._distortionMap;\\n      shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\\n      shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\\n      shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\\n      shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\\n      shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\\n      shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\\n      shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\\n      shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\\n      shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\\n      shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\\n      shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\\n      shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\\n      shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\\n      shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\\n      shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\\n      shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\\n      shader.uniforms.textureMatrix = this._textureMatrix;\\n      shader.uniforms.mirror = this._mirror;\\n      shader.uniforms.mixBlur = this._mixBlur;\\n      shader.uniforms.mixStrength = this._blurStrength;\\n      shader.uniforms.minDepthThreshold = this._minDepthThreshold;\\n      shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\\n      shader.uniforms.depthScale = this._depthScale;\\n      shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\\n      shader.uniforms.distortion = this._distortion;\\n      shader.vertexShader = \\\"\\\\n        uniform mat4 textureMatrix;\\\\n        varying vec4 my_vUv;     \\\\n      \\\".concat(shader.vertexShader);\\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \\\"#include <project_vertex>\\\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\\");\\n      shader.fragmentShader = \\\"\\\\n        uniform int debug;\\\\n        uniform sampler2D tDiffuse;\\\\n        uniform sampler2D tDepth;\\\\n        uniform sampler2D distortionMap;\\\\n        uniform sampler2D u_mipmap_0;\\\\n        uniform sampler2D u_mipmap_1;\\\\n        uniform sampler2D u_mipmap_2;\\\\n        uniform sampler2D u_mipmap_3;\\\\n        uniform sampler2D u_mipmap_4;\\\\n        uniform sampler2D u_mipmap_5;\\\\n        uniform sampler2D u_mipmap_6;\\\\n        uniform sampler2D u_mipmap_7;\\\\n        uniform vec2 u_mipmap_res_0;\\\\n        uniform vec2 u_mipmap_res_1;\\\\n        uniform vec2 u_mipmap_res_2;\\\\n        uniform vec2 u_mipmap_res_3;\\\\n        uniform vec2 u_mipmap_res_4;\\\\n        uniform vec2 u_mipmap_res_5;\\\\n        uniform vec2 u_mipmap_res_6;\\\\n        uniform vec2 u_mipmap_res_7;\\\\n        uniform float distortion;\\\\n        uniform float cameraNear;\\\\n\\\\t\\\\t\\\\t  uniform float cameraFar;\\\\n        uniform float mixBlur;\\\\n        uniform float mirror;\\\\n        uniform float mixStrength;\\\\n        uniform float minDepthThreshold;\\\\n        uniform float maxDepthThreshold;\\\\n        uniform float depthScale;\\\\n        uniform float depthToBlurRatioBias;\\\\n        varying vec4 my_vUv;  \\\\n        \\\\n        // from http://www.java-gaming.org/index.php?topic=35123.0\\\\n        vec4 cubic( float v ) {\\\\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\\\\n          vec4 s = n * n * n;\\\\n          float x = s.x;\\\\n          float y = s.y - 4.0 * s.x;\\\\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\\\\n          float w = 6.0 - x - y - z;\\\\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\\\\n        }\\\\n        \\\\n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\\\\n          vec2 invTexSize = 1.0 / texSize;\\\\n          texCoords = texCoords * texSize - 0.5;\\\\n          vec2 fxy = fract( texCoords );\\\\n          texCoords -= fxy;\\\\n\\\\n          vec4 xcubic = cubic( fxy.x );\\\\n          vec4 ycubic = cubic( fxy.y );\\\\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\\\\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\\\\n\\\\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\\\\n          offset *= invTexSize.xxyy;\\\\n        \\\\n          vec4 sample0 = texture2D( sampler, offset.xz);\\\\n          vec4 sample1 = texture2D( sampler, offset.yz);\\\\n          vec4 sample2 = texture2D( sampler, offset.xw);\\\\n          vec4 sample3 = texture2D( sampler, offset.yw);\\\\n        \\\\n          float sx = s.x / ( s.x + s.y );\\\\n          float sy = s.z / ( s.z + s.w );\\\\n\\\\n          return mix(\\\\n            mix(\\\\n              sample3,\\\\n              sample2,\\\\n              sx\\\\n            ),\\\\n            mix(\\\\n              sample1,\\\\n              sample0,\\\\n              sx\\\\n            ),\\\\n            sy\\\\n          );\\\\n        }\\\\n\\\\n\\\\n        \\\".concat(shader.fragmentShader);\\n      shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \\\"#include <emissivemap_fragment>\\\\n    \\\\n      float depthFactor = 1.0;\\\\n      float distortionFactor = 0.0;\\\\n      vec3 my_normal = vec3(0.0);\\\\n      float reflectorRoughnessFactor = roughness;\\\\n      vec3 coord = my_vUv.xyz / my_vUv.w;\\\\n\\\\n      #ifdef USE_DISTORTION\\\\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\\\\n      #endif\\\\n\\\\n      #ifdef USE_NORMALMAP\\\\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\\\\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\\\\n      #endif\\\\n\\\\n      #ifdef USE_ROUGHNESSMAP\\\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\\\n      #endif\\\\n\\\\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\\\\n      proj_vUv.x += distortionFactor;\\\\n      proj_vUv.y += distortionFactor;\\\\n      \\\\n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\\\\n\\\\n      #ifdef USE_DEPTH\\\\n        vec4 depth = texture2D(tDepth, proj_vUv);\\\\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\\\n        depthFactor *= depthScale;\\\\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\\\\n      #endif\\\\n\\\\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\\\\n      vec4 mixedColor;\\\\n\\\\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\\\\n      if (_lod < 1.) {\\\\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\\\\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\\\n        mixedColor = mix(one, two, _lod);\\\\n      } else if (_lod < 2.) {\\\\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\\\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\\\n        mixedColor = mix(one, two, _lod - 1.0);\\\\n      } else if (_lod < 3.) {\\\\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\\\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\\\n        mixedColor = mix(one, two, _lod - 2.0);\\\\n      } else if (_lod < 4.) {\\\\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\\\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\\\n        mixedColor = mix(one, two, _lod - 3.0);\\\\n      } else if (_lod < 5.) {\\\\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\\\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\\\n        mixedColor = mix(one, two, _lod - 4.0);\\\\n      } else if (_lod < 6.) {\\\\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\\\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\\\n        mixedColor = mix(one, two, _lod - 5.0);\\\\n      } else if (_lod < 7.) {\\\\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\\\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\\\n        mixedColor = mix(one, two, _lod - 6.0);\\\\n      } else {\\\\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\\\n        mixedColor = mix(one, baseColor, _lod - 7.0);\\\\n      }\\\\n\\\\n      mixedColor.rgb *= depthFactor;\\\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \\\\n      diffuseColor = sRGBToLinear(diffuseColor);\\\\n\\\\n      if (debug == 1) {\\\\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\\\\n      }\\\\n      if (debug == 2) {\\\\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\\\\n      }\\\\n      if (debug == 3) {\\\\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\\\\n      }\\\\n      if (debug == 4) {\\\\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\\\\n      }\\\\n      \\\");\\n    }\\n  }, {\\n    key: \\\"tDiffuse\\\",\\n    get: function get() {\\n      return this._tDiffuse.value;\\n    },\\n    set: function set(v) {\\n      this._tDiffuse.value = v;\\n    }\\n  }, {\\n    key: \\\"tDepth\\\",\\n    get: function get() {\\n      return this._tDepth.value;\\n    },\\n    set: function set(v) {\\n      this._tDepth.value = v;\\n    }\\n  }, {\\n    key: \\\"distortionMap\\\",\\n    get: function get() {\\n      return this._distortionMap.value;\\n    },\\n    set: function set(v) {\\n      this._distortionMap.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_0\\\",\\n    get: function get() {\\n      return this._u_mipmap_0.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_0.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_1\\\",\\n    get: function get() {\\n      return this._u_mipmap_1.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_1.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_2\\\",\\n    get: function get() {\\n      return this._u_mipmap_2.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_2.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_3\\\",\\n    get: function get() {\\n      return this._u_mipmap_3.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_3.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_4\\\",\\n    get: function get() {\\n      return this._u_mipmap_4.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_4.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_5\\\",\\n    get: function get() {\\n      return this._u_mipmap_5.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_5.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_6\\\",\\n    get: function get() {\\n      return this._u_mipmap_6.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_6.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_7\\\",\\n    get: function get() {\\n      return this._u_mipmap_7.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_7.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_res_0\\\",\\n    get: function get() {\\n      return this._u_mipmap_res_0.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_res_0.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_res_1\\\",\\n    get: function get() {\\n      return this._u_mipmap_res_1.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_res_1.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_res_2\\\",\\n    get: function get() {\\n      return this._u_mipmap_res_2.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_res_2.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_res_3\\\",\\n    get: function get() {\\n      return this._u_mipmap_res_3.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_res_3.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_res_4\\\",\\n    get: function get() {\\n      return this._u_mipmap_res_4.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_res_4.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_res_5\\\",\\n    get: function get() {\\n      return this._u_mipmap_res_5.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_res_5.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_res_6\\\",\\n    get: function get() {\\n      return this._u_mipmap_res_6.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_res_6.value = v;\\n    }\\n  }, {\\n    key: \\\"u_mipmap_res_7\\\",\\n    get: function get() {\\n      return this._u_mipmap_res_7.value;\\n    },\\n    set: function set(v) {\\n      this._u_mipmap_res_7.value = v;\\n    }\\n  }, {\\n    key: \\\"textureMatrix\\\",\\n    get: function get() {\\n      return this._textureMatrix.value;\\n    },\\n    set: function set(v) {\\n      this._textureMatrix.value = v;\\n    }\\n  }, {\\n    key: \\\"mirror\\\",\\n    get: function get() {\\n      return this._mirror.value;\\n    },\\n    set: function set(v) {\\n      this._mirror.value = v;\\n    }\\n  }, {\\n    key: \\\"mixBlur\\\",\\n    get: function get() {\\n      return this._mixBlur.value;\\n    },\\n    set: function set(v) {\\n      this._mixBlur.value = v;\\n    }\\n  }, {\\n    key: \\\"mixStrength\\\",\\n    get: function get() {\\n      return this._blurStrength.value;\\n    },\\n    set: function set(v) {\\n      this._blurStrength.value = v;\\n    }\\n  }, {\\n    key: \\\"minDepthThreshold\\\",\\n    get: function get() {\\n      return this._minDepthThreshold.value;\\n    },\\n    set: function set(v) {\\n      this._minDepthThreshold.value = v;\\n    }\\n  }, {\\n    key: \\\"maxDepthThreshold\\\",\\n    get: function get() {\\n      return this._maxDepthThreshold.value;\\n    },\\n    set: function set(v) {\\n      this._maxDepthThreshold.value = v;\\n    }\\n  }, {\\n    key: \\\"depthScale\\\",\\n    get: function get() {\\n      return this._depthScale.value;\\n    },\\n    set: function set(v) {\\n      this._depthScale.value = v;\\n    }\\n  }, {\\n    key: \\\"debug\\\",\\n    get: function get() {\\n      return this._debug.value;\\n    },\\n    set: function set(v) {\\n      this._debug.value = v;\\n    }\\n  }, {\\n    key: \\\"depthToBlurRatioBias\\\",\\n    get: function get() {\\n      return this._depthToBlurRatioBias.value;\\n    },\\n    set: function set(v) {\\n      this._depthToBlurRatioBias.value = v;\\n    }\\n  }, {\\n    key: \\\"distortion\\\",\\n    get: function get() {\\n      return this._distortion.value;\\n    },\\n    set: function set(v) {\\n      this._distortion.value = v;\\n    }\\n  }]);\\n\\n  return MeshReflectorMaterial;\\n}(_three.MeshStandardMaterial);\\n\\nexports.MeshReflectorMaterial = MeshReflectorMaterial;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"_getPrototypeOf\",\"o\",\"setPrototypeOf\",\"getPrototypeOf\",\"__proto__\",\"_inherits\",\"subClass\",\"superClass\",\"TypeError\",\"create\",\"value\",\"_setPrototypeOf\",\"p\",\"MeshReflectorMaterial\",\"_MeshStandardMaterial\",\"parameters\",\"arguments\",\"undefined\",\"instance\",\"call\",\"self\",\"ReferenceError\",\"_this\",\"_debug\",\"_tDepth\",\"_distortionMap\",\"_tDiffuse\",\"_u_mipmap_0\",\"_u_mipmap_1\",\"_u_mipmap_2\",\"_u_mipmap_3\",\"_u_mipmap_4\",\"_u_mipmap_5\",\"_u_mipmap_6\",\"_u_mipmap_7\",\"_u_mipmap_res_0\",\"_u_mipmap_res_1\",\"_u_mipmap_res_2\",\"_u_mipmap_res_3\",\"_u_mipmap_res_4\",\"_u_mipmap_res_5\",\"_u_mipmap_res_6\",\"_u_mipmap_res_7\",\"_textureMatrix\",\"_mirror\",\"_mixBlur\",\"_blurStrength\",\"_minDepthThreshold\",\"_maxDepthThreshold\",\"_depthScale\",\"_depthToBlurRatioBias\",\"_distortion\",\"setValues\",\"onBeforeCompile\",\"shader\",\"_shader$defines\",\"defines\",\"USE_UV\",\"uniforms\",\"debug\",\"tDiffuse\",\"tDepth\",\"distortionMap\",\"u_mipmap_0\",\"u_mipmap_1\",\"u_mipmap_2\",\"u_mipmap_3\",\"u_mipmap_4\",\"u_mipmap_5\",\"u_mipmap_6\",\"u_mipmap_7\",\"u_mipmap_res_0\",\"u_mipmap_res_1\",\"u_mipmap_res_2\",\"u_mipmap_res_3\",\"u_mipmap_res_4\",\"u_mipmap_res_5\",\"u_mipmap_res_6\",\"u_mipmap_res_7\",\"textureMatrix\",\"mirror\",\"mixBlur\",\"mixStrength\",\"minDepthThreshold\",\"maxDepthThreshold\",\"depthScale\",\"depthToBlurRatioBias\",\"distortion\",\"vertexShader\",\"concat\",\"replace\",\"fragmentShader\",\"get\",\"set\",\"v\",\"_three\",\"MeshStandardMaterial\"]\n}\n"]