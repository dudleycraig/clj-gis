["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@blueprintjs/core/lib/cjs/components/forms/numericInput.js"],"~:js","shadow$provide.module$node_modules$$blueprintjs$core$lib$cjs$components$forms$numericInput=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.NumericInput=void 0;var tslib_1=require(\"module$node_modules$tslib$tslib\"),classnames_1=tslib_1.__importDefault(require(\"module$node_modules$classnames$index\")),React=tslib_1.__importStar(require(\"module$node_modules$react$index\")),react_lifecycles_compat_1=require(\"module$node_modules$react_lifecycles_compat$react_lifecycles_compat_cjs\"),\ncommon_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$common$index\"),Errors=tslib_1.__importStar(require(\"module$node_modules$$blueprintjs$core$lib$cjs$common$errors\")),buttonGroup_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$components$button$buttonGroup\"),buttons_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$components$button$buttons\"),controlGroup_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$components$forms$controlGroup\"),inputGroup_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$components$forms$inputGroup\"),\nnumericInputUtils_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$components$forms$numericInputUtils\"),IncrementDirection;(function(IncrementDirection){IncrementDirection[IncrementDirection.DOWN=-1]=\"DOWN\";IncrementDirection[IncrementDirection.UP=1]=\"UP\"})(IncrementDirection||(IncrementDirection={}));var NON_HTML_PROPS=\"allowNumericCharactersOnly buttonPosition clampValueOnBlur className defaultValue majorStepSize minorStepSize onButtonClick onValueChange selectAllOnFocus selectAllOnIncrement stepSize\".split(\" \");\nglobal=function(_super){function NumericInput(){var _a$jscomp$0,_this=_super.apply(this,arguments)||this;_this.state={currentImeInputInvalid:!1,shouldSelectAfterUpdate:!1,stepMaxPrecision:NumericInput_1.getStepMaxPrecision(_this.props),value:numericInputUtils_1.getValueOrEmptyValue(null!==(_a$jscomp$0=_this.props.value)&&void 0!==_a$jscomp$0?_a$jscomp$0:_this.props.defaultValue)};_this.didPasteEventJustOccur=!1;_this.delta=0;_this.inputElement=null;_this.inputRef=common_1.refHandler(_this,\"inputElement\",\n_this.props.inputRef);_this.incrementButtonHandlers=_this.getButtonEventHandlers(IncrementDirection.UP);_this.decrementButtonHandlers=_this.getButtonEventHandlers(IncrementDirection.DOWN);_this.handleButtonClick=function(e,direction){var _a,_b;e=_this.updateDelta(direction,e);e=_this.incrementValue(e);null===(_b=(_a=_this.props).onButtonClick)||void 0===_b?void 0:_b.call(_a,Number(numericInputUtils_1.parseStringToStringNumber(e,_this.props.locale)),e)};_this.stopContinuousChange=function(){_this.delta=\n0;_this.clearTimeouts();clearInterval(_this.intervalId);document.removeEventListener(\"mouseup\",_this.stopContinuousChange)};_this.handleContinuousChange=function(){var _a,_b,_c,_d;if(void 0!==_this.props.min||void 0!==_this.props.max){var min=null!==(_a=_this.props.min)&&void 0!==_a?_a:-Infinity;_a=null!==(_b=_this.props.max)&&void 0!==_b?_b:Infinity;_b=Number(numericInputUtils_1.parseStringToStringNumber(_this.state.value,_this.props.locale));if(_b<=min||_b>=_a){_this.stopContinuousChange();return}}min=\n_this.incrementValue(_this.delta);null===(_d=(_c=_this.props).onButtonClick)||void 0===_d?void 0:_d.call(_c,Number(numericInputUtils_1.parseStringToStringNumber(min,_this.props.locale)),min)};_this.handleInputFocus=function(e){var _a,_b;_this.setState({shouldSelectAfterUpdate:_this.props.selectAllOnFocus});null===(_b=(_a=_this.props).onFocus)||void 0===_b?void 0:_b.call(_a,e)};_this.handleInputBlur=function(e){var _a,_b;_this.setState({shouldSelectAfterUpdate:!1});_this.props.clampValueOnBlur&&_this.handleNextValue(_this.roundAndClampValue(e.target.value));\nnull===(_b=(_a=_this.props).onBlur)||void 0===_b?void 0:_b.call(_a,e)};_this.handleInputKeyDown=function(e){var _a,_b;if(!_this.props.disabled&&!_this.props.readOnly){var keyCode=e.keyCode;if(keyCode===common_1.Keys.ARROW_UP)var direction=IncrementDirection.UP;else keyCode===common_1.Keys.ARROW_DOWN&&(direction=IncrementDirection.DOWN);void 0!==direction&&(e.preventDefault(),keyCode=_this.updateDelta(direction,e),_this.incrementValue(keyCode));null===(_b=(_a=_this.props).onKeyDown)||void 0===_b?void 0:\n_b.call(_a,e)}};_this.handleCompositionEnd=function(e){_this.props.allowNumericCharactersOnly&&(_this.handleNextValue(numericInputUtils_1.sanitizeNumericInput(e.data,_this.props.locale)),_this.setState({currentImeInputInvalid:!1}))};_this.handleCompositionUpdate=function(e){_this.props.allowNumericCharactersOnly&&(e=e.data,0===numericInputUtils_1.sanitizeNumericInput(e,_this.props.locale).length&&0<e.length?_this.setState({currentImeInputInvalid:!0}):_this.setState({currentImeInputInvalid:!1}))};\n_this.handleInputKeyPress=function(e){var _a,_b;_this.props.allowNumericCharactersOnly&&!numericInputUtils_1.isValidNumericKeyboardEvent(e,_this.props.locale)&&e.preventDefault();null===(_b=(_a=_this.props).onKeyPress)||void 0===_b?void 0:_b.call(_a,e)};_this.handleInputPaste=function(e){var _a,_b;_this.didPasteEventJustOccur=!0;null===(_b=(_a=_this.props).onPaste)||void 0===_b?void 0:_b.call(_a,e)};_this.handleInputChange=function(e){var nextValue=e=e.target.value;_this.props.allowNumericCharactersOnly&&\n_this.didPasteEventJustOccur&&(_this.didPasteEventJustOccur=!1,nextValue=numericInputUtils_1.sanitizeNumericInput(e,_this.props.locale));_this.handleNextValue(nextValue);_this.setState({shouldSelectAfterUpdate:!1})};return _this}tslib_1.__extends(NumericInput,_super);var NumericInput_1=NumericInput;NumericInput.getDerivedStateFromProps=function(props,state){var _a,_b,nextState={prevMaxProp:props.max,prevMinProp:props.min},didMaxChange=props.max!==state.prevMaxProp;didMaxChange=props.min!==state.prevMinProp||\ndidMaxChange;var value=null!==(_b=null===(_a=props.value)||void 0===_a?void 0:_a.toString())&&void 0!==_b?_b:state.value;_a=NumericInput_1.getStepMaxPrecision(props);props=value!==NumericInput_1.VALUE_EMPTY?NumericInput_1.roundAndClampValue(value,_a,props.min,props.max,0,props.locale):NumericInput_1.VALUE_EMPTY;return didMaxChange&&props!==state.value?tslib_1.__assign(tslib_1.__assign({},nextState),{stepMaxPrecision:_a,value:props}):tslib_1.__assign(tslib_1.__assign({},nextState),{stepMaxPrecision:_a,\nvalue})};NumericInput.getStepMaxPrecision=function(props){return null!=props.minorStepSize?common_1.Utils.countDecimalPlaces(props.minorStepSize):common_1.Utils.countDecimalPlaces(props.stepSize)};NumericInput.roundAndClampValue=function(value,stepMaxPrecision,min,max,delta,locale){void 0===delta&&(delta=0);if(!numericInputUtils_1.isValueNumeric(value,locale))return NumericInput_1.VALUE_EMPTY;value=numericInputUtils_1.parseStringToStringNumber(value,locale);stepMaxPrecision=numericInputUtils_1.toMaxPrecision(Number(value)+\ndelta,stepMaxPrecision);min=numericInputUtils_1.clampValue(stepMaxPrecision,min,max);return numericInputUtils_1.toLocaleString(min,locale)};NumericInput.prototype.render=function(){var _a,_b=this.props,buttonPosition=_b.buttonPosition,className=_b.className,fill=_b.fill;_b=_b.large;className=classnames_1.default(common_1.Classes.NUMERIC_INPUT,(_a={},_a[common_1.Classes.LARGE]=_b,_a),className);_a=this.renderButtons();return React.createElement(controlGroup_1.ControlGroup,{className,fill},buttonPosition===\ncommon_1.Position.LEFT&&_a,this.renderInput(),buttonPosition===common_1.Position.RIGHT&&_a)};NumericInput.prototype.componentDidUpdate=function(prevProps,prevState){var _a,_b,_c;_super.prototype.componentDidUpdate.call(this,prevProps,prevState);prevProps.inputRef!==this.props.inputRef&&(common_1.setRef(prevProps.inputRef,null),this.inputRef=common_1.refHandler(this,\"inputElement\",this.props.inputRef),common_1.setRef(this.props.inputRef,this.inputElement));this.state.shouldSelectAfterUpdate&&(null===\n(_a=this.inputElement)||void 0===_a?void 0:_a.setSelectionRange(0,this.state.value.length));_a=this.props.max!==prevProps.max;var didLocaleChange=this.props.locale!==prevProps.locale,didValueChange=this.state.value!==prevState.value;if((this.props.min!==prevProps.min||_a)&&didValueChange||didLocaleChange&&prevState.value!==NumericInput_1.VALUE_EMPTY)prevProps=numericInputUtils_1.parseStringToStringNumber(didLocaleChange?prevState.value:this.state.value,prevProps.locale),prevState=numericInputUtils_1.toLocaleString(+prevProps,\nthis.props.locale),null===(_c=(_b=this.props).onValueChange)||void 0===_c?void 0:_c.call(_b,+prevProps,prevState,this.inputElement)};NumericInput.prototype.validateProps=function(nextProps){var majorStepSize=nextProps.majorStepSize,max=nextProps.max,min=nextProps.min,minorStepSize=nextProps.minorStepSize,stepSize=nextProps.stepSize,value=nextProps.value;null!=min&&null!=max&&min>max&&console.error(Errors.NUMERIC_INPUT_MIN_MAX);0>=stepSize&&console.error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\nminorStepSize&&0>=minorStepSize&&console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);majorStepSize&&0>=majorStepSize&&console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);minorStepSize&&minorStepSize>stepSize&&console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);majorStepSize&&majorStepSize<stepSize&&console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);null!=value&&(nextProps=NumericInput_1.getStepMaxPrecision(nextProps),max=NumericInput_1.roundAndClampValue(value.toString(),\nnextProps,min,max,0,this.props.locale),min=max!==value.toString(),value=numericInputUtils_1.toLocaleString(Number(numericInputUtils_1.parseStringToStringNumber(value,this.props.locale)),this.props.locale),min&&max!==value&&console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID))};NumericInput.prototype.renderButtons=function(){var _a=this.props,intent=_a.intent,max=_a.max,min=_a.min;_a=numericInputUtils_1.parseStringToStringNumber(this.state.value,_a.locale);var disabled=this.props.disabled||\nthis.props.readOnly;min=void 0!==min&&\"\"!==_a&&+_a<=min;return React.createElement(buttonGroup_1.ButtonGroup,{className:common_1.Classes.FIXED,key:\"button-group\",vertical:!0},React.createElement(buttons_1.Button,tslib_1.__assign({\"aria-label\":\"increment\",disabled:disabled||void 0!==max&&\"\"!==_a&&+_a>=max,icon:\"chevron-up\",intent},this.incrementButtonHandlers)),React.createElement(buttons_1.Button,tslib_1.__assign({\"aria-label\":\"decrement\",disabled:disabled||min,icon:\"chevron-down\",intent},this.decrementButtonHandlers)))};\nNumericInput.prototype.renderInput=function(){var inputGroupHtmlProps=common_1.removeNonHTMLProps(this.props,NON_HTML_PROPS,!0);return React.createElement(inputGroup_1.InputGroup,tslib_1.__assign({asyncControl:this.props.asyncControl,autoComplete:\"off\"},inputGroupHtmlProps,{intent:this.state.currentImeInputInvalid?common_1.Intent.DANGER:this.props.intent,inputRef:this.inputRef,large:this.props.large,leftIcon:this.props.leftIcon,onFocus:this.handleInputFocus,onBlur:this.handleInputBlur,onChange:this.handleInputChange,\nonCompositionEnd:this.handleCompositionEnd,onCompositionUpdate:this.handleCompositionUpdate,onKeyDown:this.handleInputKeyDown,onKeyPress:this.handleInputKeyPress,onPaste:this.handleInputPaste,rightElement:this.props.rightElement,value:this.state.value}))};NumericInput.prototype.getButtonEventHandlers=function(direction){var _this=this;return{onKeyDown:function(evt){!_this.props.disabled&&common_1.Keys.isKeyboardClick(evt.keyCode)&&_this.handleButtonClick(evt,direction)},onMouseDown:function(evt){_this.props.disabled||\n(_this.handleButtonClick(evt,direction),_this.startContinuousChange())}}};NumericInput.prototype.startContinuousChange=function(){var _this=this;document.addEventListener(\"mouseup\",this.stopContinuousChange);this.setTimeout(function(){_this.intervalId=window.setInterval(_this.handleContinuousChange,NumericInput_1.CONTINUOUS_CHANGE_INTERVAL)},NumericInput_1.CONTINUOUS_CHANGE_DELAY)};NumericInput.prototype.handleNextValue=function(valueAsString){var _a,_b;null==this.props.value&&this.setState({value:valueAsString});\nnull===(_b=(_a=this.props).onValueChange)||void 0===_b?void 0:_b.call(_a,Number(numericInputUtils_1.parseStringToStringNumber(valueAsString,this.props.locale)),valueAsString,this.inputElement)};NumericInput.prototype.incrementValue=function(delta){delta=this.roundAndClampValue(this.state.value===NumericInput_1.VALUE_EMPTY?NumericInput_1.VALUE_ZERO:this.state.value,delta);delta!==this.state.value&&(this.handleNextValue(delta),this.setState({shouldSelectAfterUpdate:this.props.selectAllOnIncrement}));\nreturn delta};NumericInput.prototype.getIncrementDelta=function(direction,isShiftKeyPressed,isAltKeyPressed){var _a=this.props,majorStepSize=_a.majorStepSize,minorStepSize=_a.minorStepSize;_a=_a.stepSize;return isShiftKeyPressed&&null!=majorStepSize?direction*majorStepSize:isAltKeyPressed&&null!=minorStepSize?direction*minorStepSize:direction*_a};NumericInput.prototype.roundAndClampValue=function(value,delta){void 0===delta&&(delta=0);return NumericInput_1.roundAndClampValue(value,this.state.stepMaxPrecision,\nthis.props.min,this.props.max,delta,this.props.locale)};NumericInput.prototype.updateDelta=function(direction,e){return this.delta=this.getIncrementDelta(direction,e.shiftKey,e.altKey)};NumericInput.displayName=common_1.DISPLAYNAME_PREFIX+\".NumericInput\";NumericInput.VALUE_EMPTY=\"\";NumericInput.VALUE_ZERO=\"0\";NumericInput.defaultProps={allowNumericCharactersOnly:!0,buttonPosition:common_1.Position.RIGHT,clampValueOnBlur:!1,defaultValue:NumericInput_1.VALUE_EMPTY,large:!1,majorStepSize:10,minorStepSize:.1,\nselectAllOnFocus:!1,selectAllOnIncrement:!1,stepSize:1};NumericInput.CONTINUOUS_CHANGE_DELAY=300;NumericInput.CONTINUOUS_CHANGE_INTERVAL=100;return NumericInput=NumericInput_1=tslib_1.__decorate([react_lifecycles_compat_1.polyfill],NumericInput)}(common_1.AbstractPureComponent2);exports.NumericInput=global}","~:source","shadow$provide[\"module$node_modules$$blueprintjs$core$lib$cjs$components$forms$numericInput\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NumericInput = void 0;\nvar tslib_1 = require(\"tslib\");\nvar classnames_1 = tslib_1.__importDefault(require(\"classnames\"));\nvar React = tslib_1.__importStar(require(\"react\"));\nvar react_lifecycles_compat_1 = require(\"react-lifecycles-compat\");\nvar common_1 = require(\"../../common\");\nvar Errors = tslib_1.__importStar(require(\"../../common/errors\"));\nvar buttonGroup_1 = require(\"../button/buttonGroup\");\nvar buttons_1 = require(\"../button/buttons\");\nvar controlGroup_1 = require(\"./controlGroup\");\nvar inputGroup_1 = require(\"./inputGroup\");\nvar numericInputUtils_1 = require(\"./numericInputUtils\");\nvar IncrementDirection;\n(function (IncrementDirection) {\n    IncrementDirection[IncrementDirection[\"DOWN\"] = -1] = \"DOWN\";\n    IncrementDirection[IncrementDirection[\"UP\"] = 1] = \"UP\";\n})(IncrementDirection || (IncrementDirection = {}));\nvar NON_HTML_PROPS = [\n    \"allowNumericCharactersOnly\",\n    \"buttonPosition\",\n    \"clampValueOnBlur\",\n    \"className\",\n    \"defaultValue\",\n    \"majorStepSize\",\n    \"minorStepSize\",\n    \"onButtonClick\",\n    \"onValueChange\",\n    \"selectAllOnFocus\",\n    \"selectAllOnIncrement\",\n    \"stepSize\",\n];\nvar NumericInput = /** @class */ (function (_super) {\n    tslib_1.__extends(NumericInput, _super);\n    function NumericInput() {\n        var _a;\n        var _this = _super.apply(this, arguments) || this;\n        _this.state = {\n            currentImeInputInvalid: false,\n            shouldSelectAfterUpdate: false,\n            stepMaxPrecision: NumericInput_1.getStepMaxPrecision(_this.props),\n            value: numericInputUtils_1.getValueOrEmptyValue((_a = _this.props.value) !== null && _a !== void 0 ? _a : _this.props.defaultValue),\n        };\n        // updating these flags need not trigger re-renders, so don't include them in this.state.\n        _this.didPasteEventJustOccur = false;\n        _this.delta = 0;\n        _this.inputElement = null;\n        _this.inputRef = common_1.refHandler(_this, \"inputElement\", _this.props.inputRef);\n        _this.incrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.UP);\n        _this.decrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.DOWN);\n        _this.handleButtonClick = function (e, direction) {\n            var _a, _b;\n            var delta = _this.updateDelta(direction, e);\n            var nextValue = _this.incrementValue(delta);\n            (_b = (_a = _this.props).onButtonClick) === null || _b === void 0 ? void 0 : _b.call(_a, Number(numericInputUtils_1.parseStringToStringNumber(nextValue, _this.props.locale)), nextValue);\n        };\n        _this.stopContinuousChange = function () {\n            _this.delta = 0;\n            _this.clearTimeouts();\n            clearInterval(_this.intervalId);\n            document.removeEventListener(\"mouseup\", _this.stopContinuousChange);\n        };\n        _this.handleContinuousChange = function () {\n            var _a, _b, _c, _d;\n            // If either min or max prop is set, when reaching the limit\n            // the button will be disabled and stopContinuousChange will be never fired,\n            // hence the need to check on each iteration to properly clear the timeout\n            if (_this.props.min !== undefined || _this.props.max !== undefined) {\n                var min = (_a = _this.props.min) !== null && _a !== void 0 ? _a : -Infinity;\n                var max = (_b = _this.props.max) !== null && _b !== void 0 ? _b : Infinity;\n                var valueAsNumber = Number(numericInputUtils_1.parseStringToStringNumber(_this.state.value, _this.props.locale));\n                if (valueAsNumber <= min || valueAsNumber >= max) {\n                    _this.stopContinuousChange();\n                    return;\n                }\n            }\n            var nextValue = _this.incrementValue(_this.delta);\n            (_d = (_c = _this.props).onButtonClick) === null || _d === void 0 ? void 0 : _d.call(_c, Number(numericInputUtils_1.parseStringToStringNumber(nextValue, _this.props.locale)), nextValue);\n        };\n        // Callbacks - Input\n        // =================\n        _this.handleInputFocus = function (e) {\n            var _a, _b;\n            // update this state flag to trigger update for input selection (see componentDidUpdate)\n            _this.setState({ shouldSelectAfterUpdate: _this.props.selectAllOnFocus });\n            (_b = (_a = _this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        };\n        _this.handleInputBlur = function (e) {\n            var _a, _b;\n            // always disable this flag on blur so it's ready for next time.\n            _this.setState({ shouldSelectAfterUpdate: false });\n            if (_this.props.clampValueOnBlur) {\n                var value = e.target.value;\n                _this.handleNextValue(_this.roundAndClampValue(value));\n            }\n            (_b = (_a = _this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        };\n        _this.handleInputKeyDown = function (e) {\n            var _a, _b;\n            if (_this.props.disabled || _this.props.readOnly) {\n                return;\n            }\n            // eslint-disable-next-line deprecation/deprecation\n            var keyCode = e.keyCode;\n            var direction;\n            if (keyCode === common_1.Keys.ARROW_UP) {\n                direction = IncrementDirection.UP;\n            }\n            else if (keyCode === common_1.Keys.ARROW_DOWN) {\n                direction = IncrementDirection.DOWN;\n            }\n            if (direction !== undefined) {\n                // when the input field has focus, some key combinations will modify\n                // the field's selection range. we'll actually want to select all\n                // text in the field after we modify the value on the following\n                // lines. preventing the default selection behavior lets us do that\n                // without interference.\n                e.preventDefault();\n                var delta = _this.updateDelta(direction, e);\n                _this.incrementValue(delta);\n            }\n            (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        };\n        _this.handleCompositionEnd = function (e) {\n            if (_this.props.allowNumericCharactersOnly) {\n                _this.handleNextValue(numericInputUtils_1.sanitizeNumericInput(e.data, _this.props.locale));\n                _this.setState({ currentImeInputInvalid: false });\n            }\n        };\n        _this.handleCompositionUpdate = function (e) {\n            if (_this.props.allowNumericCharactersOnly) {\n                var data = e.data;\n                var sanitizedValue = numericInputUtils_1.sanitizeNumericInput(data, _this.props.locale);\n                if (sanitizedValue.length === 0 && data.length > 0) {\n                    _this.setState({ currentImeInputInvalid: true });\n                }\n                else {\n                    _this.setState({ currentImeInputInvalid: false });\n                }\n            }\n        };\n        _this.handleInputKeyPress = function (e) {\n            var _a, _b;\n            // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\n            // e.key is not trustworthy in onKeyDown in all browsers.\n            if (_this.props.allowNumericCharactersOnly && !numericInputUtils_1.isValidNumericKeyboardEvent(e, _this.props.locale)) {\n                e.preventDefault();\n            }\n            (_b = (_a = _this.props).onKeyPress) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        };\n        _this.handleInputPaste = function (e) {\n            var _a, _b;\n            _this.didPasteEventJustOccur = true;\n            (_b = (_a = _this.props).onPaste) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        };\n        _this.handleInputChange = function (e) {\n            var value = e.target.value;\n            var nextValue = value;\n            if (_this.props.allowNumericCharactersOnly && _this.didPasteEventJustOccur) {\n                _this.didPasteEventJustOccur = false;\n                nextValue = numericInputUtils_1.sanitizeNumericInput(value, _this.props.locale);\n            }\n            _this.handleNextValue(nextValue);\n            _this.setState({ shouldSelectAfterUpdate: false });\n        };\n        return _this;\n    }\n    NumericInput_1 = NumericInput;\n    NumericInput.getDerivedStateFromProps = function (props, state) {\n        var _a, _b;\n        var nextState = {\n            prevMaxProp: props.max,\n            prevMinProp: props.min,\n        };\n        var didMinChange = props.min !== state.prevMinProp;\n        var didMaxChange = props.max !== state.prevMaxProp;\n        var didBoundsChange = didMinChange || didMaxChange;\n        // in controlled mode, use props.value\n        // in uncontrolled mode, if state.value has not been assigned yet (upon initial mount), use props.defaultValue\n        var value = (_b = (_a = props.value) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : state.value;\n        var stepMaxPrecision = NumericInput_1.getStepMaxPrecision(props);\n        var sanitizedValue = value !== NumericInput_1.VALUE_EMPTY\n            ? NumericInput_1.roundAndClampValue(value, stepMaxPrecision, props.min, props.max, 0, props.locale)\n            : NumericInput_1.VALUE_EMPTY;\n        // if a new min and max were provided that cause the existing value to fall\n        // outside of the new bounds, then clamp the value to the new valid range.\n        if (didBoundsChange && sanitizedValue !== state.value) {\n            return tslib_1.__assign(tslib_1.__assign({}, nextState), { stepMaxPrecision: stepMaxPrecision, value: sanitizedValue });\n        }\n        return tslib_1.__assign(tslib_1.__assign({}, nextState), { stepMaxPrecision: stepMaxPrecision, value: value });\n    };\n    // Value Helpers\n    // =============\n    NumericInput.getStepMaxPrecision = function (props) {\n        if (props.minorStepSize != null) {\n            return common_1.Utils.countDecimalPlaces(props.minorStepSize);\n        }\n        else {\n            return common_1.Utils.countDecimalPlaces(props.stepSize);\n        }\n    };\n    NumericInput.roundAndClampValue = function (value, stepMaxPrecision, min, max, delta, locale) {\n        if (delta === void 0) { delta = 0; }\n        if (!numericInputUtils_1.isValueNumeric(value, locale)) {\n            return NumericInput_1.VALUE_EMPTY;\n        }\n        var currentValue = numericInputUtils_1.parseStringToStringNumber(value, locale);\n        var nextValue = numericInputUtils_1.toMaxPrecision(Number(currentValue) + delta, stepMaxPrecision);\n        var clampedValue = numericInputUtils_1.clampValue(nextValue, min, max);\n        return numericInputUtils_1.toLocaleString(clampedValue, locale);\n    };\n    NumericInput.prototype.render = function () {\n        var _a;\n        var _b = this.props, buttonPosition = _b.buttonPosition, className = _b.className, fill = _b.fill, large = _b.large;\n        var containerClasses = classnames_1.default(common_1.Classes.NUMERIC_INPUT, (_a = {}, _a[common_1.Classes.LARGE] = large, _a), className);\n        var buttons = this.renderButtons();\n        return (React.createElement(controlGroup_1.ControlGroup, { className: containerClasses, fill: fill },\n            buttonPosition === common_1.Position.LEFT && buttons,\n            this.renderInput(),\n            buttonPosition === common_1.Position.RIGHT && buttons));\n    };\n    NumericInput.prototype.componentDidUpdate = function (prevProps, prevState) {\n        var _a, _b, _c;\n        _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\n        if (prevProps.inputRef !== this.props.inputRef) {\n            common_1.setRef(prevProps.inputRef, null);\n            this.inputRef = common_1.refHandler(this, \"inputElement\", this.props.inputRef);\n            common_1.setRef(this.props.inputRef, this.inputElement);\n        }\n        if (this.state.shouldSelectAfterUpdate) {\n            (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.setSelectionRange(0, this.state.value.length);\n        }\n        var didMinChange = this.props.min !== prevProps.min;\n        var didMaxChange = this.props.max !== prevProps.max;\n        var didBoundsChange = didMinChange || didMaxChange;\n        var didLocaleChange = this.props.locale !== prevProps.locale;\n        var didValueChange = this.state.value !== prevState.value;\n        if ((didBoundsChange && didValueChange) || (didLocaleChange && prevState.value !== NumericInput_1.VALUE_EMPTY)) {\n            // we clamped the value due to a bounds change, so we should fire the change callback\n            var valueToParse = didLocaleChange ? prevState.value : this.state.value;\n            var valueAsString = numericInputUtils_1.parseStringToStringNumber(valueToParse, prevProps.locale);\n            var localizedValue = numericInputUtils_1.toLocaleString(+valueAsString, this.props.locale);\n            (_c = (_b = this.props).onValueChange) === null || _c === void 0 ? void 0 : _c.call(_b, +valueAsString, localizedValue, this.inputElement);\n        }\n    };\n    NumericInput.prototype.validateProps = function (nextProps) {\n        var majorStepSize = nextProps.majorStepSize, max = nextProps.max, min = nextProps.min, minorStepSize = nextProps.minorStepSize, stepSize = nextProps.stepSize, value = nextProps.value;\n        if (min != null && max != null && min > max) {\n            console.error(Errors.NUMERIC_INPUT_MIN_MAX);\n        }\n        if (stepSize <= 0) {\n            console.error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize <= 0) {\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (majorStepSize && majorStepSize <= 0) {\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize > stepSize) {\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n        }\n        if (majorStepSize && majorStepSize < stepSize) {\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n        }\n        // controlled mode\n        if (value != null) {\n            var stepMaxPrecision = NumericInput_1.getStepMaxPrecision(nextProps);\n            var sanitizedValue = NumericInput_1.roundAndClampValue(value.toString(), stepMaxPrecision, min, max, 0, this.props.locale);\n            var valueDoesNotMatch = sanitizedValue !== value.toString();\n            var localizedValue = numericInputUtils_1.toLocaleString(Number(numericInputUtils_1.parseStringToStringNumber(value, this.props.locale)), this.props.locale);\n            var isNotLocalized = sanitizedValue !== localizedValue;\n            if (valueDoesNotMatch && isNotLocalized) {\n                console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID);\n            }\n        }\n    };\n    // Render Helpers\n    // ==============\n    NumericInput.prototype.renderButtons = function () {\n        var _a = this.props, intent = _a.intent, max = _a.max, min = _a.min, locale = _a.locale;\n        var value = numericInputUtils_1.parseStringToStringNumber(this.state.value, locale);\n        var disabled = this.props.disabled || this.props.readOnly;\n        var isIncrementDisabled = max !== undefined && value !== \"\" && +value >= max;\n        var isDecrementDisabled = min !== undefined && value !== \"\" && +value <= min;\n        return (React.createElement(buttonGroup_1.ButtonGroup, { className: common_1.Classes.FIXED, key: \"button-group\", vertical: true },\n            React.createElement(buttons_1.Button, tslib_1.__assign({ \"aria-label\": \"increment\", disabled: disabled || isIncrementDisabled, icon: \"chevron-up\", intent: intent }, this.incrementButtonHandlers)),\n            React.createElement(buttons_1.Button, tslib_1.__assign({ \"aria-label\": \"decrement\", disabled: disabled || isDecrementDisabled, icon: \"chevron-down\", intent: intent }, this.decrementButtonHandlers))));\n    };\n    NumericInput.prototype.renderInput = function () {\n        var inputGroupHtmlProps = common_1.removeNonHTMLProps(this.props, NON_HTML_PROPS, true);\n        return (React.createElement(inputGroup_1.InputGroup, tslib_1.__assign({ asyncControl: this.props.asyncControl, autoComplete: \"off\" }, inputGroupHtmlProps, { intent: this.state.currentImeInputInvalid ? common_1.Intent.DANGER : this.props.intent, inputRef: this.inputRef, large: this.props.large, leftIcon: this.props.leftIcon, onFocus: this.handleInputFocus, onBlur: this.handleInputBlur, onChange: this.handleInputChange, onCompositionEnd: this.handleCompositionEnd, onCompositionUpdate: this.handleCompositionUpdate, onKeyDown: this.handleInputKeyDown, onKeyPress: this.handleInputKeyPress, onPaste: this.handleInputPaste, rightElement: this.props.rightElement, value: this.state.value })));\n    };\n    // Callbacks - Buttons\n    // ===================\n    NumericInput.prototype.getButtonEventHandlers = function (direction) {\n        var _this = this;\n        return {\n            // keydown is fired repeatedly when held so it's implicitly continuous\n            onKeyDown: function (evt) {\n                // eslint-disable-next-line deprecation/deprecation\n                if (!_this.props.disabled && common_1.Keys.isKeyboardClick(evt.keyCode)) {\n                    _this.handleButtonClick(evt, direction);\n                }\n            },\n            onMouseDown: function (evt) {\n                if (!_this.props.disabled) {\n                    _this.handleButtonClick(evt, direction);\n                    _this.startContinuousChange();\n                }\n            },\n        };\n    };\n    NumericInput.prototype.startContinuousChange = function () {\n        var _this = this;\n        // The button's onMouseUp event handler doesn't fire if the user\n        // releases outside of the button, so we need to watch all the way\n        // from the top.\n        document.addEventListener(\"mouseup\", this.stopContinuousChange);\n        // Initial delay is slightly longer to prevent the user from\n        // accidentally triggering the continuous increment/decrement.\n        this.setTimeout(function () {\n            _this.intervalId = window.setInterval(_this.handleContinuousChange, NumericInput_1.CONTINUOUS_CHANGE_INTERVAL);\n        }, NumericInput_1.CONTINUOUS_CHANGE_DELAY);\n    };\n    // Data logic\n    // ==========\n    NumericInput.prototype.handleNextValue = function (valueAsString) {\n        var _a, _b;\n        if (this.props.value == null) {\n            this.setState({ value: valueAsString });\n        }\n        (_b = (_a = this.props).onValueChange) === null || _b === void 0 ? void 0 : _b.call(_a, Number(numericInputUtils_1.parseStringToStringNumber(valueAsString, this.props.locale)), valueAsString, this.inputElement);\n    };\n    NumericInput.prototype.incrementValue = function (delta) {\n        // pretend we're incrementing from 0 if currValue is empty\n        var currValue = this.state.value === NumericInput_1.VALUE_EMPTY ? NumericInput_1.VALUE_ZERO : this.state.value;\n        var nextValue = this.roundAndClampValue(currValue, delta);\n        if (nextValue !== this.state.value) {\n            this.handleNextValue(nextValue);\n            this.setState({ shouldSelectAfterUpdate: this.props.selectAllOnIncrement });\n        }\n        // return value used in continuous change updates\n        return nextValue;\n    };\n    NumericInput.prototype.getIncrementDelta = function (direction, isShiftKeyPressed, isAltKeyPressed) {\n        var _a = this.props, majorStepSize = _a.majorStepSize, minorStepSize = _a.minorStepSize, stepSize = _a.stepSize;\n        if (isShiftKeyPressed && majorStepSize != null) {\n            return direction * majorStepSize;\n        }\n        else if (isAltKeyPressed && minorStepSize != null) {\n            return direction * minorStepSize;\n        }\n        else {\n            return direction * stepSize;\n        }\n    };\n    NumericInput.prototype.roundAndClampValue = function (value, delta) {\n        if (delta === void 0) { delta = 0; }\n        return NumericInput_1.roundAndClampValue(value, this.state.stepMaxPrecision, this.props.min, this.props.max, delta, this.props.locale);\n    };\n    NumericInput.prototype.updateDelta = function (direction, e) {\n        this.delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n        return this.delta;\n    };\n    var NumericInput_1;\n    NumericInput.displayName = common_1.DISPLAYNAME_PREFIX + \".NumericInput\";\n    NumericInput.VALUE_EMPTY = \"\";\n    NumericInput.VALUE_ZERO = \"0\";\n    NumericInput.defaultProps = {\n        allowNumericCharactersOnly: true,\n        buttonPosition: common_1.Position.RIGHT,\n        clampValueOnBlur: false,\n        defaultValue: NumericInput_1.VALUE_EMPTY,\n        large: false,\n        majorStepSize: 10,\n        minorStepSize: 0.1,\n        selectAllOnFocus: false,\n        selectAllOnIncrement: false,\n        stepSize: 1,\n    };\n    NumericInput.CONTINUOUS_CHANGE_DELAY = 300;\n    NumericInput.CONTINUOUS_CHANGE_INTERVAL = 100;\n    NumericInput = NumericInput_1 = tslib_1.__decorate([\n        react_lifecycles_compat_1.polyfill\n    ], NumericInput);\n    return NumericInput;\n}(common_1.AbstractPureComponent2));\nexports.NumericInput = NumericInput;\n//# sourceMappingURL=numericInput.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$tslib$tslib","~$module$node_modules$$blueprintjs$core$lib$cjs$components$forms$inputGroup","~$module$node_modules$$blueprintjs$core$lib$cjs$components$forms$controlGroup","~$module$node_modules$react_lifecycles_compat$react_lifecycles_compat_cjs","~$module$node_modules$react$index","~$shadow.js","~$module$node_modules$$blueprintjs$core$lib$cjs$components$forms$numericInputUtils","~$module$node_modules$classnames$index","~$module$node_modules$$blueprintjs$core$lib$cjs$common$errors","~$module$node_modules$$blueprintjs$core$lib$cjs$components$button$buttonGroup","~$module$node_modules$$blueprintjs$core$lib$cjs$common$index","~$module$node_modules$$blueprintjs$core$lib$cjs$components$button$buttons"]],"~:properties",["^5",["inputRef","handleInputKeyPress","buttonPosition","prevMinProp","onKeyPress","handleNextValue","getDerivedStateFromProps","onPaste","getStepMaxPrecision","onChange","handleInputFocus","majorStepSize","handleCompositionUpdate","className","allowNumericCharactersOnly","displayName","prevMaxProp","stepMaxPrecision","delta","key","renderButtons","onCompositionUpdate","__esModule","handleCompositionEnd","handleInputPaste","leftIcon","vertical","renderInput","handleInputChange","intervalId","roundAndClampValue","onMouseDown","validateProps","decrementButtonHandlers","stopContinuousChange","inputElement","value","startContinuousChange","CONTINUOUS_CHANGE_DELAY","clampValueOnBlur","onFocus","selectAllOnIncrement","componentDidUpdate","fill","asyncControl","CONTINUOUS_CHANGE_INTERVAL","NumericInput","onBlur","intent","autoComplete","minorStepSize","defaultProps","incrementValue","getIncrementDelta","getButtonEventHandlers","render","state","incrementButtonHandlers","handleInputBlur","handleInputKeyDown","VALUE_EMPTY","currentImeInputInvalid","handleContinuousChange","defaultValue","onKeyDown","large","selectAllOnFocus","shouldSelectAfterUpdate","updateDelta","disabled","handleButtonClick","rightElement","onCompositionEnd","didPasteEventJustOccur","stepSize","VALUE_ZERO","icon"]],"~:compiled-at",1630405505182,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$blueprintjs$core$lib$cjs$components$forms$numericInput.js\",\n\"lineCount\":27,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@blueprintjs/core/lib/cjs/components/forms/numericInput.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$blueprintjs$core$lib$cjs$components$forms$numericInput\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n/*\\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.NumericInput = void 0;\\nvar tslib_1 = require(\\\"tslib\\\");\\nvar classnames_1 = tslib_1.__importDefault(require(\\\"classnames\\\"));\\nvar React = tslib_1.__importStar(require(\\\"react\\\"));\\nvar react_lifecycles_compat_1 = require(\\\"react-lifecycles-compat\\\");\\nvar common_1 = require(\\\"../../common\\\");\\nvar Errors = tslib_1.__importStar(require(\\\"../../common/errors\\\"));\\nvar buttonGroup_1 = require(\\\"../button/buttonGroup\\\");\\nvar buttons_1 = require(\\\"../button/buttons\\\");\\nvar controlGroup_1 = require(\\\"./controlGroup\\\");\\nvar inputGroup_1 = require(\\\"./inputGroup\\\");\\nvar numericInputUtils_1 = require(\\\"./numericInputUtils\\\");\\nvar IncrementDirection;\\n(function (IncrementDirection) {\\n    IncrementDirection[IncrementDirection[\\\"DOWN\\\"] = -1] = \\\"DOWN\\\";\\n    IncrementDirection[IncrementDirection[\\\"UP\\\"] = 1] = \\\"UP\\\";\\n})(IncrementDirection || (IncrementDirection = {}));\\nvar NON_HTML_PROPS = [\\n    \\\"allowNumericCharactersOnly\\\",\\n    \\\"buttonPosition\\\",\\n    \\\"clampValueOnBlur\\\",\\n    \\\"className\\\",\\n    \\\"defaultValue\\\",\\n    \\\"majorStepSize\\\",\\n    \\\"minorStepSize\\\",\\n    \\\"onButtonClick\\\",\\n    \\\"onValueChange\\\",\\n    \\\"selectAllOnFocus\\\",\\n    \\\"selectAllOnIncrement\\\",\\n    \\\"stepSize\\\",\\n];\\nvar NumericInput = /** @class */ (function (_super) {\\n    tslib_1.__extends(NumericInput, _super);\\n    function NumericInput() {\\n        var _a;\\n        var _this = _super.apply(this, arguments) || this;\\n        _this.state = {\\n            currentImeInputInvalid: false,\\n            shouldSelectAfterUpdate: false,\\n            stepMaxPrecision: NumericInput_1.getStepMaxPrecision(_this.props),\\n            value: numericInputUtils_1.getValueOrEmptyValue((_a = _this.props.value) !== null && _a !== void 0 ? _a : _this.props.defaultValue),\\n        };\\n        // updating these flags need not trigger re-renders, so don't include them in this.state.\\n        _this.didPasteEventJustOccur = false;\\n        _this.delta = 0;\\n        _this.inputElement = null;\\n        _this.inputRef = common_1.refHandler(_this, \\\"inputElement\\\", _this.props.inputRef);\\n        _this.incrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.UP);\\n        _this.decrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.DOWN);\\n        _this.handleButtonClick = function (e, direction) {\\n            var _a, _b;\\n            var delta = _this.updateDelta(direction, e);\\n            var nextValue = _this.incrementValue(delta);\\n            (_b = (_a = _this.props).onButtonClick) === null || _b === void 0 ? void 0 : _b.call(_a, Number(numericInputUtils_1.parseStringToStringNumber(nextValue, _this.props.locale)), nextValue);\\n        };\\n        _this.stopContinuousChange = function () {\\n            _this.delta = 0;\\n            _this.clearTimeouts();\\n            clearInterval(_this.intervalId);\\n            document.removeEventListener(\\\"mouseup\\\", _this.stopContinuousChange);\\n        };\\n        _this.handleContinuousChange = function () {\\n            var _a, _b, _c, _d;\\n            // If either min or max prop is set, when reaching the limit\\n            // the button will be disabled and stopContinuousChange will be never fired,\\n            // hence the need to check on each iteration to properly clear the timeout\\n            if (_this.props.min !== undefined || _this.props.max !== undefined) {\\n                var min = (_a = _this.props.min) !== null && _a !== void 0 ? _a : -Infinity;\\n                var max = (_b = _this.props.max) !== null && _b !== void 0 ? _b : Infinity;\\n                var valueAsNumber = Number(numericInputUtils_1.parseStringToStringNumber(_this.state.value, _this.props.locale));\\n                if (valueAsNumber <= min || valueAsNumber >= max) {\\n                    _this.stopContinuousChange();\\n                    return;\\n                }\\n            }\\n            var nextValue = _this.incrementValue(_this.delta);\\n            (_d = (_c = _this.props).onButtonClick) === null || _d === void 0 ? void 0 : _d.call(_c, Number(numericInputUtils_1.parseStringToStringNumber(nextValue, _this.props.locale)), nextValue);\\n        };\\n        // Callbacks - Input\\n        // =================\\n        _this.handleInputFocus = function (e) {\\n            var _a, _b;\\n            // update this state flag to trigger update for input selection (see componentDidUpdate)\\n            _this.setState({ shouldSelectAfterUpdate: _this.props.selectAllOnFocus });\\n            (_b = (_a = _this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, e);\\n        };\\n        _this.handleInputBlur = function (e) {\\n            var _a, _b;\\n            // always disable this flag on blur so it's ready for next time.\\n            _this.setState({ shouldSelectAfterUpdate: false });\\n            if (_this.props.clampValueOnBlur) {\\n                var value = e.target.value;\\n                _this.handleNextValue(_this.roundAndClampValue(value));\\n            }\\n            (_b = (_a = _this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, e);\\n        };\\n        _this.handleInputKeyDown = function (e) {\\n            var _a, _b;\\n            if (_this.props.disabled || _this.props.readOnly) {\\n                return;\\n            }\\n            // eslint-disable-next-line deprecation/deprecation\\n            var keyCode = e.keyCode;\\n            var direction;\\n            if (keyCode === common_1.Keys.ARROW_UP) {\\n                direction = IncrementDirection.UP;\\n            }\\n            else if (keyCode === common_1.Keys.ARROW_DOWN) {\\n                direction = IncrementDirection.DOWN;\\n            }\\n            if (direction !== undefined) {\\n                // when the input field has focus, some key combinations will modify\\n                // the field's selection range. we'll actually want to select all\\n                // text in the field after we modify the value on the following\\n                // lines. preventing the default selection behavior lets us do that\\n                // without interference.\\n                e.preventDefault();\\n                var delta = _this.updateDelta(direction, e);\\n                _this.incrementValue(delta);\\n            }\\n            (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, e);\\n        };\\n        _this.handleCompositionEnd = function (e) {\\n            if (_this.props.allowNumericCharactersOnly) {\\n                _this.handleNextValue(numericInputUtils_1.sanitizeNumericInput(e.data, _this.props.locale));\\n                _this.setState({ currentImeInputInvalid: false });\\n            }\\n        };\\n        _this.handleCompositionUpdate = function (e) {\\n            if (_this.props.allowNumericCharactersOnly) {\\n                var data = e.data;\\n                var sanitizedValue = numericInputUtils_1.sanitizeNumericInput(data, _this.props.locale);\\n                if (sanitizedValue.length === 0 && data.length > 0) {\\n                    _this.setState({ currentImeInputInvalid: true });\\n                }\\n                else {\\n                    _this.setState({ currentImeInputInvalid: false });\\n                }\\n            }\\n        };\\n        _this.handleInputKeyPress = function (e) {\\n            var _a, _b;\\n            // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\\n            // e.key is not trustworthy in onKeyDown in all browsers.\\n            if (_this.props.allowNumericCharactersOnly && !numericInputUtils_1.isValidNumericKeyboardEvent(e, _this.props.locale)) {\\n                e.preventDefault();\\n            }\\n            (_b = (_a = _this.props).onKeyPress) === null || _b === void 0 ? void 0 : _b.call(_a, e);\\n        };\\n        _this.handleInputPaste = function (e) {\\n            var _a, _b;\\n            _this.didPasteEventJustOccur = true;\\n            (_b = (_a = _this.props).onPaste) === null || _b === void 0 ? void 0 : _b.call(_a, e);\\n        };\\n        _this.handleInputChange = function (e) {\\n            var value = e.target.value;\\n            var nextValue = value;\\n            if (_this.props.allowNumericCharactersOnly && _this.didPasteEventJustOccur) {\\n                _this.didPasteEventJustOccur = false;\\n                nextValue = numericInputUtils_1.sanitizeNumericInput(value, _this.props.locale);\\n            }\\n            _this.handleNextValue(nextValue);\\n            _this.setState({ shouldSelectAfterUpdate: false });\\n        };\\n        return _this;\\n    }\\n    NumericInput_1 = NumericInput;\\n    NumericInput.getDerivedStateFromProps = function (props, state) {\\n        var _a, _b;\\n        var nextState = {\\n            prevMaxProp: props.max,\\n            prevMinProp: props.min,\\n        };\\n        var didMinChange = props.min !== state.prevMinProp;\\n        var didMaxChange = props.max !== state.prevMaxProp;\\n        var didBoundsChange = didMinChange || didMaxChange;\\n        // in controlled mode, use props.value\\n        // in uncontrolled mode, if state.value has not been assigned yet (upon initial mount), use props.defaultValue\\n        var value = (_b = (_a = props.value) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : state.value;\\n        var stepMaxPrecision = NumericInput_1.getStepMaxPrecision(props);\\n        var sanitizedValue = value !== NumericInput_1.VALUE_EMPTY\\n            ? NumericInput_1.roundAndClampValue(value, stepMaxPrecision, props.min, props.max, 0, props.locale)\\n            : NumericInput_1.VALUE_EMPTY;\\n        // if a new min and max were provided that cause the existing value to fall\\n        // outside of the new bounds, then clamp the value to the new valid range.\\n        if (didBoundsChange && sanitizedValue !== state.value) {\\n            return tslib_1.__assign(tslib_1.__assign({}, nextState), { stepMaxPrecision: stepMaxPrecision, value: sanitizedValue });\\n        }\\n        return tslib_1.__assign(tslib_1.__assign({}, nextState), { stepMaxPrecision: stepMaxPrecision, value: value });\\n    };\\n    // Value Helpers\\n    // =============\\n    NumericInput.getStepMaxPrecision = function (props) {\\n        if (props.minorStepSize != null) {\\n            return common_1.Utils.countDecimalPlaces(props.minorStepSize);\\n        }\\n        else {\\n            return common_1.Utils.countDecimalPlaces(props.stepSize);\\n        }\\n    };\\n    NumericInput.roundAndClampValue = function (value, stepMaxPrecision, min, max, delta, locale) {\\n        if (delta === void 0) { delta = 0; }\\n        if (!numericInputUtils_1.isValueNumeric(value, locale)) {\\n            return NumericInput_1.VALUE_EMPTY;\\n        }\\n        var currentValue = numericInputUtils_1.parseStringToStringNumber(value, locale);\\n        var nextValue = numericInputUtils_1.toMaxPrecision(Number(currentValue) + delta, stepMaxPrecision);\\n        var clampedValue = numericInputUtils_1.clampValue(nextValue, min, max);\\n        return numericInputUtils_1.toLocaleString(clampedValue, locale);\\n    };\\n    NumericInput.prototype.render = function () {\\n        var _a;\\n        var _b = this.props, buttonPosition = _b.buttonPosition, className = _b.className, fill = _b.fill, large = _b.large;\\n        var containerClasses = classnames_1.default(common_1.Classes.NUMERIC_INPUT, (_a = {}, _a[common_1.Classes.LARGE] = large, _a), className);\\n        var buttons = this.renderButtons();\\n        return (React.createElement(controlGroup_1.ControlGroup, { className: containerClasses, fill: fill },\\n            buttonPosition === common_1.Position.LEFT && buttons,\\n            this.renderInput(),\\n            buttonPosition === common_1.Position.RIGHT && buttons));\\n    };\\n    NumericInput.prototype.componentDidUpdate = function (prevProps, prevState) {\\n        var _a, _b, _c;\\n        _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\\n        if (prevProps.inputRef !== this.props.inputRef) {\\n            common_1.setRef(prevProps.inputRef, null);\\n            this.inputRef = common_1.refHandler(this, \\\"inputElement\\\", this.props.inputRef);\\n            common_1.setRef(this.props.inputRef, this.inputElement);\\n        }\\n        if (this.state.shouldSelectAfterUpdate) {\\n            (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.setSelectionRange(0, this.state.value.length);\\n        }\\n        var didMinChange = this.props.min !== prevProps.min;\\n        var didMaxChange = this.props.max !== prevProps.max;\\n        var didBoundsChange = didMinChange || didMaxChange;\\n        var didLocaleChange = this.props.locale !== prevProps.locale;\\n        var didValueChange = this.state.value !== prevState.value;\\n        if ((didBoundsChange && didValueChange) || (didLocaleChange && prevState.value !== NumericInput_1.VALUE_EMPTY)) {\\n            // we clamped the value due to a bounds change, so we should fire the change callback\\n            var valueToParse = didLocaleChange ? prevState.value : this.state.value;\\n            var valueAsString = numericInputUtils_1.parseStringToStringNumber(valueToParse, prevProps.locale);\\n            var localizedValue = numericInputUtils_1.toLocaleString(+valueAsString, this.props.locale);\\n            (_c = (_b = this.props).onValueChange) === null || _c === void 0 ? void 0 : _c.call(_b, +valueAsString, localizedValue, this.inputElement);\\n        }\\n    };\\n    NumericInput.prototype.validateProps = function (nextProps) {\\n        var majorStepSize = nextProps.majorStepSize, max = nextProps.max, min = nextProps.min, minorStepSize = nextProps.minorStepSize, stepSize = nextProps.stepSize, value = nextProps.value;\\n        if (min != null && max != null && min > max) {\\n            console.error(Errors.NUMERIC_INPUT_MIN_MAX);\\n        }\\n        if (stepSize <= 0) {\\n            console.error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\\n        }\\n        if (minorStepSize && minorStepSize <= 0) {\\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\\n        }\\n        if (majorStepSize && majorStepSize <= 0) {\\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\\n        }\\n        if (minorStepSize && minorStepSize > stepSize) {\\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\\n        }\\n        if (majorStepSize && majorStepSize < stepSize) {\\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\\n        }\\n        // controlled mode\\n        if (value != null) {\\n            var stepMaxPrecision = NumericInput_1.getStepMaxPrecision(nextProps);\\n            var sanitizedValue = NumericInput_1.roundAndClampValue(value.toString(), stepMaxPrecision, min, max, 0, this.props.locale);\\n            var valueDoesNotMatch = sanitizedValue !== value.toString();\\n            var localizedValue = numericInputUtils_1.toLocaleString(Number(numericInputUtils_1.parseStringToStringNumber(value, this.props.locale)), this.props.locale);\\n            var isNotLocalized = sanitizedValue !== localizedValue;\\n            if (valueDoesNotMatch && isNotLocalized) {\\n                console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID);\\n            }\\n        }\\n    };\\n    // Render Helpers\\n    // ==============\\n    NumericInput.prototype.renderButtons = function () {\\n        var _a = this.props, intent = _a.intent, max = _a.max, min = _a.min, locale = _a.locale;\\n        var value = numericInputUtils_1.parseStringToStringNumber(this.state.value, locale);\\n        var disabled = this.props.disabled || this.props.readOnly;\\n        var isIncrementDisabled = max !== undefined && value !== \\\"\\\" && +value >= max;\\n        var isDecrementDisabled = min !== undefined && value !== \\\"\\\" && +value <= min;\\n        return (React.createElement(buttonGroup_1.ButtonGroup, { className: common_1.Classes.FIXED, key: \\\"button-group\\\", vertical: true },\\n            React.createElement(buttons_1.Button, tslib_1.__assign({ \\\"aria-label\\\": \\\"increment\\\", disabled: disabled || isIncrementDisabled, icon: \\\"chevron-up\\\", intent: intent }, this.incrementButtonHandlers)),\\n            React.createElement(buttons_1.Button, tslib_1.__assign({ \\\"aria-label\\\": \\\"decrement\\\", disabled: disabled || isDecrementDisabled, icon: \\\"chevron-down\\\", intent: intent }, this.decrementButtonHandlers))));\\n    };\\n    NumericInput.prototype.renderInput = function () {\\n        var inputGroupHtmlProps = common_1.removeNonHTMLProps(this.props, NON_HTML_PROPS, true);\\n        return (React.createElement(inputGroup_1.InputGroup, tslib_1.__assign({ asyncControl: this.props.asyncControl, autoComplete: \\\"off\\\" }, inputGroupHtmlProps, { intent: this.state.currentImeInputInvalid ? common_1.Intent.DANGER : this.props.intent, inputRef: this.inputRef, large: this.props.large, leftIcon: this.props.leftIcon, onFocus: this.handleInputFocus, onBlur: this.handleInputBlur, onChange: this.handleInputChange, onCompositionEnd: this.handleCompositionEnd, onCompositionUpdate: this.handleCompositionUpdate, onKeyDown: this.handleInputKeyDown, onKeyPress: this.handleInputKeyPress, onPaste: this.handleInputPaste, rightElement: this.props.rightElement, value: this.state.value })));\\n    };\\n    // Callbacks - Buttons\\n    // ===================\\n    NumericInput.prototype.getButtonEventHandlers = function (direction) {\\n        var _this = this;\\n        return {\\n            // keydown is fired repeatedly when held so it's implicitly continuous\\n            onKeyDown: function (evt) {\\n                // eslint-disable-next-line deprecation/deprecation\\n                if (!_this.props.disabled && common_1.Keys.isKeyboardClick(evt.keyCode)) {\\n                    _this.handleButtonClick(evt, direction);\\n                }\\n            },\\n            onMouseDown: function (evt) {\\n                if (!_this.props.disabled) {\\n                    _this.handleButtonClick(evt, direction);\\n                    _this.startContinuousChange();\\n                }\\n            },\\n        };\\n    };\\n    NumericInput.prototype.startContinuousChange = function () {\\n        var _this = this;\\n        // The button's onMouseUp event handler doesn't fire if the user\\n        // releases outside of the button, so we need to watch all the way\\n        // from the top.\\n        document.addEventListener(\\\"mouseup\\\", this.stopContinuousChange);\\n        // Initial delay is slightly longer to prevent the user from\\n        // accidentally triggering the continuous increment/decrement.\\n        this.setTimeout(function () {\\n            _this.intervalId = window.setInterval(_this.handleContinuousChange, NumericInput_1.CONTINUOUS_CHANGE_INTERVAL);\\n        }, NumericInput_1.CONTINUOUS_CHANGE_DELAY);\\n    };\\n    // Data logic\\n    // ==========\\n    NumericInput.prototype.handleNextValue = function (valueAsString) {\\n        var _a, _b;\\n        if (this.props.value == null) {\\n            this.setState({ value: valueAsString });\\n        }\\n        (_b = (_a = this.props).onValueChange) === null || _b === void 0 ? void 0 : _b.call(_a, Number(numericInputUtils_1.parseStringToStringNumber(valueAsString, this.props.locale)), valueAsString, this.inputElement);\\n    };\\n    NumericInput.prototype.incrementValue = function (delta) {\\n        // pretend we're incrementing from 0 if currValue is empty\\n        var currValue = this.state.value === NumericInput_1.VALUE_EMPTY ? NumericInput_1.VALUE_ZERO : this.state.value;\\n        var nextValue = this.roundAndClampValue(currValue, delta);\\n        if (nextValue !== this.state.value) {\\n            this.handleNextValue(nextValue);\\n            this.setState({ shouldSelectAfterUpdate: this.props.selectAllOnIncrement });\\n        }\\n        // return value used in continuous change updates\\n        return nextValue;\\n    };\\n    NumericInput.prototype.getIncrementDelta = function (direction, isShiftKeyPressed, isAltKeyPressed) {\\n        var _a = this.props, majorStepSize = _a.majorStepSize, minorStepSize = _a.minorStepSize, stepSize = _a.stepSize;\\n        if (isShiftKeyPressed && majorStepSize != null) {\\n            return direction * majorStepSize;\\n        }\\n        else if (isAltKeyPressed && minorStepSize != null) {\\n            return direction * minorStepSize;\\n        }\\n        else {\\n            return direction * stepSize;\\n        }\\n    };\\n    NumericInput.prototype.roundAndClampValue = function (value, delta) {\\n        if (delta === void 0) { delta = 0; }\\n        return NumericInput_1.roundAndClampValue(value, this.state.stepMaxPrecision, this.props.min, this.props.max, delta, this.props.locale);\\n    };\\n    NumericInput.prototype.updateDelta = function (direction, e) {\\n        this.delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\\n        return this.delta;\\n    };\\n    var NumericInput_1;\\n    NumericInput.displayName = common_1.DISPLAYNAME_PREFIX + \\\".NumericInput\\\";\\n    NumericInput.VALUE_EMPTY = \\\"\\\";\\n    NumericInput.VALUE_ZERO = \\\"0\\\";\\n    NumericInput.defaultProps = {\\n        allowNumericCharactersOnly: true,\\n        buttonPosition: common_1.Position.RIGHT,\\n        clampValueOnBlur: false,\\n        defaultValue: NumericInput_1.VALUE_EMPTY,\\n        large: false,\\n        majorStepSize: 10,\\n        minorStepSize: 0.1,\\n        selectAllOnFocus: false,\\n        selectAllOnIncrement: false,\\n        stepSize: 1,\\n    };\\n    NumericInput.CONTINUOUS_CHANGE_DELAY = 300;\\n    NumericInput.CONTINUOUS_CHANGE_INTERVAL = 100;\\n    NumericInput = NumericInput_1 = tslib_1.__decorate([\\n        react_lifecycles_compat_1.polyfill\\n    ], NumericInput);\\n    return NumericInput;\\n}(common_1.AbstractPureComponent2));\\nexports.NumericInput = NumericInput;\\n//# sourceMappingURL=numericInput.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"NumericInput\",\"tslib_1\",\"classnames_1\",\"__importDefault\",\"React\",\"__importStar\",\"react_lifecycles_compat_1\",\"common_1\",\"Errors\",\"buttonGroup_1\",\"buttons_1\",\"controlGroup_1\",\"inputGroup_1\",\"numericInputUtils_1\",\"IncrementDirection\",\"NON_HTML_PROPS\",\"_super\",\"_a\",\"_this\",\"apply\",\"arguments\",\"state\",\"currentImeInputInvalid\",\"shouldSelectAfterUpdate\",\"stepMaxPrecision\",\"NumericInput_1\",\"getStepMaxPrecision\",\"props\",\"getValueOrEmptyValue\",\"defaultValue\",\"didPasteEventJustOccur\",\"delta\",\"inputElement\",\"inputRef\",\"refHandler\",\"incrementButtonHandlers\",\"getButtonEventHandlers\",\"UP\",\"decrementButtonHandlers\",\"DOWN\",\"handleButtonClick\",\"_this.handleButtonClick\",\"e\",\"direction\",\"_b\",\"updateDelta\",\"nextValue\",\"incrementValue\",\"onButtonClick\",\"call\",\"Number\",\"parseStringToStringNumber\",\"locale\",\"stopContinuousChange\",\"_this.stopContinuousChange\",\"clearTimeouts\",\"clearInterval\",\"intervalId\",\"document\",\"removeEventListener\",\"handleContinuousChange\",\"_this.handleContinuousChange\",\"_c\",\"_d\",\"undefined\",\"min\",\"max\",\"Infinity\",\"valueAsNumber\",\"handleInputFocus\",\"_this.handleInputFocus\",\"setState\",\"selectAllOnFocus\",\"onFocus\",\"handleInputBlur\",\"_this.handleInputBlur\",\"clampValueOnBlur\",\"handleNextValue\",\"roundAndClampValue\",\"target\",\"onBlur\",\"handleInputKeyDown\",\"_this.handleInputKeyDown\",\"disabled\",\"readOnly\",\"keyCode\",\"Keys\",\"ARROW_UP\",\"ARROW_DOWN\",\"preventDefault\",\"onKeyDown\",\"handleCompositionEnd\",\"_this.handleCompositionEnd\",\"allowNumericCharactersOnly\",\"sanitizeNumericInput\",\"data\",\"handleCompositionUpdate\",\"_this.handleCompositionUpdate\",\"sanitizedValue\",\"length\",\"handleInputKeyPress\",\"_this.handleInputKeyPress\",\"isValidNumericKeyboardEvent\",\"onKeyPress\",\"handleInputPaste\",\"_this.handleInputPaste\",\"onPaste\",\"handleInputChange\",\"_this.handleInputChange\",\"__extends\",\"getDerivedStateFromProps\",\"NumericInput.getDerivedStateFromProps\",\"nextState\",\"prevMaxProp\",\"prevMinProp\",\"didMaxChange\",\"didBoundsChange\",\"toString\",\"VALUE_EMPTY\",\"__assign\",\"NumericInput.getStepMaxPrecision\",\"minorStepSize\",\"Utils\",\"countDecimalPlaces\",\"stepSize\",\"NumericInput.roundAndClampValue\",\"isValueNumeric\",\"currentValue\",\"toMaxPrecision\",\"clampedValue\",\"clampValue\",\"toLocaleString\",\"prototype\",\"render\",\"NumericInput.prototype.render\",\"buttonPosition\",\"className\",\"fill\",\"large\",\"containerClasses\",\"default\",\"Classes\",\"NUMERIC_INPUT\",\"LARGE\",\"buttons\",\"renderButtons\",\"createElement\",\"ControlGroup\",\"Position\",\"LEFT\",\"renderInput\",\"RIGHT\",\"componentDidUpdate\",\"NumericInput.prototype.componentDidUpdate\",\"prevProps\",\"prevState\",\"setRef\",\"setSelectionRange\",\"didLocaleChange\",\"didValueChange\",\"valueAsString\",\"valueToParse\",\"localizedValue\",\"onValueChange\",\"validateProps\",\"NumericInput.prototype.validateProps\",\"nextProps\",\"majorStepSize\",\"console\",\"error\",\"NUMERIC_INPUT_MIN_MAX\",\"NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE\",\"NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE\",\"NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE\",\"NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND\",\"NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND\",\"valueDoesNotMatch\",\"warn\",\"NUMERIC_INPUT_CONTROLLED_VALUE_INVALID\",\"NumericInput.prototype.renderButtons\",\"intent\",\"isDecrementDisabled\",\"ButtonGroup\",\"FIXED\",\"key\",\"vertical\",\"Button\",\"icon\",\"NumericInput.prototype.renderInput\",\"inputGroupHtmlProps\",\"removeNonHTMLProps\",\"InputGroup\",\"asyncControl\",\"autoComplete\",\"Intent\",\"DANGER\",\"leftIcon\",\"onChange\",\"onCompositionEnd\",\"onCompositionUpdate\",\"rightElement\",\"NumericInput.prototype.getButtonEventHandlers\",\"evt\",\"isKeyboardClick\",\"onMouseDown\",\"startContinuousChange\",\"NumericInput.prototype.startContinuousChange\",\"addEventListener\",\"setTimeout\",\"window\",\"setInterval\",\"CONTINUOUS_CHANGE_INTERVAL\",\"CONTINUOUS_CHANGE_DELAY\",\"NumericInput.prototype.handleNextValue\",\"NumericInput.prototype.incrementValue\",\"currValue\",\"VALUE_ZERO\",\"selectAllOnIncrement\",\"getIncrementDelta\",\"NumericInput.prototype.getIncrementDelta\",\"isShiftKeyPressed\",\"isAltKeyPressed\",\"NumericInput.prototype.roundAndClampValue\",\"NumericInput.prototype.updateDelta\",\"shiftKey\",\"altKey\",\"displayName\",\"DISPLAYNAME_PREFIX\",\"defaultProps\",\"__decorate\",\"polyfill\",\"AbstractPureComponent2\"]\n}\n"]