["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/objects/Lensflare.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$objects$Lensflare=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError(\"Cannot call a class as a function\");\n}function _possibleConstructorReturn(self,call){if(call&&(\"object\"===_typeof(call)||\"function\"===typeof call))return call;if(void 0===self)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return self}function _getPrototypeOf(o$jscomp$0){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)};return _getPrototypeOf(o$jscomp$0)}function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&\nnull!==superClass)throw new TypeError(\"Super expression must either be null or a function\");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}});superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o$jscomp$0,p$jscomp$0){_setPrototypeOf=Object.setPrototypeOf||function(o,p){o.__proto__=p;return o};return _setPrototypeOf(o$jscomp$0,p$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.LensflareElement=\nexports.Lensflare=void 0;var _three=require(\"module$node_modules$three$build$three_module\");global=function(_Mesh){function Lensflare(){_classCallCheck(this,Lensflare);var _this=_possibleConstructorReturn(this,_getPrototypeOf(Lensflare).call(this,Lensflare.Geometry,new _three.MeshBasicMaterial({opacity:0,transparent:!0})));_this.type=\"Lensflare\";_this.frustumCulled=!1;_this.renderOrder=Infinity;var positionScreen=new _three.Vector3,positionView=new _three.Vector3,tempMap=new _three.DataTexture(new Uint8Array(768),\n16,16,_three.RGBFormat);tempMap.minFilter=_three.NearestFilter;tempMap.magFilter=_three.NearestFilter;tempMap.wrapS=_three.ClampToEdgeWrapping;tempMap.wrapT=_three.ClampToEdgeWrapping;var occlusionMap=new _three.DataTexture(new Uint8Array(768),16,16,_three.RGBFormat);occlusionMap.minFilter=_three.NearestFilter;occlusionMap.magFilter=_three.NearestFilter;occlusionMap.wrapS=_three.ClampToEdgeWrapping;occlusionMap.wrapT=_three.ClampToEdgeWrapping;var geometry=Lensflare.Geometry,material1a=new _three.RawShaderMaterial({uniforms:{scale:{value:null},\nscreenPosition:{value:null}},vertexShader:\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform vec3 screenPosition;\\n\\t\\t\\t\\tuniform vec2 scale;\\n\\n\\t\\t\\t\\tattribute vec3 position;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_Position \\x3d vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\\n\\n\\t\\t\\t\\t}\",fragmentShader:\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_FragColor \\x3d vec4( 1.0, 0.0, 1.0, 1.0 );\\n\\n\\t\\t\\t\\t}\",depthTest:!0,depthWrite:!1,transparent:!1}),\nmaterial1b=new _three.RawShaderMaterial({uniforms:{map:{value:tempMap},scale:{value:null},screenPosition:{value:null}},vertexShader:\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform vec3 screenPosition;\\n\\t\\t\\t\\tuniform vec2 scale;\\n\\n\\t\\t\\t\\tattribute vec3 position;\\n\\t\\t\\t\\tattribute vec2 uv;\\n\\n\\t\\t\\t\\tvarying vec2 vUV;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvUV \\x3d uv;\\n\\n\\t\\t\\t\\t\\tgl_Position \\x3d vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\\n\\n\\t\\t\\t\\t}\",fragmentShader:\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform sampler2D map;\\n\\n\\t\\t\\t\\tvarying vec2 vUV;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_FragColor \\x3d texture2D( map, vUV );\\n\\n\\t\\t\\t\\t}\",\ndepthTest:!1,depthWrite:!1,transparent:!1}),mesh1=new _three.Mesh(geometry,material1a),elements=[],shader=LensflareElement.Shader,material2=new _three.RawShaderMaterial({uniforms:{map:{value:null},occlusionMap:{value:occlusionMap},color:{value:new _three.Color(16777215)},scale:{value:new _three.Vector2},screenPosition:{value:new _three.Vector3}},vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader,blending:_three.AdditiveBlending,transparent:!0,depthWrite:!1}),mesh2=new _three.Mesh(geometry,\nmaterial2);_this.addElement=function(element){elements.push(element)};var scale=new _three.Vector2,screenPositionPixels=new _three.Vector2,validArea=new _three.Box2,viewport=new _three.Vector4;_this.onBeforeRender=function(renderer,scene,camera){renderer.getCurrentViewport(viewport);var halfViewportWidth=viewport.z/2,halfViewportHeight=viewport.w/2;scene=16/viewport.w;scale.set(viewport.w/viewport.z*scene,scene);validArea.min.set(viewport.x,viewport.y);validArea.max.set(viewport.x+(viewport.z-16),\nviewport.y+(viewport.w-16));positionView.setFromMatrixPosition(this.matrixWorld);positionView.applyMatrix4(camera.matrixWorldInverse);if(!(0<positionView.z)&&(positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix),screenPositionPixels.x=viewport.x+positionScreen.x*halfViewportWidth+halfViewportWidth-8,screenPositionPixels.y=viewport.y+positionScreen.y*halfViewportHeight+halfViewportHeight-8,validArea.containsPoint(screenPositionPixels))){renderer.copyFramebufferToTexture(screenPositionPixels,\ntempMap);scene=material1a.uniforms;scene.scale.value=scale;scene.screenPosition.value=positionScreen;renderer.renderBufferDirect(camera,null,geometry,material1a,mesh1,null);renderer.copyFramebufferToTexture(screenPositionPixels,occlusionMap);scene=material1b.uniforms;scene.scale.value=scale;scene.screenPosition.value=positionScreen;renderer.renderBufferDirect(camera,null,geometry,material1b,mesh1,null);halfViewportWidth=2*-positionScreen.x;halfViewportHeight=2*-positionScreen.y;for(var i=0,l=elements.length;i<\nl;i++){scene=elements[i];var _uniforms=material2.uniforms;_uniforms.color.value.copy(scene.color);_uniforms.map.value=scene.texture;_uniforms.screenPosition.value.x=positionScreen.x+halfViewportWidth*scene.distance;_uniforms.screenPosition.value.y=positionScreen.y+halfViewportHeight*scene.distance;scene=scene.size/viewport.w;_uniforms.scale.value.set(viewport.w/viewport.z*scene,scene);material2.uniformsNeedUpdate=!0;renderer.renderBufferDirect(camera,null,geometry,material2,mesh2,null)}}};_this.dispose=\nfunction(){material1a.dispose();material1b.dispose();material2.dispose();tempMap.dispose();occlusionMap.dispose();for(var i=0,l=elements.length;i<l;i++)elements[i].texture.dispose()};return _this}_inherits(Lensflare,_Mesh);return Lensflare}(_three.Mesh);exports.Lensflare=global;global.prototype.isLensflare=!0;var LensflareElement=function LensflareElement(texture){var size=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1,distance=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,color=\n3<arguments.length&&void 0!==arguments[3]?arguments[3]:new _three.Color(16777215);_classCallCheck(this,LensflareElement);this.texture=texture;this.size=size;this.distance=distance;this.color=color};exports.LensflareElement=LensflareElement;LensflareElement.Shader={uniforms:{map:{value:null},occlusionMap:{value:null},color:{value:null},scale:{value:null},screenPosition:{value:null}},vertexShader:\"\\n\\n\\t\\tprecision highp float;\\n\\n\\t\\tuniform vec3 screenPosition;\\n\\t\\tuniform vec2 scale;\\n\\n\\t\\tuniform sampler2D occlusionMap;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\n\\t\\tvarying vec2 vUV;\\n\\t\\tvarying float vVisibility;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUV \\x3d uv;\\n\\n\\t\\t\\tvec2 pos \\x3d position.xy;\\n\\n\\t\\t\\tvec4 visibility \\x3d texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\\n\\t\\t\\tvisibility +\\x3d texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\\n\\t\\t\\tvisibility +\\x3d texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\\n\\t\\t\\tvisibility +\\x3d texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\\n\\t\\t\\tvisibility +\\x3d texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\\n\\t\\t\\tvisibility +\\x3d texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\\n\\t\\t\\tvisibility +\\x3d texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\\n\\t\\t\\tvisibility +\\x3d texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\\n\\t\\t\\tvisibility +\\x3d texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\\n\\n\\t\\t\\tvVisibility \\x3d        visibility.r / 9.0;\\n\\t\\t\\tvVisibility *\\x3d 1.0 - visibility.g / 9.0;\\n\\t\\t\\tvVisibility *\\x3d       visibility.b / 9.0;\\n\\n\\t\\t\\tgl_Position \\x3d vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\\n\\n\\t\\t}\",\nfragmentShader:\"\\n\\n\\t\\tprecision highp float;\\n\\n\\t\\tuniform sampler2D map;\\n\\t\\tuniform vec3 color;\\n\\n\\t\\tvarying vec2 vUV;\\n\\t\\tvarying float vVisibility;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 texture \\x3d texture2D( map, vUV );\\n\\t\\t\\ttexture.a *\\x3d vVisibility;\\n\\t\\t\\tgl_FragColor \\x3d texture;\\n\\t\\t\\tgl_FragColor.rgb *\\x3d color;\\n\\n\\t\\t}\"};global.Geometry=function(){var geometry=new _three.BufferGeometry,float32Array=new Float32Array([-1,-1,0,0,0,1,-1,0,1,0,1,1,0,1,1,-1,1,0,0,1]);float32Array=\nnew _three.InterleavedBuffer(float32Array,5);geometry.setIndex([0,1,2,0,2,3]);geometry.setAttribute(\"position\",new _three.InterleavedBufferAttribute(float32Array,3,0,!1));geometry.setAttribute(\"uv\",new _three.InterleavedBufferAttribute(float32Array,2,3,!1));return geometry}()}","~:source","shadow$provide[\"module$node_modules$three_stdlib$objects$Lensflare\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LensflareElement = exports.Lensflare = void 0;\n\nvar _three = require(\"three\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar Lensflare =\n/*#__PURE__*/\nfunction (_Mesh) {\n  _inherits(Lensflare, _Mesh);\n\n  function Lensflare() {\n    var _this;\n\n    _classCallCheck(this, Lensflare);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Lensflare).call(this, Lensflare.Geometry, new _three.MeshBasicMaterial({\n      opacity: 0,\n      transparent: true\n    })));\n    _this.type = 'Lensflare';\n    _this.frustumCulled = false;\n    _this.renderOrder = Infinity; //\n\n    var positionScreen = new _three.Vector3();\n    var positionView = new _three.Vector3(); // textures\n\n    var tempMap = new _three.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, _three.RGBFormat);\n    tempMap.minFilter = _three.NearestFilter;\n    tempMap.magFilter = _three.NearestFilter;\n    tempMap.wrapS = _three.ClampToEdgeWrapping;\n    tempMap.wrapT = _three.ClampToEdgeWrapping;\n    var occlusionMap = new _three.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, _three.RGBFormat);\n    occlusionMap.minFilter = _three.NearestFilter;\n    occlusionMap.magFilter = _three.NearestFilter;\n    occlusionMap.wrapS = _three.ClampToEdgeWrapping;\n    occlusionMap.wrapT = _three.ClampToEdgeWrapping; // material\n\n    var geometry = Lensflare.Geometry;\n    var material1a = new _three.RawShaderMaterial({\n      uniforms: {\n        scale: {\n          value: null\n        },\n        screenPosition: {\n          value: null\n        }\n      },\n      vertexShader:\n      /* glsl */\n      \"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform vec3 screenPosition;\\n\\t\\t\\t\\tuniform vec2 scale;\\n\\n\\t\\t\\t\\tattribute vec3 position;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\\n\\n\\t\\t\\t\\t}\",\n      fragmentShader:\n      /* glsl */\n      \"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\\n\\n\\t\\t\\t\\t}\",\n      depthTest: true,\n      depthWrite: false,\n      transparent: false\n    });\n    var material1b = new _three.RawShaderMaterial({\n      uniforms: {\n        map: {\n          value: tempMap\n        },\n        scale: {\n          value: null\n        },\n        screenPosition: {\n          value: null\n        }\n      },\n      vertexShader:\n      /* glsl */\n      \"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform vec3 screenPosition;\\n\\t\\t\\t\\tuniform vec2 scale;\\n\\n\\t\\t\\t\\tattribute vec3 position;\\n\\t\\t\\t\\tattribute vec2 uv;\\n\\n\\t\\t\\t\\tvarying vec2 vUV;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvUV = uv;\\n\\n\\t\\t\\t\\t\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\\n\\n\\t\\t\\t\\t}\",\n      fragmentShader:\n      /* glsl */\n      \"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform sampler2D map;\\n\\n\\t\\t\\t\\tvarying vec2 vUV;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texture2D( map, vUV );\\n\\n\\t\\t\\t\\t}\",\n      depthTest: false,\n      depthWrite: false,\n      transparent: false\n    }); // the following object is used for occlusionMap generation\n\n    var mesh1 = new _three.Mesh(geometry, material1a); //\n\n    var elements = [];\n    var shader = LensflareElement.Shader;\n    var material2 = new _three.RawShaderMaterial({\n      uniforms: {\n        map: {\n          value: null\n        },\n        occlusionMap: {\n          value: occlusionMap\n        },\n        color: {\n          value: new _three.Color(0xffffff)\n        },\n        scale: {\n          value: new _three.Vector2()\n        },\n        screenPosition: {\n          value: new _three.Vector3()\n        }\n      },\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      blending: _three.AdditiveBlending,\n      transparent: true,\n      depthWrite: false\n    });\n    var mesh2 = new _three.Mesh(geometry, material2);\n\n    _this.addElement = function (element) {\n      elements.push(element);\n    }; //\n\n\n    var scale = new _three.Vector2();\n    var screenPositionPixels = new _three.Vector2();\n    var validArea = new _three.Box2();\n    var viewport = new _three.Vector4();\n\n    _this.onBeforeRender = function (renderer, scene, camera) {\n      renderer.getCurrentViewport(viewport);\n      var invAspect = viewport.w / viewport.z;\n      var halfViewportWidth = viewport.z / 2.0;\n      var halfViewportHeight = viewport.w / 2.0;\n      var size = 16 / viewport.w;\n      scale.set(size * invAspect, size);\n      validArea.min.set(viewport.x, viewport.y);\n      validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16)); // calculate position in screen space\n\n      positionView.setFromMatrixPosition(this.matrixWorld);\n      positionView.applyMatrix4(camera.matrixWorldInverse);\n      if (positionView.z > 0) return; // lensflare is behind the camera\n\n      positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix); // horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n      screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n      screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8; // screen cull\n\n      if (validArea.containsPoint(screenPositionPixels)) {\n        // save current RGB to temp texture\n        renderer.copyFramebufferToTexture(screenPositionPixels, tempMap); // render pink quad\n\n        var uniforms = material1a.uniforms;\n        uniforms['scale'].value = scale;\n        uniforms['screenPosition'].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null); // copy result to occlusionMap\n\n        renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap); // restore graphics\n\n        uniforms = material1b.uniforms;\n        uniforms['scale'].value = scale;\n        uniforms['screenPosition'].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null); // render elements\n\n        var vecX = -positionScreen.x * 2;\n        var vecY = -positionScreen.y * 2;\n\n        for (var i = 0, l = elements.length; i < l; i++) {\n          var element = elements[i];\n          var _uniforms = material2.uniforms;\n\n          _uniforms['color'].value.copy(element.color);\n\n          _uniforms['map'].value = element.texture;\n          _uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\n          _uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\n          size = element.size / viewport.w;\n\n          var _invAspect = viewport.w / viewport.z;\n\n          _uniforms['scale'].value.set(size * _invAspect, size);\n\n          material2.uniformsNeedUpdate = true;\n          renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n        }\n      }\n    };\n\n    _this.dispose = function () {\n      material1a.dispose();\n      material1b.dispose();\n      material2.dispose();\n      tempMap.dispose();\n      occlusionMap.dispose();\n\n      for (var i = 0, l = elements.length; i < l; i++) {\n        elements[i].texture.dispose();\n      }\n    };\n\n    return _this;\n  }\n\n  return Lensflare;\n}(_three.Mesh);\n\nexports.Lensflare = Lensflare;\nLensflare.prototype.isLensflare = true; //\n\nvar LensflareElement = function LensflareElement(texture) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _three.Color(0xffffff);\n\n  _classCallCheck(this, LensflareElement);\n\n  this.texture = texture;\n  this.size = size;\n  this.distance = distance;\n  this.color = color;\n};\n\nexports.LensflareElement = LensflareElement;\nLensflareElement.Shader = {\n  uniforms: {\n    map: {\n      value: null\n    },\n    occlusionMap: {\n      value: null\n    },\n    color: {\n      value: null\n    },\n    scale: {\n      value: null\n    },\n    screenPosition: {\n      value: null\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n\\n\\t\\tprecision highp float;\\n\\n\\t\\tuniform vec3 screenPosition;\\n\\t\\tuniform vec2 scale;\\n\\n\\t\\tuniform sampler2D occlusionMap;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\n\\t\\tvarying vec2 vUV;\\n\\t\\tvarying float vVisibility;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUV = uv;\\n\\n\\t\\t\\tvec2 pos = position.xy;\\n\\n\\t\\t\\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\\n\\n\\t\\t\\tvVisibility =        visibility.r / 9.0;\\n\\t\\t\\tvVisibility *= 1.0 - visibility.g / 9.0;\\n\\t\\t\\tvVisibility *=       visibility.b / 9.0;\\n\\n\\t\\t\\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader:\n  /* glsl */\n  \"\\n\\n\\t\\tprecision highp float;\\n\\n\\t\\tuniform sampler2D map;\\n\\t\\tuniform vec3 color;\\n\\n\\t\\tvarying vec2 vUV;\\n\\t\\tvarying float vVisibility;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 texture = texture2D( map, vUV );\\n\\t\\t\\ttexture.a *= vVisibility;\\n\\t\\t\\tgl_FragColor = texture;\\n\\t\\t\\tgl_FragColor.rgb *= color;\\n\\n\\t\\t}\"\n};\n\nLensflare.Geometry = function () {\n  var geometry = new _three.BufferGeometry();\n  var float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\n  var interleavedBuffer = new _three.InterleavedBuffer(float32Array, 5);\n  geometry.setIndex([0, 1, 2, 0, 2, 3]);\n  geometry.setAttribute('position', new _three.InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n  geometry.setAttribute('uv', new _three.InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n  return geometry;\n}();\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["fragmentShader","map","Shader","wrapS","frustumCulled","depthTest","blending","prototype","scale","transparent","Geometry","addElement","texture","x","__esModule","dispose","onBeforeRender","Lensflare","renderOrder","vertexShader","configurable","value","magFilter","writable","distance","type","y","wrapT","__proto__","depthWrite","size","screenPosition","uniforms","occlusionMap","isLensflare","LensflareElement","minFilter","uniformsNeedUpdate","color","opacity","constructor"]],"~:compiled-at",1630917515366,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$objects$Lensflare.js\",\n\"lineCount\":16,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/objects/Lensflare.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$objects$Lensflare\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.LensflareElement = exports.Lensflare = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nvar Lensflare =\\n/*#__PURE__*/\\nfunction (_Mesh) {\\n  _inherits(Lensflare, _Mesh);\\n\\n  function Lensflare() {\\n    var _this;\\n\\n    _classCallCheck(this, Lensflare);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Lensflare).call(this, Lensflare.Geometry, new _three.MeshBasicMaterial({\\n      opacity: 0,\\n      transparent: true\\n    })));\\n    _this.type = 'Lensflare';\\n    _this.frustumCulled = false;\\n    _this.renderOrder = Infinity; //\\n\\n    var positionScreen = new _three.Vector3();\\n    var positionView = new _three.Vector3(); // textures\\n\\n    var tempMap = new _three.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, _three.RGBFormat);\\n    tempMap.minFilter = _three.NearestFilter;\\n    tempMap.magFilter = _three.NearestFilter;\\n    tempMap.wrapS = _three.ClampToEdgeWrapping;\\n    tempMap.wrapT = _three.ClampToEdgeWrapping;\\n    var occlusionMap = new _three.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, _three.RGBFormat);\\n    occlusionMap.minFilter = _three.NearestFilter;\\n    occlusionMap.magFilter = _three.NearestFilter;\\n    occlusionMap.wrapS = _three.ClampToEdgeWrapping;\\n    occlusionMap.wrapT = _three.ClampToEdgeWrapping; // material\\n\\n    var geometry = Lensflare.Geometry;\\n    var material1a = new _three.RawShaderMaterial({\\n      uniforms: {\\n        scale: {\\n          value: null\\n        },\\n        screenPosition: {\\n          value: null\\n        }\\n      },\\n      vertexShader:\\n      /* glsl */\\n      \\\"\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tprecision highp float;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tuniform vec3 screenPosition;\\\\n\\\\t\\\\t\\\\t\\\\tuniform vec2 scale;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tattribute vec3 position;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tvoid main() {\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t}\\\",\\n      fragmentShader:\\n      /* glsl */\\n      \\\"\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tprecision highp float;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tvoid main() {\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t}\\\",\\n      depthTest: true,\\n      depthWrite: false,\\n      transparent: false\\n    });\\n    var material1b = new _three.RawShaderMaterial({\\n      uniforms: {\\n        map: {\\n          value: tempMap\\n        },\\n        scale: {\\n          value: null\\n        },\\n        screenPosition: {\\n          value: null\\n        }\\n      },\\n      vertexShader:\\n      /* glsl */\\n      \\\"\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tprecision highp float;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tuniform vec3 screenPosition;\\\\n\\\\t\\\\t\\\\t\\\\tuniform vec2 scale;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tattribute vec3 position;\\\\n\\\\t\\\\t\\\\t\\\\tattribute vec2 uv;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tvarying vec2 vUV;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tvoid main() {\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tvUV = uv;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t}\\\",\\n      fragmentShader:\\n      /* glsl */\\n      \\\"\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tprecision highp float;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tuniform sampler2D map;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tvarying vec2 vUV;\\\\n\\\\n\\\\t\\\\t\\\\t\\\\tvoid main() {\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tgl_FragColor = texture2D( map, vUV );\\\\n\\\\n\\\\t\\\\t\\\\t\\\\t}\\\",\\n      depthTest: false,\\n      depthWrite: false,\\n      transparent: false\\n    }); // the following object is used for occlusionMap generation\\n\\n    var mesh1 = new _three.Mesh(geometry, material1a); //\\n\\n    var elements = [];\\n    var shader = LensflareElement.Shader;\\n    var material2 = new _three.RawShaderMaterial({\\n      uniforms: {\\n        map: {\\n          value: null\\n        },\\n        occlusionMap: {\\n          value: occlusionMap\\n        },\\n        color: {\\n          value: new _three.Color(0xffffff)\\n        },\\n        scale: {\\n          value: new _three.Vector2()\\n        },\\n        screenPosition: {\\n          value: new _three.Vector3()\\n        }\\n      },\\n      vertexShader: shader.vertexShader,\\n      fragmentShader: shader.fragmentShader,\\n      blending: _three.AdditiveBlending,\\n      transparent: true,\\n      depthWrite: false\\n    });\\n    var mesh2 = new _three.Mesh(geometry, material2);\\n\\n    _this.addElement = function (element) {\\n      elements.push(element);\\n    }; //\\n\\n\\n    var scale = new _three.Vector2();\\n    var screenPositionPixels = new _three.Vector2();\\n    var validArea = new _three.Box2();\\n    var viewport = new _three.Vector4();\\n\\n    _this.onBeforeRender = function (renderer, scene, camera) {\\n      renderer.getCurrentViewport(viewport);\\n      var invAspect = viewport.w / viewport.z;\\n      var halfViewportWidth = viewport.z / 2.0;\\n      var halfViewportHeight = viewport.w / 2.0;\\n      var size = 16 / viewport.w;\\n      scale.set(size * invAspect, size);\\n      validArea.min.set(viewport.x, viewport.y);\\n      validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16)); // calculate position in screen space\\n\\n      positionView.setFromMatrixPosition(this.matrixWorld);\\n      positionView.applyMatrix4(camera.matrixWorldInverse);\\n      if (positionView.z > 0) return; // lensflare is behind the camera\\n\\n      positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix); // horizontal and vertical coordinate of the lower left corner of the pixels to copy\\n\\n      screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\\n      screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8; // screen cull\\n\\n      if (validArea.containsPoint(screenPositionPixels)) {\\n        // save current RGB to temp texture\\n        renderer.copyFramebufferToTexture(screenPositionPixels, tempMap); // render pink quad\\n\\n        var uniforms = material1a.uniforms;\\n        uniforms['scale'].value = scale;\\n        uniforms['screenPosition'].value = positionScreen;\\n        renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null); // copy result to occlusionMap\\n\\n        renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap); // restore graphics\\n\\n        uniforms = material1b.uniforms;\\n        uniforms['scale'].value = scale;\\n        uniforms['screenPosition'].value = positionScreen;\\n        renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null); // render elements\\n\\n        var vecX = -positionScreen.x * 2;\\n        var vecY = -positionScreen.y * 2;\\n\\n        for (var i = 0, l = elements.length; i < l; i++) {\\n          var element = elements[i];\\n          var _uniforms = material2.uniforms;\\n\\n          _uniforms['color'].value.copy(element.color);\\n\\n          _uniforms['map'].value = element.texture;\\n          _uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\\n          _uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\\n          size = element.size / viewport.w;\\n\\n          var _invAspect = viewport.w / viewport.z;\\n\\n          _uniforms['scale'].value.set(size * _invAspect, size);\\n\\n          material2.uniformsNeedUpdate = true;\\n          renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\\n        }\\n      }\\n    };\\n\\n    _this.dispose = function () {\\n      material1a.dispose();\\n      material1b.dispose();\\n      material2.dispose();\\n      tempMap.dispose();\\n      occlusionMap.dispose();\\n\\n      for (var i = 0, l = elements.length; i < l; i++) {\\n        elements[i].texture.dispose();\\n      }\\n    };\\n\\n    return _this;\\n  }\\n\\n  return Lensflare;\\n}(_three.Mesh);\\n\\nexports.Lensflare = Lensflare;\\nLensflare.prototype.isLensflare = true; //\\n\\nvar LensflareElement = function LensflareElement(texture) {\\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\\n  var distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\\n  var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _three.Color(0xffffff);\\n\\n  _classCallCheck(this, LensflareElement);\\n\\n  this.texture = texture;\\n  this.size = size;\\n  this.distance = distance;\\n  this.color = color;\\n};\\n\\nexports.LensflareElement = LensflareElement;\\nLensflareElement.Shader = {\\n  uniforms: {\\n    map: {\\n      value: null\\n    },\\n    occlusionMap: {\\n      value: null\\n    },\\n    color: {\\n      value: null\\n    },\\n    scale: {\\n      value: null\\n    },\\n    screenPosition: {\\n      value: null\\n    }\\n  },\\n  vertexShader:\\n  /* glsl */\\n  \\\"\\\\n\\\\n\\\\t\\\\tprecision highp float;\\\\n\\\\n\\\\t\\\\tuniform vec3 screenPosition;\\\\n\\\\t\\\\tuniform vec2 scale;\\\\n\\\\n\\\\t\\\\tuniform sampler2D occlusionMap;\\\\n\\\\n\\\\t\\\\tattribute vec3 position;\\\\n\\\\t\\\\tattribute vec2 uv;\\\\n\\\\n\\\\t\\\\tvarying vec2 vUV;\\\\n\\\\t\\\\tvarying float vVisibility;\\\\n\\\\n\\\\t\\\\tvoid main() {\\\\n\\\\n\\\\t\\\\t\\\\tvUV = uv;\\\\n\\\\n\\\\t\\\\t\\\\tvec2 pos = position.xy;\\\\n\\\\n\\\\t\\\\t\\\\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\\\\n\\\\t\\\\t\\\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\\\\n\\\\t\\\\t\\\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\\\\n\\\\t\\\\t\\\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\\\\n\\\\t\\\\t\\\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\\\\n\\\\t\\\\t\\\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\\\\n\\\\t\\\\t\\\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\\\\n\\\\t\\\\t\\\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\\\\n\\\\t\\\\t\\\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\\\\n\\\\n\\\\t\\\\t\\\\tvVisibility =        visibility.r / 9.0;\\\\n\\\\t\\\\t\\\\tvVisibility *= 1.0 - visibility.g / 9.0;\\\\n\\\\t\\\\t\\\\tvVisibility *=       visibility.b / 9.0;\\\\n\\\\n\\\\t\\\\t\\\\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\\\\n\\\\n\\\\t\\\\t}\\\",\\n  fragmentShader:\\n  /* glsl */\\n  \\\"\\\\n\\\\n\\\\t\\\\tprecision highp float;\\\\n\\\\n\\\\t\\\\tuniform sampler2D map;\\\\n\\\\t\\\\tuniform vec3 color;\\\\n\\\\n\\\\t\\\\tvarying vec2 vUV;\\\\n\\\\t\\\\tvarying float vVisibility;\\\\n\\\\n\\\\t\\\\tvoid main() {\\\\n\\\\n\\\\t\\\\t\\\\tvec4 texture = texture2D( map, vUV );\\\\n\\\\t\\\\t\\\\ttexture.a *= vVisibility;\\\\n\\\\t\\\\t\\\\tgl_FragColor = texture;\\\\n\\\\t\\\\t\\\\tgl_FragColor.rgb *= color;\\\\n\\\\n\\\\t\\\\t}\\\"\\n};\\n\\nLensflare.Geometry = function () {\\n  var geometry = new _three.BufferGeometry();\\n  var float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\\n  var interleavedBuffer = new _three.InterleavedBuffer(float32Array, 5);\\n  geometry.setIndex([0, 1, 2, 0, 2, 3]);\\n  geometry.setAttribute('position', new _three.InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\\n  geometry.setAttribute('uv', new _three.InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\\n  return geometry;\\n}();\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"_classCallCheck\",\"instance\",\"Constructor\",\"TypeError\",\"_possibleConstructorReturn\",\"self\",\"call\",\"ReferenceError\",\"_getPrototypeOf\",\"o\",\"Object\",\"setPrototypeOf\",\"getPrototypeOf\",\"__proto__\",\"_inherits\",\"subClass\",\"superClass\",\"create\",\"value\",\"writable\",\"configurable\",\"_setPrototypeOf\",\"p\",\"defineProperty\",\"LensflareElement\",\"Lensflare\",\"_three\",\"_Mesh\",\"_this\",\"Geometry\",\"MeshBasicMaterial\",\"opacity\",\"transparent\",\"type\",\"frustumCulled\",\"renderOrder\",\"Infinity\",\"positionScreen\",\"Vector3\",\"positionView\",\"tempMap\",\"DataTexture\",\"Uint8Array\",\"RGBFormat\",\"minFilter\",\"NearestFilter\",\"magFilter\",\"wrapS\",\"ClampToEdgeWrapping\",\"wrapT\",\"occlusionMap\",\"geometry\",\"material1a\",\"RawShaderMaterial\",\"uniforms\",\"scale\",\"screenPosition\",\"vertexShader\",\"fragmentShader\",\"depthTest\",\"depthWrite\",\"material1b\",\"map\",\"mesh1\",\"Mesh\",\"elements\",\"shader\",\"Shader\",\"material2\",\"color\",\"Color\",\"Vector2\",\"blending\",\"AdditiveBlending\",\"mesh2\",\"addElement\",\"_this.addElement\",\"element\",\"push\",\"screenPositionPixels\",\"validArea\",\"Box2\",\"viewport\",\"Vector4\",\"onBeforeRender\",\"_this.onBeforeRender\",\"renderer\",\"scene\",\"camera\",\"getCurrentViewport\",\"halfViewportWidth\",\"z\",\"halfViewportHeight\",\"w\",\"size\",\"set\",\"min\",\"x\",\"y\",\"max\",\"setFromMatrixPosition\",\"matrixWorld\",\"applyMatrix4\",\"matrixWorldInverse\",\"copy\",\"projectionMatrix\",\"containsPoint\",\"copyFramebufferToTexture\",\"renderBufferDirect\",\"vecX\",\"vecY\",\"i\",\"l\",\"length\",\"_uniforms\",\"texture\",\"distance\",\"uniformsNeedUpdate\",\"dispose\",\"_this.dispose\",\"isLensflare\",\"arguments\",\"undefined\",\"BufferGeometry\",\"float32Array\",\"Float32Array\",\"interleavedBuffer\",\"InterleavedBuffer\",\"setIndex\",\"setAttribute\",\"InterleavedBufferAttribute\"]\n}\n"]