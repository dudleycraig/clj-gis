["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/loaders/lwo/LWO3Parser.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$loaders$lwo$LWO3Parser=function(global,require,module,exports){function LWO3Parser(IFFParser){this.IFF=IFFParser}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.LWO3Parser=LWO3Parser;LWO3Parser.prototype={constructor:LWO3Parser,parseBlock:function(){this.IFF[\"debugger\"].offset=this.IFF.reader.offset;this.IFF[\"debugger\"].closeForms();var blockID=this.IFF.reader.getIDTag(),length=this.IFF.reader.getUint32();this.IFF[\"debugger\"].dataOffset=\nthis.IFF.reader.offset;this.IFF[\"debugger\"].length=length;switch(blockID){case \"FORM\":this.IFF.parseForm(length);break;case \"ICON\":case \"VMPA\":case \"BBOX\":case \"NORM\":case \"PRE \":case \"POST\":case \"KEY \":case \"SPAN\":case \"TIME\":case \"CLRS\":case \"CLRA\":case \"FILT\":case \"DITH\":case \"CONT\":case \"BRIT\":case \"SATR\":case \"HUE \":case \"GAMM\":case \"NEGA\":case \"IFLT\":case \"PFLT\":case \"PROJ\":case \"AXIS\":case \"AAST\":case \"PIXB\":case \"STCK\":case \"VALU\":case \"PNAM\":case \"INAM\":case \"GRST\":case \"GREN\":case \"GRPT\":case \"FKEY\":case \"IKEY\":case \"CSYS\":case \"OPAQ\":case \"CMAP\":case \"NLOC\":case \"NZOM\":case \"NVER\":case \"NSRV\":case \"NCRD\":case \"NMOD\":case \"NSEL\":case \"NPRW\":case \"NPLA\":case \"VERS\":case \"ENUM\":case \"TAG \":case \"CGMD\":case \"CGTY\":case \"CGST\":case \"CGEN\":case \"CGTS\":case \"CGTE\":case \"OSMP\":case \"OMDE\":case \"OUTR\":case \"FLAG\":case \"TRNL\":case \"SHRP\":case \"RFOP\":case \"RSAN\":case \"TROP\":case \"RBLR\":case \"TBLR\":case \"CLRH\":case \"CLRF\":case \"ADTR\":case \"GLOW\":case \"LINE\":case \"ALPH\":case \"VCOL\":case \"ENAB\":this.IFF[\"debugger\"].skipped=\n!0;this.IFF.reader.skip(length);break;case \"IPIX\":case \"IMIP\":case \"IMOD\":case \"AMOD\":case \"IINV\":case \"INCR\":case \"IAXS\":case \"IFOT\":case \"ITIM\":case \"IWRL\":case \"IUTI\":case \"IINX\":case \"IINY\":case \"IINZ\":case \"IREF\":4===length?this.IFF.currentNode[blockID]=this.IFF.reader.getInt32():this.IFF.reader.skip(length);break;case \"OTAG\":this.IFF.parseObjectTag();break;case \"LAYR\":this.IFF.parseLayer(length);break;case \"PNTS\":this.IFF.parsePoints(length);break;case \"VMAP\":this.IFF.parseVertexMapping(length);\nbreak;case \"POLS\":this.IFF.parsePolygonList(length);break;case \"TAGS\":this.IFF.parseTagStrings(length);break;case \"PTAG\":this.IFF.parsePolygonTagMapping(length);break;case \"VMAD\":this.IFF.parseVertexMapping(length,!0);break;case \"DESC\":this.IFF.currentForm.description=this.IFF.reader.getString();break;case \"TEXT\":case \"CMNT\":case \"NCOM\":this.IFF.currentForm.comment=this.IFF.reader.getString();break;case \"NAME\":this.IFF.currentForm.channelName=this.IFF.reader.getString();break;case \"WRAP\":this.IFF.currentForm.wrap=\n{w:this.IFF.reader.getUint16(),h:this.IFF.reader.getUint16()};break;case \"IMAG\":length=this.IFF.reader.getVariableLengthIndex();this.IFF.currentForm.imageIndex=length;break;case \"OREF\":this.IFF.currentForm.referenceObject=this.IFF.reader.getString();break;case \"ROID\":this.IFF.currentForm.referenceObjectID=this.IFF.reader.getUint32();break;case \"SSHN\":this.IFF.currentSurface.surfaceShaderName=this.IFF.reader.getString();break;case \"AOVN\":this.IFF.currentSurface.surfaceCustomAOVName=this.IFF.reader.getString();\nbreak;case \"NSTA\":this.IFF.currentForm.disabled=this.IFF.reader.getUint16();break;case \"NRNM\":this.IFF.currentForm.realName=this.IFF.reader.getString();break;case \"NNME\":this.IFF.currentForm.refName=this.IFF.reader.getString();this.IFF.currentSurface.nodes[this.IFF.currentForm.refName]=this.IFF.currentForm;break;case \"INME\":this.IFF.currentForm.nodeName||(this.IFF.currentForm.nodeName=[]);this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());break;case \"IINN\":this.IFF.currentForm.inputNodeName||\n(this.IFF.currentForm.inputNodeName=[]);this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());break;case \"IINM\":this.IFF.currentForm.inputName||(this.IFF.currentForm.inputName=[]);this.IFF.currentForm.inputName.push(this.IFF.reader.getString());break;case \"IONM\":this.IFF.currentForm.inputOutputName||(this.IFF.currentForm.inputOutputName=[]);this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());break;case \"FNAM\":this.IFF.currentForm.fileName=this.IFF.reader.getString();\nbreak;case \"CHAN\":4===length?this.IFF.currentForm.textureChannel=this.IFF.reader.getIDTag():this.IFF.reader.skip(length);break;case \"SMAN\":length=this.IFF.reader.getFloat32();this.IFF.currentSurface.attributes.smooth=0>length?!1:!0;break;case \"COLR\":this.IFF.currentSurface.attributes.Color={value:this.IFF.reader.getFloat32Array(3)};this.IFF.reader.skip(2);break;case \"LUMI\":this.IFF.currentSurface.attributes.Luminosity={value:this.IFF.reader.getFloat32()};this.IFF.reader.skip(2);break;case \"SPEC\":this.IFF.currentSurface.attributes.Specular=\n{value:this.IFF.reader.getFloat32()};this.IFF.reader.skip(2);break;case \"DIFF\":this.IFF.currentSurface.attributes.Diffuse={value:this.IFF.reader.getFloat32()};this.IFF.reader.skip(2);break;case \"REFL\":this.IFF.currentSurface.attributes.Reflection={value:this.IFF.reader.getFloat32()};this.IFF.reader.skip(2);break;case \"GLOS\":this.IFF.currentSurface.attributes.Glossiness={value:this.IFF.reader.getFloat32()};this.IFF.reader.skip(2);break;case \"TRAN\":this.IFF.currentSurface.attributes.opacity=this.IFF.reader.getFloat32();\nthis.IFF.reader.skip(2);break;case \"BUMP\":this.IFF.currentSurface.attributes.bumpStrength=this.IFF.reader.getFloat32();this.IFF.reader.skip(2);break;case \"SIDE\":this.IFF.currentSurface.attributes.side=this.IFF.reader.getUint16();break;case \"RIMG\":this.IFF.currentSurface.attributes.reflectionMap=this.IFF.reader.getVariableLengthIndex();break;case \"RIND\":this.IFF.currentSurface.attributes.refractiveIndex=this.IFF.reader.getFloat32();this.IFF.reader.skip(2);break;case \"TIMG\":this.IFF.currentSurface.attributes.refractionMap=\nthis.IFF.reader.getVariableLengthIndex();break;case \"IMAP\":this.IFF.currentSurface.attributes.imageMapIndex=this.IFF.reader.getUint32();break;case \"IUVI\":this.IFF.currentNode.UVChannel=this.IFF.reader.getString(length);break;case \"IUTL\":this.IFF.currentNode.widthWrappingMode=this.IFF.reader.getUint32();break;case \"IVTL\":this.IFF.currentNode.heightWrappingMode=this.IFF.reader.getUint32();break;default:this.IFF.parseUnknownCHUNK(blockID,length)}\"FORM\"!=blockID&&(this.IFF[\"debugger\"].node=1,this.IFF[\"debugger\"].nodeID=\nblockID,this.IFF[\"debugger\"].log());this.IFF.reader.offset>=this.IFF.currentFormEnd&&(this.IFF.currentForm=this.IFF.parentForm)}}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$loaders$lwo$LWO3Parser\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LWO3Parser = LWO3Parser;\n\nfunction LWO3Parser(IFFParser) {\n  this.IFF = IFFParser;\n}\n\nLWO3Parser.prototype = {\n  constructor: LWO3Parser,\n  parseBlock: function parseBlock() {\n    this.IFF[\"debugger\"].offset = this.IFF.reader.offset;\n    this.IFF[\"debugger\"].closeForms();\n    var blockID = this.IFF.reader.getIDTag();\n    var length = this.IFF.reader.getUint32(); // size of data in bytes\n\n    this.IFF[\"debugger\"].dataOffset = this.IFF.reader.offset;\n    this.IFF[\"debugger\"].length = length; // Data types may be found in either LWO2 OR LWO3 spec\n\n    switch (blockID) {\n      case 'FORM':\n        // form blocks may consist of sub -chunks or sub-forms\n        this.IFF.parseForm(length);\n        break;\n      // SKIPPED CHUNKS\n      // MISC skipped\n\n      case 'ICON': // Thumbnail Icon Image\n\n      case 'VMPA': // Vertex Map Parameter\n\n      case 'BBOX': // bounding box\n      // case 'VMMD':\n      // case 'VTYP':\n      // normal maps can be specified, normally on models imported from other applications. Currently ignored\n\n      case 'NORM': // ENVL FORM skipped\n\n      case 'PRE ':\n      case 'POST':\n      case 'KEY ':\n      case 'SPAN': // CLIP FORM skipped\n\n      case 'TIME':\n      case 'CLRS':\n      case 'CLRA':\n      case 'FILT':\n      case 'DITH':\n      case 'CONT':\n      case 'BRIT':\n      case 'SATR':\n      case 'HUE ':\n      case 'GAMM':\n      case 'NEGA':\n      case 'IFLT':\n      case 'PFLT': // Image Map Layer skipped\n\n      case 'PROJ':\n      case 'AXIS':\n      case 'AAST':\n      case 'PIXB':\n      case 'STCK': // Procedural Textures skipped\n\n      case 'VALU': // Gradient Textures skipped\n\n      case 'PNAM':\n      case 'INAM':\n      case 'GRST':\n      case 'GREN':\n      case 'GRPT':\n      case 'FKEY':\n      case 'IKEY': // Texture Mapping Form skipped\n\n      case 'CSYS': // Surface CHUNKs skipped\n\n      case 'OPAQ': // top level 'opacity' checkbox\n\n      case 'CMAP': // clip map\n      // Surface node CHUNKS skipped\n      // These mainly specify the node editor setup in LW\n\n      case 'NLOC':\n      case 'NZOM':\n      case 'NVER':\n      case 'NSRV':\n      case 'NCRD':\n      case 'NMOD':\n      case 'NSEL':\n      case 'NPRW':\n      case 'NPLA':\n      case 'VERS':\n      case 'ENUM':\n      case 'TAG ': // Car Material CHUNKS\n\n      case 'CGMD':\n      case 'CGTY':\n      case 'CGST':\n      case 'CGEN':\n      case 'CGTS':\n      case 'CGTE':\n      case 'OSMP':\n      case 'OMDE':\n      case 'OUTR':\n      case 'FLAG':\n      case 'TRNL':\n      case 'SHRP':\n      case 'RFOP':\n      case 'RSAN':\n      case 'TROP':\n      case 'RBLR':\n      case 'TBLR':\n      case 'CLRH':\n      case 'CLRF':\n      case 'ADTR':\n      case 'GLOW':\n      case 'LINE':\n      case 'ALPH':\n      case 'VCOL':\n      case 'ENAB':\n        this.IFF[\"debugger\"].skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n      // Texture node chunks (not in spec)\n\n      case 'IPIX': // usePixelBlending\n\n      case 'IMIP': // useMipMaps\n\n      case 'IMOD': // imageBlendingMode\n\n      case 'AMOD': // unknown\n\n      case 'IINV': // imageInvertAlpha\n\n      case 'INCR': // imageInvertColor\n\n      case 'IAXS': // imageAxis ( for non-UV maps)\n\n      case 'IFOT': // imageFallofType\n\n      case 'ITIM': // timing for animated textures\n\n      case 'IWRL':\n      case 'IUTI':\n      case 'IINX':\n      case 'IINY':\n      case 'IINZ':\n      case 'IREF':\n        // possibly a VX for reused texture nodes\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\n        break;\n\n      case 'OTAG':\n        this.IFF.parseObjectTag();\n        break;\n\n      case 'LAYR':\n        this.IFF.parseLayer(length);\n        break;\n\n      case 'PNTS':\n        this.IFF.parsePoints(length);\n        break;\n\n      case 'VMAP':\n        this.IFF.parseVertexMapping(length);\n        break;\n\n      case 'POLS':\n        this.IFF.parsePolygonList(length);\n        break;\n\n      case 'TAGS':\n        this.IFF.parseTagStrings(length);\n        break;\n\n      case 'PTAG':\n        this.IFF.parsePolygonTagMapping(length);\n        break;\n\n      case 'VMAD':\n        this.IFF.parseVertexMapping(length, true);\n        break;\n      // Misc CHUNKS\n\n      case 'DESC':\n        // Description Line\n        this.IFF.currentForm.description = this.IFF.reader.getString();\n        break;\n\n      case 'TEXT':\n      case 'CMNT':\n      case 'NCOM':\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\n        break;\n      // Envelope Form\n\n      case 'NAME':\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\n        break;\n      // Image Map Layer\n\n      case 'WRAP':\n        this.IFF.currentForm.wrap = {\n          w: this.IFF.reader.getUint16(),\n          h: this.IFF.reader.getUint16()\n        };\n        break;\n\n      case 'IMAG':\n        var index = this.IFF.reader.getVariableLengthIndex();\n        this.IFF.currentForm.imageIndex = index;\n        break;\n      // Texture Mapping Form\n\n      case 'OREF':\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n        break;\n\n      case 'ROID':\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n        break;\n      // Surface Blocks\n\n      case 'SSHN':\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n        break;\n\n      case 'AOVN':\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n        break;\n      // Nodal Blocks\n\n      case 'NSTA':\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n        break;\n\n      case 'NRNM':\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\n        break;\n\n      case 'NNME':\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n        break;\n      // Nodal Blocks : connections\n\n      case 'INME':\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINN':\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINM':\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IONM':\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'FNAM':\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\n        break;\n\n      case 'CHAN':\n        // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\n        break;\n      // LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\n\n      case 'SMAN':\n        var maxSmoothingAngle = this.IFF.reader.getFloat32();\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n        break;\n      // LWO2: Basic Surface Parameters\n\n      case 'COLR':\n        this.IFF.currentSurface.attributes.Color = {\n          value: this.IFF.reader.getFloat32Array(3)\n        };\n        this.IFF.reader.skip(2); // VX: envelope\n\n        break;\n\n      case 'LUMI':\n        this.IFF.currentSurface.attributes.Luminosity = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SPEC':\n        this.IFF.currentSurface.attributes.Specular = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'DIFF':\n        this.IFF.currentSurface.attributes.Diffuse = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'REFL':\n        this.IFF.currentSurface.attributes.Reflection = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'GLOS':\n        this.IFF.currentSurface.attributes.Glossiness = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TRAN':\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'BUMP':\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SIDE':\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n        break;\n\n      case 'RIMG':\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'RIND':\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TIMG':\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'IMAP':\n        this.IFF.currentSurface.attributes.imageMapIndex = this.IFF.reader.getUint32();\n        break;\n\n      case 'IUVI':\n        // uv channel name\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n        break;\n\n      case 'IUTL':\n        // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      case 'IVTL':\n        // heightWrappingMode\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length);\n    }\n\n    if (blockID != 'FORM') {\n      this.IFF[\"debugger\"].node = 1;\n      this.IFF[\"debugger\"].nodeID = blockID;\n      this.IFF[\"debugger\"].log();\n    }\n\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm;\n    }\n  }\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["surfaceShaderName","w","heightWrappingMode","refName","realName","reflectionMap","referenceObjectID","inputNodeName","widthWrappingMode","offset","prototype","side","smooth","inputOutputName","__esModule","refractiveIndex","textureChannel","Reflection","Specular","imageIndex","wrap","nodeName","referenceObject","value","Glossiness","LWO3Parser","parseBlock","IFF","fileName","nodeID","imageMapIndex","bumpStrength","length","Luminosity","channelName","UVChannel","refractionMap","h","comment","disabled","dataOffset","Color","surfaceCustomAOVName","currentForm","Diffuse","opacity","skipped","description","node","inputName","constructor"]],"~:compiled-at",1630917515896,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$loaders$lwo$LWO3Parser.js\",\n\"lineCount\":12,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/loaders/lwo/LWO3Parser.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$loaders$lwo$LWO3Parser\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.LWO3Parser = LWO3Parser;\\n\\nfunction LWO3Parser(IFFParser) {\\n  this.IFF = IFFParser;\\n}\\n\\nLWO3Parser.prototype = {\\n  constructor: LWO3Parser,\\n  parseBlock: function parseBlock() {\\n    this.IFF[\\\"debugger\\\"].offset = this.IFF.reader.offset;\\n    this.IFF[\\\"debugger\\\"].closeForms();\\n    var blockID = this.IFF.reader.getIDTag();\\n    var length = this.IFF.reader.getUint32(); // size of data in bytes\\n\\n    this.IFF[\\\"debugger\\\"].dataOffset = this.IFF.reader.offset;\\n    this.IFF[\\\"debugger\\\"].length = length; // Data types may be found in either LWO2 OR LWO3 spec\\n\\n    switch (blockID) {\\n      case 'FORM':\\n        // form blocks may consist of sub -chunks or sub-forms\\n        this.IFF.parseForm(length);\\n        break;\\n      // SKIPPED CHUNKS\\n      // MISC skipped\\n\\n      case 'ICON': // Thumbnail Icon Image\\n\\n      case 'VMPA': // Vertex Map Parameter\\n\\n      case 'BBOX': // bounding box\\n      // case 'VMMD':\\n      // case 'VTYP':\\n      // normal maps can be specified, normally on models imported from other applications. Currently ignored\\n\\n      case 'NORM': // ENVL FORM skipped\\n\\n      case 'PRE ':\\n      case 'POST':\\n      case 'KEY ':\\n      case 'SPAN': // CLIP FORM skipped\\n\\n      case 'TIME':\\n      case 'CLRS':\\n      case 'CLRA':\\n      case 'FILT':\\n      case 'DITH':\\n      case 'CONT':\\n      case 'BRIT':\\n      case 'SATR':\\n      case 'HUE ':\\n      case 'GAMM':\\n      case 'NEGA':\\n      case 'IFLT':\\n      case 'PFLT': // Image Map Layer skipped\\n\\n      case 'PROJ':\\n      case 'AXIS':\\n      case 'AAST':\\n      case 'PIXB':\\n      case 'STCK': // Procedural Textures skipped\\n\\n      case 'VALU': // Gradient Textures skipped\\n\\n      case 'PNAM':\\n      case 'INAM':\\n      case 'GRST':\\n      case 'GREN':\\n      case 'GRPT':\\n      case 'FKEY':\\n      case 'IKEY': // Texture Mapping Form skipped\\n\\n      case 'CSYS': // Surface CHUNKs skipped\\n\\n      case 'OPAQ': // top level 'opacity' checkbox\\n\\n      case 'CMAP': // clip map\\n      // Surface node CHUNKS skipped\\n      // These mainly specify the node editor setup in LW\\n\\n      case 'NLOC':\\n      case 'NZOM':\\n      case 'NVER':\\n      case 'NSRV':\\n      case 'NCRD':\\n      case 'NMOD':\\n      case 'NSEL':\\n      case 'NPRW':\\n      case 'NPLA':\\n      case 'VERS':\\n      case 'ENUM':\\n      case 'TAG ': // Car Material CHUNKS\\n\\n      case 'CGMD':\\n      case 'CGTY':\\n      case 'CGST':\\n      case 'CGEN':\\n      case 'CGTS':\\n      case 'CGTE':\\n      case 'OSMP':\\n      case 'OMDE':\\n      case 'OUTR':\\n      case 'FLAG':\\n      case 'TRNL':\\n      case 'SHRP':\\n      case 'RFOP':\\n      case 'RSAN':\\n      case 'TROP':\\n      case 'RBLR':\\n      case 'TBLR':\\n      case 'CLRH':\\n      case 'CLRF':\\n      case 'ADTR':\\n      case 'GLOW':\\n      case 'LINE':\\n      case 'ALPH':\\n      case 'VCOL':\\n      case 'ENAB':\\n        this.IFF[\\\"debugger\\\"].skipped = true;\\n        this.IFF.reader.skip(length);\\n        break;\\n      // Texture node chunks (not in spec)\\n\\n      case 'IPIX': // usePixelBlending\\n\\n      case 'IMIP': // useMipMaps\\n\\n      case 'IMOD': // imageBlendingMode\\n\\n      case 'AMOD': // unknown\\n\\n      case 'IINV': // imageInvertAlpha\\n\\n      case 'INCR': // imageInvertColor\\n\\n      case 'IAXS': // imageAxis ( for non-UV maps)\\n\\n      case 'IFOT': // imageFallofType\\n\\n      case 'ITIM': // timing for animated textures\\n\\n      case 'IWRL':\\n      case 'IUTI':\\n      case 'IINX':\\n      case 'IINY':\\n      case 'IINZ':\\n      case 'IREF':\\n        // possibly a VX for reused texture nodes\\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\\n        break;\\n\\n      case 'OTAG':\\n        this.IFF.parseObjectTag();\\n        break;\\n\\n      case 'LAYR':\\n        this.IFF.parseLayer(length);\\n        break;\\n\\n      case 'PNTS':\\n        this.IFF.parsePoints(length);\\n        break;\\n\\n      case 'VMAP':\\n        this.IFF.parseVertexMapping(length);\\n        break;\\n\\n      case 'POLS':\\n        this.IFF.parsePolygonList(length);\\n        break;\\n\\n      case 'TAGS':\\n        this.IFF.parseTagStrings(length);\\n        break;\\n\\n      case 'PTAG':\\n        this.IFF.parsePolygonTagMapping(length);\\n        break;\\n\\n      case 'VMAD':\\n        this.IFF.parseVertexMapping(length, true);\\n        break;\\n      // Misc CHUNKS\\n\\n      case 'DESC':\\n        // Description Line\\n        this.IFF.currentForm.description = this.IFF.reader.getString();\\n        break;\\n\\n      case 'TEXT':\\n      case 'CMNT':\\n      case 'NCOM':\\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\\n        break;\\n      // Envelope Form\\n\\n      case 'NAME':\\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\\n        break;\\n      // Image Map Layer\\n\\n      case 'WRAP':\\n        this.IFF.currentForm.wrap = {\\n          w: this.IFF.reader.getUint16(),\\n          h: this.IFF.reader.getUint16()\\n        };\\n        break;\\n\\n      case 'IMAG':\\n        var index = this.IFF.reader.getVariableLengthIndex();\\n        this.IFF.currentForm.imageIndex = index;\\n        break;\\n      // Texture Mapping Form\\n\\n      case 'OREF':\\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\\n        break;\\n\\n      case 'ROID':\\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\\n        break;\\n      // Surface Blocks\\n\\n      case 'SSHN':\\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\\n        break;\\n\\n      case 'AOVN':\\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\\n        break;\\n      // Nodal Blocks\\n\\n      case 'NSTA':\\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\\n        break;\\n\\n      case 'NRNM':\\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\\n        break;\\n\\n      case 'NNME':\\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\\n        break;\\n      // Nodal Blocks : connections\\n\\n      case 'INME':\\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\\n        break;\\n\\n      case 'IINN':\\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\\n        break;\\n\\n      case 'IINM':\\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\\n        break;\\n\\n      case 'IONM':\\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\\n        break;\\n\\n      case 'FNAM':\\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\\n        break;\\n\\n      case 'CHAN':\\n        // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\\n        break;\\n      // LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\\n\\n      case 'SMAN':\\n        var maxSmoothingAngle = this.IFF.reader.getFloat32();\\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\\n        break;\\n      // LWO2: Basic Surface Parameters\\n\\n      case 'COLR':\\n        this.IFF.currentSurface.attributes.Color = {\\n          value: this.IFF.reader.getFloat32Array(3)\\n        };\\n        this.IFF.reader.skip(2); // VX: envelope\\n\\n        break;\\n\\n      case 'LUMI':\\n        this.IFF.currentSurface.attributes.Luminosity = {\\n          value: this.IFF.reader.getFloat32()\\n        };\\n        this.IFF.reader.skip(2);\\n        break;\\n\\n      case 'SPEC':\\n        this.IFF.currentSurface.attributes.Specular = {\\n          value: this.IFF.reader.getFloat32()\\n        };\\n        this.IFF.reader.skip(2);\\n        break;\\n\\n      case 'DIFF':\\n        this.IFF.currentSurface.attributes.Diffuse = {\\n          value: this.IFF.reader.getFloat32()\\n        };\\n        this.IFF.reader.skip(2);\\n        break;\\n\\n      case 'REFL':\\n        this.IFF.currentSurface.attributes.Reflection = {\\n          value: this.IFF.reader.getFloat32()\\n        };\\n        this.IFF.reader.skip(2);\\n        break;\\n\\n      case 'GLOS':\\n        this.IFF.currentSurface.attributes.Glossiness = {\\n          value: this.IFF.reader.getFloat32()\\n        };\\n        this.IFF.reader.skip(2);\\n        break;\\n\\n      case 'TRAN':\\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\\n        this.IFF.reader.skip(2);\\n        break;\\n\\n      case 'BUMP':\\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\\n        this.IFF.reader.skip(2);\\n        break;\\n\\n      case 'SIDE':\\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\\n        break;\\n\\n      case 'RIMG':\\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\\n        break;\\n\\n      case 'RIND':\\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\\n        this.IFF.reader.skip(2);\\n        break;\\n\\n      case 'TIMG':\\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\\n        break;\\n\\n      case 'IMAP':\\n        this.IFF.currentSurface.attributes.imageMapIndex = this.IFF.reader.getUint32();\\n        break;\\n\\n      case 'IUVI':\\n        // uv channel name\\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\\n        break;\\n\\n      case 'IUTL':\\n        // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\\n        break;\\n\\n      case 'IVTL':\\n        // heightWrappingMode\\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\\n        break;\\n\\n      default:\\n        this.IFF.parseUnknownCHUNK(blockID, length);\\n    }\\n\\n    if (blockID != 'FORM') {\\n      this.IFF[\\\"debugger\\\"].node = 1;\\n      this.IFF[\\\"debugger\\\"].nodeID = blockID;\\n      this.IFF[\\\"debugger\\\"].log();\\n    }\\n\\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\\n      this.IFF.currentForm = this.IFF.parentForm;\\n    }\\n  }\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"LWO3Parser\",\"IFFParser\",\"IFF\",\"Object\",\"defineProperty\",\"value\",\"prototype\",\"constructor\",\"parseBlock\",\"offset\",\"reader\",\"closeForms\",\"blockID\",\"getIDTag\",\"length\",\"getUint32\",\"dataOffset\",\"parseForm\",\"skipped\",\"skip\",\"currentNode\",\"getInt32\",\"parseObjectTag\",\"parseLayer\",\"parsePoints\",\"parseVertexMapping\",\"parsePolygonList\",\"parseTagStrings\",\"parsePolygonTagMapping\",\"currentForm\",\"description\",\"getString\",\"comment\",\"channelName\",\"wrap\",\"w\",\"getUint16\",\"h\",\"index\",\"getVariableLengthIndex\",\"imageIndex\",\"referenceObject\",\"referenceObjectID\",\"currentSurface\",\"surfaceShaderName\",\"surfaceCustomAOVName\",\"disabled\",\"realName\",\"refName\",\"nodes\",\"nodeName\",\"push\",\"inputNodeName\",\"inputName\",\"inputOutputName\",\"fileName\",\"textureChannel\",\"maxSmoothingAngle\",\"getFloat32\",\"attributes\",\"smooth\",\"Color\",\"getFloat32Array\",\"Luminosity\",\"Specular\",\"Diffuse\",\"Reflection\",\"Glossiness\",\"opacity\",\"bumpStrength\",\"side\",\"reflectionMap\",\"refractiveIndex\",\"refractionMap\",\"imageMapIndex\",\"UVChannel\",\"widthWrappingMode\",\"heightWrappingMode\",\"parseUnknownCHUNK\",\"node\",\"nodeID\",\"log\",\"currentFormEnd\",\"parentForm\"]\n}\n"]