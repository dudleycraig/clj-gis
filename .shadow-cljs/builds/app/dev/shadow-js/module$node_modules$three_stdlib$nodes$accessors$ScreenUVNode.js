["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/nodes/accessors/ScreenUVNode.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$nodes$accessors$ScreenUVNode=function(global,require,module,exports){function ScreenUVNode(resolution){_TempNode.TempNode.call(this,\"v2\");this.resolution=resolution||new _ResolutionNode.ResolutionNode}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.ScreenUVNode=ScreenUVNode;var _TempNode=require(\"module$node_modules$three_stdlib$nodes$core$TempNode\"),_ResolutionNode=require(\"module$node_modules$three_stdlib$nodes$accessors$ResolutionNode\");\nScreenUVNode.prototype=Object.create(_TempNode.TempNode.prototype);ScreenUVNode.prototype.constructor=ScreenUVNode;ScreenUVNode.prototype.nodeType=\"ScreenUV\";ScreenUVNode.prototype.generate=function(builder,output){if(builder.isShader(\"fragment\"))var result=\"( gl_FragCoord.xy / \"+this.resolution.build(builder,\"v2\")+\")\";else console.warn(\"THREE.ScreenUVNode is not compatible with \"+builder.shader+\" shader.\"),result=\"vec2( 0.0 )\";return builder.format(result,this.getType(builder),output)};ScreenUVNode.prototype.copy=\nfunction(source){_TempNode.TempNode.prototype.copy.call(this,source);this.resolution=source.resolution;return this};ScreenUVNode.prototype.toJSON=function(meta){var data=this.getJSONNode(meta);data||(data=this.createJSONNode(meta),data.resolution=this.resolution.toJSON(meta).uuid);return data}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$nodes$accessors$ScreenUVNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScreenUVNode = ScreenUVNode;\n\nvar _TempNode = require(\"../core/TempNode.js\");\n\nvar _ResolutionNode = require(\"./ResolutionNode.js\");\n\nfunction ScreenUVNode(resolution) {\n  _TempNode.TempNode.call(this, 'v2');\n\n  this.resolution = resolution || new _ResolutionNode.ResolutionNode();\n}\n\nScreenUVNode.prototype = Object.create(_TempNode.TempNode.prototype);\nScreenUVNode.prototype.constructor = ScreenUVNode;\nScreenUVNode.prototype.nodeType = 'ScreenUV';\n\nScreenUVNode.prototype.generate = function (builder, output) {\n  var result;\n\n  if (builder.isShader('fragment')) {\n    result = '( gl_FragCoord.xy / ' + this.resolution.build(builder, 'v2') + ')';\n  } else {\n    console.warn('THREE.ScreenUVNode is not compatible with ' + builder.shader + ' shader.');\n    result = 'vec2( 0.0 )';\n  }\n\n  return builder.format(result, this.getType(builder), output);\n};\n\nScreenUVNode.prototype.copy = function (source) {\n  _TempNode.TempNode.prototype.copy.call(this, source);\n\n  this.resolution = source.resolution;\n  return this;\n};\n\nScreenUVNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.resolution = this.resolution.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$three_stdlib$nodes$accessors$ResolutionNode","~$module$node_modules$three_stdlib$nodes$core$TempNode"]],"~:properties",["^5",["copy","prototype","ScreenUVNode","__esModule","generate","nodeType","value","constructor","resolution","toJSON"]],"~:compiled-at",1630917515258,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$nodes$accessors$ScreenUVNode.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAY1HC,QAASA,aAAY,CAACC,UAAD,CAAa,CAChCC,SAAUC,CAAAA,QAASC,CAAAA,IAAnB,CAAwB,IAAxB,CAA8B,IAA9B,CAEA,KAAKH,CAAAA,UAAL,CAAkBA,UAAlB,EAAgC,IAAII,eAAgBC,CAAAA,cAHpB,CATlCC,MAAOC,CAAAA,cAAP,CAAsBT,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CU,MAAO,CAAA,CADoC,CAA7C,CAGAV,QAAQC,CAAAA,YAAR,CAAuBA,YAEvB,KAAIE,UAAYL,OAAA,CAAQ,sDAAR,CAAhB,CAEIQ,gBAAkBR,OAAA,CAAQ,iEAAR,CAQtBG;YAAaU,CAAAA,SAAb,CAAyBH,MAAOI,CAAAA,MAAP,CAAcT,SAAUC,CAAAA,QAASO,CAAAA,SAAjC,CACzBV,aAAaU,CAAAA,SAAUE,CAAAA,WAAvB,CAAqCZ,YACrCA,aAAaU,CAAAA,SAAUG,CAAAA,QAAvB,CAAkC,UAElCb,aAAaU,CAAAA,SAAUI,CAAAA,QAAvB,CAAkCC,QAAS,CAACC,OAAD,CAAUC,MAAV,CAAkB,CAG3D,GAAID,OAAQE,CAAAA,QAAR,CAAiB,UAAjB,CAAJ,CACE,IAAAC,OAAS,sBAATA,CAAkC,IAAKlB,CAAAA,UAAWmB,CAAAA,KAAhB,CAAsBJ,OAAtB,CAA+B,IAA/B,CAAlCG,CAAyE,GAD3E,KAGEE,QAAQC,CAAAA,IAAR,CAAa,4CAAb,CAA4DN,OAAQO,CAAAA,MAApE,CAA6E,UAA7E,CACA,CAAAJ,MAAA,CAAS,aAGX,OAAOH,QAAQQ,CAAAA,MAAR,CAAeL,MAAf,CAAuB,IAAKM,CAAAA,OAAL,CAAaT,OAAb,CAAvB,CAA8CC,MAA9C,CAVoD,CAa7DjB,aAAaU,CAAAA,SAAUgB,CAAAA,IAAvB;AAA8BC,QAAS,CAACC,MAAD,CAAS,CAC9C1B,SAAUC,CAAAA,QAASO,CAAAA,SAAUgB,CAAAA,IAAKtB,CAAAA,IAAlC,CAAuC,IAAvC,CAA6CwB,MAA7C,CAEA,KAAK3B,CAAAA,UAAL,CAAkB2B,MAAO3B,CAAAA,UACzB,OAAO,KAJuC,CAOhDD,aAAaU,CAAAA,SAAUmB,CAAAA,MAAvB,CAAgCC,QAAS,CAACC,IAAD,CAAO,CAC9C,IAAIC,KAAO,IAAKC,CAAAA,WAAL,CAAiBF,IAAjB,CAENC,KAAL,GACEA,IACA,CADO,IAAKE,CAAAA,cAAL,CAAoBH,IAApB,CACP,CAAAC,IAAK/B,CAAAA,UAAL,CAAkB,IAAKA,CAAAA,UAAW4B,CAAAA,MAAhB,CAAuBE,IAAvB,CAA6BI,CAAAA,IAFjD,CAKA,OAAOH,KARuC,CA1C0E;\",\n\"sources\":[\"node_modules/three-stdlib/nodes/accessors/ScreenUVNode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$nodes$accessors$ScreenUVNode\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.ScreenUVNode = ScreenUVNode;\\n\\nvar _TempNode = require(\\\"../core/TempNode.js\\\");\\n\\nvar _ResolutionNode = require(\\\"./ResolutionNode.js\\\");\\n\\nfunction ScreenUVNode(resolution) {\\n  _TempNode.TempNode.call(this, 'v2');\\n\\n  this.resolution = resolution || new _ResolutionNode.ResolutionNode();\\n}\\n\\nScreenUVNode.prototype = Object.create(_TempNode.TempNode.prototype);\\nScreenUVNode.prototype.constructor = ScreenUVNode;\\nScreenUVNode.prototype.nodeType = 'ScreenUV';\\n\\nScreenUVNode.prototype.generate = function (builder, output) {\\n  var result;\\n\\n  if (builder.isShader('fragment')) {\\n    result = '( gl_FragCoord.xy / ' + this.resolution.build(builder, 'v2') + ')';\\n  } else {\\n    console.warn('THREE.ScreenUVNode is not compatible with ' + builder.shader + ' shader.');\\n    result = 'vec2( 0.0 )';\\n  }\\n\\n  return builder.format(result, this.getType(builder), output);\\n};\\n\\nScreenUVNode.prototype.copy = function (source) {\\n  _TempNode.TempNode.prototype.copy.call(this, source);\\n\\n  this.resolution = source.resolution;\\n  return this;\\n};\\n\\nScreenUVNode.prototype.toJSON = function (meta) {\\n  var data = this.getJSONNode(meta);\\n\\n  if (!data) {\\n    data = this.createJSONNode(meta);\\n    data.resolution = this.resolution.toJSON(meta).uuid;\\n  }\\n\\n  return data;\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"ScreenUVNode\",\"resolution\",\"_TempNode\",\"TempNode\",\"call\",\"_ResolutionNode\",\"ResolutionNode\",\"Object\",\"defineProperty\",\"value\",\"prototype\",\"create\",\"constructor\",\"nodeType\",\"generate\",\"ScreenUVNode.prototype.generate\",\"builder\",\"output\",\"isShader\",\"result\",\"build\",\"console\",\"warn\",\"shader\",\"format\",\"getType\",\"copy\",\"ScreenUVNode.prototype.copy\",\"source\",\"toJSON\",\"ScreenUVNode.prototype.toJSON\",\"meta\",\"data\",\"getJSONNode\",\"createJSONNode\",\"uuid\"]\n}\n"]