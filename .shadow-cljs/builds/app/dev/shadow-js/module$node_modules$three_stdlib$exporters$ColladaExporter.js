["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/exporters/ColladaExporter.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$exporters$ColladaExporter=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.ColladaExporter=void 0;var _three=require(\"module$node_modules$three$build$three_module\");global=function(){};exports.ColladaExporter=global;global.prototype={constructor:global,parse:function(object,onDone,options){function attrBufferToArray(attr){if(attr.isInterleavedBufferAttribute){for(var arr=new attr.array.constructor(attr.count*\nattr.itemSize),size=attr.itemSize,i=0,l=attr.count;i<l;i++)for(var j=0;j<size;j++)arr[i*size+j]=attr[getFuncs[j]](i);return arr}return attr.array}function getAttribute(attr,name,params,type){var array=attrBufferToArray(attr);return\"\".concat('\\x3csource id\\x3d\"'.concat(name,'\"\\x3e')+'\\x3cfloat_array id\\x3d\"'.concat(name,'-array\" count\\x3d\"').concat(array.length,'\"\\x3e')+array.join(\" \"),\"\\x3c/float_array\\x3e\\x3ctechnique_common\\x3e\",'\\x3caccessor source\\x3d\"#'.concat(name,'-array\" count\\x3d\"').concat(Math.floor(array.length/\nattr.itemSize),'\" stride\\x3d\"').concat(attr.itemSize,'\"\\x3e')).concat(params.map(function(n){return'\\x3cparam name\\x3d\"'.concat(n,'\" type\\x3d\"').concat(type,'\" /\\x3e')}).join(\"\"),\"\\x3c/accessor\\x3e\\x3c/technique_common\\x3e\\x3c/source\\x3e\")}function getTransform(o){o.updateMatrix();transMat=transMat||new _three.Matrix4;transMat.copy(o.matrix);transMat.transpose();return\"\\x3cmatrix\\x3e\".concat(transMat.toArray().join(\" \"),\"\\x3c/matrix\\x3e\")}function processGeometry(g){var info=geometryInfo.get(g);if(!info){if(!0!==\ng.isBufferGeometry)throw Error(\"THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.\");info=\"Mesh\".concat(libraryGeometries.length+1);var indexCount=g.index?g.index.count*g.index.itemSize:g.attributes.position.count,groups=null!=g.groups&&0!==g.groups.length?g.groups:[{start:0,count:indexCount,materialIndex:0}],gname=g.name?' name\\x3d\"'.concat(g.name,'\"'):\"\";gname='\\x3cgeometry id\\x3d\"'.concat(info,'\"').concat(gname,\"\\x3e\\x3cmesh\\x3e\");var posName=\"\".concat(info,\"-position\"),vertName=\n\"\".concat(info,\"-vertices\");gname+=getAttribute(g.attributes.position,posName,[\"X\",\"Y\",\"Z\"],\"float\");gname+='\\x3cvertices id\\x3d\"'.concat(vertName,'\"\\x3e\\x3cinput semantic\\x3d\"POSITION\" source\\x3d\"#').concat(posName,'\" /\\x3e\\x3c/vertices\\x3e');posName='\\x3cinput semantic\\x3d\"VERTEX\" source\\x3d\"#'.concat(vertName,'\" offset\\x3d\"0\" /\\x3e');\"normal\"in g.attributes&&(vertName=\"\".concat(info,\"-normal\"),gname+=getAttribute(g.attributes.normal,vertName,[\"X\",\"Y\",\"Z\"],\"float\"),posName+='\\x3cinput semantic\\x3d\"NORMAL\" source\\x3d\"#'.concat(vertName,\n'\" offset\\x3d\"0\" /\\x3e'));\"uv\"in g.attributes&&(vertName=\"\".concat(info,\"-texcoord\"),gname+=getAttribute(g.attributes.uv,vertName,[\"S\",\"T\"],\"float\"),posName+='\\x3cinput semantic\\x3d\"TEXCOORD\" source\\x3d\"#'.concat(vertName,'\" offset\\x3d\"0\" set\\x3d\"0\" /\\x3e'));\"uv2\"in g.attributes&&(vertName=\"\".concat(info,\"-texcoord2\"),gname+=getAttribute(g.attributes.uv2,vertName,[\"S\",\"T\"],\"float\"),posName+='\\x3cinput semantic\\x3d\"TEXCOORD\" source\\x3d\"#'.concat(vertName,'\" offset\\x3d\"0\" set\\x3d\"1\" /\\x3e'));\"color\"in\ng.attributes&&(vertName=\"\".concat(info,\"-color\"),gname+=getAttribute(g.attributes.color,vertName,[\"X\",\"Y\",\"Z\"],\"uint8\"),posName+='\\x3cinput semantic\\x3d\"COLOR\" source\\x3d\"#'.concat(vertName,'\" offset\\x3d\"0\" /\\x3e'));if(g.index)indexCount=attrBufferToArray(g.index);else{indexCount=Array(indexCount);vertName=0;for(var l=indexCount.length;vertName<l;vertName++)indexCount[vertName]=vertName}vertName=0;for(l=groups.length;vertName<l;vertName++){var group=groups[vertName];var subarr=indexCount;var st=group.start,\nct=group.count;subarr=Array.isArray(subarr)?subarr.slice(st,st+ct):new subarr.constructor(subarr.buffer,st*subarr.BYTES_PER_ELEMENT,ct);st=subarr.length/3;gname+='\\x3ctriangles material\\x3d\"MESH_MATERIAL_'.concat(group.materialIndex,'\" count\\x3d\"').concat(st,'\"\\x3e');gname+=posName;gname+=\"\\x3cp\\x3e\".concat(subarr.join(\" \"),\"\\x3c/p\\x3e\");gname+=\"\\x3c/triangles\\x3e\"}libraryGeometries.push(gname+\"\\x3c/mesh\\x3e\\x3c/geometry\\x3e\");info={meshid:info,bufferGeometry:g};geometryInfo.set(g,info)}return info}\nfunction processTexture(tex){var texid=imageMap.get(tex);if(null==texid){texid=\"image-\".concat(libraryImages.length+1);var name=tex.name||texid,imageNode='\\x3cimage id\\x3d\"'.concat(texid,'\" name\\x3d\"').concat(name,'\"\\x3e');imageNode=\"1.5.0\"===version?imageNode+\"\\x3cinit_from\\x3e\\x3cref\\x3e\".concat(options.textureDirectory).concat(name,\".\").concat(\"png\",\"\\x3c/ref\\x3e\\x3c/init_from\\x3e\"):imageNode+\"\\x3cinit_from\\x3e\".concat(options.textureDirectory).concat(name,\".\").concat(\"png\",\"\\x3c/init_from\\x3e\");\nlibraryImages.push(imageNode+\"\\x3c/image\\x3e\");imageMap.set(tex,texid);imageNode=textures;var JSCompiler_temp_const=imageNode.push,JSCompiler_temp_const$jscomp$0=options.textureDirectory,image=tex.image;canvas=canvas||document.createElement(\"canvas\");ctx=ctx||canvas.getContext(\"2d\");canvas.width=image.width;canvas.height=image.height;ctx.drawImage(image,0,0);image=canvas.toDataURL(\"image/\".concat(\"png\"),1).replace(/^data:image\\/(png|jpg);base64,/,\"\");image=atob(image);for(var buf=new Uint8Array(image.length),\ni=0,l=buf.length;i<l;i++)buf[i]=image.charCodeAt(i);JSCompiler_temp_const.call(imageNode,{directory:JSCompiler_temp_const$jscomp$0,name,ext:\"png\",data:buf,original:tex})}return texid}function processObject(o){var node='\\x3cnode name\\x3d\"'.concat(o.name,'\"\\x3e');node+=getTransform(o);if(!0===o.isMesh&&null!==o.geometry){var geomInfo=processGeometry(o.geometry),meshid=geomInfo.meshid;geomInfo=geomInfo.bufferGeometry;var matids=null;matids=[];matids=o.material||new _three.MeshBasicMaterial;var materials=\nArray.isArray(matids)?matids:[matids];matids=geomInfo.groups.length>materials.length?Array(geomInfo.groups.length):Array(materials.length);matids=matids.fill().map(function(v,i){v=materials[i%materials.length];i=materialMap.get(v);if(null==i){i=\"Mat\".concat(libraryEffects.length+1);var type=\"phong\";!0===v.isMeshLambertMaterial?type=\"lambert\":!0===v.isMeshBasicMaterial&&(type=\"constant\",null!==v.map&&console.warn(\"ColladaExporter: Texture maps not supported with MeshBasicMaterial.\"));var emissive=\nv.emissive?v.emissive:new _three.Color(0,0,0),diffuse=v.color?v.color:new _three.Color(0,0,0),specular=v.specular?v.specular:new _three.Color(1,1,1),shininess=v.shininess||0,reflectivity=v.reflectivity||0,transparencyNode=\"\";!0===v.transparent&&(transparencyNode+=\"\\x3ctransparent\\x3e\".concat(v.map?'\\x3ctexture texture\\x3d\"diffuse-sampler\"\\x3e\\x3c/texture\\x3e':\"\\x3cfloat\\x3e1\\x3c/float\\x3e\",\"\\x3c/transparent\\x3e\"),1>v.opacity&&(transparencyNode+=\"\\x3ctransparency\\x3e\\x3cfloat\\x3e\".concat(v.opacity,\n\"\\x3c/float\\x3e\\x3c/transparency\\x3e\")));type=\"\".concat('\\x3ctechnique sid\\x3d\"common\"\\x3e\\x3c'.concat(type,\"\\x3e\"),\"\\x3cemission\\x3e\",v.emissiveMap?'\\x3ctexture texture\\x3d\"emissive-sampler\" texcoord\\x3d\"TEXCOORD\" /\\x3e':'\\x3ccolor sid\\x3d\"emission\"\\x3e'.concat(emissive.r,\" \").concat(emissive.g,\" \").concat(emissive.b,\" 1\\x3c/color\\x3e\"),\"\\x3c/emission\\x3e\").concat(\"constant\"!==type?\"\\x3cdiffuse\\x3e\".concat(v.map?'\\x3ctexture texture\\x3d\"diffuse-sampler\" texcoord\\x3d\"TEXCOORD\" /\\x3e':'\\x3ccolor sid\\x3d\"diffuse\"\\x3e'.concat(diffuse.r,\n\" \").concat(diffuse.g,\" \").concat(diffuse.b,\" 1\\x3c/color\\x3e\"),\"\\x3c/diffuse\\x3e\"):\"\").concat(\"constant\"!==type?\"\\x3cbump\\x3e\".concat(v.normalMap?'\\x3ctexture texture\\x3d\"bump-sampler\" texcoord\\x3d\"TEXCOORD\" /\\x3e':\"\",\"\\x3c/bump\\x3e\"):\"\").concat(\"phong\"===type?\"\".concat('\\x3cspecular\\x3e\\x3ccolor sid\\x3d\"specular\"\\x3e'.concat(specular.r,\" \").concat(specular.g,\" \").concat(specular.b,\" 1\\x3c/color\\x3e\\x3c/specular\\x3e\"),\"\\x3cshininess\\x3e\",v.specularMap?'\\x3ctexture texture\\x3d\"specular-sampler\" texcoord\\x3d\"TEXCOORD\" /\\x3e':\n'\\x3cfloat sid\\x3d\"shininess\"\\x3e'.concat(shininess,\"\\x3c/float\\x3e\"),\"\\x3c/shininess\\x3e\"):\"\",\"\\x3creflective\\x3e\\x3ccolor\\x3e\".concat(diffuse.r,\" \").concat(diffuse.g,\" \").concat(diffuse.b,\" 1\\x3c/color\\x3e\\x3c/reflective\\x3e\"),\"\\x3creflectivity\\x3e\\x3cfloat\\x3e\".concat(reflectivity,\"\\x3c/float\\x3e\\x3c/reflectivity\\x3e\")).concat(transparencyNode,\"\\x3c/\".concat(type,\"\\x3e\\x3c/technique\\x3e\"));type=\"\".concat('\\x3ceffect id\\x3d\"'.concat(i,'-effect\"\\x3e'),\"\\x3cprofile_COMMON\\x3e\",v.map?'\\x3cnewparam sid\\x3d\"diffuse-surface\"\\x3e\\x3csurface type\\x3d\"2D\"\\x3e'.concat(\"\\x3cinit_from\\x3e\".concat(processTexture(v.map),\n\"\\x3c/init_from\\x3e\"),'\\x3c/surface\\x3e\\x3c/newparam\\x3e\\x3cnewparam sid\\x3d\"diffuse-sampler\"\\x3e\\x3csampler2D\\x3e\\x3csource\\x3ediffuse-surface\\x3c/source\\x3e\\x3c/sampler2D\\x3e\\x3c/newparam\\x3e'):\"\").concat(v.specularMap?'\\x3cnewparam sid\\x3d\"specular-surface\"\\x3e\\x3csurface type\\x3d\"2D\"\\x3e'.concat(\"\\x3cinit_from\\x3e\".concat(processTexture(v.specularMap),\"\\x3c/init_from\\x3e\"),'\\x3c/surface\\x3e\\x3c/newparam\\x3e\\x3cnewparam sid\\x3d\"specular-sampler\"\\x3e\\x3csampler2D\\x3e\\x3csource\\x3especular-surface\\x3c/source\\x3e\\x3c/sampler2D\\x3e\\x3c/newparam\\x3e'):\n\"\").concat(v.emissiveMap?'\\x3cnewparam sid\\x3d\"emissive-surface\"\\x3e\\x3csurface type\\x3d\"2D\"\\x3e'.concat(\"\\x3cinit_from\\x3e\".concat(processTexture(v.emissiveMap),\"\\x3c/init_from\\x3e\"),'\\x3c/surface\\x3e\\x3c/newparam\\x3e\\x3cnewparam sid\\x3d\"emissive-sampler\"\\x3e\\x3csampler2D\\x3e\\x3csource\\x3eemissive-surface\\x3c/source\\x3e\\x3c/sampler2D\\x3e\\x3c/newparam\\x3e'):\"\").concat(v.normalMap?'\\x3cnewparam sid\\x3d\"bump-surface\"\\x3e\\x3csurface type\\x3d\"2D\"\\x3e'.concat(\"\\x3cinit_from\\x3e\".concat(processTexture(v.normalMap),\n\"\\x3c/init_from\\x3e\"),'\\x3c/surface\\x3e\\x3c/newparam\\x3e\\x3cnewparam sid\\x3d\"bump-sampler\"\\x3e\\x3csampler2D\\x3e\\x3csource\\x3ebump-surface\\x3c/source\\x3e\\x3c/sampler2D\\x3e\\x3c/newparam\\x3e'):\"\").concat(type).concat(v.side===_three.DoubleSide?'\\x3cextra\\x3e\\x3ctechnique profile\\x3d\"THREEJS\"\\x3e\\x3cdouble_sided sid\\x3d\"double_sided\" type\\x3d\"int\"\\x3e1\\x3c/double_sided\\x3e\\x3c/technique\\x3e\\x3c/extra\\x3e':\"\",\"\\x3c/profile_COMMON\\x3e\\x3c/effect\\x3e\");emissive=v.name?' name\\x3d\"'.concat(v.name,'\"'):\"\";\nemissive='\\x3cmaterial id\\x3d\"'.concat(i,'\"').concat(emissive,'\\x3e\\x3cinstance_effect url\\x3d\"#').concat(i,'-effect\" /\\x3e\\x3c/material\\x3e');libraryMaterials.push(emissive);libraryEffects.push(type);materialMap.set(v,i)}return i});node+=\"\".concat('\\x3cinstance_geometry url\\x3d\"#'.concat(meshid,'\"\\x3e')+(null!=matids?\"\\x3cbind_material\\x3e\\x3ctechnique_common\\x3e\".concat(matids.map(function(id,i){return\"\".concat('\\x3cinstance_material symbol\\x3d\"MESH_MATERIAL_'.concat(i,'\" target\\x3d\"#').concat(id,\n'\" \\x3e'),'\\x3cbind_vertex_input semantic\\x3d\"TEXCOORD\" input_semantic\\x3d\"TEXCOORD\" input_set\\x3d\"0\" /\\x3e\\x3c/instance_material\\x3e')}).join(\"\"),\"\\x3c/technique_common\\x3e\\x3c/bind_material\\x3e\"):\"\"),\"\\x3c/instance_geometry\\x3e\")}o.children.forEach(function(c){return node+=processObject(c)});return node+=\"\\x3c/node\\x3e\"}options=options||{};options=Object.assign({version:\"1.4.1\",author:null,textureDirectory:\"\"},options);\"\"!==options.textureDirectory&&(options.textureDirectory=\"\".concat(options.textureDirectory,\n\"/\").replace(/\\\\/g,\"/\").replace(/\\/+/g,\"/\"));var version=options.version;if(\"1.4.1\"!==version&&\"1.5.0\"!==version)return console.warn(\"ColladaExporter : Version \".concat(version,\" not supported for export. Only 1.4.1 and 1.5.0.\")),null;var canvas,ctx,getFuncs=[\"getX\",\"getY\",\"getZ\",\"getW\"],transMat,geometryInfo=new WeakMap,materialMap=new WeakMap,imageMap=new WeakMap,textures=[],libraryImages=[],libraryGeometries=[],libraryEffects=[],libraryMaterials=[];object=processObject(object);var dae='\\x3c?xml version\\x3d\"1.0\" encoding\\x3d\"UTF-8\" standalone\\x3d\"no\" ?\\x3e'.concat('\\x3cCOLLADA xmlns\\x3d\"'.concat(\"1.4.1\"===\nversion?\"http://www.collada.org/2005/11/COLLADASchema\":\"https://www.khronos.org/collada/\",'\" version\\x3d\"').concat(version,'\"\\x3e'),\"\\x3casset\\x3e\\x3ccontributor\\x3e\\x3cauthoring_tool\\x3ethree.js Collada Exporter\\x3c/authoring_tool\\x3e\",null!==options.author?\"\\x3cauthor\\x3e\".concat(options.author,\"\\x3c/author\\x3e\"):\"\",\"\\x3c/contributor\\x3e\",\"\\x3ccreated\\x3e\".concat((new Date).toISOString(),\"\\x3c/created\\x3e\"),\"\\x3cmodified\\x3e\".concat((new Date).toISOString(),\"\\x3c/modified\\x3e\"),\"\\x3cup_axis\\x3eY_UP\\x3c/up_axis\\x3e\\x3c/asset\\x3e\");\ndae+=\"\\x3clibrary_images\\x3e\".concat(libraryImages.join(\"\"),\"\\x3c/library_images\\x3e\");dae+=\"\\x3clibrary_effects\\x3e\".concat(libraryEffects.join(\"\"),\"\\x3c/library_effects\\x3e\");dae+=\"\\x3clibrary_materials\\x3e\".concat(libraryMaterials.join(\"\"),\"\\x3c/library_materials\\x3e\");dae+=\"\\x3clibrary_geometries\\x3e\".concat(libraryGeometries.join(\"\"),\"\\x3c/library_geometries\\x3e\");dae+='\\x3clibrary_visual_scenes\\x3e\\x3cvisual_scene id\\x3d\"Scene\" name\\x3d\"scene\"\\x3e'.concat(object,\"\\x3c/visual_scene\\x3e\\x3c/library_visual_scenes\\x3e\");\nvar res$jscomp$0={data:function(urdf){var IS_END_TAG=/^<\\//,IS_SELF_CLOSING=/(\\?>$)|(\\/>$)/,HAS_TEXT=/<[^>]+>[^<]*<\\/[^<]+>/,pad$jscomp$0=function pad(ch,num){return 0<num?ch+pad(ch,num-1):\"\"},tagnum=0;return urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g).map(function(tag){HAS_TEXT.test(tag)||IS_SELF_CLOSING.test(tag)||!IS_END_TAG.test(tag)||tagnum--;var res=\"\".concat(pad$jscomp$0(\"  \",tagnum)).concat(tag);HAS_TEXT.test(tag)||IS_SELF_CLOSING.test(tag)||IS_END_TAG.test(tag)||tagnum++;return res}).join(\"\\n\")}(dae+\n'\\x3cscene\\x3e\\x3cinstance_visual_scene url\\x3d\"#Scene\"/\\x3e\\x3c/scene\\x3e\\x3c/COLLADA\\x3e'),textures};\"function\"===typeof onDone&&requestAnimationFrame(function(){return onDone(res$jscomp$0)});return res$jscomp$0}}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$exporters$ColladaExporter\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColladaExporter = void 0;\n\nvar _three = require(\"three\");\n\n/**\n * https://github.com/gkjohnson/collada-exporter-js\n *\n * Usage:\n *  var exporter = new ColladaExporter();\n *\n *  var data = exporter.parse(mesh);\n *\n * Format Definition:\n *  https://www.khronos.org/collada/\n */\nvar ColladaExporter = function ColladaExporter() {};\n\nexports.ColladaExporter = ColladaExporter;\nColladaExporter.prototype = {\n  constructor: ColladaExporter,\n  parse: function parse(object, onDone, options) {\n    options = options || {};\n    options = Object.assign({\n      version: '1.4.1',\n      author: null,\n      textureDirectory: ''\n    }, options);\n\n    if (options.textureDirectory !== '') {\n      options.textureDirectory = \"\".concat(options.textureDirectory, \"/\").replace(/\\\\/g, '/').replace(/\\/+/g, '/');\n    }\n\n    var version = options.version;\n\n    if (version !== '1.4.1' && version !== '1.5.0') {\n      console.warn(\"ColladaExporter : Version \".concat(version, \" not supported for export. Only 1.4.1 and 1.5.0.\"));\n      return null;\n    } // Convert the urdf xml into a well-formatted, indented format\n\n\n    function format(urdf) {\n      var IS_END_TAG = /^<\\//;\n      var IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n      var HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n\n      var pad = function pad(ch, num) {\n        return num > 0 ? ch + pad(ch, num - 1) : '';\n      };\n\n      var tagnum = 0;\n      return urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g).map(function (tag) {\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n          tagnum--;\n        }\n\n        var res = \"\".concat(pad('  ', tagnum)).concat(tag);\n\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n          tagnum++;\n        }\n\n        return res;\n      }).join('\\n');\n    } // Convert an image into a png format for saving\n\n\n    function base64ToBuffer(str) {\n      var b = atob(str);\n      var buf = new Uint8Array(b.length);\n\n      for (var i = 0, l = buf.length; i < l; i++) {\n        buf[i] = b.charCodeAt(i);\n      }\n\n      return buf;\n    }\n\n    var canvas, ctx;\n\n    function imageToData(image, ext) {\n      canvas = canvas || document.createElement('canvas');\n      ctx = ctx || canvas.getContext('2d');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      ctx.drawImage(image, 0, 0); // Get the base64 encoded data\n\n      var base64data = canvas.toDataURL(\"image/\".concat(ext), 1).replace(/^data:image\\/(png|jpg);base64,/, ''); // Convert to a uint8 array\n\n      return base64ToBuffer(base64data);\n    } // gets the attribute array. Generate a new array if the attribute is interleaved\n\n\n    var getFuncs = ['getX', 'getY', 'getZ', 'getW'];\n\n    function attrBufferToArray(attr) {\n      if (attr.isInterleavedBufferAttribute) {\n        // use the typed array constructor to save on memory\n        var arr = new attr.array.constructor(attr.count * attr.itemSize);\n        var size = attr.itemSize;\n\n        for (var i = 0, l = attr.count; i < l; i++) {\n          for (var j = 0; j < size; j++) {\n            arr[i * size + j] = attr[getFuncs[j]](i);\n          }\n        }\n\n        return arr;\n      } else {\n        return attr.array;\n      }\n    } // Returns an array of the same type starting at the `st` index,\n    // and `ct` length\n\n\n    function subArray(arr, st, ct) {\n      if (Array.isArray(arr)) return arr.slice(st, st + ct);else return new arr.constructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n    } // Returns the string for a geometry's attribute\n\n\n    function getAttribute(attr, name, params, type) {\n      var array = attrBufferToArray(attr);\n      var res = \"\".concat(\"<source id=\\\"\".concat(name, \"\\\">\") + \"<float_array id=\\\"\".concat(name, \"-array\\\" count=\\\"\").concat(array.length, \"\\\">\") + array.join(' '), \"</float_array><technique_common>\", \"<accessor source=\\\"#\".concat(name, \"-array\\\" count=\\\"\").concat(Math.floor(array.length / attr.itemSize), \"\\\" stride=\\\"\").concat(attr.itemSize, \"\\\">\")).concat(params.map(function (n) {\n        return \"<param name=\\\"\".concat(n, \"\\\" type=\\\"\").concat(type, \"\\\" />\");\n      }).join(''), \"</accessor></technique_common></source>\");\n      return res;\n    } // Returns the string for a node's transform information\n\n\n    var transMat;\n\n    function getTransform(o) {\n      // ensure the object's matrix is up to date\n      // before saving the transform\n      o.updateMatrix();\n      transMat = transMat || new _three.Matrix4();\n      transMat.copy(o.matrix);\n      transMat.transpose();\n      return \"<matrix>\".concat(transMat.toArray().join(' '), \"</matrix>\");\n    } // Process the given piece of geometry into the geometry library\n    // Returns the mesh id\n\n\n    function processGeometry(g) {\n      var info = geometryInfo.get(g);\n\n      if (!info) {\n        // convert the geometry to bufferGeometry if it isn't already\n        var bufferGeometry = g;\n\n        if (bufferGeometry.isBufferGeometry !== true) {\n          throw new Error('THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        var meshid = \"Mesh\".concat(libraryGeometries.length + 1);\n        var indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n        var groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n          start: 0,\n          count: indexCount,\n          materialIndex: 0\n        }];\n        var gname = g.name ? \" name=\\\"\".concat(g.name, \"\\\"\") : '';\n        var gnode = \"<geometry id=\\\"\".concat(meshid, \"\\\"\").concat(gname, \"><mesh>\"); // define the geometry node and the vertices for the geometry\n\n        var posName = \"\".concat(meshid, \"-position\");\n        var vertName = \"\".concat(meshid, \"-vertices\");\n        gnode += getAttribute(bufferGeometry.attributes.position, posName, ['X', 'Y', 'Z'], 'float');\n        gnode += \"<vertices id=\\\"\".concat(vertName, \"\\\"><input semantic=\\\"POSITION\\\" source=\\\"#\").concat(posName, \"\\\" /></vertices>\"); // NOTE: We're not optimizing the attribute arrays here, so they're all the same length and\n        // can therefore share the same triangle indices. However, MeshLab seems to have trouble opening\n        // models with attributes that share an offset.\n        // MeshLab Bug#424: https://sourceforge.net/p/meshlab/bugs/424/\n        // serialize normals\n\n        var triangleInputs = \"<input semantic=\\\"VERTEX\\\" source=\\\"#\".concat(vertName, \"\\\" offset=\\\"0\\\" />\");\n\n        if ('normal' in bufferGeometry.attributes) {\n          var normName = \"\".concat(meshid, \"-normal\");\n          gnode += getAttribute(bufferGeometry.attributes.normal, normName, ['X', 'Y', 'Z'], 'float');\n          triangleInputs += \"<input semantic=\\\"NORMAL\\\" source=\\\"#\".concat(normName, \"\\\" offset=\\\"0\\\" />\");\n        } // serialize uvs\n\n\n        if ('uv' in bufferGeometry.attributes) {\n          var uvName = \"\".concat(meshid, \"-texcoord\");\n          gnode += getAttribute(bufferGeometry.attributes.uv, uvName, ['S', 'T'], 'float');\n          triangleInputs += \"<input semantic=\\\"TEXCOORD\\\" source=\\\"#\".concat(uvName, \"\\\" offset=\\\"0\\\" set=\\\"0\\\" />\");\n        } // serialize lightmap uvs\n\n\n        if ('uv2' in bufferGeometry.attributes) {\n          var uvName = \"\".concat(meshid, \"-texcoord2\");\n          gnode += getAttribute(bufferGeometry.attributes.uv2, uvName, ['S', 'T'], 'float');\n          triangleInputs += \"<input semantic=\\\"TEXCOORD\\\" source=\\\"#\".concat(uvName, \"\\\" offset=\\\"0\\\" set=\\\"1\\\" />\");\n        } // serialize colors\n\n\n        if ('color' in bufferGeometry.attributes) {\n          var colName = \"\".concat(meshid, \"-color\");\n          gnode += getAttribute(bufferGeometry.attributes.color, colName, ['X', 'Y', 'Z'], 'uint8');\n          triangleInputs += \"<input semantic=\\\"COLOR\\\" source=\\\"#\".concat(colName, \"\\\" offset=\\\"0\\\" />\");\n        }\n\n        var indexArray = null;\n\n        if (bufferGeometry.index) {\n          indexArray = attrBufferToArray(bufferGeometry.index);\n        } else {\n          indexArray = new Array(indexCount);\n\n          for (var i = 0, l = indexArray.length; i < l; i++) {\n            indexArray[i] = i;\n          }\n        }\n\n        for (var _i = 0, _l = groups.length; _i < _l; _i++) {\n          var group = groups[_i];\n          var subarr = subArray(indexArray, group.start, group.count);\n          var polycount = subarr.length / 3;\n          gnode += \"<triangles material=\\\"MESH_MATERIAL_\".concat(group.materialIndex, \"\\\" count=\\\"\").concat(polycount, \"\\\">\");\n          gnode += triangleInputs;\n          gnode += \"<p>\".concat(subarr.join(' '), \"</p>\");\n          gnode += '</triangles>';\n        }\n\n        gnode += '</mesh></geometry>';\n        libraryGeometries.push(gnode);\n        info = {\n          meshid: meshid,\n          bufferGeometry: bufferGeometry\n        };\n        geometryInfo.set(g, info);\n      }\n\n      return info;\n    } // Process the given texture into the image library\n    // Returns the image library\n\n\n    function processTexture(tex) {\n      var texid = imageMap.get(tex);\n\n      if (texid == null) {\n        texid = \"image-\".concat(libraryImages.length + 1);\n        var ext = 'png';\n        var name = tex.name || texid;\n        var imageNode = \"<image id=\\\"\".concat(texid, \"\\\" name=\\\"\").concat(name, \"\\\">\");\n\n        if (version === '1.5.0') {\n          imageNode += \"<init_from><ref>\".concat(options.textureDirectory).concat(name, \".\").concat(ext, \"</ref></init_from>\");\n        } else {\n          // version image node 1.4.1\n          imageNode += \"<init_from>\".concat(options.textureDirectory).concat(name, \".\").concat(ext, \"</init_from>\");\n        }\n\n        imageNode += '</image>';\n        libraryImages.push(imageNode);\n        imageMap.set(tex, texid);\n        textures.push({\n          directory: options.textureDirectory,\n          name: name,\n          ext: ext,\n          data: imageToData(tex.image, ext),\n          original: tex\n        });\n      }\n\n      return texid;\n    } // Process the given material into the material and effect libraries\n    // Returns the material id\n\n\n    function processMaterial(m) {\n      var matid = materialMap.get(m);\n\n      if (matid == null) {\n        matid = \"Mat\".concat(libraryEffects.length + 1);\n        var type = 'phong';\n\n        if (m.isMeshLambertMaterial === true) {\n          type = 'lambert';\n        } else if (m.isMeshBasicMaterial === true) {\n          type = 'constant';\n\n          if (m.map !== null) {\n            // The Collada spec does not support diffuse texture maps with the\n            // constant shader type.\n            // mrdoob/three.js#15469\n            console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');\n          }\n        }\n\n        var emissive = m.emissive ? m.emissive : new _three.Color(0, 0, 0);\n        var diffuse = m.color ? m.color : new _three.Color(0, 0, 0);\n        var specular = m.specular ? m.specular : new _three.Color(1, 1, 1);\n        var shininess = m.shininess || 0;\n        var reflectivity = m.reflectivity || 0; // Do not export and alpha map for the reasons mentioned in issue (#13792)\n        // in three.js alpha maps are black and white, but collada expects the alpha\n        // channel to specify the transparency\n\n        var transparencyNode = '';\n\n        if (m.transparent === true) {\n          transparencyNode += \"<transparent>\".concat(m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : '<float>1</float>', \"</transparent>\");\n\n          if (m.opacity < 1) {\n            transparencyNode += \"<transparency><float>\".concat(m.opacity, \"</float></transparency>\");\n          }\n        }\n\n        var techniqueNode = \"\".concat(\"<technique sid=\\\"common\\\"><\".concat(type, \">\"), \"<emission>\", m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : \"<color sid=\\\"emission\\\">\".concat(emissive.r, \" \").concat(emissive.g, \" \").concat(emissive.b, \" 1</color>\"), \"</emission>\").concat(type !== 'constant' ? \"<diffuse>\".concat(m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : \"<color sid=\\\"diffuse\\\">\".concat(diffuse.r, \" \").concat(diffuse.g, \" \").concat(diffuse.b, \" 1</color>\"), \"</diffuse>\") : '').concat(type !== 'constant' ? \"<bump>\".concat(m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : '', \"</bump>\") : '').concat(type === 'phong' ? \"\".concat(\"<specular><color sid=\\\"specular\\\">\".concat(specular.r, \" \").concat(specular.g, \" \").concat(specular.b, \" 1</color></specular>\"), \"<shininess>\", m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : \"<float sid=\\\"shininess\\\">\".concat(shininess, \"</float>\"), \"</shininess>\") : '', \"<reflective><color>\".concat(diffuse.r, \" \").concat(diffuse.g, \" \").concat(diffuse.b, \" 1</color></reflective>\"), \"<reflectivity><float>\".concat(reflectivity, \"</float></reflectivity>\")).concat(transparencyNode, \"</\".concat(type, \"></technique>\"));\n        var effectnode = \"\".concat(\"<effect id=\\\"\".concat(matid, \"-effect\\\">\"), \"<profile_COMMON>\", m.map ? \"<newparam sid=\\\"diffuse-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(processTexture(m.map), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"diffuse-sampler\\\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>\") : '').concat(m.specularMap ? \"<newparam sid=\\\"specular-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(processTexture(m.specularMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"specular-sampler\\\"><sampler2D><source>specular-surface</source></sampler2D></newparam>\") : '').concat(m.emissiveMap ? \"<newparam sid=\\\"emissive-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(processTexture(m.emissiveMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"emissive-sampler\\\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>\") : '').concat(m.normalMap ? \"<newparam sid=\\\"bump-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(processTexture(m.normalMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"bump-sampler\\\"><sampler2D><source>bump-surface</source></sampler2D></newparam>\") : '').concat(techniqueNode).concat(m.side === _three.DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : '', \"</profile_COMMON></effect>\");\n        var materialName = m.name ? \" name=\\\"\".concat(m.name, \"\\\"\") : '';\n        var materialNode = \"<material id=\\\"\".concat(matid, \"\\\"\").concat(materialName, \"><instance_effect url=\\\"#\").concat(matid, \"-effect\\\" /></material>\");\n        libraryMaterials.push(materialNode);\n        libraryEffects.push(effectnode);\n        materialMap.set(m, matid);\n      }\n\n      return matid;\n    } // Recursively process the object into a scene\n\n\n    function processObject(o) {\n      var node = \"<node name=\\\"\".concat(o.name, \"\\\">\");\n      node += getTransform(o);\n\n      if (o.isMesh === true && o.geometry !== null) {\n        // function returns the id associated with the mesh and a \"BufferGeometry\" version\n        // of the geometry in case it's not a geometry.\n        var geomInfo = processGeometry(o.geometry);\n        var meshid = geomInfo.meshid;\n        var geometry = geomInfo.bufferGeometry; // ids of the materials to bind to the geometry\n\n        var matids = null;\n        var matidsArray = []; // get a list of materials to bind to the sub groups of the geometry.\n        // If the amount of subgroups is greater than the materials, than reuse\n        // the materials.\n\n        var mat = o.material || new _three.MeshBasicMaterial();\n        var materials = Array.isArray(mat) ? mat : [mat];\n\n        if (geometry.groups.length > materials.length) {\n          matidsArray = new Array(geometry.groups.length);\n        } else {\n          matidsArray = new Array(materials.length);\n        }\n\n        matids = matidsArray.fill().map(function (v, i) {\n          return processMaterial(materials[i % materials.length]);\n        });\n        node += \"\".concat(\"<instance_geometry url=\\\"#\".concat(meshid, \"\\\">\") + (matids != null ? \"<bind_material><technique_common>\".concat(matids.map(function (id, i) {\n          return \"\".concat(\"<instance_material symbol=\\\"MESH_MATERIAL_\".concat(i, \"\\\" target=\\\"#\").concat(id, \"\\\" >\"), \"<bind_vertex_input semantic=\\\"TEXCOORD\\\" input_semantic=\\\"TEXCOORD\\\" input_set=\\\"0\\\" /></instance_material>\");\n        }).join(''), \"</technique_common></bind_material>\") : ''), \"</instance_geometry>\");\n      }\n\n      o.children.forEach(function (c) {\n        return node += processObject(c);\n      });\n      node += '</node>';\n      return node;\n    }\n\n    var geometryInfo = new WeakMap();\n    var materialMap = new WeakMap();\n    var imageMap = new WeakMap();\n    var textures = [];\n    var libraryImages = [];\n    var libraryGeometries = [];\n    var libraryEffects = [];\n    var libraryMaterials = [];\n    var libraryVisualScenes = processObject(object);\n    var specLink = version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\n    var dae = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\" ?>\".concat(\"<COLLADA xmlns=\\\"\".concat(specLink, \"\\\" version=\\\"\").concat(version, \"\\\">\"), \"<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>\", options.author !== null ? \"<author>\".concat(options.author, \"</author>\") : '', \"</contributor>\", \"<created>\".concat(new Date().toISOString(), \"</created>\"), \"<modified>\".concat(new Date().toISOString(), \"</modified>\"), \"<up_axis>Y_UP</up_axis></asset>\");\n    dae += \"<library_images>\".concat(libraryImages.join(''), \"</library_images>\");\n    dae += \"<library_effects>\".concat(libraryEffects.join(''), \"</library_effects>\");\n    dae += \"<library_materials>\".concat(libraryMaterials.join(''), \"</library_materials>\");\n    dae += \"<library_geometries>\".concat(libraryGeometries.join(''), \"</library_geometries>\");\n    dae += \"<library_visual_scenes><visual_scene id=\\\"Scene\\\" name=\\\"scene\\\">\".concat(libraryVisualScenes, \"</visual_scene></library_visual_scenes>\");\n    dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n    dae += '</COLLADA>';\n    var res = {\n      data: format(dae),\n      textures: textures\n    };\n\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(function () {\n        return onDone(res);\n      });\n    }\n\n    return res;\n  }\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["width","textureDirectory","prototype","height","original","author","__esModule","directory","count","name","ext","bufferGeometry","value","materialIndex","meshid","start","textures","version","parse","data","ColladaExporter","constructor"]],"~:compiled-at",1630917515310,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$exporters$ColladaExporter.js\",\n\"lineCount\":26,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/exporters/ColladaExporter.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$exporters$ColladaExporter\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.ColladaExporter = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\n/**\\n * https://github.com/gkjohnson/collada-exporter-js\\n *\\n * Usage:\\n *  var exporter = new ColladaExporter();\\n *\\n *  var data = exporter.parse(mesh);\\n *\\n * Format Definition:\\n *  https://www.khronos.org/collada/\\n */\\nvar ColladaExporter = function ColladaExporter() {};\\n\\nexports.ColladaExporter = ColladaExporter;\\nColladaExporter.prototype = {\\n  constructor: ColladaExporter,\\n  parse: function parse(object, onDone, options) {\\n    options = options || {};\\n    options = Object.assign({\\n      version: '1.4.1',\\n      author: null,\\n      textureDirectory: ''\\n    }, options);\\n\\n    if (options.textureDirectory !== '') {\\n      options.textureDirectory = \\\"\\\".concat(options.textureDirectory, \\\"/\\\").replace(/\\\\\\\\/g, '/').replace(/\\\\/+/g, '/');\\n    }\\n\\n    var version = options.version;\\n\\n    if (version !== '1.4.1' && version !== '1.5.0') {\\n      console.warn(\\\"ColladaExporter : Version \\\".concat(version, \\\" not supported for export. Only 1.4.1 and 1.5.0.\\\"));\\n      return null;\\n    } // Convert the urdf xml into a well-formatted, indented format\\n\\n\\n    function format(urdf) {\\n      var IS_END_TAG = /^<\\\\//;\\n      var IS_SELF_CLOSING = /(\\\\?>$)|(\\\\/>$)/;\\n      var HAS_TEXT = /<[^>]+>[^<]*<\\\\/[^<]+>/;\\n\\n      var pad = function pad(ch, num) {\\n        return num > 0 ? ch + pad(ch, num - 1) : '';\\n      };\\n\\n      var tagnum = 0;\\n      return urdf.match(/(<[^>]+>[^<]+<\\\\/[^<]+>)|(<[^>]+>)/g).map(function (tag) {\\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\\n          tagnum--;\\n        }\\n\\n        var res = \\\"\\\".concat(pad('  ', tagnum)).concat(tag);\\n\\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\\n          tagnum++;\\n        }\\n\\n        return res;\\n      }).join('\\\\n');\\n    } // Convert an image into a png format for saving\\n\\n\\n    function base64ToBuffer(str) {\\n      var b = atob(str);\\n      var buf = new Uint8Array(b.length);\\n\\n      for (var i = 0, l = buf.length; i < l; i++) {\\n        buf[i] = b.charCodeAt(i);\\n      }\\n\\n      return buf;\\n    }\\n\\n    var canvas, ctx;\\n\\n    function imageToData(image, ext) {\\n      canvas = canvas || document.createElement('canvas');\\n      ctx = ctx || canvas.getContext('2d');\\n      canvas.width = image.width;\\n      canvas.height = image.height;\\n      ctx.drawImage(image, 0, 0); // Get the base64 encoded data\\n\\n      var base64data = canvas.toDataURL(\\\"image/\\\".concat(ext), 1).replace(/^data:image\\\\/(png|jpg);base64,/, ''); // Convert to a uint8 array\\n\\n      return base64ToBuffer(base64data);\\n    } // gets the attribute array. Generate a new array if the attribute is interleaved\\n\\n\\n    var getFuncs = ['getX', 'getY', 'getZ', 'getW'];\\n\\n    function attrBufferToArray(attr) {\\n      if (attr.isInterleavedBufferAttribute) {\\n        // use the typed array constructor to save on memory\\n        var arr = new attr.array.constructor(attr.count * attr.itemSize);\\n        var size = attr.itemSize;\\n\\n        for (var i = 0, l = attr.count; i < l; i++) {\\n          for (var j = 0; j < size; j++) {\\n            arr[i * size + j] = attr[getFuncs[j]](i);\\n          }\\n        }\\n\\n        return arr;\\n      } else {\\n        return attr.array;\\n      }\\n    } // Returns an array of the same type starting at the `st` index,\\n    // and `ct` length\\n\\n\\n    function subArray(arr, st, ct) {\\n      if (Array.isArray(arr)) return arr.slice(st, st + ct);else return new arr.constructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\\n    } // Returns the string for a geometry's attribute\\n\\n\\n    function getAttribute(attr, name, params, type) {\\n      var array = attrBufferToArray(attr);\\n      var res = \\\"\\\".concat(\\\"<source id=\\\\\\\"\\\".concat(name, \\\"\\\\\\\">\\\") + \\\"<float_array id=\\\\\\\"\\\".concat(name, \\\"-array\\\\\\\" count=\\\\\\\"\\\").concat(array.length, \\\"\\\\\\\">\\\") + array.join(' '), \\\"</float_array><technique_common>\\\", \\\"<accessor source=\\\\\\\"#\\\".concat(name, \\\"-array\\\\\\\" count=\\\\\\\"\\\").concat(Math.floor(array.length / attr.itemSize), \\\"\\\\\\\" stride=\\\\\\\"\\\").concat(attr.itemSize, \\\"\\\\\\\">\\\")).concat(params.map(function (n) {\\n        return \\\"<param name=\\\\\\\"\\\".concat(n, \\\"\\\\\\\" type=\\\\\\\"\\\").concat(type, \\\"\\\\\\\" />\\\");\\n      }).join(''), \\\"</accessor></technique_common></source>\\\");\\n      return res;\\n    } // Returns the string for a node's transform information\\n\\n\\n    var transMat;\\n\\n    function getTransform(o) {\\n      // ensure the object's matrix is up to date\\n      // before saving the transform\\n      o.updateMatrix();\\n      transMat = transMat || new _three.Matrix4();\\n      transMat.copy(o.matrix);\\n      transMat.transpose();\\n      return \\\"<matrix>\\\".concat(transMat.toArray().join(' '), \\\"</matrix>\\\");\\n    } // Process the given piece of geometry into the geometry library\\n    // Returns the mesh id\\n\\n\\n    function processGeometry(g) {\\n      var info = geometryInfo.get(g);\\n\\n      if (!info) {\\n        // convert the geometry to bufferGeometry if it isn't already\\n        var bufferGeometry = g;\\n\\n        if (bufferGeometry.isBufferGeometry !== true) {\\n          throw new Error('THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.');\\n        }\\n\\n        var meshid = \\\"Mesh\\\".concat(libraryGeometries.length + 1);\\n        var indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\\n        var groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\\n          start: 0,\\n          count: indexCount,\\n          materialIndex: 0\\n        }];\\n        var gname = g.name ? \\\" name=\\\\\\\"\\\".concat(g.name, \\\"\\\\\\\"\\\") : '';\\n        var gnode = \\\"<geometry id=\\\\\\\"\\\".concat(meshid, \\\"\\\\\\\"\\\").concat(gname, \\\"><mesh>\\\"); // define the geometry node and the vertices for the geometry\\n\\n        var posName = \\\"\\\".concat(meshid, \\\"-position\\\");\\n        var vertName = \\\"\\\".concat(meshid, \\\"-vertices\\\");\\n        gnode += getAttribute(bufferGeometry.attributes.position, posName, ['X', 'Y', 'Z'], 'float');\\n        gnode += \\\"<vertices id=\\\\\\\"\\\".concat(vertName, \\\"\\\\\\\"><input semantic=\\\\\\\"POSITION\\\\\\\" source=\\\\\\\"#\\\").concat(posName, \\\"\\\\\\\" /></vertices>\\\"); // NOTE: We're not optimizing the attribute arrays here, so they're all the same length and\\n        // can therefore share the same triangle indices. However, MeshLab seems to have trouble opening\\n        // models with attributes that share an offset.\\n        // MeshLab Bug#424: https://sourceforge.net/p/meshlab/bugs/424/\\n        // serialize normals\\n\\n        var triangleInputs = \\\"<input semantic=\\\\\\\"VERTEX\\\\\\\" source=\\\\\\\"#\\\".concat(vertName, \\\"\\\\\\\" offset=\\\\\\\"0\\\\\\\" />\\\");\\n\\n        if ('normal' in bufferGeometry.attributes) {\\n          var normName = \\\"\\\".concat(meshid, \\\"-normal\\\");\\n          gnode += getAttribute(bufferGeometry.attributes.normal, normName, ['X', 'Y', 'Z'], 'float');\\n          triangleInputs += \\\"<input semantic=\\\\\\\"NORMAL\\\\\\\" source=\\\\\\\"#\\\".concat(normName, \\\"\\\\\\\" offset=\\\\\\\"0\\\\\\\" />\\\");\\n        } // serialize uvs\\n\\n\\n        if ('uv' in bufferGeometry.attributes) {\\n          var uvName = \\\"\\\".concat(meshid, \\\"-texcoord\\\");\\n          gnode += getAttribute(bufferGeometry.attributes.uv, uvName, ['S', 'T'], 'float');\\n          triangleInputs += \\\"<input semantic=\\\\\\\"TEXCOORD\\\\\\\" source=\\\\\\\"#\\\".concat(uvName, \\\"\\\\\\\" offset=\\\\\\\"0\\\\\\\" set=\\\\\\\"0\\\\\\\" />\\\");\\n        } // serialize lightmap uvs\\n\\n\\n        if ('uv2' in bufferGeometry.attributes) {\\n          var uvName = \\\"\\\".concat(meshid, \\\"-texcoord2\\\");\\n          gnode += getAttribute(bufferGeometry.attributes.uv2, uvName, ['S', 'T'], 'float');\\n          triangleInputs += \\\"<input semantic=\\\\\\\"TEXCOORD\\\\\\\" source=\\\\\\\"#\\\".concat(uvName, \\\"\\\\\\\" offset=\\\\\\\"0\\\\\\\" set=\\\\\\\"1\\\\\\\" />\\\");\\n        } // serialize colors\\n\\n\\n        if ('color' in bufferGeometry.attributes) {\\n          var colName = \\\"\\\".concat(meshid, \\\"-color\\\");\\n          gnode += getAttribute(bufferGeometry.attributes.color, colName, ['X', 'Y', 'Z'], 'uint8');\\n          triangleInputs += \\\"<input semantic=\\\\\\\"COLOR\\\\\\\" source=\\\\\\\"#\\\".concat(colName, \\\"\\\\\\\" offset=\\\\\\\"0\\\\\\\" />\\\");\\n        }\\n\\n        var indexArray = null;\\n\\n        if (bufferGeometry.index) {\\n          indexArray = attrBufferToArray(bufferGeometry.index);\\n        } else {\\n          indexArray = new Array(indexCount);\\n\\n          for (var i = 0, l = indexArray.length; i < l; i++) {\\n            indexArray[i] = i;\\n          }\\n        }\\n\\n        for (var _i = 0, _l = groups.length; _i < _l; _i++) {\\n          var group = groups[_i];\\n          var subarr = subArray(indexArray, group.start, group.count);\\n          var polycount = subarr.length / 3;\\n          gnode += \\\"<triangles material=\\\\\\\"MESH_MATERIAL_\\\".concat(group.materialIndex, \\\"\\\\\\\" count=\\\\\\\"\\\").concat(polycount, \\\"\\\\\\\">\\\");\\n          gnode += triangleInputs;\\n          gnode += \\\"<p>\\\".concat(subarr.join(' '), \\\"</p>\\\");\\n          gnode += '</triangles>';\\n        }\\n\\n        gnode += '</mesh></geometry>';\\n        libraryGeometries.push(gnode);\\n        info = {\\n          meshid: meshid,\\n          bufferGeometry: bufferGeometry\\n        };\\n        geometryInfo.set(g, info);\\n      }\\n\\n      return info;\\n    } // Process the given texture into the image library\\n    // Returns the image library\\n\\n\\n    function processTexture(tex) {\\n      var texid = imageMap.get(tex);\\n\\n      if (texid == null) {\\n        texid = \\\"image-\\\".concat(libraryImages.length + 1);\\n        var ext = 'png';\\n        var name = tex.name || texid;\\n        var imageNode = \\\"<image id=\\\\\\\"\\\".concat(texid, \\\"\\\\\\\" name=\\\\\\\"\\\").concat(name, \\\"\\\\\\\">\\\");\\n\\n        if (version === '1.5.0') {\\n          imageNode += \\\"<init_from><ref>\\\".concat(options.textureDirectory).concat(name, \\\".\\\").concat(ext, \\\"</ref></init_from>\\\");\\n        } else {\\n          // version image node 1.4.1\\n          imageNode += \\\"<init_from>\\\".concat(options.textureDirectory).concat(name, \\\".\\\").concat(ext, \\\"</init_from>\\\");\\n        }\\n\\n        imageNode += '</image>';\\n        libraryImages.push(imageNode);\\n        imageMap.set(tex, texid);\\n        textures.push({\\n          directory: options.textureDirectory,\\n          name: name,\\n          ext: ext,\\n          data: imageToData(tex.image, ext),\\n          original: tex\\n        });\\n      }\\n\\n      return texid;\\n    } // Process the given material into the material and effect libraries\\n    // Returns the material id\\n\\n\\n    function processMaterial(m) {\\n      var matid = materialMap.get(m);\\n\\n      if (matid == null) {\\n        matid = \\\"Mat\\\".concat(libraryEffects.length + 1);\\n        var type = 'phong';\\n\\n        if (m.isMeshLambertMaterial === true) {\\n          type = 'lambert';\\n        } else if (m.isMeshBasicMaterial === true) {\\n          type = 'constant';\\n\\n          if (m.map !== null) {\\n            // The Collada spec does not support diffuse texture maps with the\\n            // constant shader type.\\n            // mrdoob/three.js#15469\\n            console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');\\n          }\\n        }\\n\\n        var emissive = m.emissive ? m.emissive : new _three.Color(0, 0, 0);\\n        var diffuse = m.color ? m.color : new _three.Color(0, 0, 0);\\n        var specular = m.specular ? m.specular : new _three.Color(1, 1, 1);\\n        var shininess = m.shininess || 0;\\n        var reflectivity = m.reflectivity || 0; // Do not export and alpha map for the reasons mentioned in issue (#13792)\\n        // in three.js alpha maps are black and white, but collada expects the alpha\\n        // channel to specify the transparency\\n\\n        var transparencyNode = '';\\n\\n        if (m.transparent === true) {\\n          transparencyNode += \\\"<transparent>\\\".concat(m.map ? '<texture texture=\\\"diffuse-sampler\\\"></texture>' : '<float>1</float>', \\\"</transparent>\\\");\\n\\n          if (m.opacity < 1) {\\n            transparencyNode += \\\"<transparency><float>\\\".concat(m.opacity, \\\"</float></transparency>\\\");\\n          }\\n        }\\n\\n        var techniqueNode = \\\"\\\".concat(\\\"<technique sid=\\\\\\\"common\\\\\\\"><\\\".concat(type, \\\">\\\"), \\\"<emission>\\\", m.emissiveMap ? '<texture texture=\\\"emissive-sampler\\\" texcoord=\\\"TEXCOORD\\\" />' : \\\"<color sid=\\\\\\\"emission\\\\\\\">\\\".concat(emissive.r, \\\" \\\").concat(emissive.g, \\\" \\\").concat(emissive.b, \\\" 1</color>\\\"), \\\"</emission>\\\").concat(type !== 'constant' ? \\\"<diffuse>\\\".concat(m.map ? '<texture texture=\\\"diffuse-sampler\\\" texcoord=\\\"TEXCOORD\\\" />' : \\\"<color sid=\\\\\\\"diffuse\\\\\\\">\\\".concat(diffuse.r, \\\" \\\").concat(diffuse.g, \\\" \\\").concat(diffuse.b, \\\" 1</color>\\\"), \\\"</diffuse>\\\") : '').concat(type !== 'constant' ? \\\"<bump>\\\".concat(m.normalMap ? '<texture texture=\\\"bump-sampler\\\" texcoord=\\\"TEXCOORD\\\" />' : '', \\\"</bump>\\\") : '').concat(type === 'phong' ? \\\"\\\".concat(\\\"<specular><color sid=\\\\\\\"specular\\\\\\\">\\\".concat(specular.r, \\\" \\\").concat(specular.g, \\\" \\\").concat(specular.b, \\\" 1</color></specular>\\\"), \\\"<shininess>\\\", m.specularMap ? '<texture texture=\\\"specular-sampler\\\" texcoord=\\\"TEXCOORD\\\" />' : \\\"<float sid=\\\\\\\"shininess\\\\\\\">\\\".concat(shininess, \\\"</float>\\\"), \\\"</shininess>\\\") : '', \\\"<reflective><color>\\\".concat(diffuse.r, \\\" \\\").concat(diffuse.g, \\\" \\\").concat(diffuse.b, \\\" 1</color></reflective>\\\"), \\\"<reflectivity><float>\\\".concat(reflectivity, \\\"</float></reflectivity>\\\")).concat(transparencyNode, \\\"</\\\".concat(type, \\\"></technique>\\\"));\\n        var effectnode = \\\"\\\".concat(\\\"<effect id=\\\\\\\"\\\".concat(matid, \\\"-effect\\\\\\\">\\\"), \\\"<profile_COMMON>\\\", m.map ? \\\"<newparam sid=\\\\\\\"diffuse-surface\\\\\\\"><surface type=\\\\\\\"2D\\\\\\\">\\\".concat(\\\"<init_from>\\\".concat(processTexture(m.map), \\\"</init_from>\\\"), \\\"</surface></newparam><newparam sid=\\\\\\\"diffuse-sampler\\\\\\\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>\\\") : '').concat(m.specularMap ? \\\"<newparam sid=\\\\\\\"specular-surface\\\\\\\"><surface type=\\\\\\\"2D\\\\\\\">\\\".concat(\\\"<init_from>\\\".concat(processTexture(m.specularMap), \\\"</init_from>\\\"), \\\"</surface></newparam><newparam sid=\\\\\\\"specular-sampler\\\\\\\"><sampler2D><source>specular-surface</source></sampler2D></newparam>\\\") : '').concat(m.emissiveMap ? \\\"<newparam sid=\\\\\\\"emissive-surface\\\\\\\"><surface type=\\\\\\\"2D\\\\\\\">\\\".concat(\\\"<init_from>\\\".concat(processTexture(m.emissiveMap), \\\"</init_from>\\\"), \\\"</surface></newparam><newparam sid=\\\\\\\"emissive-sampler\\\\\\\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>\\\") : '').concat(m.normalMap ? \\\"<newparam sid=\\\\\\\"bump-surface\\\\\\\"><surface type=\\\\\\\"2D\\\\\\\">\\\".concat(\\\"<init_from>\\\".concat(processTexture(m.normalMap), \\\"</init_from>\\\"), \\\"</surface></newparam><newparam sid=\\\\\\\"bump-sampler\\\\\\\"><sampler2D><source>bump-surface</source></sampler2D></newparam>\\\") : '').concat(techniqueNode).concat(m.side === _three.DoubleSide ? '<extra><technique profile=\\\"THREEJS\\\"><double_sided sid=\\\"double_sided\\\" type=\\\"int\\\">1</double_sided></technique></extra>' : '', \\\"</profile_COMMON></effect>\\\");\\n        var materialName = m.name ? \\\" name=\\\\\\\"\\\".concat(m.name, \\\"\\\\\\\"\\\") : '';\\n        var materialNode = \\\"<material id=\\\\\\\"\\\".concat(matid, \\\"\\\\\\\"\\\").concat(materialName, \\\"><instance_effect url=\\\\\\\"#\\\").concat(matid, \\\"-effect\\\\\\\" /></material>\\\");\\n        libraryMaterials.push(materialNode);\\n        libraryEffects.push(effectnode);\\n        materialMap.set(m, matid);\\n      }\\n\\n      return matid;\\n    } // Recursively process the object into a scene\\n\\n\\n    function processObject(o) {\\n      var node = \\\"<node name=\\\\\\\"\\\".concat(o.name, \\\"\\\\\\\">\\\");\\n      node += getTransform(o);\\n\\n      if (o.isMesh === true && o.geometry !== null) {\\n        // function returns the id associated with the mesh and a \\\"BufferGeometry\\\" version\\n        // of the geometry in case it's not a geometry.\\n        var geomInfo = processGeometry(o.geometry);\\n        var meshid = geomInfo.meshid;\\n        var geometry = geomInfo.bufferGeometry; // ids of the materials to bind to the geometry\\n\\n        var matids = null;\\n        var matidsArray = []; // get a list of materials to bind to the sub groups of the geometry.\\n        // If the amount of subgroups is greater than the materials, than reuse\\n        // the materials.\\n\\n        var mat = o.material || new _three.MeshBasicMaterial();\\n        var materials = Array.isArray(mat) ? mat : [mat];\\n\\n        if (geometry.groups.length > materials.length) {\\n          matidsArray = new Array(geometry.groups.length);\\n        } else {\\n          matidsArray = new Array(materials.length);\\n        }\\n\\n        matids = matidsArray.fill().map(function (v, i) {\\n          return processMaterial(materials[i % materials.length]);\\n        });\\n        node += \\\"\\\".concat(\\\"<instance_geometry url=\\\\\\\"#\\\".concat(meshid, \\\"\\\\\\\">\\\") + (matids != null ? \\\"<bind_material><technique_common>\\\".concat(matids.map(function (id, i) {\\n          return \\\"\\\".concat(\\\"<instance_material symbol=\\\\\\\"MESH_MATERIAL_\\\".concat(i, \\\"\\\\\\\" target=\\\\\\\"#\\\").concat(id, \\\"\\\\\\\" >\\\"), \\\"<bind_vertex_input semantic=\\\\\\\"TEXCOORD\\\\\\\" input_semantic=\\\\\\\"TEXCOORD\\\\\\\" input_set=\\\\\\\"0\\\\\\\" /></instance_material>\\\");\\n        }).join(''), \\\"</technique_common></bind_material>\\\") : ''), \\\"</instance_geometry>\\\");\\n      }\\n\\n      o.children.forEach(function (c) {\\n        return node += processObject(c);\\n      });\\n      node += '</node>';\\n      return node;\\n    }\\n\\n    var geometryInfo = new WeakMap();\\n    var materialMap = new WeakMap();\\n    var imageMap = new WeakMap();\\n    var textures = [];\\n    var libraryImages = [];\\n    var libraryGeometries = [];\\n    var libraryEffects = [];\\n    var libraryMaterials = [];\\n    var libraryVisualScenes = processObject(object);\\n    var specLink = version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\\n    var dae = \\\"<?xml version=\\\\\\\"1.0\\\\\\\" encoding=\\\\\\\"UTF-8\\\\\\\" standalone=\\\\\\\"no\\\\\\\" ?>\\\".concat(\\\"<COLLADA xmlns=\\\\\\\"\\\".concat(specLink, \\\"\\\\\\\" version=\\\\\\\"\\\").concat(version, \\\"\\\\\\\">\\\"), \\\"<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>\\\", options.author !== null ? \\\"<author>\\\".concat(options.author, \\\"</author>\\\") : '', \\\"</contributor>\\\", \\\"<created>\\\".concat(new Date().toISOString(), \\\"</created>\\\"), \\\"<modified>\\\".concat(new Date().toISOString(), \\\"</modified>\\\"), \\\"<up_axis>Y_UP</up_axis></asset>\\\");\\n    dae += \\\"<library_images>\\\".concat(libraryImages.join(''), \\\"</library_images>\\\");\\n    dae += \\\"<library_effects>\\\".concat(libraryEffects.join(''), \\\"</library_effects>\\\");\\n    dae += \\\"<library_materials>\\\".concat(libraryMaterials.join(''), \\\"</library_materials>\\\");\\n    dae += \\\"<library_geometries>\\\".concat(libraryGeometries.join(''), \\\"</library_geometries>\\\");\\n    dae += \\\"<library_visual_scenes><visual_scene id=\\\\\\\"Scene\\\\\\\" name=\\\\\\\"scene\\\\\\\">\\\".concat(libraryVisualScenes, \\\"</visual_scene></library_visual_scenes>\\\");\\n    dae += '<scene><instance_visual_scene url=\\\"#Scene\\\"/></scene>';\\n    dae += '</COLLADA>';\\n    var res = {\\n      data: format(dae),\\n      textures: textures\\n    };\\n\\n    if (typeof onDone === 'function') {\\n      requestAnimationFrame(function () {\\n        return onDone(res);\\n      });\\n    }\\n\\n    return res;\\n  }\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"ColladaExporter\",\"_three\",\"prototype\",\"constructor\",\"parse\",\"object\",\"onDone\",\"options\",\"attrBufferToArray\",\"attr\",\"isInterleavedBufferAttribute\",\"arr\",\"array\",\"count\",\"itemSize\",\"size\",\"i\",\"l\",\"j\",\"getFuncs\",\"getAttribute\",\"name\",\"params\",\"type\",\"concat\",\"length\",\"join\",\"Math\",\"floor\",\"res\",\"map\",\"n\",\"getTransform\",\"o\",\"updateMatrix\",\"transMat\",\"Matrix4\",\"copy\",\"matrix\",\"transpose\",\"toArray\",\"processGeometry\",\"g\",\"info\",\"geometryInfo\",\"get\",\"isBufferGeometry\",\"Error\",\"meshid\",\"libraryGeometries\",\"indexCount\",\"index\",\"attributes\",\"position\",\"groups\",\"start\",\"materialIndex\",\"gname\",\"gnode\",\"posName\",\"vertName\",\"triangleInputs\",\"normName\",\"normal\",\"uvName\",\"uv\",\"uv2\",\"colName\",\"color\",\"indexArray\",\"Array\",\"_i\",\"_l\",\"group\",\"isArray\",\"slice\",\"st\",\"ct\",\"buffer\",\"BYTES_PER_ELEMENT\",\"polycount\",\"subarr\",\"push\",\"bufferGeometry\",\"set\",\"processTexture\",\"tex\",\"texid\",\"imageMap\",\"libraryImages\",\"imageNode\",\"version\",\"textureDirectory\",\"ext\",\"textures\",\"image\",\"canvas\",\"document\",\"createElement\",\"ctx\",\"getContext\",\"width\",\"height\",\"drawImage\",\"base64data\",\"toDataURL\",\"replace\",\"b\",\"atob\",\"buf\",\"Uint8Array\",\"charCodeAt\",\"directory\",\"data\",\"original\",\"processObject\",\"node\",\"isMesh\",\"geometry\",\"geomInfo\",\"matids\",\"matidsArray\",\"mat\",\"material\",\"MeshBasicMaterial\",\"materials\",\"fill\",\"v\",\"matid\",\"materialMap\",\"m\",\"libraryEffects\",\"isMeshLambertMaterial\",\"isMeshBasicMaterial\",\"console\",\"warn\",\"emissive\",\"Color\",\"diffuse\",\"specular\",\"shininess\",\"reflectivity\",\"transparencyNode\",\"transparent\",\"opacity\",\"techniqueNode\",\"emissiveMap\",\"r\",\"normalMap\",\"specularMap\",\"effectnode\",\"side\",\"DoubleSide\",\"materialName\",\"materialNode\",\"libraryMaterials\",\"id\",\"children\",\"forEach\",\"c\",\"assign\",\"author\",\"WeakMap\",\"libraryVisualScenes\",\"dae\",\"specLink\",\"toISOString\",\"Date\",\"format\",\"urdf\",\"IS_END_TAG\",\"IS_SELF_CLOSING\",\"HAS_TEXT\",\"pad\",\"ch\",\"num\",\"tagnum\",\"match\",\"tag\",\"test\",\"requestAnimationFrame\"]\n}\n"]