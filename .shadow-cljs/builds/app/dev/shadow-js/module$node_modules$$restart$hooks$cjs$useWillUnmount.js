["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@restart/hooks/cjs/useWillUnmount.js"],"~:js","shadow$provide.module$node_modules$$restart$hooks$cjs$useWillUnmount=function(global,require,module,exports){exports.__esModule=!0;exports.default=function(fn){var onUnmount=(0,_useUpdatedRef.default)(fn);(0,_react.useEffect)(function(){return function(){return onUnmount.current()}},[])};var _useUpdatedRef=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require(\"module$node_modules$$restart$hooks$cjs$useUpdatedRef\")),_react=require(\"module$node_modules$react$index\")}","~:source","shadow$provide[\"module$node_modules$$restart$hooks$cjs$useWillUnmount\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = useWillUnmount;\n\nvar _useUpdatedRef = _interopRequireDefault(require(\"./useUpdatedRef\"));\n\nvar _react = require(\"react\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Attach a callback that fires when a component unmounts\n *\n * @param fn Handler to run when the component unmounts\n * @category effects\n */\nfunction useWillUnmount(fn) {\n  var onUnmount = (0, _useUpdatedRef.default)(fn);\n  (0, _react.useEffect)(function () {\n    return function () {\n      return onUnmount.current();\n    };\n  }, []);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js","~$module$node_modules$$restart$hooks$cjs$useUpdatedRef"]],"~:properties",["^5",["__esModule","default"]],"~:compiled-at",1630505482898,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$restart$hooks$cjs$useWillUnmount.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlHA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAcAC,QAAuB,CAACC,EAAD,CAAK,CAC1B,IAAIC,UAAY,CAAC,CAAA,CAAGC,cAAeJ,CAAAA,OAAnB,EAA4BE,EAA5B,CAChB,EAAC,CAAA,CAAGG,MAAOC,CAAAA,SAAX,EAAsB,QAAS,EAAG,CAChC,MAAO,SAAS,EAAG,CACjB,MAAOH,UAAUI,CAAAA,OAAV,EADU,CADa,CAAlC,CAIG,EAJH,CAF0B,CAZ5B,KAAIH,eAIJI,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIV,CAAAA,UAAX,CAAwBU,GAAxB,CAA8B,CAAET,QAASS,GAAX,CAAvC,CAJhB,CAAuBb,OAAA,CAAQ,sDAAR,CAAvB,CAArB,CAEIS,OAAST,OAAA,CAAQ,iCAAR,CARqG;\",\n\"sources\":[\"node_modules/@restart/hooks/cjs/useWillUnmount.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$restart$hooks$cjs$useWillUnmount\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nexports.__esModule = true;\\nexports.default = useWillUnmount;\\n\\nvar _useUpdatedRef = _interopRequireDefault(require(\\\"./useUpdatedRef\\\"));\\n\\nvar _react = require(\\\"react\\\");\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/**\\n * Attach a callback that fires when a component unmounts\\n *\\n * @param fn Handler to run when the component unmounts\\n * @category effects\\n */\\nfunction useWillUnmount(fn) {\\n  var onUnmount = (0, _useUpdatedRef.default)(fn);\\n  (0, _react.useEffect)(function () {\\n    return function () {\\n      return onUnmount.current();\\n    };\\n  }, []);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"__esModule\",\"default\",\"useWillUnmount\",\"fn\",\"onUnmount\",\"_useUpdatedRef\",\"_react\",\"useEffect\",\"current\",\"_interopRequireDefault\",\"obj\"]\n}\n"]