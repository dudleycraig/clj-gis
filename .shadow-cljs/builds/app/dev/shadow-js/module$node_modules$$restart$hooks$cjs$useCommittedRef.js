["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@restart/hooks/cjs/useCommittedRef.js"],"~:js","shadow$provide.module$node_modules$$restart$hooks$cjs$useCommittedRef=function(global,require,module,exports){exports.__esModule=!0;exports.default=void 0;var _react=require(\"module$node_modules$react$index\");exports.default=function(value){var ref=(0,_react.useRef)(value);(0,_react.useEffect)(function(){ref.current=value},[value]);return ref}}","~:source","shadow$provide[\"module$node_modules$$restart$hooks$cjs$useCommittedRef\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded befor being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  var ref = (0, _react.useRef)(value);\n  (0, _react.useEffect)(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nvar _default = useCommittedRef;\nexports.default = _default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js"]],"~:properties",["^5",["__esModule","current","default"]],"~:compiled-at",1630505482881,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$restart$hooks$cjs$useCommittedRef.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAAkB,IAAK,EAEvB,KAAIC,OAASL,OAAA,CAAQ,iCAAR,CAoBbE,QAAQE,CAAAA,OAAR,CATAE,QAAwB,CAACC,KAAD,CAAQ,CAC9B,IAAIC,IAAM,CAAC,CAAA,CAAGH,MAAOI,CAAAA,MAAX,EAAmBF,KAAnB,CACV,EAAC,CAAA,CAAGF,MAAOK,CAAAA,SAAX,EAAsB,QAAS,EAAG,CAChCF,GAAIG,CAAAA,OAAJ,CAAcJ,KADkB,CAAlC,CAEG,CAACA,KAAD,CAFH,CAGA,OAAOC,IALuB,CAjBmF;\",\n\"sources\":[\"node_modules/@restart/hooks/cjs/useCommittedRef.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$restart$hooks$cjs$useCommittedRef\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nexports.__esModule = true;\\nexports.default = void 0;\\n\\nvar _react = require(\\\"react\\\");\\n\\n/**\\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\\n * value is the one rendered with. Generally only required for Concurrent mode usage\\n * where previous work in `render()` may be discarded befor being used.\\n *\\n * This is safe to access in an event handler.\\n *\\n * @param value The `Ref` value\\n */\\nfunction useCommittedRef(value) {\\n  var ref = (0, _react.useRef)(value);\\n  (0, _react.useEffect)(function () {\\n    ref.current = value;\\n  }, [value]);\\n  return ref;\\n}\\n\\nvar _default = useCommittedRef;\\nexports.default = _default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"__esModule\",\"default\",\"_react\",\"useCommittedRef\",\"value\",\"ref\",\"useRef\",\"useEffect\",\"current\"]\n}\n"]