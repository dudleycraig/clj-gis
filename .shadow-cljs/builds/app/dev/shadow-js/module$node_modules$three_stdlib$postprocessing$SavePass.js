["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/postprocessing/SavePass.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$postprocessing$SavePass=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.SavePass=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_Pass=require(\"module$node_modules$three_stdlib$postprocessing$Pass\"),_CopyShader=require(\"module$node_modules$three_stdlib$shaders$CopyShader\");global=function(renderTarget){void 0===_CopyShader.CopyShader&&console.error(\"THREE.SavePass relies on CopyShader\");\nvar shader=_CopyShader.CopyShader;this.textureID=\"tDiffuse\";this.uniforms=_three.UniformsUtils.clone(shader.uniforms);this.material=new _three.ShaderMaterial({uniforms:this.uniforms,vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader});this.renderTarget=renderTarget;void 0===this.renderTarget&&(this.renderTarget=new _three.WebGLRenderTarget(window.innerWidth,window.innerHeight,{minFilter:_three.LinearFilter,magFilter:_three.LinearFilter,format:_three.RGBFormat}),this.renderTarget.texture.name=\n\"SavePass.rt\");this.needsSwap=!1;this.fsQuad=new _Pass.FullScreenQuad(this.material)};exports.SavePass=global;global.prototype=Object.assign(Object.create(_Pass.Pass.prototype),{constructor:global,render:function(renderer,writeBuffer,readBuffer){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=readBuffer.texture);renderer.setRenderTarget(this.renderTarget);this.clear&&renderer.clear();this.fsQuad.render(renderer)}})}","~:source","shadow$provide[\"module$node_modules$three_stdlib$postprocessing$SavePass\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SavePass = void 0;\n\nvar _three = require(\"three\");\n\nvar _Pass = require(\"./Pass.js\");\n\nvar _CopyShader = require(\"../shaders/CopyShader.js\");\n\nvar SavePass = function SavePass(renderTarget) {\n  if (_CopyShader.CopyShader === undefined) console.error('THREE.SavePass relies on CopyShader');\n  var shader = _CopyShader.CopyShader;\n  this.textureID = 'tDiffuse';\n  this.uniforms = _three.UniformsUtils.clone(shader.uniforms);\n  this.material = new _three.ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.renderTarget = renderTarget;\n\n  if (this.renderTarget === undefined) {\n    this.renderTarget = new _three.WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: _three.LinearFilter,\n      magFilter: _three.LinearFilter,\n      format: _three.RGBFormat\n    });\n    this.renderTarget.texture.name = 'SavePass.rt';\n  }\n\n  this.needsSwap = false;\n  this.fsQuad = new _Pass.FullScreenQuad(this.material);\n};\n\nexports.SavePass = SavePass;\nSavePass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\n  constructor: SavePass,\n  render: function render(renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    renderer.setRenderTarget(this.renderTarget);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n});\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_stdlib$shaders$CopyShader","~$shadow.js","~$module$node_modules$three_stdlib$postprocessing$Pass"]],"~:properties",["^5",["fragmentShader","SavePass","prototype","needsSwap","__esModule","textureID","vertexShader","name","value","fsQuad","magFilter","render","uniforms","minFilter","renderTarget","format","constructor","material"]],"~:compiled-at",1630917515506,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$postprocessing$SavePass.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,QAAR,CAAmB,IAAK,EAExB,KAAIC,OAASP,OAAA,CAAQ,8CAAR,CAAb,CAEIQ,MAAQR,OAAA,CAAQ,sDAAR,CAFZ,CAIIS,YAAcT,OAAA,CAAQ,qDAAR,CAEdM,OAAAA,CAAWA,QAAiB,CAACI,YAAD,CAAe,CACdC,IAAAA,EAA/B,GAAIF,WAAYG,CAAAA,UAAhB,EAA0CC,OAAQC,CAAAA,KAAR,CAAc,qCAAd,CAC1C;IAAIC,OAASN,WAAYG,CAAAA,UACzB,KAAKI,CAAAA,SAAL,CAAiB,UACjB,KAAKC,CAAAA,QAAL,CAAgBV,MAAOW,CAAAA,aAAcC,CAAAA,KAArB,CAA2BJ,MAAOE,CAAAA,QAAlC,CAChB,KAAKG,CAAAA,QAAL,CAAgB,IAAIb,MAAOc,CAAAA,cAAX,CAA0B,CACxCJ,SAAU,IAAKA,CAAAA,QADyB,CAExCK,aAAcP,MAAOO,CAAAA,YAFmB,CAGxCC,eAAgBR,MAAOQ,CAAAA,cAHiB,CAA1B,CAKhB,KAAKb,CAAAA,YAAL,CAAoBA,YAEMC,KAAAA,EAA1B,GAAI,IAAKD,CAAAA,YAAT,GACE,IAAKA,CAAAA,YAKL,CALoB,IAAIH,MAAOiB,CAAAA,iBAAX,CAA6BC,MAAOC,CAAAA,UAApC,CAAgDD,MAAOE,CAAAA,WAAvD,CAAoE,CACtFC,UAAWrB,MAAOsB,CAAAA,YADoE,CAEtFC,UAAWvB,MAAOsB,CAAAA,YAFoE,CAGtFE,OAAQxB,MAAOyB,CAAAA,SAHuE,CAApE,CAKpB,CAAA,IAAKtB,CAAAA,YAAauB,CAAAA,OAAQC,CAAAA,IAA1B;AAAiC,aANnC,CASA,KAAKC,CAAAA,SAAL,CAAiB,CAAA,CACjB,KAAKC,CAAAA,MAAL,CAAc,IAAI5B,KAAM6B,CAAAA,cAAV,CAAyB,IAAKjB,CAAAA,QAA9B,CAtB+B,CAyB/ClB,QAAQI,CAAAA,QAAR,CAAmBA,MACnBA,OAASgC,CAAAA,SAAT,CAAqBnC,MAAOoC,CAAAA,MAAP,CAAcpC,MAAOqC,CAAAA,MAAP,CAAchC,KAAMiC,CAAAA,IAAKH,CAAAA,SAAzB,CAAd,CAAmD,CACtEI,YAAapC,MADyD,CAEtEqC,OAAQA,QAAe,CAACC,QAAD,CAAWC,WAAX,CAAwBC,UAAxB,CAAoC,CACrD,IAAK7B,CAAAA,QAAL,CAAc,IAAKD,CAAAA,SAAnB,CAAJ,GACE,IAAKC,CAAAA,QAAL,CAAc,IAAKD,CAAAA,SAAnB,CAA8BX,CAAAA,KADhC,CACwCyC,UAAWb,CAAAA,OADnD,CAIAW,SAASG,CAAAA,eAAT,CAAyB,IAAKrC,CAAAA,YAA9B,CACI,KAAKsC,CAAAA,KAAT,EAAgBJ,QAASI,CAAAA,KAAT,EAChB,KAAKZ,CAAAA,MAAOO,CAAAA,MAAZ,CAAmBC,QAAnB,CAPyD,CAFW,CAAnD,CAxCgG;\",\n\"sources\":[\"node_modules/three-stdlib/postprocessing/SavePass.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$postprocessing$SavePass\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.SavePass = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _Pass = require(\\\"./Pass.js\\\");\\n\\nvar _CopyShader = require(\\\"../shaders/CopyShader.js\\\");\\n\\nvar SavePass = function SavePass(renderTarget) {\\n  if (_CopyShader.CopyShader === undefined) console.error('THREE.SavePass relies on CopyShader');\\n  var shader = _CopyShader.CopyShader;\\n  this.textureID = 'tDiffuse';\\n  this.uniforms = _three.UniformsUtils.clone(shader.uniforms);\\n  this.material = new _three.ShaderMaterial({\\n    uniforms: this.uniforms,\\n    vertexShader: shader.vertexShader,\\n    fragmentShader: shader.fragmentShader\\n  });\\n  this.renderTarget = renderTarget;\\n\\n  if (this.renderTarget === undefined) {\\n    this.renderTarget = new _three.WebGLRenderTarget(window.innerWidth, window.innerHeight, {\\n      minFilter: _three.LinearFilter,\\n      magFilter: _three.LinearFilter,\\n      format: _three.RGBFormat\\n    });\\n    this.renderTarget.texture.name = 'SavePass.rt';\\n  }\\n\\n  this.needsSwap = false;\\n  this.fsQuad = new _Pass.FullScreenQuad(this.material);\\n};\\n\\nexports.SavePass = SavePass;\\nSavePass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\\n  constructor: SavePass,\\n  render: function render(renderer, writeBuffer, readBuffer) {\\n    if (this.uniforms[this.textureID]) {\\n      this.uniforms[this.textureID].value = readBuffer.texture;\\n    }\\n\\n    renderer.setRenderTarget(this.renderTarget);\\n    if (this.clear) renderer.clear();\\n    this.fsQuad.render(renderer);\\n  }\\n});\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"SavePass\",\"_three\",\"_Pass\",\"_CopyShader\",\"renderTarget\",\"undefined\",\"CopyShader\",\"console\",\"error\",\"shader\",\"textureID\",\"uniforms\",\"UniformsUtils\",\"clone\",\"material\",\"ShaderMaterial\",\"vertexShader\",\"fragmentShader\",\"WebGLRenderTarget\",\"window\",\"innerWidth\",\"innerHeight\",\"minFilter\",\"LinearFilter\",\"magFilter\",\"format\",\"RGBFormat\",\"texture\",\"name\",\"needsSwap\",\"fsQuad\",\"FullScreenQuad\",\"prototype\",\"assign\",\"create\",\"Pass\",\"constructor\",\"render\",\"renderer\",\"writeBuffer\",\"readBuffer\",\"setRenderTarget\",\"clear\"]\n}\n"]