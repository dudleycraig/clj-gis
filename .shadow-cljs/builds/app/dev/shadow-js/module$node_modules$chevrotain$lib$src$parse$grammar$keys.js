["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/chevrotain/lib/src/parse/grammar/keys.js"],"~:js","shadow$provide.module$node_modules$chevrotain$lib$src$parse$grammar$keys=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.getKeyForAutomaticLookahead=exports.AT_LEAST_ONE_SEP_IDX=exports.MANY_SEP_IDX=exports.AT_LEAST_ONE_IDX=exports.MANY_IDX=exports.OPTION_IDX=exports.OR_IDX=exports.BITS_FOR_ALT_IDX=exports.BITS_FOR_RULE_IDX=exports.BITS_FOR_OCCURRENCE_IDX=exports.BITS_FOR_METHOD_TYPE=void 0;exports.BITS_FOR_METHOD_TYPE=4;exports.BITS_FOR_OCCURRENCE_IDX=\n8;exports.BITS_FOR_RULE_IDX=12;exports.BITS_FOR_ALT_IDX=8;exports.OR_IDX=1<<exports.BITS_FOR_OCCURRENCE_IDX;exports.OPTION_IDX=2<<exports.BITS_FOR_OCCURRENCE_IDX;exports.MANY_IDX=3<<exports.BITS_FOR_OCCURRENCE_IDX;exports.AT_LEAST_ONE_IDX=4<<exports.BITS_FOR_OCCURRENCE_IDX;exports.MANY_SEP_IDX=5<<exports.BITS_FOR_OCCURRENCE_IDX;exports.AT_LEAST_ONE_SEP_IDX=6<<exports.BITS_FOR_OCCURRENCE_IDX;exports.getKeyForAutomaticLookahead=function(ruleIdx,dslMethodIdx,occurrence){return occurrence|dslMethodIdx|\nruleIdx}}","~:source","shadow$provide[\"module$node_modules$chevrotain$lib$src$parse$grammar$keys\"] = function(global,require,module,exports) {\n\"use strict\";\n// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getKeyForAutomaticLookahead = exports.AT_LEAST_ONE_SEP_IDX = exports.MANY_SEP_IDX = exports.AT_LEAST_ONE_IDX = exports.MANY_IDX = exports.OPTION_IDX = exports.OR_IDX = exports.BITS_FOR_ALT_IDX = exports.BITS_FOR_RULE_IDX = exports.BITS_FOR_OCCURRENCE_IDX = exports.BITS_FOR_METHOD_TYPE = void 0;\nexports.BITS_FOR_METHOD_TYPE = 4;\nexports.BITS_FOR_OCCURRENCE_IDX = 8;\nexports.BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexports.BITS_FOR_ALT_IDX = 8;\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\n/* tslint:disable */\nexports.OR_IDX = 1 << exports.BITS_FOR_OCCURRENCE_IDX;\nexports.OPTION_IDX = 2 << exports.BITS_FOR_OCCURRENCE_IDX;\nexports.MANY_IDX = 3 << exports.BITS_FOR_OCCURRENCE_IDX;\nexports.AT_LEAST_ONE_IDX = 4 << exports.BITS_FOR_OCCURRENCE_IDX;\nexports.MANY_SEP_IDX = 5 << exports.BITS_FOR_OCCURRENCE_IDX;\nexports.AT_LEAST_ONE_SEP_IDX = 6 << exports.BITS_FOR_OCCURRENCE_IDX;\n/* tslint:enable */\n// this actually returns a number, but it is always used as a string (object prop key)\nfunction getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    /* tslint:disable */\n    return occurrence | dslMethodIdx | ruleIdx;\n    /* tslint:enable */\n}\nexports.getKeyForAutomaticLookahead = getKeyForAutomaticLookahead;\nvar BITS_START_FOR_ALT_IDX = 32 - exports.BITS_FOR_ALT_IDX;\n//# sourceMappingURL=keys.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["AT_LEAST_ONE_SEP_IDX","__esModule","AT_LEAST_ONE_IDX","value","MANY_IDX","MANY_SEP_IDX","BITS_FOR_OCCURRENCE_IDX","BITS_FOR_RULE_IDX","BITS_FOR_METHOD_TYPE","getKeyForAutomaticLookahead","BITS_FOR_ALT_IDX","OPTION_IDX","OR_IDX"]],"~:compiled-at",1630917515700,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$chevrotain$lib$src$parse$grammar$keys.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQtHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,2BAAR,CAAsCJ,OAAQK,CAAAA,oBAA9C,CAAqEL,OAAQM,CAAAA,YAA7E,CAA4FN,OAAQO,CAAAA,gBAApG,CAAuHP,OAAQQ,CAAAA,QAA/H,CAA0IR,OAAQS,CAAAA,UAAlJ,CAA+JT,OAAQU,CAAAA,MAAvK,CAAgLV,OAAQW,CAAAA,gBAAxL,CAA2MX,OAAQY,CAAAA,iBAAnN,CAAuOZ,OAAQa,CAAAA,uBAA/O,CAAyQb,OAAQc,CAAAA,oBAAjR,CAAwS,IAAK,EAC7Sd,QAAQc,CAAAA,oBAAR,CAA+B,CAC/Bd,QAAQa,CAAAA,uBAAR;AAAkC,CAClCb,QAAQY,CAAAA,iBAAR,CAA4B,EAE5BZ,QAAQW,CAAAA,gBAAR,CAA2B,CAK3BX,QAAQU,CAAAA,MAAR,CAAiB,CAAjB,EAAsBV,OAAQa,CAAAA,uBAC9Bb,QAAQS,CAAAA,UAAR,CAAqB,CAArB,EAA0BT,OAAQa,CAAAA,uBAClCb,QAAQQ,CAAAA,QAAR,CAAmB,CAAnB,EAAwBR,OAAQa,CAAAA,uBAChCb,QAAQO,CAAAA,gBAAR,CAA2B,CAA3B,EAAgCP,OAAQa,CAAAA,uBACxCb,QAAQM,CAAAA,YAAR,CAAuB,CAAvB,EAA4BN,OAAQa,CAAAA,uBACpCb,QAAQK,CAAAA,oBAAR,CAA+B,CAA/B,EAAoCL,OAAQa,CAAAA,uBAQ5Cb,QAAQI,CAAAA,2BAAR,CALAA,QAAoC,CAACW,OAAD,CAAUC,YAAV,CAAwBC,UAAxB,CAAoC,CAEpE,MAAOA,WAAP,CAAoBD,YAApB;AAAmCD,OAFiC,CA3B8C;\",\n\"sources\":[\"node_modules/chevrotain/lib/src/parse/grammar/keys.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$chevrotain$lib$src$parse$grammar$keys\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n// Lookahead keys are 32Bit integers in the form\\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\\n// XXXX -> Occurrence Index bitmap.\\n// YYYY -> DSL Method Type bitmap.\\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\\n// TTTTTTTTT -> alternation alternative index bitmap\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.getKeyForAutomaticLookahead = exports.AT_LEAST_ONE_SEP_IDX = exports.MANY_SEP_IDX = exports.AT_LEAST_ONE_IDX = exports.MANY_IDX = exports.OPTION_IDX = exports.OR_IDX = exports.BITS_FOR_ALT_IDX = exports.BITS_FOR_RULE_IDX = exports.BITS_FOR_OCCURRENCE_IDX = exports.BITS_FOR_METHOD_TYPE = void 0;\\nexports.BITS_FOR_METHOD_TYPE = 4;\\nexports.BITS_FOR_OCCURRENCE_IDX = 8;\\nexports.BITS_FOR_RULE_IDX = 12;\\n// TODO: validation, this means that there may at most 2^8 --\\u003e 256 alternatives for an alternation.\\nexports.BITS_FOR_ALT_IDX = 8;\\n// short string used as part of mapping keys.\\n// being short improves the performance when composing KEYS for maps out of these\\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\\n/* tslint:disable */\\nexports.OR_IDX = 1 << exports.BITS_FOR_OCCURRENCE_IDX;\\nexports.OPTION_IDX = 2 << exports.BITS_FOR_OCCURRENCE_IDX;\\nexports.MANY_IDX = 3 << exports.BITS_FOR_OCCURRENCE_IDX;\\nexports.AT_LEAST_ONE_IDX = 4 << exports.BITS_FOR_OCCURRENCE_IDX;\\nexports.MANY_SEP_IDX = 5 << exports.BITS_FOR_OCCURRENCE_IDX;\\nexports.AT_LEAST_ONE_SEP_IDX = 6 << exports.BITS_FOR_OCCURRENCE_IDX;\\n/* tslint:enable */\\n// this actually returns a number, but it is always used as a string (object prop key)\\nfunction getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\\n    /* tslint:disable */\\n    return occurrence | dslMethodIdx | ruleIdx;\\n    /* tslint:enable */\\n}\\nexports.getKeyForAutomaticLookahead = getKeyForAutomaticLookahead;\\nvar BITS_START_FOR_ALT_IDX = 32 - exports.BITS_FOR_ALT_IDX;\\n//# sourceMappingURL=keys.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"getKeyForAutomaticLookahead\",\"AT_LEAST_ONE_SEP_IDX\",\"MANY_SEP_IDX\",\"AT_LEAST_ONE_IDX\",\"MANY_IDX\",\"OPTION_IDX\",\"OR_IDX\",\"BITS_FOR_ALT_IDX\",\"BITS_FOR_RULE_IDX\",\"BITS_FOR_OCCURRENCE_IDX\",\"BITS_FOR_METHOD_TYPE\",\"ruleIdx\",\"dslMethodIdx\",\"occurrence\"]\n}\n"]