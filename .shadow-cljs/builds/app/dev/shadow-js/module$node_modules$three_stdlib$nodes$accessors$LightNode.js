["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/nodes/accessors/LightNode.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$nodes$accessors$LightNode=function(global,require,module,exports){function LightNode(scope){_TempNode.TempNode.call(this,\"v3\",{shared:!1});this.scope=scope||LightNode.TOTAL}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.LightNode=LightNode;var _TempNode=require(\"module$node_modules$three_stdlib$nodes$core$TempNode\");LightNode.TOTAL=\"total\";LightNode.prototype=Object.create(_TempNode.TempNode.prototype);LightNode.prototype.constructor=\nLightNode;LightNode.prototype.nodeType=\"Light\";LightNode.prototype.generate=function(builder,output){if(builder.isCache(\"light\"))return builder.format(\"reflectedLight.directDiffuse\",this.type,output);console.warn('THREE.LightNode is only compatible in \"light\" channel.');return builder.format(\"vec3( 0.0 )\",this.type,output)};LightNode.prototype.copy=function(source){_TempNode.TempNode.prototype.copy.call(this,source);this.scope=source.scope;return this};LightNode.prototype.toJSON=function(meta){var data=\nthis.getJSONNode(meta);data||(data=this.createJSONNode(meta),data.scope=this.scope);return data}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$nodes$accessors$LightNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LightNode = LightNode;\n\nvar _TempNode = require(\"../core/TempNode.js\");\n\nfunction LightNode(scope) {\n  _TempNode.TempNode.call(this, 'v3', {\n    shared: false\n  });\n\n  this.scope = scope || LightNode.TOTAL;\n}\n\nLightNode.TOTAL = 'total';\nLightNode.prototype = Object.create(_TempNode.TempNode.prototype);\nLightNode.prototype.constructor = LightNode;\nLightNode.prototype.nodeType = 'Light';\n\nLightNode.prototype.generate = function (builder, output) {\n  if (builder.isCache('light')) {\n    return builder.format('reflectedLight.directDiffuse', this.type, output);\n  } else {\n    console.warn('THREE.LightNode is only compatible in \"light\" channel.');\n    return builder.format('vec3( 0.0 )', this.type, output);\n  }\n};\n\nLightNode.prototype.copy = function (source) {\n  _TempNode.TempNode.prototype.copy.call(this, source);\n\n  this.scope = source.scope;\n  return this;\n};\n\nLightNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.scope = this.scope;\n  }\n\n  return data;\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$three_stdlib$nodes$core$TempNode"]],"~:properties",["^5",["copy","prototype","shared","__esModule","generate","nodeType","value","scope","TOTAL","LightNode","constructor","toJSON"]],"~:compiled-at",1630917515256,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$nodes$accessors$LightNode.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAUvHC,QAASA,UAAS,CAACC,KAAD,CAAQ,CACxBC,SAAUC,CAAAA,QAASC,CAAAA,IAAnB,CAAwB,IAAxB,CAA8B,IAA9B,CAAoC,CAClCC,OAAQ,CAAA,CAD0B,CAApC,CAIA,KAAKJ,CAAAA,KAAL,CAAaA,KAAb,EAAsBD,SAAUM,CAAAA,KALR,CAP1BC,MAAOC,CAAAA,cAAP,CAAsBT,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CU,MAAO,CAAA,CADoC,CAA7C,CAGAV,QAAQC,CAAAA,SAAR,CAAoBA,SAEpB,KAAIE,UAAYL,OAAA,CAAQ,sDAAR,CAUhBG,UAAUM,CAAAA,KAAV,CAAkB,OAClBN,UAAUU,CAAAA,SAAV,CAAsBH,MAAOI,CAAAA,MAAP,CAAcT,SAAUC,CAAAA,QAASO,CAAAA,SAAjC,CACtBV,UAAUU,CAAAA,SAAUE,CAAAA,WAApB;AAAkCZ,SAClCA,UAAUU,CAAAA,SAAUG,CAAAA,QAApB,CAA+B,OAE/Bb,UAAUU,CAAAA,SAAUI,CAAAA,QAApB,CAA+BC,QAAS,CAACC,OAAD,CAAUC,MAAV,CAAkB,CACxD,GAAID,OAAQE,CAAAA,OAAR,CAAgB,OAAhB,CAAJ,CACE,MAAOF,QAAQG,CAAAA,MAAR,CAAe,8BAAf,CAA+C,IAAKC,CAAAA,IAApD,CAA0DH,MAA1D,CAEPI,QAAQC,CAAAA,IAAR,CAAa,wDAAb,CACA,OAAON,QAAQG,CAAAA,MAAR,CAAe,aAAf,CAA8B,IAAKC,CAAAA,IAAnC,CAAyCH,MAAzC,CAL+C,CAS1DjB,UAAUU,CAAAA,SAAUa,CAAAA,IAApB,CAA2BC,QAAS,CAACC,MAAD,CAAS,CAC3CvB,SAAUC,CAAAA,QAASO,CAAAA,SAAUa,CAAAA,IAAKnB,CAAAA,IAAlC,CAAuC,IAAvC,CAA6CqB,MAA7C,CAEA,KAAKxB,CAAAA,KAAL,CAAawB,MAAOxB,CAAAA,KACpB,OAAO,KAJoC,CAO7CD,UAAUU,CAAAA,SAAUgB,CAAAA,MAApB,CAA6BC,QAAS,CAACC,IAAD,CAAO,CAC3C,IAAIC;AAAO,IAAKC,CAAAA,WAAL,CAAiBF,IAAjB,CAENC,KAAL,GACEA,IACA,CADO,IAAKE,CAAAA,cAAL,CAAoBH,IAApB,CACP,CAAAC,IAAK5B,CAAAA,KAAL,CAAa,IAAKA,CAAAA,KAFpB,CAKA,OAAO4B,KARoC,CAvC0E;\",\n\"sources\":[\"node_modules/three-stdlib/nodes/accessors/LightNode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$nodes$accessors$LightNode\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.LightNode = LightNode;\\n\\nvar _TempNode = require(\\\"../core/TempNode.js\\\");\\n\\nfunction LightNode(scope) {\\n  _TempNode.TempNode.call(this, 'v3', {\\n    shared: false\\n  });\\n\\n  this.scope = scope || LightNode.TOTAL;\\n}\\n\\nLightNode.TOTAL = 'total';\\nLightNode.prototype = Object.create(_TempNode.TempNode.prototype);\\nLightNode.prototype.constructor = LightNode;\\nLightNode.prototype.nodeType = 'Light';\\n\\nLightNode.prototype.generate = function (builder, output) {\\n  if (builder.isCache('light')) {\\n    return builder.format('reflectedLight.directDiffuse', this.type, output);\\n  } else {\\n    console.warn('THREE.LightNode is only compatible in \\\"light\\\" channel.');\\n    return builder.format('vec3( 0.0 )', this.type, output);\\n  }\\n};\\n\\nLightNode.prototype.copy = function (source) {\\n  _TempNode.TempNode.prototype.copy.call(this, source);\\n\\n  this.scope = source.scope;\\n  return this;\\n};\\n\\nLightNode.prototype.toJSON = function (meta) {\\n  var data = this.getJSONNode(meta);\\n\\n  if (!data) {\\n    data = this.createJSONNode(meta);\\n    data.scope = this.scope;\\n  }\\n\\n  return data;\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"LightNode\",\"scope\",\"_TempNode\",\"TempNode\",\"call\",\"shared\",\"TOTAL\",\"Object\",\"defineProperty\",\"value\",\"prototype\",\"create\",\"constructor\",\"nodeType\",\"generate\",\"LightNode.prototype.generate\",\"builder\",\"output\",\"isCache\",\"format\",\"type\",\"console\",\"warn\",\"copy\",\"LightNode.prototype.copy\",\"source\",\"toJSON\",\"LightNode.prototype.toJSON\",\"meta\",\"data\",\"getJSONNode\",\"createJSONNode\"]\n}\n"]