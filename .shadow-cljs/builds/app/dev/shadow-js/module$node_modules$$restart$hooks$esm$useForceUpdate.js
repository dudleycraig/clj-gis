["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@restart/hooks/esm/useForceUpdate.js"],"~:js","shadow$provide.module$node_modules$$restart$hooks$esm$useForceUpdate=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=function(){return(0,_react.useReducer)(function(state){return!state},!1)[1]};var _react=require(\"module$node_modules$react$index\")}","~:source","shadow$provide[\"module$node_modules$$restart$hooks$esm$useForceUpdate\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = useForceUpdate;\n\nvar _react = require(\"react\");\n\n/**\n * Returns a function that triggers a component update. the hook equivalent to\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\n * is preferable but may be required in some advanced usages of refs for interop or\n * when direct DOM manipulation is required.\n *\n * ```ts\n * const forceUpdate = useForceUpdate();\n *\n * const updateOnClick = useCallback(() => {\n *  forceUpdate()\n * }, [forceUpdate])\n *\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n * ```\n */\nfunction useForceUpdate() {\n  // The toggling state value is designed to defeat React optimizations for skipping\n  // updates when they are stricting equal to the last state value\n  var _useReducer = (0, _react.useReducer)(function (state) {\n    return !state;\n  }, false),\n      dispatch = _useReducer[1];\n\n  return dispatch;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js"]],"~:properties",["^5",["__esModule","value"]],"~:compiled-at",1630917514045,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$restart$hooks$esm$useForceUpdate.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQ,SAAR,CAAA,CAoBAI,QAAuB,EAAG,CAQxB,MALkBC,CAAC,CAAA,CAAGC,MAAOC,CAAAA,UAAXF,EAAuB,QAAS,CAACG,KAAD,CAAQ,CACxD,MAAO,CAACA,KADgD,CAAxCH,CAEf,CAAA,CAFeA,CAGHI,CAAY,CAAZA,CANS,CAlB1B,KAAIH,OAASR,OAAA,CAAQ,iCAAR,CARqG;\",\n\"sources\":[\"node_modules/@restart/hooks/esm/useForceUpdate.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$restart$hooks$esm$useForceUpdate\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = useForceUpdate;\\n\\nvar _react = require(\\\"react\\\");\\n\\n/**\\n * Returns a function that triggers a component update. the hook equivalent to\\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\\n * is preferable but may be required in some advanced usages of refs for interop or\\n * when direct DOM manipulation is required.\\n *\\n * ```ts\\n * const forceUpdate = useForceUpdate();\\n *\\n * const updateOnClick = useCallback(() => {\\n *  forceUpdate()\\n * }, [forceUpdate])\\n *\\n * return <button type=\\\"button\\\" onClick={updateOnClick}>Hi there</button>\\n * ```\\n */\\nfunction useForceUpdate() {\\n  // The toggling state value is designed to defeat React optimizations for skipping\\n  // updates when they are stricting equal to the last state value\\n  var _useReducer = (0, _react.useReducer)(function (state) {\\n    return !state;\\n  }, false),\\n      dispatch = _useReducer[1];\\n\\n  return dispatch;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"useForceUpdate\",\"_useReducer\",\"_react\",\"useReducer\",\"state\",\"dispatch\"]\n}\n"]