["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/postprocessing/BloomPass.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$postprocessing$BloomPass=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.BloomPass=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_Pass=require(\"module$node_modules$three_stdlib$postprocessing$Pass\"),_CopyShader=require(\"module$node_modules$three_stdlib$shaders$CopyShader\"),_ConvolutionShader=require(\"module$node_modules$three_stdlib$shaders$ConvolutionShader\"),BloomPass=\nfunction BloomPass(strength,kernelSize,sigma,resolution){strength=void 0!==strength?strength:1;kernelSize=void 0!==kernelSize?kernelSize:25;sigma=void 0!==sigma?sigma:4;resolution=void 0!==resolution?resolution:256;var pars={minFilter:_three.LinearFilter,magFilter:_three.LinearFilter,format:_three.RGBAFormat};this.renderTargetX=new _three.WebGLRenderTarget(resolution,resolution,pars);this.renderTargetX.texture.name=\"BloomPass.x\";this.renderTargetY=new _three.WebGLRenderTarget(resolution,resolution,\npars);this.renderTargetY.texture.name=\"BloomPass.y\";void 0===_CopyShader.CopyShader&&console.error(\"THREE.BloomPass relies on CopyShader\");resolution=_CopyShader.CopyShader;this.copyUniforms=_three.UniformsUtils.clone(resolution.uniforms);this.copyUniforms.opacity.value=strength;this.materialCopy=new _three.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:resolution.vertexShader,fragmentShader:resolution.fragmentShader,blending:_three.AdditiveBlending,transparent:!0});void 0===_ConvolutionShader.ConvolutionShader&&\nconsole.error(\"THREE.BloomPass relies on ConvolutionShader\");strength=_ConvolutionShader.ConvolutionShader;this.convolutionUniforms=_three.UniformsUtils.clone(strength.uniforms);this.convolutionUniforms.uImageIncrement.value=BloomPass.blurX;this.convolutionUniforms.cKernel.value=_ConvolutionShader.ConvolutionShader.buildKernel(sigma);this.materialConvolution=new _three.ShaderMaterial({uniforms:this.convolutionUniforms,vertexShader:strength.vertexShader,fragmentShader:strength.fragmentShader,defines:{KERNEL_SIZE_FLOAT:kernelSize.toFixed(1),\nKERNEL_SIZE_INT:kernelSize.toFixed(0)}});this.needsSwap=!1;this.fsQuad=new _Pass.FullScreenQuad(null)};exports.BloomPass=BloomPass;BloomPass.prototype=Object.assign(Object.create(_Pass.Pass.prototype),{constructor:BloomPass,render:function(renderer,writeBuffer,readBuffer,deltaTime,maskActive){maskActive&&renderer.state.buffers.stencil.setTest(!1);this.fsQuad.material=this.materialConvolution;this.convolutionUniforms.tDiffuse.value=readBuffer.texture;this.convolutionUniforms.uImageIncrement.value=\nBloomPass.blurX;renderer.setRenderTarget(this.renderTargetX);renderer.clear();this.fsQuad.render(renderer);this.convolutionUniforms.tDiffuse.value=this.renderTargetX.texture;this.convolutionUniforms.uImageIncrement.value=BloomPass.blurY;renderer.setRenderTarget(this.renderTargetY);renderer.clear();this.fsQuad.render(renderer);this.fsQuad.material=this.materialCopy;this.copyUniforms.tDiffuse.value=this.renderTargetY.texture;maskActive&&renderer.state.buffers.stencil.setTest(!0);renderer.setRenderTarget(readBuffer);\nthis.clear&&renderer.clear();this.fsQuad.render(renderer)}});BloomPass.blurX=new _three.Vector2(.001953125,0);BloomPass.blurY=new _three.Vector2(0,.001953125)}","~:source","shadow$provide[\"module$node_modules$three_stdlib$postprocessing$BloomPass\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BloomPass = void 0;\n\nvar _three = require(\"three\");\n\nvar _Pass = require(\"./Pass.js\");\n\nvar _CopyShader = require(\"../shaders/CopyShader.js\");\n\nvar _ConvolutionShader = require(\"../shaders/ConvolutionShader.js\");\n\nvar BloomPass = function BloomPass(strength, kernelSize, sigma, resolution) {\n  strength = strength !== undefined ? strength : 1;\n  kernelSize = kernelSize !== undefined ? kernelSize : 25;\n  sigma = sigma !== undefined ? sigma : 4.0;\n  resolution = resolution !== undefined ? resolution : 256; // render targets\n\n  var pars = {\n    minFilter: _three.LinearFilter,\n    magFilter: _three.LinearFilter,\n    format: _three.RGBAFormat\n  };\n  this.renderTargetX = new _three.WebGLRenderTarget(resolution, resolution, pars);\n  this.renderTargetX.texture.name = 'BloomPass.x';\n  this.renderTargetY = new _three.WebGLRenderTarget(resolution, resolution, pars);\n  this.renderTargetY.texture.name = 'BloomPass.y'; // copy material\n\n  if (_CopyShader.CopyShader === undefined) console.error('THREE.BloomPass relies on CopyShader');\n  var copyShader = _CopyShader.CopyShader;\n  this.copyUniforms = _three.UniformsUtils.clone(copyShader.uniforms);\n  this.copyUniforms['opacity'].value = strength;\n  this.materialCopy = new _three.ShaderMaterial({\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: _three.AdditiveBlending,\n    transparent: true\n  }); // convolution material\n\n  if (_ConvolutionShader.ConvolutionShader === undefined) console.error('THREE.BloomPass relies on ConvolutionShader');\n  var convolutionShader = _ConvolutionShader.ConvolutionShader;\n  this.convolutionUniforms = _three.UniformsUtils.clone(convolutionShader.uniforms);\n  this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n  this.convolutionUniforms['cKernel'].value = _ConvolutionShader.ConvolutionShader.buildKernel(sigma);\n  this.materialConvolution = new _three.ShaderMaterial({\n    uniforms: this.convolutionUniforms,\n    vertexShader: convolutionShader.vertexShader,\n    fragmentShader: convolutionShader.fragmentShader,\n    defines: {\n      KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n      KERNEL_SIZE_INT: kernelSize.toFixed(0)\n    }\n  });\n  this.needsSwap = false;\n  this.fsQuad = new _Pass.FullScreenQuad(null);\n};\n\nexports.BloomPass = BloomPass;\nBloomPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\n  constructor: BloomPass,\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n});\nBloomPass.blurX = new _three.Vector2(0.001953125, 0.0);\nBloomPass.blurY = new _three.Vector2(0.0, 0.001953125);\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_stdlib$shaders$CopyShader","~$shadow.js","~$module$node_modules$three_stdlib$postprocessing$Pass","~$module$node_modules$three_stdlib$shaders$ConvolutionShader"]],"~:properties",["^5",["fragmentShader","blurY","KERNEL_SIZE_FLOAT","blending","prototype","transparent","needsSwap","renderTargetX","materialCopy","__esModule","defines","KERNEL_SIZE_INT","vertexShader","name","BloomPass","value","fsQuad","magFilter","copyUniforms","render","materialConvolution","blurX","uniforms","minFilter","convolutionUniforms","format","constructor","material","renderTargetY"]],"~:compiled-at",1630917515541,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$postprocessing$BloomPass.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/postprocessing/BloomPass.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$postprocessing$BloomPass\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.BloomPass = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _Pass = require(\\\"./Pass.js\\\");\\n\\nvar _CopyShader = require(\\\"../shaders/CopyShader.js\\\");\\n\\nvar _ConvolutionShader = require(\\\"../shaders/ConvolutionShader.js\\\");\\n\\nvar BloomPass = function BloomPass(strength, kernelSize, sigma, resolution) {\\n  strength = strength !== undefined ? strength : 1;\\n  kernelSize = kernelSize !== undefined ? kernelSize : 25;\\n  sigma = sigma !== undefined ? sigma : 4.0;\\n  resolution = resolution !== undefined ? resolution : 256; // render targets\\n\\n  var pars = {\\n    minFilter: _three.LinearFilter,\\n    magFilter: _three.LinearFilter,\\n    format: _three.RGBAFormat\\n  };\\n  this.renderTargetX = new _three.WebGLRenderTarget(resolution, resolution, pars);\\n  this.renderTargetX.texture.name = 'BloomPass.x';\\n  this.renderTargetY = new _three.WebGLRenderTarget(resolution, resolution, pars);\\n  this.renderTargetY.texture.name = 'BloomPass.y'; // copy material\\n\\n  if (_CopyShader.CopyShader === undefined) console.error('THREE.BloomPass relies on CopyShader');\\n  var copyShader = _CopyShader.CopyShader;\\n  this.copyUniforms = _three.UniformsUtils.clone(copyShader.uniforms);\\n  this.copyUniforms['opacity'].value = strength;\\n  this.materialCopy = new _three.ShaderMaterial({\\n    uniforms: this.copyUniforms,\\n    vertexShader: copyShader.vertexShader,\\n    fragmentShader: copyShader.fragmentShader,\\n    blending: _three.AdditiveBlending,\\n    transparent: true\\n  }); // convolution material\\n\\n  if (_ConvolutionShader.ConvolutionShader === undefined) console.error('THREE.BloomPass relies on ConvolutionShader');\\n  var convolutionShader = _ConvolutionShader.ConvolutionShader;\\n  this.convolutionUniforms = _three.UniformsUtils.clone(convolutionShader.uniforms);\\n  this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\\n  this.convolutionUniforms['cKernel'].value = _ConvolutionShader.ConvolutionShader.buildKernel(sigma);\\n  this.materialConvolution = new _three.ShaderMaterial({\\n    uniforms: this.convolutionUniforms,\\n    vertexShader: convolutionShader.vertexShader,\\n    fragmentShader: convolutionShader.fragmentShader,\\n    defines: {\\n      KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\\n      KERNEL_SIZE_INT: kernelSize.toFixed(0)\\n    }\\n  });\\n  this.needsSwap = false;\\n  this.fsQuad = new _Pass.FullScreenQuad(null);\\n};\\n\\nexports.BloomPass = BloomPass;\\nBloomPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\\n  constructor: BloomPass,\\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\\n\\n    this.fsQuad.material = this.materialConvolution;\\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\\n    renderer.setRenderTarget(this.renderTargetX);\\n    renderer.clear();\\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\\n\\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurY;\\n    renderer.setRenderTarget(this.renderTargetY);\\n    renderer.clear();\\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\\n\\n    this.fsQuad.material = this.materialCopy;\\n    this.copyUniforms['tDiffuse'].value = this.renderTargetY.texture;\\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\\n    renderer.setRenderTarget(readBuffer);\\n    if (this.clear) renderer.clear();\\n    this.fsQuad.render(renderer);\\n  }\\n});\\nBloomPass.blurX = new _three.Vector2(0.001953125, 0.0);\\nBloomPass.blurY = new _three.Vector2(0.0, 0.001953125);\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"BloomPass\",\"_three\",\"_Pass\",\"_CopyShader\",\"_ConvolutionShader\",\"strength\",\"kernelSize\",\"sigma\",\"resolution\",\"undefined\",\"pars\",\"minFilter\",\"LinearFilter\",\"magFilter\",\"format\",\"RGBAFormat\",\"renderTargetX\",\"WebGLRenderTarget\",\"texture\",\"name\",\"renderTargetY\",\"CopyShader\",\"console\",\"error\",\"copyShader\",\"copyUniforms\",\"UniformsUtils\",\"clone\",\"uniforms\",\"materialCopy\",\"ShaderMaterial\",\"vertexShader\",\"fragmentShader\",\"blending\",\"AdditiveBlending\",\"transparent\",\"ConvolutionShader\",\"convolutionShader\",\"convolutionUniforms\",\"blurX\",\"buildKernel\",\"materialConvolution\",\"defines\",\"KERNEL_SIZE_FLOAT\",\"toFixed\",\"KERNEL_SIZE_INT\",\"needsSwap\",\"fsQuad\",\"FullScreenQuad\",\"prototype\",\"assign\",\"create\",\"Pass\",\"constructor\",\"render\",\"renderer\",\"writeBuffer\",\"readBuffer\",\"deltaTime\",\"maskActive\",\"state\",\"buffers\",\"stencil\",\"setTest\",\"material\",\"setRenderTarget\",\"clear\",\"blurY\",\"Vector2\"]\n}\n"]