["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/FreiChenShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$FreiChenShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.FreiChenShader=void 0;global={uniforms:{tDiffuse:{value:null},aspect:{value:new (require(\"module$node_modules$three$build$three_module\").Vector2)(512,512)}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform sampler2D tDiffuse;\\nvarying vec2 vUv;\\nuniform vec2 aspect;\\nvec2 texel \\x3d vec2(1.0 / aspect.x, 1.0 / aspect.y);\\nmat3 G[9];\\nconst mat3 g0 \\x3d mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\\nconst mat3 g1 \\x3d mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\\nconst mat3 g2 \\x3d mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\\nconst mat3 g3 \\x3d mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\\nconst mat3 g4 \\x3d mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\\nconst mat3 g5 \\x3d mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\\nconst mat3 g6 \\x3d mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\\nconst mat3 g7 \\x3d mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\\nconst mat3 g8 \\x3d mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\\nvoid main(void)\\n{\\n\\tG[0] \\x3d g0,\\n\\tG[1] \\x3d g1,\\n\\tG[2] \\x3d g2,\\n\\tG[3] \\x3d g3,\\n\\tG[4] \\x3d g4,\\n\\tG[5] \\x3d g5,\\n\\tG[6] \\x3d g6,\\n\\tG[7] \\x3d g7,\\n\\tG[8] \\x3d g8;\\n\\tmat3 I;\\n\\tfloat cnv[9];\\n\\tvec3 sample;\\n\\tfor (float i\\x3d0.0; i\\x3c3.0; i++) {\\n\\t\\tfor (float j\\x3d0.0; j\\x3c3.0; j++) {\\n\\t\\t\\tsample \\x3d texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\\n\\t\\t\\tI[int(i)][int(j)] \\x3d length(sample);\\n\\t\\t}\\n\\t}\\n\\tfor (int i\\x3d0; i\\x3c9; i++) {\\n\\t\\tfloat dp3 \\x3d dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\n\\t\\tcnv[i] \\x3d dp3 * dp3;\\n\\t}\\n\\tfloat M \\x3d (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\\n\\tfloat S \\x3d (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\\n\\tgl_FragColor \\x3d vec4(vec3(sqrt(M/S)), 1.0);\\n}\"};\nexports.FreiChenShader=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$FreiChenShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FreiChenShader = void 0;\n\nvar _three = require(\"three\");\n\n/**\n * Edge Detection Shader using Frei-Chen filter\n * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n *\n * aspect: vec2 of (1/width, 1/height)\n */\nvar FreiChenShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    aspect: {\n      value: new _three.Vector2(512, 512)\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'uniform vec2 aspect;', 'vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);', 'mat3 G[9];', // hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\n  'const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );', 'const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );', 'const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );', 'const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );', 'const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );', 'const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );', 'const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );', 'const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );', 'const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );', 'void main(void)', '{', '\tG[0] = g0,', '\tG[1] = g1,', '\tG[2] = g2,', '\tG[3] = g3,', '\tG[4] = g4,', '\tG[5] = g5,', '\tG[6] = g6,', '\tG[7] = g7,', '\tG[8] = g8;', '\tmat3 I;', '\tfloat cnv[9];', '\tvec3 sample;',\n  /* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n  '\tfor (float i=0.0; i<3.0; i++) {', '\t\tfor (float j=0.0; j<3.0; j++) {', '\t\t\tsample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;', '\t\t\tI[int(i)][int(j)] = length(sample);', '\t\t}', '\t}',\n  /* calculate the convolution values for all the masks */\n  '\tfor (int i=0; i<9; i++) {', '\t\tfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);', '\t\tcnv[i] = dp3 * dp3;', '\t}', '\tfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);', '\tfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);', '\tgl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);', '}'].join('\\n')\n};\nexports.FreiChenShader = FreiChenShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["fragmentShader","__esModule","tDiffuse","FreiChenShader","vertexShader","value","uniforms","aspect"]],"~:compiled-at",1630917515587,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$FreiChenShader.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,cAAR,CAAyB,IAAK,EAU1BA,OAAAA,CAAiB,CACnBC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,OAAQ,CACNJ,MAAO,KAdAL,OAAAU,CAAQ,8CAARA,CAcWC,CAAAA,OAAX,EAAmB,GAAnB,CAAwB,GAAxB,CADD,CAJA,CADS,CASnBC,aAAiJ,qIAT9H,CAUnBC,eAKoT,uoEAfjS,CAiBrBX;OAAQI,CAAAA,cAAR,CAAyBA,MAjC2F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/FreiChenShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$FreiChenShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.FreiChenShader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\n/**\\n * Edge Detection Shader using Frei-Chen filter\\n * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\\n *\\n * aspect: vec2 of (1/width, 1/height)\\n */\\nvar FreiChenShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    aspect: {\\n      value: new _three.Vector2(512, 512)\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'uniform vec2 aspect;', 'vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);', 'mat3 G[9];', // hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\\n  'const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );', 'const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );', 'const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );', 'const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );', 'const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );', 'const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );', 'const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );', 'const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );', 'const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );', 'void main(void)', '{', '\\tG[0] = g0,', '\\tG[1] = g1,', '\\tG[2] = g2,', '\\tG[3] = g3,', '\\tG[4] = g4,', '\\tG[5] = g5,', '\\tG[6] = g6,', '\\tG[7] = g7,', '\\tG[8] = g8;', '\\tmat3 I;', '\\tfloat cnv[9];', '\\tvec3 sample;',\\n  /* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\\n  '\\tfor (float i=0.0; i<3.0; i++) {', '\\t\\tfor (float j=0.0; j<3.0; j++) {', '\\t\\t\\tsample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;', '\\t\\t\\tI[int(i)][int(j)] = length(sample);', '\\t\\t}', '\\t}',\\n  /* calculate the convolution values for all the masks */\\n  '\\tfor (int i=0; i<9; i++) {', '\\t\\tfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);', '\\t\\tcnv[i] = dp3 * dp3;', '\\t}', '\\tfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);', '\\tfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);', '\\tgl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);', '}'].join('\\\\n')\\n};\\nexports.FreiChenShader = FreiChenShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"FreiChenShader\",\"uniforms\",\"tDiffuse\",\"aspect\",\"_three\",\"Vector2\",\"vertexShader\",\"fragmentShader\"]\n}\n"]