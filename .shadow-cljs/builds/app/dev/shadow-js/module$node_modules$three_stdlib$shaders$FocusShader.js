["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/FocusShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$FocusShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.FocusShader=void 0;exports.FocusShader={uniforms:{tDiffuse:{value:null},screenWidth:{value:1024},screenHeight:{value:1024},sampleDistance:{value:.94},waveFactor:{value:.00125}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform float screenWidth;\\nuniform float screenHeight;\\nuniform float sampleDistance;\\nuniform float waveFactor;\\nuniform sampler2D tDiffuse;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 color, org, tmp, add;\\n\\tfloat sample_dist, f;\\n\\tvec2 vin;\\n\\tvec2 uv \\x3d vUv;\\n\\tadd \\x3d color \\x3d org \\x3d texture2D( tDiffuse, uv );\\n\\tvin \\x3d ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\\n\\tsample_dist \\x3d dot( vin, vin ) * 2.0;\\n\\tf \\x3d ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\\n\\tvec2 sampleSize \\x3d vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\\n\\tadd +\\x3d tmp \\x3d texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\\n\\tif( tmp.b \\x3c color.b ) color \\x3d tmp;\\n\\tadd +\\x3d tmp \\x3d texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\\n\\tif( tmp.b \\x3c color.b ) color \\x3d tmp;\\n\\tadd +\\x3d tmp \\x3d texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\\n\\tif( tmp.b \\x3c color.b ) color \\x3d tmp;\\n\\tadd +\\x3d tmp \\x3d texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\\n\\tif( tmp.b \\x3c color.b ) color \\x3d tmp;\\n\\tadd +\\x3d tmp \\x3d texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\\n\\tif( tmp.b \\x3c color.b ) color \\x3d tmp;\\n\\tadd +\\x3d tmp \\x3d texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\\n\\tif( tmp.b \\x3c color.b ) color \\x3d tmp;\\n\\tadd +\\x3d tmp \\x3d texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\\n\\tif( tmp.b \\x3c color.b ) color \\x3d tmp;\\n\\tcolor \\x3d color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\\n\\tcolor \\x3d color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\\n\\tgl_FragColor \\x3d vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$FocusShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FocusShader = void 0;\n\n/**\n * Focus shader\n * based on PaintEffect postprocess from ro.me\n * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\n */\nvar FocusShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    screenWidth: {\n      value: 1024\n    },\n    screenHeight: {\n      value: 1024\n    },\n    sampleDistance: {\n      value: 0.94\n    },\n    waveFactor: {\n      value: 0.00125\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float screenWidth;', 'uniform float screenHeight;', 'uniform float sampleDistance;', 'uniform float waveFactor;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 color, org, tmp, add;', '\tfloat sample_dist, f;', '\tvec2 vin;', '\tvec2 uv = vUv;', '\tadd = color = org = texture2D( tDiffuse, uv );', '\tvin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );', '\tsample_dist = dot( vin, vin ) * 2.0;', '\tf = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;', '\tvec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tcolor = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );', '\tcolor = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );', '\tgl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );', '}'].join('\\n')\n};\nexports.FocusShader = FocusShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","sampleDistance","__esModule","tDiffuse","vertexShader","value","waveFactor","uniforms","screenWidth","FocusShader","screenHeight"]],"~:compiled-at",1630917515580,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$FocusShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EA4B3BJ,QAAQI,CAAAA,WAAR,CArBkBA,CAChBC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,YAAa,CACXJ,MAAO,IADI,CAJL,CAORK,aAAc,CACZL,MAAO,IADK,CAPN,CAURM,eAAgB,CACdN,MAAO,GADO,CAVR,CAaRO,WAAY,CACVP,MAAO,MADG,CAbJ,CADMC,CAkBhBO,aAAiJ,qIAlBjIP,CAmBhBQ,eAA0qD,yuDAnB1pDR,CAb+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/FocusShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$FocusShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.FocusShader = void 0;\\n\\n/**\\n * Focus shader\\n * based on PaintEffect postprocess from ro.me\\n * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\\n */\\nvar FocusShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    screenWidth: {\\n      value: 1024\\n    },\\n    screenHeight: {\\n      value: 1024\\n    },\\n    sampleDistance: {\\n      value: 0.94\\n    },\\n    waveFactor: {\\n      value: 0.00125\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform float screenWidth;', 'uniform float screenHeight;', 'uniform float sampleDistance;', 'uniform float waveFactor;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\\tvec4 color, org, tmp, add;', '\\tfloat sample_dist, f;', '\\tvec2 vin;', '\\tvec2 uv = vUv;', '\\tadd = color = org = texture2D( tDiffuse, uv );', '\\tvin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );', '\\tsample_dist = dot( vin, vin ) * 2.0;', '\\tf = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;', '\\tvec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );', '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );', '\\tif( tmp.b < color.b ) color = tmp;', '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );', '\\tif( tmp.b < color.b ) color = tmp;', '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );', '\\tif( tmp.b < color.b ) color = tmp;', '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );', '\\tif( tmp.b < color.b ) color = tmp;', '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );', '\\tif( tmp.b < color.b ) color = tmp;', '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );', '\\tif( tmp.b < color.b ) color = tmp;', '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );', '\\tif( tmp.b < color.b ) color = tmp;', '\\tcolor = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );', '\\tcolor = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );', '\\tgl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );', '}'].join('\\\\n')\\n};\\nexports.FocusShader = FocusShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"FocusShader\",\"uniforms\",\"tDiffuse\",\"screenWidth\",\"screenHeight\",\"sampleDistance\",\"waveFactor\",\"vertexShader\",\"fragmentShader\"]\n}\n"]