["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/lines/Wireframe.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$lines$Wireframe=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.Wireframe=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_LineSegmentsGeometry=require(\"module$node_modules$three_stdlib$lines$LineSegmentsGeometry\"),_LineMaterial=require(\"module$node_modules$three_stdlib$lines$LineMaterial\");global=function(geometry,material){_three.Mesh.call(this);this.type=\"Wireframe\";\nthis.geometry=void 0!==geometry?geometry:new _LineSegmentsGeometry.LineSegmentsGeometry;this.material=void 0!==material?material:new _LineMaterial.LineMaterial({color:16777215*Math.random()})};exports.Wireframe=global;global.prototype=Object.assign(Object.create(_three.Mesh.prototype),{constructor:global,isWireframe:!0,computeLineDistances:function(){var start=new _three.Vector3,end=new _three.Vector3;return function(){for(var geometry=this.geometry,instanceStart=geometry.attributes.instanceStart,\ninstanceEnd=geometry.attributes.instanceEnd,lineDistances=new Float32Array(2*instanceStart.data.count),i=0,j=0,l=instanceStart.data.count;i<l;i++,j+=2)start.fromBufferAttribute(instanceStart,i),end.fromBufferAttribute(instanceEnd,i),lineDistances[j]=0===j?0:lineDistances[j-1],lineDistances[j+1]=lineDistances[j]+start.distanceTo(end);instanceStart=new _three.InstancedInterleavedBuffer(lineDistances,2,1);geometry.setAttribute(\"instanceDistanceStart\",new _three.InterleavedBufferAttribute(instanceStart,\n1,0));geometry.setAttribute(\"instanceDistanceEnd\",new _three.InterleavedBufferAttribute(instanceStart,1,1));return this}}()})}","~:source","shadow$provide[\"module$node_modules$three_stdlib$lines$Wireframe\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wireframe = void 0;\n\nvar _three = require(\"three\");\n\nvar _LineSegmentsGeometry = require(\"./LineSegmentsGeometry.js\");\n\nvar _LineMaterial = require(\"./LineMaterial.js\");\n\nvar Wireframe = function Wireframe(geometry, material) {\n  _three.Mesh.call(this);\n\n  this.type = 'Wireframe';\n  this.geometry = geometry !== undefined ? geometry : new _LineSegmentsGeometry.LineSegmentsGeometry();\n  this.material = material !== undefined ? material : new _LineMaterial.LineMaterial({\n    color: Math.random() * 0xffffff\n  });\n};\n\nexports.Wireframe = Wireframe;\nWireframe.prototype = Object.assign(Object.create(_three.Mesh.prototype), {\n  constructor: Wireframe,\n  isWireframe: true,\n  computeLineDistances: function () {\n    // for backwards-compatability, but could be a method of LineSegmentsGeometry...\n    var start = new _three.Vector3();\n    var end = new _three.Vector3();\n    return function computeLineDistances() {\n      var geometry = this.geometry;\n      var instanceStart = geometry.attributes.instanceStart;\n      var instanceEnd = geometry.attributes.instanceEnd;\n      var lineDistances = new Float32Array(2 * instanceStart.data.count);\n\n      for (var i = 0, j = 0, l = instanceStart.data.count; i < l; i++, j += 2) {\n        start.fromBufferAttribute(instanceStart, i);\n        end.fromBufferAttribute(instanceEnd, i);\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + start.distanceTo(end);\n      }\n\n      var instanceDistanceBuffer = new _three.InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n      geometry.setAttribute('instanceDistanceStart', new _three.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n      geometry.setAttribute('instanceDistanceEnd', new _three.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n      return this;\n    };\n  }()\n});\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_stdlib$lines$LineSegmentsGeometry","~$shadow.js","~$module$node_modules$three_stdlib$lines$LineMaterial"]],"~:properties",["^5",["prototype","__esModule","value","geometry","isWireframe","type","computeLineDistances","Wireframe","color","constructor","material"]],"~:compiled-at",1630917515964,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$lines$Wireframe.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/lines/Wireframe.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$lines$Wireframe\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.Wireframe = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _LineSegmentsGeometry = require(\\\"./LineSegmentsGeometry.js\\\");\\n\\nvar _LineMaterial = require(\\\"./LineMaterial.js\\\");\\n\\nvar Wireframe = function Wireframe(geometry, material) {\\n  _three.Mesh.call(this);\\n\\n  this.type = 'Wireframe';\\n  this.geometry = geometry !== undefined ? geometry : new _LineSegmentsGeometry.LineSegmentsGeometry();\\n  this.material = material !== undefined ? material : new _LineMaterial.LineMaterial({\\n    color: Math.random() * 0xffffff\\n  });\\n};\\n\\nexports.Wireframe = Wireframe;\\nWireframe.prototype = Object.assign(Object.create(_three.Mesh.prototype), {\\n  constructor: Wireframe,\\n  isWireframe: true,\\n  computeLineDistances: function () {\\n    // for backwards-compatability, but could be a method of LineSegmentsGeometry...\\n    var start = new _three.Vector3();\\n    var end = new _three.Vector3();\\n    return function computeLineDistances() {\\n      var geometry = this.geometry;\\n      var instanceStart = geometry.attributes.instanceStart;\\n      var instanceEnd = geometry.attributes.instanceEnd;\\n      var lineDistances = new Float32Array(2 * instanceStart.data.count);\\n\\n      for (var i = 0, j = 0, l = instanceStart.data.count; i < l; i++, j += 2) {\\n        start.fromBufferAttribute(instanceStart, i);\\n        end.fromBufferAttribute(instanceEnd, i);\\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\\n        lineDistances[j + 1] = lineDistances[j] + start.distanceTo(end);\\n      }\\n\\n      var instanceDistanceBuffer = new _three.InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\\n\\n      geometry.setAttribute('instanceDistanceStart', new _three.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\\n\\n      geometry.setAttribute('instanceDistanceEnd', new _three.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\\n\\n      return this;\\n    };\\n  }()\\n});\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"Wireframe\",\"_three\",\"_LineSegmentsGeometry\",\"_LineMaterial\",\"geometry\",\"material\",\"Mesh\",\"call\",\"type\",\"undefined\",\"LineSegmentsGeometry\",\"LineMaterial\",\"color\",\"Math\",\"random\",\"prototype\",\"assign\",\"create\",\"constructor\",\"isWireframe\",\"computeLineDistances\",\"start\",\"Vector3\",\"end\",\"instanceStart\",\"attributes\",\"instanceEnd\",\"lineDistances\",\"Float32Array\",\"data\",\"count\",\"i\",\"j\",\"l\",\"fromBufferAttribute\",\"distanceTo\",\"instanceDistanceBuffer\",\"InstancedInterleavedBuffer\",\"setAttribute\",\"InterleavedBufferAttribute\"]\n}\n"]