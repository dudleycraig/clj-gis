["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/loaders/3MFLoader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$loaders$3MFLoader=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=\ndescriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);staticProps&&_defineProperties(Constructor,staticProps);return Constructor}function _getPrototypeOf(o$jscomp$0){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)};\nreturn _getPrototypeOf(o$jscomp$0)}function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&null!==superClass)throw new TypeError(\"Super expression must either be null or a function\");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}});superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o$jscomp$0,p$jscomp$0){_setPrototypeOf=Object.setPrototypeOf||function(o,p){o.__proto__=p;return o};\nreturn _setPrototypeOf(o$jscomp$0,p$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.ThreeMFLoader=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_fflate=require(\"module$node_modules$fflate$esm$browser\");global=function(_Loader){function ThreeMFLoader(manager){if(!(this instanceof ThreeMFLoader))throw new TypeError(\"Cannot call a class as a function\");manager=_getPrototypeOf(ThreeMFLoader).call(this,manager);if(!manager||\"object\"!==_typeof(manager)&&\n\"function\"!==typeof manager){if(void 0===this)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");manager=this}manager.availableExtensions=[];return manager}_inherits(ThreeMFLoader,_Loader);_createClass(ThreeMFLoader,[{key:\"load\",value:function(url,onLoad,onProgress,onError){var scope=this,loader=new _three.FileLoader(scope.manager);loader.setPath(scope.path);loader.setResponseType(\"arraybuffer\");loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);\nloader.load(url,function(buffer){try{onLoad(scope.parse(buffer))}catch(e){onError?onError(e):console.error(e),scope.manager.itemError(url)}},onProgress,onError)}},{key:\"parse\",value:function(data$jscomp$0){function parseRelsXml(relsFileText){var relationships=[];relsFileText=(new DOMParser).parseFromString(relsFileText,\"application/xml\").querySelectorAll(\"Relationship\");for(var i=0;i<relsFileText.length;i++){var relsNode=relsFileText[i];relsNode={target:relsNode.getAttribute(\"Target\"),id:relsNode.getAttribute(\"Id\"),\ntype:relsNode.getAttribute(\"Type\")};relationships.push(relsNode)}return relationships}function parseTransform(transform){var t=[];transform.split(\" \").forEach(function(s){t.push(parseFloat(s))});transform=new _three.Matrix4;transform.set(t[0],t[3],t[6],t[9],t[1],t[4],t[7],t[10],t[2],t[5],t[8],t[11],0,0,0,1);return transform}function buildTexture(texture2dgroup,objects,modelData,textureData){if(texture2dgroup=modelData.resources.texture2d[texture2dgroup.texid]){textureData=new Blob([textureData[texture2dgroup.path]],\n{type:texture2dgroup.contenttype});var sourceURI=URL.createObjectURL(textureData);textureData=textureLoader.load(sourceURI,function(){URL.revokeObjectURL(sourceURI)});textureData.encoding=_three.sRGBEncoding;switch(texture2dgroup.tilestyleu){case \"wrap\":textureData.wrapS=_three.RepeatWrapping;break;case \"mirror\":textureData.wrapS=_three.MirroredRepeatWrapping;break;case \"none\":case \"clamp\":textureData.wrapS=_three.ClampToEdgeWrapping;break;default:textureData.wrapS=_three.RepeatWrapping}switch(texture2dgroup.tilestylev){case \"wrap\":textureData.wrapT=\n_three.RepeatWrapping;break;case \"mirror\":textureData.wrapT=_three.MirroredRepeatWrapping;break;case \"none\":case \"clamp\":textureData.wrapT=_three.ClampToEdgeWrapping;break;default:textureData.wrapT=_three.RepeatWrapping}switch(texture2dgroup.filter){case \"auto\":textureData.magFilter=_three.LinearFilter;textureData.minFilter=_three.LinearMipmapLinearFilter;break;case \"linear\":textureData.magFilter=_three.LinearFilter;textureData.minFilter=_three.LinearFilter;break;case \"nearest\":textureData.magFilter=\n_three.NearestFilter;textureData.minFilter=_three.NearestFilter;break;default:textureData.magFilter=_three.LinearFilter,textureData.minFilter=_three.LinearMipmapLinearFilter}return textureData}return null}function getResourceType(pid,modelData){if(void 0!==modelData.resources.texture2dgroup[pid])return\"texture\";if(void 0!==modelData.resources.basematerials[pid])return\"material\";if(void 0!==modelData.resources.colorgroup[pid])return\"vertexColors\";if(\"default\"===pid)return\"default\"}function buildGroup(meshData,\nobjects,modelData,textureData$jscomp$0,objectData$jscomp$0){for(var group=new _three.Group,resourceMap={},triangleProperties=meshData.triangleProperties,objectPid=objectData$jscomp$0.pid,i=0,l=triangleProperties.length;i<l;i++){var triangleProperty=triangleProperties[i],pid=void 0!==triangleProperty.pid?triangleProperty.pid:objectPid;void 0===pid&&(pid=\"default\");void 0===resourceMap[pid]&&(resourceMap[pid]=[]);resourceMap[pid].push(triangleProperty)}objectPid=Object.keys(resourceMap);triangleProperties=\n[];i=0;for(l=objectPid.length;i<l;i++){var resourceId=objectPid[i],triangleProperties$jscomp$0=resourceMap[resourceId];switch(getResourceType(resourceId,modelData)){case \"material\":triangleProperty=modelData.resources.basematerials[resourceId];var triangleProperties$jscomp$1=triangleProperties$jscomp$0;pid=meshData;triangleProperties$jscomp$0=objects;resourceId=modelData;for(var textureData=textureData$jscomp$0,objectData=objectData$jscomp$0,objectPindex=objectData.pindex,materialMap={},i$jscomp$0=\n0,l$jscomp$0=triangleProperties$jscomp$1.length;i$jscomp$0<l$jscomp$0;i$jscomp$0++){var triangleProperty$jscomp$0=triangleProperties$jscomp$1[i$jscomp$0],pindex=void 0!==triangleProperty$jscomp$0.p1?triangleProperty$jscomp$0.p1:objectPindex;void 0===materialMap[pindex]&&(materialMap[pindex]=[]);materialMap[pindex].push(triangleProperty$jscomp$0)}triangleProperties$jscomp$1=Object.keys(materialMap);objectPindex=[];i$jscomp$0=0;for(l$jscomp$0=triangleProperties$jscomp$1.length;i$jscomp$0<l$jscomp$0;i$jscomp$0++){pindex=\ntriangleProperties$jscomp$1[i$jscomp$0];triangleProperty$jscomp$0=materialMap[pindex];pindex=getBuild(triangleProperty.basematerials[pindex],triangleProperties$jscomp$0,resourceId,textureData,objectData,buildBasematerial);for(var geometry=new _three.BufferGeometry,positionData=[],vertices=pid.vertices,j=0,jl=triangleProperty$jscomp$0.length;j<jl;j++){var _triangleProperty=triangleProperty$jscomp$0[j];positionData.push(vertices[3*_triangleProperty.v1]);positionData.push(vertices[3*_triangleProperty.v1+\n1]);positionData.push(vertices[3*_triangleProperty.v1+2]);positionData.push(vertices[3*_triangleProperty.v2]);positionData.push(vertices[3*_triangleProperty.v2+1]);positionData.push(vertices[3*_triangleProperty.v2+2]);positionData.push(vertices[3*_triangleProperty.v3]);positionData.push(vertices[3*_triangleProperty.v3+1]);positionData.push(vertices[3*_triangleProperty.v3+2])}geometry.setAttribute(\"position\",new _three.Float32BufferAttribute(positionData,3));triangleProperty$jscomp$0=new _three.Mesh(geometry,\npindex);objectPindex.push(triangleProperty$jscomp$0)}triangleProperty=objectPindex;pid=0;for(triangleProperties$jscomp$0=triangleProperty.length;pid<triangleProperties$jscomp$0;pid++)triangleProperties.push(triangleProperty[pid]);break;case \"texture\":triangleProperty=triangleProperties;pid=triangleProperty.push;resourceId=modelData.resources.texture2dgroup[resourceId];textureData=triangleProperties$jscomp$0;triangleProperty$jscomp$0=meshData;objectData=objects;materialMap=modelData;triangleProperties$jscomp$1=\ntextureData$jscomp$0;objectPindex=objectData$jscomp$0;triangleProperties$jscomp$0=new _three.BufferGeometry;i$jscomp$0=[];l$jscomp$0=[];triangleProperty$jscomp$0=triangleProperty$jscomp$0.vertices;pindex=resourceId.uvs;geometry=0;for(positionData=textureData.length;geometry<positionData;geometry++)vertices=textureData[geometry],i$jscomp$0.push(triangleProperty$jscomp$0[3*vertices.v1]),i$jscomp$0.push(triangleProperty$jscomp$0[3*vertices.v1+1]),i$jscomp$0.push(triangleProperty$jscomp$0[3*vertices.v1+\n2]),i$jscomp$0.push(triangleProperty$jscomp$0[3*vertices.v2]),i$jscomp$0.push(triangleProperty$jscomp$0[3*vertices.v2+1]),i$jscomp$0.push(triangleProperty$jscomp$0[3*vertices.v2+2]),i$jscomp$0.push(triangleProperty$jscomp$0[3*vertices.v3]),i$jscomp$0.push(triangleProperty$jscomp$0[3*vertices.v3+1]),i$jscomp$0.push(triangleProperty$jscomp$0[3*vertices.v3+2]),l$jscomp$0.push(pindex[2*vertices.p1]),l$jscomp$0.push(pindex[2*vertices.p1+1]),l$jscomp$0.push(pindex[2*vertices.p2]),l$jscomp$0.push(pindex[2*\nvertices.p2+1]),l$jscomp$0.push(pindex[2*vertices.p3]),l$jscomp$0.push(pindex[2*vertices.p3+1]);triangleProperties$jscomp$0.setAttribute(\"position\",new _three.Float32BufferAttribute(i$jscomp$0,3));triangleProperties$jscomp$0.setAttribute(\"uv\",new _three.Float32BufferAttribute(l$jscomp$0,2));resourceId=getBuild(resourceId,objectData,materialMap,triangleProperties$jscomp$1,objectPindex,buildTexture);resourceId=new _three.MeshPhongMaterial({map:resourceId,flatShading:!0});triangleProperties$jscomp$0=\nnew _three.Mesh(triangleProperties$jscomp$0,resourceId);pid.call(triangleProperty,triangleProperties$jscomp$0);break;case \"vertexColors\":triangleProperty=triangleProperties;pid=triangleProperty.push;objectPindex=modelData.resources.colorgroup[resourceId];resourceId=triangleProperties$jscomp$0;triangleProperties$jscomp$1=meshData;textureData=objectData$jscomp$0;triangleProperties$jscomp$0=new _three.BufferGeometry;objectData=[];materialMap=[];triangleProperties$jscomp$1=triangleProperties$jscomp$1.vertices;\nobjectPindex=objectPindex.colors;i$jscomp$0=0;for(l$jscomp$0=resourceId.length;i$jscomp$0<l$jscomp$0;i$jscomp$0++)triangleProperty$jscomp$0=resourceId[i$jscomp$0],pindex=triangleProperty$jscomp$0.v1,geometry=triangleProperty$jscomp$0.v2,positionData=triangleProperty$jscomp$0.v3,objectData.push(triangleProperties$jscomp$1[3*pindex]),objectData.push(triangleProperties$jscomp$1[3*pindex+1]),objectData.push(triangleProperties$jscomp$1[3*pindex+2]),objectData.push(triangleProperties$jscomp$1[3*geometry]),\nobjectData.push(triangleProperties$jscomp$1[3*geometry+1]),objectData.push(triangleProperties$jscomp$1[3*geometry+2]),objectData.push(triangleProperties$jscomp$1[3*positionData]),objectData.push(triangleProperties$jscomp$1[3*positionData+1]),objectData.push(triangleProperties$jscomp$1[3*positionData+2]),pindex=void 0!==triangleProperty$jscomp$0.p1?triangleProperty$jscomp$0.p1:textureData.pindex,geometry=void 0!==triangleProperty$jscomp$0.p2?triangleProperty$jscomp$0.p2:pindex,triangleProperty$jscomp$0=\nvoid 0!==triangleProperty$jscomp$0.p3?triangleProperty$jscomp$0.p3:pindex,materialMap.push(objectPindex[3*pindex]),materialMap.push(objectPindex[3*pindex+1]),materialMap.push(objectPindex[3*pindex+2]),materialMap.push(objectPindex[3*geometry]),materialMap.push(objectPindex[3*geometry+1]),materialMap.push(objectPindex[3*geometry+2]),materialMap.push(objectPindex[3*triangleProperty$jscomp$0]),materialMap.push(objectPindex[3*triangleProperty$jscomp$0+1]),materialMap.push(objectPindex[3*triangleProperty$jscomp$0+\n2]);triangleProperties$jscomp$0.setAttribute(\"position\",new _three.Float32BufferAttribute(objectData,3));triangleProperties$jscomp$0.setAttribute(\"color\",new _three.Float32BufferAttribute(materialMap,3));resourceId=new _three.MeshPhongMaterial({vertexColors:!0,flatShading:!0});triangleProperties$jscomp$0=new _three.Mesh(triangleProperties$jscomp$0,resourceId);pid.call(triangleProperty,triangleProperties$jscomp$0);break;case \"default\":triangleProperty=triangleProperties;pid=triangleProperty.push;resourceId=\nmeshData;triangleProperties$jscomp$0=new _three.BufferGeometry;triangleProperties$jscomp$0.setIndex(new _three.BufferAttribute(resourceId.triangles,1));triangleProperties$jscomp$0.setAttribute(\"position\",new _three.BufferAttribute(resourceId.vertices,3));resourceId=new _three.MeshPhongMaterial({color:11184895,flatShading:!0});triangleProperties$jscomp$0=new _three.Mesh(triangleProperties$jscomp$0,resourceId);pid.call(triangleProperty,triangleProperties$jscomp$0);break;default:console.error(\"THREE.3MFLoader: Unsupported resource type.\")}}meshData=\n0;for(objects=triangleProperties.length;meshData<objects;meshData++)group.add(triangleProperties[meshData]);return group}function getBuild(data,objects,modelData,textureData,objectData,builder){if(void 0!==data.build)return data.build;data.build=builder(data,objects,modelData,textureData,objectData);return data.build}function buildBasematerial(materialData,objects,modelData){objects=materialData.displaypropertiesid;modelData=modelData.resources.pbmetallicdisplayproperties;null!==objects&&void 0!==\nmodelData[objects]?(modelData=modelData[objects].data[materialData.index],modelData=new _three.MeshStandardMaterial({flatShading:!0,roughness:modelData.roughness,metalness:modelData.metallicness})):modelData=new _three.MeshPhongMaterial({flatShading:!0});modelData.name=materialData.name;materialData=materialData.displaycolor;objects=materialData.substring(0,7);modelData.color.setStyle(objects);modelData.color.convertSRGBToLinear();9===materialData.length&&(modelData.opacity=parseInt(materialData.charAt(7)+\nmaterialData.charAt(8),16)/255);return modelData}function buildComposite(compositeData,objects,modelData,textureData){for(var composite=new _three.Group,j=0;j<compositeData.length;j++){var component=compositeData[j],_build=objects[component.objectId];void 0===_build&&(buildObject(component.objectId,objects,modelData,textureData),_build=objects[component.objectId]);_build=_build.clone();(component=component.transform)&&_build.applyMatrix4(component);composite.add(_build)}return composite}function buildObject(objectId,\nobjects,modelData,textureData){objectId=modelData.resources.object[objectId];if(objectId.mesh){var meshData=objectId.mesh;var extensions=modelData.extensions,modelXml=modelData.xml;if(extensions){for(var availableExtensions=[],keys=Object.keys(extensions),i=0;i<keys.length;i++)for(var ns=keys[i],j=0;j<scope.availableExtensions.length;j++){var extension=scope.availableExtensions[j];extension.ns===ns&&availableExtensions.push(extension)}for(keys=0;keys<availableExtensions.length;keys++)i=availableExtensions[keys],\ni.apply(modelXml,extensions[i.ns],meshData)}objects[objectId.id]=getBuild(meshData,objects,modelData,textureData,objectId,buildGroup)}else objects[objectId.id]=getBuild(objectId.components,objects,modelData,textureData,objectId,buildComposite)}var scope=this,textureLoader=new _three.TextureLoader(this.manager);data$jscomp$0=function(data){var zip=null,file=null,relsName,modelRelsName,modelPartNames=[],texturesPartNames=[],modelParts={},texturesParts={};try{zip=(0,_fflate.unzipSync)(new Uint8Array(data))}catch(e){if(e instanceof\nReferenceError)return console.error(\"THREE.3MFLoader: fflate missing and file is compressed.\"),null}for(file in zip)file.match(/_rels\\/.rels$/)?relsName=file:file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)?modelRelsName=file:file.match(/^3D\\/.*\\.model$/)?modelPartNames.push(file):file.match(/^3D\\/Metadata\\/.*\\.xml$/)||(file.match(/^3D\\/Textures?\\/.*/)?texturesPartNames.push(file):file.match(/^3D\\/Other\\/.*/));var relsFileText=_three.LoaderUtils.decodeText(zip[relsName]),rels=parseRelsXml(relsFileText);\nif(modelRelsName){var _relsFileText=_three.LoaderUtils.decodeText(zip[modelRelsName]);var modelRels=parseRelsXml(_relsFileText)}for(var i=0;i<modelPartNames.length;i++){var modelPart=modelPartNames[i],fileText=_three.LoaderUtils.decodeText(zip[modelPart]),xmlData=(new DOMParser).parseFromString(fileText,\"application/xml\");\"model\"!==xmlData.documentElement.nodeName.toLowerCase()&&console.error(\"THREE.3MFLoader: Error loading 3MF - no 3MF document found: \",modelPart);for(var modelNode=xmlData.querySelector(\"model\"),\nextensions={},_i=0;_i<modelNode.attributes.length;_i++){var attr=modelNode.attributes[_i];attr.name.match(/^xmlns:(.+)$/)&&(extensions[attr.value]=RegExp.$1)}var modelNode$jscomp$0=modelNode,modelData$jscomp$0={unit:modelNode$jscomp$0.getAttribute(\"unit\")||\"millimeter\"},metadataNodes=modelNode$jscomp$0.querySelectorAll(\"metadata\");if(metadataNodes){for(var metadataNodes$jscomp$0=metadataNodes,metadataData={},i$jscomp$0=0;i$jscomp$0<metadataNodes$jscomp$0.length;i$jscomp$0++){var metadataNode=metadataNodes$jscomp$0[i$jscomp$0],\nname=metadataNode.getAttribute(\"name\");0<=\"Title Designer Description Copyright LicenseTerms Rating CreationDate ModificationDate\".split(\" \").indexOf(name)&&(metadataData[name]=metadataNode.textContent)}modelData$jscomp$0.metadata=metadataData}var resourcesNode=modelNode$jscomp$0.querySelector(\"resources\");if(resourcesNode){for(var resourcesNode$jscomp$0=resourcesNode,resourcesData={basematerials:{}},basematerialsNodes=resourcesNode$jscomp$0.querySelectorAll(\"basematerials\"),i$jscomp$1=0;i$jscomp$1<\nbasematerialsNodes.length;i$jscomp$1++){for(var basematerialsData,basematerialsNode=basematerialsNodes[i$jscomp$1],basematerialsData$jscomp$0={id:basematerialsNode.getAttribute(\"id\"),basematerials:[]},basematerialNodes=basematerialsNode.querySelectorAll(\"base\"),i$jscomp$2=0;i$jscomp$2<basematerialNodes.length;i$jscomp$2++){var basematerialNode=basematerialNodes[i$jscomp$2],basematerialData={};basematerialData.name=basematerialNode.getAttribute(\"name\");basematerialData.displaycolor=basematerialNode.getAttribute(\"displaycolor\");\nbasematerialData.displaypropertiesid=basematerialNode.getAttribute(\"displaypropertiesid\");var basematerialData$jscomp$0=basematerialData;basematerialData$jscomp$0.index=i$jscomp$2;basematerialsData$jscomp$0.basematerials.push(basematerialData$jscomp$0)}basematerialsData=basematerialsData$jscomp$0;resourcesData.basematerials[basematerialsData.id]=basematerialsData}resourcesData.texture2d={};for(var textures2DNodes=resourcesNode$jscomp$0.querySelectorAll(\"texture2d\"),_i4=0;_i4<textures2DNodes.length;_i4++){var texture2DNode=\ntextures2DNodes[_i4];var texture2DData={id:texture2DNode.getAttribute(\"id\"),path:texture2DNode.getAttribute(\"path\"),contenttype:texture2DNode.getAttribute(\"contenttype\"),tilestyleu:texture2DNode.getAttribute(\"tilestyleu\"),tilestylev:texture2DNode.getAttribute(\"tilestylev\"),filter:texture2DNode.getAttribute(\"filter\")};resourcesData.texture2d[texture2DData.id]=texture2DData}resourcesData.colorgroup={};for(var colorGroupNodes=resourcesNode$jscomp$0.querySelectorAll(\"colorgroup\"),_i5=0;_i5<colorGroupNodes.length;_i5++){for(var colorGroupData,\ncolorGroupNode=colorGroupNodes[_i5],colorGroupData$jscomp$0={id:colorGroupNode.getAttribute(\"id\"),displaypropertiesid:colorGroupNode.getAttribute(\"displaypropertiesid\")},colorNodes=colorGroupNode.querySelectorAll(\"color\"),colors=[],colorObject=new _three.Color,i$jscomp$3=0;i$jscomp$3<colorNodes.length;i$jscomp$3++){var color=colorNodes[i$jscomp$3].getAttribute(\"color\");colorObject.setStyle(color.substring(0,7));colorObject.convertSRGBToLinear();colors.push(colorObject.r,colorObject.g,colorObject.b)}colorGroupData$jscomp$0.colors=\nnew Float32Array(colors);colorGroupData=colorGroupData$jscomp$0;resourcesData.colorgroup[colorGroupData.id]=colorGroupData}resourcesData.pbmetallicdisplayproperties={};for(var pbmetallicdisplaypropertiesNodes=resourcesNode$jscomp$0.querySelectorAll(\"pbmetallicdisplayproperties\"),_i6=0;_i6<pbmetallicdisplaypropertiesNodes.length;_i6++){for(var pbmetallicdisplaypropertiesData,metallicDisplaypropetiesNode=pbmetallicdisplaypropertiesNodes[_i6],metallicDisplaypropertiesData={id:metallicDisplaypropetiesNode.getAttribute(\"id\")},\nmetallicNodes=metallicDisplaypropetiesNode.querySelectorAll(\"pbmetallic\"),metallicData=[],i$jscomp$4=0;i$jscomp$4<metallicNodes.length;i$jscomp$4++){var metallicNode=metallicNodes[i$jscomp$4];metallicData.push({name:metallicNode.getAttribute(\"name\"),metallicness:parseFloat(metallicNode.getAttribute(\"metallicness\")),roughness:parseFloat(metallicNode.getAttribute(\"roughness\"))})}metallicDisplaypropertiesData.data=metallicData;pbmetallicdisplaypropertiesData=metallicDisplaypropertiesData;resourcesData.pbmetallicdisplayproperties[pbmetallicdisplaypropertiesData.id]=\npbmetallicdisplaypropertiesData}resourcesData.texture2dgroup={};for(var textures2DGroupNodes=resourcesNode$jscomp$0.querySelectorAll(\"texture2dgroup\"),_i7=0;_i7<textures2DGroupNodes.length;_i7++){for(var textures2DGroupData,texture2DGroupNode=textures2DGroupNodes[_i7],texture2DGroupData={id:texture2DGroupNode.getAttribute(\"id\"),texid:texture2DGroupNode.getAttribute(\"texid\"),displaypropertiesid:texture2DGroupNode.getAttribute(\"displaypropertiesid\")},tex2coordNodes=texture2DGroupNode.querySelectorAll(\"tex2coord\"),\nuvs=[],i$jscomp$5=0;i$jscomp$5<tex2coordNodes.length;i$jscomp$5++){var tex2coordNode=tex2coordNodes[i$jscomp$5],u=tex2coordNode.getAttribute(\"u\"),v=tex2coordNode.getAttribute(\"v\");uvs.push(parseFloat(u),parseFloat(v))}texture2DGroupData.uvs=new Float32Array(uvs);textures2DGroupData=texture2DGroupData;resourcesData.texture2dgroup[textures2DGroupData.id]=textures2DGroupData}resourcesData.object={};for(var objectNodes=resourcesNode$jscomp$0.querySelectorAll(\"object\"),_i8=0;_i8<objectNodes.length;_i8++){var objectNode=\nobjectNodes[_i8],objectData={type:objectNode.getAttribute(\"type\")},id=objectNode.getAttribute(\"id\");id&&(objectData.id=id);var pid=objectNode.getAttribute(\"pid\");pid&&(objectData.pid=pid);var pindex=objectNode.getAttribute(\"pindex\");pindex&&(objectData.pindex=pindex);var thumbnail=objectNode.getAttribute(\"thumbnail\");thumbnail&&(objectData.thumbnail=thumbnail);var partnumber=objectNode.getAttribute(\"partnumber\");partnumber&&(objectData.partnumber=partnumber);var name$jscomp$0=objectNode.getAttribute(\"name\");\nname$jscomp$0&&(objectData.name=name$jscomp$0);var meshNode=objectNode.querySelector(\"mesh\");if(meshNode){for(var meshNode$jscomp$0=meshNode,meshData={},vertices=[],vertexNodes=meshNode$jscomp$0.querySelectorAll(\"vertices vertex\"),i$jscomp$6=0;i$jscomp$6<vertexNodes.length;i$jscomp$6++){var vertexNode=vertexNodes[i$jscomp$6],x=vertexNode.getAttribute(\"x\"),y=vertexNode.getAttribute(\"y\"),z=vertexNode.getAttribute(\"z\");vertices.push(parseFloat(x),parseFloat(y),parseFloat(z))}meshData.vertices=new Float32Array(vertices);\nfor(var triangleProperties=[],triangles=[],triangleNodes=meshNode$jscomp$0.querySelectorAll(\"triangles triangle\"),_i3=0;_i3<triangleNodes.length;_i3++){var triangleNode=triangleNodes[_i3],v1=triangleNode.getAttribute(\"v1\"),v2=triangleNode.getAttribute(\"v2\"),v3=triangleNode.getAttribute(\"v3\"),p1=triangleNode.getAttribute(\"p1\"),p2=triangleNode.getAttribute(\"p2\"),p3=triangleNode.getAttribute(\"p3\"),pid$jscomp$0=triangleNode.getAttribute(\"pid\"),triangleProperty={};triangleProperty.v1=parseInt(v1,10);triangleProperty.v2=\nparseInt(v2,10);triangleProperty.v3=parseInt(v3,10);triangles.push(triangleProperty.v1,triangleProperty.v2,triangleProperty.v3);p1&&(triangleProperty.p1=parseInt(p1,10));p2&&(triangleProperty.p2=parseInt(p2,10));p3&&(triangleProperty.p3=parseInt(p3,10));pid$jscomp$0&&(triangleProperty.pid=pid$jscomp$0);0<Object.keys(triangleProperty).length&&triangleProperties.push(triangleProperty)}meshData.triangleProperties=triangleProperties;meshData.triangles=new Uint32Array(triangles);objectData.mesh=meshData}var componentsNode=\nobjectNode.querySelector(\"components\");if(componentsNode){for(var components=[],componentNodes=componentsNode.querySelectorAll(\"component\"),i$jscomp$7=0;i$jscomp$7<componentNodes.length;i$jscomp$7++){var componentNode=componentNodes[i$jscomp$7],componentData={};componentData.objectId=componentNode.getAttribute(\"objectid\");var transform=componentNode.getAttribute(\"transform\");transform&&(componentData.transform=parseTransform(transform));var componentData$jscomp$0=componentData;components.push(componentData$jscomp$0)}objectData.components=\ncomponents}var objectData$jscomp$0=objectData;resourcesData.object[objectData$jscomp$0.id]=objectData$jscomp$0}modelData$jscomp$0.resources=resourcesData}var buildNode=modelNode$jscomp$0.querySelector(\"build\");if(buildNode){for(var buildData=[],itemNodes=buildNode.querySelectorAll(\"item\"),i$jscomp$8=0;i$jscomp$8<itemNodes.length;i$jscomp$8++){var itemNode=itemNodes[i$jscomp$8],buildItem={objectId:itemNode.getAttribute(\"objectid\")},transform$jscomp$0=itemNode.getAttribute(\"transform\");transform$jscomp$0&&\n(buildItem.transform=parseTransform(transform$jscomp$0));buildData.push(buildItem)}modelData$jscomp$0.build=buildData}var modelData=modelData$jscomp$0;modelData.xml=modelNode;0<Object.keys(extensions).length&&(modelData.extensions=extensions);modelParts[modelPart]=modelData}for(var _i2=0;_i2<texturesPartNames.length;_i2++){var texturesPartName=texturesPartNames[_i2];texturesParts[texturesPartName]=zip[texturesPartName].buffer}return{rels,modelRels,model:modelParts,printTicket:{},texture:texturesParts,\nother:{}}}(data$jscomp$0);return function(objects,data3mf){var group=new _three.Group;a:{var relationship=data3mf.rels;for(var i=0;i<relationship.length;i++){var rel=relationship[i];if(\"model\"===rel.target.split(\".\").pop().toLowerCase()){relationship=rel;break a}}relationship=void 0}data3mf=data3mf.model[relationship.target.substring(1)].build;for(relationship=0;relationship<data3mf.length;relationship++)rel=data3mf[relationship],i=objects[rel.objectId],(rel=rel.transform)&&i.applyMatrix4(rel),group.add(i);\nreturn group}(function(data3mf){var modelsData=data3mf.model,modelRels=data3mf.modelRels,objects={},modelsKeys=Object.keys(modelsData),textureData={};if(modelRels)for(var i=0,l=modelRels.length;i<l;i++){var modelRel=modelRels[i],textureKey=modelRel.target.substring(1);data3mf.texture[textureKey]&&(textureData[modelRel.target]=data3mf.texture[textureKey])}for(data3mf=0;data3mf<modelsKeys.length;data3mf++)for(modelRels=modelsData[modelsKeys[data3mf]],i=Object.keys(modelRels.resources.object),l=0;l<\ni.length;l++)buildObject(i[l],objects,modelRels,textureData);return objects}(data$jscomp$0),data$jscomp$0)}},{key:\"addExtension\",value:function(extension){this.availableExtensions.push(extension)}}]);return ThreeMFLoader}(_three.Loader);exports.ThreeMFLoader=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$loaders$3MFLoader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ThreeMFLoader = void 0;\n\nvar _three = require(\"three\");\n\nvar _fflate = require(\"fflate\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\nvar ThreeMFLoader =\n/*#__PURE__*/\nfunction (_Loader) {\n  _inherits(ThreeMFLoader, _Loader);\n\n  function ThreeMFLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, ThreeMFLoader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThreeMFLoader).call(this, manager));\n    _this.availableExtensions = [];\n    return _this;\n  }\n\n  _createClass(ThreeMFLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new _three.FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var scope = this;\n      var textureLoader = new _three.TextureLoader(this.manager);\n\n      function loadDocument(data) {\n        var zip = null;\n        var file = null;\n        var relsName;\n        var modelRelsName;\n        var modelPartNames = [];\n        var texturesPartNames = [];\n        var modelRels;\n        var modelParts = {};\n        var printTicketParts = {};\n        var texturesParts = {};\n        var otherParts = {};\n\n        try {\n          zip = (0, _fflate.unzipSync)(new Uint8Array(data)); // eslint-disable-line no-undef\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n\n        for (file in zip) {\n          if (file.match(/\\_rels\\/.rels$/)) {\n            relsName = file;\n          } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n            modelRelsName = file;\n          } else if (file.match(/^3D\\/.*\\.model$/)) {\n            modelPartNames.push(file);\n          } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) ;else if (file.match(/^3D\\/Textures?\\/.*/)) {\n            texturesPartNames.push(file);\n          } else if (file.match(/^3D\\/Other\\/.*/)) ;\n        } //\n\n\n        var relsView = zip[relsName];\n\n        var relsFileText = _three.LoaderUtils.decodeText(relsView);\n\n        var rels = parseRelsXml(relsFileText); //\n\n        if (modelRelsName) {\n          var _relsView = zip[modelRelsName];\n\n          var _relsFileText = _three.LoaderUtils.decodeText(_relsView);\n\n          modelRels = parseRelsXml(_relsFileText);\n        } //\n\n\n        for (var i = 0; i < modelPartNames.length; i++) {\n          var modelPart = modelPartNames[i];\n          var view = zip[modelPart];\n\n          var fileText = _three.LoaderUtils.decodeText(view);\n\n          var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n          if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n            console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n          }\n\n          var modelNode = xmlData.querySelector('model');\n          var extensions = {};\n\n          for (var _i = 0; _i < modelNode.attributes.length; _i++) {\n            var attr = modelNode.attributes[_i];\n\n            if (attr.name.match(/^xmlns:(.+)$/)) {\n              extensions[attr.value] = RegExp.$1;\n            }\n          }\n\n          var modelData = parseModelNode(modelNode);\n          modelData['xml'] = modelNode;\n\n          if (0 < Object.keys(extensions).length) {\n            modelData['extensions'] = extensions;\n          }\n\n          modelParts[modelPart] = modelData;\n        } //\n\n\n        for (var _i2 = 0; _i2 < texturesPartNames.length; _i2++) {\n          var texturesPartName = texturesPartNames[_i2];\n          texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n        }\n\n        return {\n          rels: rels,\n          modelRels: modelRels,\n          model: modelParts,\n          printTicket: printTicketParts,\n          texture: texturesParts,\n          other: otherParts\n        };\n      }\n\n      function parseRelsXml(relsFileText) {\n        var relationships = [];\n        var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n        var relsNodes = relsXmlData.querySelectorAll('Relationship');\n\n        for (var i = 0; i < relsNodes.length; i++) {\n          var relsNode = relsNodes[i];\n          var relationship = {\n            target: relsNode.getAttribute('Target'),\n            //required\n            id: relsNode.getAttribute('Id'),\n            //required\n            type: relsNode.getAttribute('Type') //required\n\n          };\n          relationships.push(relationship);\n        }\n\n        return relationships;\n      }\n\n      function parseMetadataNodes(metadataNodes) {\n        var metadataData = {};\n\n        for (var i = 0; i < metadataNodes.length; i++) {\n          var metadataNode = metadataNodes[i];\n          var name = metadataNode.getAttribute('name');\n          var validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n\n          if (0 <= validNames.indexOf(name)) {\n            metadataData[name] = metadataNode.textContent;\n          }\n        }\n\n        return metadataData;\n      }\n\n      function parseBasematerialsNode(basematerialsNode) {\n        var basematerialsData = {\n          id: basematerialsNode.getAttribute('id'),\n          // required\n          basematerials: []\n        };\n        var basematerialNodes = basematerialsNode.querySelectorAll('base');\n\n        for (var i = 0; i < basematerialNodes.length; i++) {\n          var basematerialNode = basematerialNodes[i];\n          var basematerialData = parseBasematerialNode(basematerialNode);\n          basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n          basematerialsData.basematerials.push(basematerialData);\n        }\n\n        return basematerialsData;\n      }\n\n      function parseTexture2DNode(texture2DNode) {\n        var texture2dData = {\n          id: texture2DNode.getAttribute('id'),\n          // required\n          path: texture2DNode.getAttribute('path'),\n          // required\n          contenttype: texture2DNode.getAttribute('contenttype'),\n          // required\n          tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n          tilestylev: texture2DNode.getAttribute('tilestylev'),\n          filter: texture2DNode.getAttribute('filter')\n        };\n        return texture2dData;\n      }\n\n      function parseTextures2DGroupNode(texture2DGroupNode) {\n        var texture2DGroupData = {\n          id: texture2DGroupNode.getAttribute('id'),\n          // required\n          texid: texture2DGroupNode.getAttribute('texid'),\n          // required\n          displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n        };\n        var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n        var uvs = [];\n\n        for (var i = 0; i < tex2coordNodes.length; i++) {\n          var tex2coordNode = tex2coordNodes[i];\n          var u = tex2coordNode.getAttribute('u');\n          var v = tex2coordNode.getAttribute('v');\n          uvs.push(parseFloat(u), parseFloat(v));\n        }\n\n        texture2DGroupData['uvs'] = new Float32Array(uvs);\n        return texture2DGroupData;\n      }\n\n      function parseColorGroupNode(colorGroupNode) {\n        var colorGroupData = {\n          id: colorGroupNode.getAttribute('id'),\n          // required\n          displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n        };\n        var colorNodes = colorGroupNode.querySelectorAll('color');\n        var colors = [];\n        var colorObject = new _three.Color();\n\n        for (var i = 0; i < colorNodes.length; i++) {\n          var colorNode = colorNodes[i];\n          var color = colorNode.getAttribute('color');\n          colorObject.setStyle(color.substring(0, 7));\n          colorObject.convertSRGBToLinear(); // color is in sRGB\n\n          colors.push(colorObject.r, colorObject.g, colorObject.b);\n        }\n\n        colorGroupData['colors'] = new Float32Array(colors);\n        return colorGroupData;\n      }\n\n      function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n        var metallicDisplaypropertiesData = {\n          id: metallicDisplaypropetiesNode.getAttribute('id') // required\n\n        };\n        var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n        var metallicData = [];\n\n        for (var i = 0; i < metallicNodes.length; i++) {\n          var metallicNode = metallicNodes[i];\n          metallicData.push({\n            name: metallicNode.getAttribute('name'),\n            // required\n            metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n            // required\n            roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n\n          });\n        }\n\n        metallicDisplaypropertiesData.data = metallicData;\n        return metallicDisplaypropertiesData;\n      }\n\n      function parseBasematerialNode(basematerialNode) {\n        var basematerialData = {};\n        basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n        basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n        basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n        return basematerialData;\n      }\n\n      function parseMeshNode(meshNode) {\n        var meshData = {};\n        var vertices = [];\n        var vertexNodes = meshNode.querySelectorAll('vertices vertex');\n\n        for (var i = 0; i < vertexNodes.length; i++) {\n          var vertexNode = vertexNodes[i];\n          var x = vertexNode.getAttribute('x');\n          var y = vertexNode.getAttribute('y');\n          var z = vertexNode.getAttribute('z');\n          vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n        }\n\n        meshData['vertices'] = new Float32Array(vertices);\n        var triangleProperties = [];\n        var triangles = [];\n        var triangleNodes = meshNode.querySelectorAll('triangles triangle');\n\n        for (var _i3 = 0; _i3 < triangleNodes.length; _i3++) {\n          var triangleNode = triangleNodes[_i3];\n          var v1 = triangleNode.getAttribute('v1');\n          var v2 = triangleNode.getAttribute('v2');\n          var v3 = triangleNode.getAttribute('v3');\n          var p1 = triangleNode.getAttribute('p1');\n          var p2 = triangleNode.getAttribute('p2');\n          var p3 = triangleNode.getAttribute('p3');\n          var pid = triangleNode.getAttribute('pid');\n          var triangleProperty = {};\n          triangleProperty['v1'] = parseInt(v1, 10);\n          triangleProperty['v2'] = parseInt(v2, 10);\n          triangleProperty['v3'] = parseInt(v3, 10);\n          triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n          if (p1) {\n            triangleProperty['p1'] = parseInt(p1, 10);\n          }\n\n          if (p2) {\n            triangleProperty['p2'] = parseInt(p2, 10);\n          }\n\n          if (p3) {\n            triangleProperty['p3'] = parseInt(p3, 10);\n          }\n\n          if (pid) {\n            triangleProperty['pid'] = pid;\n          }\n\n          if (0 < Object.keys(triangleProperty).length) {\n            triangleProperties.push(triangleProperty);\n          }\n        }\n\n        meshData['triangleProperties'] = triangleProperties;\n        meshData['triangles'] = new Uint32Array(triangles);\n        return meshData;\n      }\n\n      function parseComponentsNode(componentsNode) {\n        var components = [];\n        var componentNodes = componentsNode.querySelectorAll('component');\n\n        for (var i = 0; i < componentNodes.length; i++) {\n          var componentNode = componentNodes[i];\n          var componentData = parseComponentNode(componentNode);\n          components.push(componentData);\n        }\n\n        return components;\n      }\n\n      function parseComponentNode(componentNode) {\n        var componentData = {};\n        componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n        var transform = componentNode.getAttribute('transform');\n\n        if (transform) {\n          componentData['transform'] = parseTransform(transform);\n        }\n\n        return componentData;\n      }\n\n      function parseTransform(transform) {\n        var t = [];\n        transform.split(' ').forEach(function (s) {\n          t.push(parseFloat(s));\n        });\n        var matrix = new _three.Matrix4();\n        matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n        return matrix;\n      }\n\n      function parseObjectNode(objectNode) {\n        var objectData = {\n          type: objectNode.getAttribute('type')\n        };\n        var id = objectNode.getAttribute('id');\n\n        if (id) {\n          objectData['id'] = id;\n        }\n\n        var pid = objectNode.getAttribute('pid');\n\n        if (pid) {\n          objectData['pid'] = pid;\n        }\n\n        var pindex = objectNode.getAttribute('pindex');\n\n        if (pindex) {\n          objectData['pindex'] = pindex;\n        }\n\n        var thumbnail = objectNode.getAttribute('thumbnail');\n\n        if (thumbnail) {\n          objectData['thumbnail'] = thumbnail;\n        }\n\n        var partnumber = objectNode.getAttribute('partnumber');\n\n        if (partnumber) {\n          objectData['partnumber'] = partnumber;\n        }\n\n        var name = objectNode.getAttribute('name');\n\n        if (name) {\n          objectData['name'] = name;\n        }\n\n        var meshNode = objectNode.querySelector('mesh');\n\n        if (meshNode) {\n          objectData['mesh'] = parseMeshNode(meshNode);\n        }\n\n        var componentsNode = objectNode.querySelector('components');\n\n        if (componentsNode) {\n          objectData['components'] = parseComponentsNode(componentsNode);\n        }\n\n        return objectData;\n      }\n\n      function parseResourcesNode(resourcesNode) {\n        var resourcesData = {};\n        resourcesData['basematerials'] = {};\n        var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n\n        for (var i = 0; i < basematerialsNodes.length; i++) {\n          var basematerialsNode = basematerialsNodes[i];\n          var basematerialsData = parseBasematerialsNode(basematerialsNode);\n          resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n        } //\n\n\n        resourcesData['texture2d'] = {};\n        var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n\n        for (var _i4 = 0; _i4 < textures2DNodes.length; _i4++) {\n          var textures2DNode = textures2DNodes[_i4];\n          var texture2DData = parseTexture2DNode(textures2DNode);\n          resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n        } //\n\n\n        resourcesData['colorgroup'] = {};\n        var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n\n        for (var _i5 = 0; _i5 < colorGroupNodes.length; _i5++) {\n          var colorGroupNode = colorGroupNodes[_i5];\n          var colorGroupData = parseColorGroupNode(colorGroupNode);\n          resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n        } //\n\n\n        resourcesData['pbmetallicdisplayproperties'] = {};\n        var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n\n        for (var _i6 = 0; _i6 < pbmetallicdisplaypropertiesNodes.length; _i6++) {\n          var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[_i6];\n          var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n          resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n        } //\n\n\n        resourcesData['texture2dgroup'] = {};\n        var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n\n        for (var _i7 = 0; _i7 < textures2DGroupNodes.length; _i7++) {\n          var textures2DGroupNode = textures2DGroupNodes[_i7];\n          var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n          resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n        } //\n\n\n        resourcesData['object'] = {};\n        var objectNodes = resourcesNode.querySelectorAll('object');\n\n        for (var _i8 = 0; _i8 < objectNodes.length; _i8++) {\n          var objectNode = objectNodes[_i8];\n          var objectData = parseObjectNode(objectNode);\n          resourcesData['object'][objectData['id']] = objectData;\n        }\n\n        return resourcesData;\n      }\n\n      function parseBuildNode(buildNode) {\n        var buildData = [];\n        var itemNodes = buildNode.querySelectorAll('item');\n\n        for (var i = 0; i < itemNodes.length; i++) {\n          var itemNode = itemNodes[i];\n          var buildItem = {\n            objectId: itemNode.getAttribute('objectid')\n          };\n          var transform = itemNode.getAttribute('transform');\n\n          if (transform) {\n            buildItem['transform'] = parseTransform(transform);\n          }\n\n          buildData.push(buildItem);\n        }\n\n        return buildData;\n      }\n\n      function parseModelNode(modelNode) {\n        var modelData = {\n          unit: modelNode.getAttribute('unit') || 'millimeter'\n        };\n        var metadataNodes = modelNode.querySelectorAll('metadata');\n\n        if (metadataNodes) {\n          modelData['metadata'] = parseMetadataNodes(metadataNodes);\n        }\n\n        var resourcesNode = modelNode.querySelector('resources');\n\n        if (resourcesNode) {\n          modelData['resources'] = parseResourcesNode(resourcesNode);\n        }\n\n        var buildNode = modelNode.querySelector('build');\n\n        if (buildNode) {\n          modelData['build'] = parseBuildNode(buildNode);\n        }\n\n        return modelData;\n      }\n\n      function buildTexture(texture2dgroup, objects, modelData, textureData) {\n        var texid = texture2dgroup.texid;\n        var texture2ds = modelData.resources.texture2d;\n        var texture2d = texture2ds[texid];\n\n        if (texture2d) {\n          var _data = textureData[texture2d.path];\n          var type = texture2d.contenttype;\n          var blob = new Blob([_data], {\n            type: type\n          });\n          var sourceURI = URL.createObjectURL(blob);\n          var texture = textureLoader.load(sourceURI, function () {\n            URL.revokeObjectURL(sourceURI);\n          });\n          texture.encoding = _three.sRGBEncoding; // texture parameters\n\n          switch (texture2d.tilestyleu) {\n            case 'wrap':\n              texture.wrapS = _three.RepeatWrapping;\n              break;\n\n            case 'mirror':\n              texture.wrapS = _three.MirroredRepeatWrapping;\n              break;\n\n            case 'none':\n            case 'clamp':\n              texture.wrapS = _three.ClampToEdgeWrapping;\n              break;\n\n            default:\n              texture.wrapS = _three.RepeatWrapping;\n          }\n\n          switch (texture2d.tilestylev) {\n            case 'wrap':\n              texture.wrapT = _three.RepeatWrapping;\n              break;\n\n            case 'mirror':\n              texture.wrapT = _three.MirroredRepeatWrapping;\n              break;\n\n            case 'none':\n            case 'clamp':\n              texture.wrapT = _three.ClampToEdgeWrapping;\n              break;\n\n            default:\n              texture.wrapT = _three.RepeatWrapping;\n          }\n\n          switch (texture2d.filter) {\n            case 'auto':\n              texture.magFilter = _three.LinearFilter;\n              texture.minFilter = _three.LinearMipmapLinearFilter;\n              break;\n\n            case 'linear':\n              texture.magFilter = _three.LinearFilter;\n              texture.minFilter = _three.LinearFilter;\n              break;\n\n            case 'nearest':\n              texture.magFilter = _three.NearestFilter;\n              texture.minFilter = _three.NearestFilter;\n              break;\n\n            default:\n              texture.magFilter = _three.LinearFilter;\n              texture.minFilter = _three.LinearMipmapLinearFilter;\n          }\n\n          return texture;\n        } else {\n          return null;\n        }\n      }\n\n      function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n        var objectPindex = objectData.pindex;\n        var materialMap = {};\n\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n          if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n          materialMap[pindex].push(triangleProperty);\n        } //\n\n\n        var keys = Object.keys(materialMap);\n        var meshes = [];\n\n        for (var _i9 = 0, _l = keys.length; _i9 < _l; _i9++) {\n          var materialIndex = keys[_i9];\n          var trianglePropertiesProps = materialMap[materialIndex];\n          var basematerialData = basematerials.basematerials[materialIndex];\n          var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n          var geometry = new _three.BufferGeometry();\n          var positionData = [];\n          var vertices = meshData.vertices;\n\n          for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n            var _triangleProperty = trianglePropertiesProps[j];\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 2]);\n          }\n\n          geometry.setAttribute('position', new _three.Float32BufferAttribute(positionData, 3)); //\n\n          var mesh = new _three.Mesh(geometry, material);\n          meshes.push(mesh);\n        }\n\n        return meshes;\n      }\n\n      function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n        // geometry\n        var geometry = new _three.BufferGeometry();\n        var positionData = [];\n        var uvData = [];\n        var vertices = meshData.vertices;\n        var uvs = texture2dgroup.uvs;\n\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n          uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n        }\n\n        geometry.setAttribute('position', new _three.Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute('uv', new _three.Float32BufferAttribute(uvData, 2)); // material\n\n        var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n        var material = new _three.MeshPhongMaterial({\n          map: texture,\n          flatShading: true\n        }); // mesh\n\n        var mesh = new _three.Mesh(geometry, material);\n        return mesh;\n      }\n\n      function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData) {\n        // geometry\n        var geometry = new _three.BufferGeometry();\n        var positionData = [];\n        var colorData = [];\n        var vertices = meshData.vertices;\n        var colors = colorgroup.colors;\n\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var v1 = triangleProperty.v1;\n          var v2 = triangleProperty.v2;\n          var v3 = triangleProperty.v3;\n          positionData.push(vertices[v1 * 3 + 0]);\n          positionData.push(vertices[v1 * 3 + 1]);\n          positionData.push(vertices[v1 * 3 + 2]);\n          positionData.push(vertices[v2 * 3 + 0]);\n          positionData.push(vertices[v2 * 3 + 1]);\n          positionData.push(vertices[v2 * 3 + 2]);\n          positionData.push(vertices[v3 * 3 + 0]);\n          positionData.push(vertices[v3 * 3 + 1]);\n          positionData.push(vertices[v3 * 3 + 2]); //\n\n          var p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n          var p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n          var p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n          colorData.push(colors[p1 * 3 + 0]);\n          colorData.push(colors[p1 * 3 + 1]);\n          colorData.push(colors[p1 * 3 + 2]);\n          colorData.push(colors[p2 * 3 + 0]);\n          colorData.push(colors[p2 * 3 + 1]);\n          colorData.push(colors[p2 * 3 + 2]);\n          colorData.push(colors[p3 * 3 + 0]);\n          colorData.push(colors[p3 * 3 + 1]);\n          colorData.push(colors[p3 * 3 + 2]);\n        }\n\n        geometry.setAttribute('position', new _three.Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute('color', new _three.Float32BufferAttribute(colorData, 3)); // material\n\n        var material = new _three.MeshPhongMaterial({\n          vertexColors: true,\n          flatShading: true\n        }); // mesh\n\n        var mesh = new _three.Mesh(geometry, material);\n        return mesh;\n      }\n\n      function buildDefaultMesh(meshData) {\n        var geometry = new _three.BufferGeometry();\n        geometry.setIndex(new _three.BufferAttribute(meshData['triangles'], 1));\n        geometry.setAttribute('position', new _three.BufferAttribute(meshData['vertices'], 3));\n        var material = new _three.MeshPhongMaterial({\n          color: 0xaaaaff,\n          flatShading: true\n        });\n        var mesh = new _three.Mesh(geometry, material);\n        return mesh;\n      }\n\n      function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\n        var keys = Object.keys(resourceMap);\n        var meshes = [];\n\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var resourceId = keys[i];\n          var triangleProperties = resourceMap[resourceId];\n          var resourceType = getResourceType(resourceId, modelData);\n\n          switch (resourceType) {\n            case 'material':\n              var basematerials = modelData.resources.basematerials[resourceId];\n              var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData);\n\n              for (var j = 0, jl = newMeshes.length; j < jl; j++) {\n                meshes.push(newMeshes[j]);\n              }\n\n              break;\n\n            case 'texture':\n              var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n              meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData));\n              break;\n\n            case 'vertexColors':\n              var colorgroup = modelData.resources.colorgroup[resourceId];\n              meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData));\n              break;\n\n            case 'default':\n              meshes.push(buildDefaultMesh(meshData));\n              break;\n\n            default:\n              console.error('THREE.3MFLoader: Unsupported resource type.');\n          }\n        }\n\n        return meshes;\n      }\n\n      function getResourceType(pid, modelData) {\n        if (modelData.resources.texture2dgroup[pid] !== undefined) {\n          return 'texture';\n        } else if (modelData.resources.basematerials[pid] !== undefined) {\n          return 'material';\n        } else if (modelData.resources.colorgroup[pid] !== undefined) {\n          return 'vertexColors';\n        } else if (pid === 'default') {\n          return 'default';\n        } else {\n          return undefined;\n        }\n      }\n\n      function analyzeObject(modelData, meshData, objectData) {\n        var resourceMap = {};\n        var triangleProperties = meshData['triangleProperties'];\n        var objectPid = objectData.pid;\n\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n          if (pid === undefined) pid = 'default';\n          if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n          resourceMap[pid].push(triangleProperty);\n        }\n\n        return resourceMap;\n      }\n\n      function buildGroup(meshData, objects, modelData, textureData, objectData) {\n        var group = new _three.Group();\n        var resourceMap = analyzeObject(modelData, meshData, objectData);\n        var meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData);\n\n        for (var i = 0, l = meshes.length; i < l; i++) {\n          group.add(meshes[i]);\n        }\n\n        return group;\n      }\n\n      function applyExtensions(extensions, meshData, modelXml) {\n        if (!extensions) {\n          return;\n        }\n\n        var availableExtensions = [];\n        var keys = Object.keys(extensions);\n\n        for (var i = 0; i < keys.length; i++) {\n          var ns = keys[i];\n\n          for (var j = 0; j < scope.availableExtensions.length; j++) {\n            var extension = scope.availableExtensions[j];\n\n            if (extension.ns === ns) {\n              availableExtensions.push(extension);\n            }\n          }\n        }\n\n        for (var _i10 = 0; _i10 < availableExtensions.length; _i10++) {\n          var _extension = availableExtensions[_i10];\n\n          _extension.apply(modelXml, extensions[_extension['ns']], meshData);\n        }\n      }\n\n      function getBuild(data, objects, modelData, textureData, objectData, builder) {\n        if (data.build !== undefined) return data.build;\n        data.build = builder(data, objects, modelData, textureData, objectData);\n        return data.build;\n      }\n\n      function buildBasematerial(materialData, objects, modelData) {\n        var material;\n        var displaypropertiesid = materialData.displaypropertiesid;\n        var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n        if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n          // metallic display property, use StandardMaterial\n          var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n          var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n          material = new _three.MeshStandardMaterial({\n            flatShading: true,\n            roughness: metallicData.roughness,\n            metalness: metallicData.metallicness\n          });\n        } else {\n          // otherwise use PhongMaterial\n          material = new _three.MeshPhongMaterial({\n            flatShading: true\n          });\n        }\n\n        material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n        var displaycolor = materialData.displaycolor;\n        var color = displaycolor.substring(0, 7);\n        material.color.setStyle(color);\n        material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n        // process alpha if set\n\n        if (displaycolor.length === 9) {\n          material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n        }\n\n        return material;\n      }\n\n      function buildComposite(compositeData, objects, modelData, textureData) {\n        var composite = new _three.Group();\n\n        for (var j = 0; j < compositeData.length; j++) {\n          var component = compositeData[j];\n          var _build = objects[component.objectId];\n\n          if (_build === undefined) {\n            buildObject(component.objectId, objects, modelData, textureData);\n            _build = objects[component.objectId];\n          }\n\n          var object3D = _build.clone(); // apply component transform\n\n\n          var transform = component.transform;\n\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n\n          composite.add(object3D);\n        }\n\n        return composite;\n      }\n\n      function buildObject(objectId, objects, modelData, textureData) {\n        var objectData = modelData['resources']['object'][objectId];\n\n        if (objectData['mesh']) {\n          var meshData = objectData['mesh'];\n          var extensions = modelData['extensions'];\n          var modelXml = modelData['xml'];\n          applyExtensions(extensions, meshData, modelXml);\n          objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n        } else {\n          var compositeData = objectData['components'];\n          objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n        }\n      }\n\n      function buildObjects(data3mf) {\n        var modelsData = data3mf.model;\n        var modelRels = data3mf.modelRels;\n        var objects = {};\n        var modelsKeys = Object.keys(modelsData);\n        var textureData = {}; // evaluate model relationships to textures\n\n        if (modelRels) {\n          for (var i = 0, l = modelRels.length; i < l; i++) {\n            var modelRel = modelRels[i];\n            var textureKey = modelRel.target.substring(1);\n\n            if (data3mf.texture[textureKey]) {\n              textureData[modelRel.target] = data3mf.texture[textureKey];\n            }\n          }\n        } // start build\n\n\n        for (var _i11 = 0; _i11 < modelsKeys.length; _i11++) {\n          var modelsKey = modelsKeys[_i11];\n          var modelData = modelsData[modelsKey];\n          var objectIds = Object.keys(modelData['resources']['object']);\n\n          for (var j = 0; j < objectIds.length; j++) {\n            var objectId = objectIds[j];\n            buildObject(objectId, objects, modelData, textureData);\n          }\n        }\n\n        return objects;\n      }\n\n      function fetch3DModelPart(rels) {\n        for (var i = 0; i < rels.length; i++) {\n          var rel = rels[i];\n          var extension = rel.target.split('.').pop();\n          if (extension.toLowerCase() === 'model') return rel;\n        }\n      }\n\n      function build(objects, data3mf) {\n        var group = new _three.Group();\n        var relationship = fetch3DModelPart(data3mf['rels']);\n        var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n\n        for (var i = 0; i < buildData.length; i++) {\n          var buildItem = buildData[i];\n          var object3D = objects[buildItem['objectId']]; // apply transform\n\n          var transform = buildItem['transform'];\n\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n\n          group.add(object3D);\n        }\n\n        return group;\n      }\n\n      var data3mf = loadDocument(data);\n      var objects = buildObjects(data3mf);\n      return build(objects, data3mf);\n    }\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extension) {\n      this.availableExtensions.push(extension);\n    }\n  }]);\n\n  return ThreeMFLoader;\n}(_three.Loader);\n\nexports.ThreeMFLoader = ThreeMFLoader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js","~$module$node_modules$fflate$esm$browser"]],"~:properties",["^5",["map","wrapS","objectId","model","index","rels","prototype","tilestylev","texture","key","printTicket","__esModule","path","flatShading","encoding","id","name","configurable","displaypropertiesid","value","enumerable","vertexColors","build","magFilter","modelRels","writable","filter","type","texid","wrapT","__proto__","other","target","tilestyleu","basematerials","unit","contenttype","metalness","ThreeMFLoader","minFilter","metallicness","roughness","data","color","opacity","availableExtensions","constructor"]],"~:compiled-at",1630917515877,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$loaders$3MFLoader.js\",\n\"lineCount\":52,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/loaders/3MFLoader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$loaders$3MFLoader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.ThreeMFLoader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _fflate = require(\\\"fflate\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/**\\n *\\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\\n *\\n * The following features from the core specification are supported:\\n *\\n * - 3D Models\\n * - Object Resources (Meshes and Components)\\n * - Material Resources (Base Materials)\\n *\\n * 3MF Materials and Properties Extension are only partially supported.\\n *\\n * - Texture 2D\\n * - Texture 2D Groups\\n * - Color Groups (Vertex Colors)\\n * - Metallic Display Properties (PBR)\\n */\\nvar ThreeMFLoader =\\n/*#__PURE__*/\\nfunction (_Loader) {\\n  _inherits(ThreeMFLoader, _Loader);\\n\\n  function ThreeMFLoader(manager) {\\n    var _this;\\n\\n    _classCallCheck(this, ThreeMFLoader);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThreeMFLoader).call(this, manager));\\n    _this.availableExtensions = [];\\n    return _this;\\n  }\\n\\n  _createClass(ThreeMFLoader, [{\\n    key: \\\"load\\\",\\n    value: function load(url, onLoad, onProgress, onError) {\\n      var scope = this;\\n      var loader = new _three.FileLoader(scope.manager);\\n      loader.setPath(scope.path);\\n      loader.setResponseType('arraybuffer');\\n      loader.setRequestHeader(scope.requestHeader);\\n      loader.setWithCredentials(scope.withCredentials);\\n      loader.load(url, function (buffer) {\\n        try {\\n          onLoad(scope.parse(buffer));\\n        } catch (e) {\\n          if (onError) {\\n            onError(e);\\n          } else {\\n            console.error(e);\\n          }\\n\\n          scope.manager.itemError(url);\\n        }\\n      }, onProgress, onError);\\n    }\\n  }, {\\n    key: \\\"parse\\\",\\n    value: function parse(data) {\\n      var scope = this;\\n      var textureLoader = new _three.TextureLoader(this.manager);\\n\\n      function loadDocument(data) {\\n        var zip = null;\\n        var file = null;\\n        var relsName;\\n        var modelRelsName;\\n        var modelPartNames = [];\\n        var texturesPartNames = [];\\n        var modelRels;\\n        var modelParts = {};\\n        var printTicketParts = {};\\n        var texturesParts = {};\\n        var otherParts = {};\\n\\n        try {\\n          zip = (0, _fflate.unzipSync)(new Uint8Array(data)); // eslint-disable-line no-undef\\n        } catch (e) {\\n          if (e instanceof ReferenceError) {\\n            console.error('THREE.3MFLoader: fflate missing and file is compressed.');\\n            return null;\\n          }\\n        }\\n\\n        for (file in zip) {\\n          if (file.match(/\\\\_rels\\\\/.rels$/)) {\\n            relsName = file;\\n          } else if (file.match(/3D\\\\/_rels\\\\/.*\\\\.model\\\\.rels$/)) {\\n            modelRelsName = file;\\n          } else if (file.match(/^3D\\\\/.*\\\\.model$/)) {\\n            modelPartNames.push(file);\\n          } else if (file.match(/^3D\\\\/Metadata\\\\/.*\\\\.xml$/)) ;else if (file.match(/^3D\\\\/Textures?\\\\/.*/)) {\\n            texturesPartNames.push(file);\\n          } else if (file.match(/^3D\\\\/Other\\\\/.*/)) ;\\n        } //\\n\\n\\n        var relsView = zip[relsName];\\n\\n        var relsFileText = _three.LoaderUtils.decodeText(relsView);\\n\\n        var rels = parseRelsXml(relsFileText); //\\n\\n        if (modelRelsName) {\\n          var _relsView = zip[modelRelsName];\\n\\n          var _relsFileText = _three.LoaderUtils.decodeText(_relsView);\\n\\n          modelRels = parseRelsXml(_relsFileText);\\n        } //\\n\\n\\n        for (var i = 0; i < modelPartNames.length; i++) {\\n          var modelPart = modelPartNames[i];\\n          var view = zip[modelPart];\\n\\n          var fileText = _three.LoaderUtils.decodeText(view);\\n\\n          var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\\n\\n          if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\\n            console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\\n          }\\n\\n          var modelNode = xmlData.querySelector('model');\\n          var extensions = {};\\n\\n          for (var _i = 0; _i < modelNode.attributes.length; _i++) {\\n            var attr = modelNode.attributes[_i];\\n\\n            if (attr.name.match(/^xmlns:(.+)$/)) {\\n              extensions[attr.value] = RegExp.$1;\\n            }\\n          }\\n\\n          var modelData = parseModelNode(modelNode);\\n          modelData['xml'] = modelNode;\\n\\n          if (0 < Object.keys(extensions).length) {\\n            modelData['extensions'] = extensions;\\n          }\\n\\n          modelParts[modelPart] = modelData;\\n        } //\\n\\n\\n        for (var _i2 = 0; _i2 < texturesPartNames.length; _i2++) {\\n          var texturesPartName = texturesPartNames[_i2];\\n          texturesParts[texturesPartName] = zip[texturesPartName].buffer;\\n        }\\n\\n        return {\\n          rels: rels,\\n          modelRels: modelRels,\\n          model: modelParts,\\n          printTicket: printTicketParts,\\n          texture: texturesParts,\\n          other: otherParts\\n        };\\n      }\\n\\n      function parseRelsXml(relsFileText) {\\n        var relationships = [];\\n        var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\\n        var relsNodes = relsXmlData.querySelectorAll('Relationship');\\n\\n        for (var i = 0; i < relsNodes.length; i++) {\\n          var relsNode = relsNodes[i];\\n          var relationship = {\\n            target: relsNode.getAttribute('Target'),\\n            //required\\n            id: relsNode.getAttribute('Id'),\\n            //required\\n            type: relsNode.getAttribute('Type') //required\\n\\n          };\\n          relationships.push(relationship);\\n        }\\n\\n        return relationships;\\n      }\\n\\n      function parseMetadataNodes(metadataNodes) {\\n        var metadataData = {};\\n\\n        for (var i = 0; i < metadataNodes.length; i++) {\\n          var metadataNode = metadataNodes[i];\\n          var name = metadataNode.getAttribute('name');\\n          var validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\\n\\n          if (0 <= validNames.indexOf(name)) {\\n            metadataData[name] = metadataNode.textContent;\\n          }\\n        }\\n\\n        return metadataData;\\n      }\\n\\n      function parseBasematerialsNode(basematerialsNode) {\\n        var basematerialsData = {\\n          id: basematerialsNode.getAttribute('id'),\\n          // required\\n          basematerials: []\\n        };\\n        var basematerialNodes = basematerialsNode.querySelectorAll('base');\\n\\n        for (var i = 0; i < basematerialNodes.length; i++) {\\n          var basematerialNode = basematerialNodes[i];\\n          var basematerialData = parseBasematerialNode(basematerialNode);\\n          basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\\n\\n          basematerialsData.basematerials.push(basematerialData);\\n        }\\n\\n        return basematerialsData;\\n      }\\n\\n      function parseTexture2DNode(texture2DNode) {\\n        var texture2dData = {\\n          id: texture2DNode.getAttribute('id'),\\n          // required\\n          path: texture2DNode.getAttribute('path'),\\n          // required\\n          contenttype: texture2DNode.getAttribute('contenttype'),\\n          // required\\n          tilestyleu: texture2DNode.getAttribute('tilestyleu'),\\n          tilestylev: texture2DNode.getAttribute('tilestylev'),\\n          filter: texture2DNode.getAttribute('filter')\\n        };\\n        return texture2dData;\\n      }\\n\\n      function parseTextures2DGroupNode(texture2DGroupNode) {\\n        var texture2DGroupData = {\\n          id: texture2DGroupNode.getAttribute('id'),\\n          // required\\n          texid: texture2DGroupNode.getAttribute('texid'),\\n          // required\\n          displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\\n        };\\n        var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\\n        var uvs = [];\\n\\n        for (var i = 0; i < tex2coordNodes.length; i++) {\\n          var tex2coordNode = tex2coordNodes[i];\\n          var u = tex2coordNode.getAttribute('u');\\n          var v = tex2coordNode.getAttribute('v');\\n          uvs.push(parseFloat(u), parseFloat(v));\\n        }\\n\\n        texture2DGroupData['uvs'] = new Float32Array(uvs);\\n        return texture2DGroupData;\\n      }\\n\\n      function parseColorGroupNode(colorGroupNode) {\\n        var colorGroupData = {\\n          id: colorGroupNode.getAttribute('id'),\\n          // required\\n          displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\\n        };\\n        var colorNodes = colorGroupNode.querySelectorAll('color');\\n        var colors = [];\\n        var colorObject = new _three.Color();\\n\\n        for (var i = 0; i < colorNodes.length; i++) {\\n          var colorNode = colorNodes[i];\\n          var color = colorNode.getAttribute('color');\\n          colorObject.setStyle(color.substring(0, 7));\\n          colorObject.convertSRGBToLinear(); // color is in sRGB\\n\\n          colors.push(colorObject.r, colorObject.g, colorObject.b);\\n        }\\n\\n        colorGroupData['colors'] = new Float32Array(colors);\\n        return colorGroupData;\\n      }\\n\\n      function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\\n        var metallicDisplaypropertiesData = {\\n          id: metallicDisplaypropetiesNode.getAttribute('id') // required\\n\\n        };\\n        var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\\n        var metallicData = [];\\n\\n        for (var i = 0; i < metallicNodes.length; i++) {\\n          var metallicNode = metallicNodes[i];\\n          metallicData.push({\\n            name: metallicNode.getAttribute('name'),\\n            // required\\n            metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\\n            // required\\n            roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\\n\\n          });\\n        }\\n\\n        metallicDisplaypropertiesData.data = metallicData;\\n        return metallicDisplaypropertiesData;\\n      }\\n\\n      function parseBasematerialNode(basematerialNode) {\\n        var basematerialData = {};\\n        basematerialData['name'] = basematerialNode.getAttribute('name'); // required\\n\\n        basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\\n\\n        basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\\n        return basematerialData;\\n      }\\n\\n      function parseMeshNode(meshNode) {\\n        var meshData = {};\\n        var vertices = [];\\n        var vertexNodes = meshNode.querySelectorAll('vertices vertex');\\n\\n        for (var i = 0; i < vertexNodes.length; i++) {\\n          var vertexNode = vertexNodes[i];\\n          var x = vertexNode.getAttribute('x');\\n          var y = vertexNode.getAttribute('y');\\n          var z = vertexNode.getAttribute('z');\\n          vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\\n        }\\n\\n        meshData['vertices'] = new Float32Array(vertices);\\n        var triangleProperties = [];\\n        var triangles = [];\\n        var triangleNodes = meshNode.querySelectorAll('triangles triangle');\\n\\n        for (var _i3 = 0; _i3 < triangleNodes.length; _i3++) {\\n          var triangleNode = triangleNodes[_i3];\\n          var v1 = triangleNode.getAttribute('v1');\\n          var v2 = triangleNode.getAttribute('v2');\\n          var v3 = triangleNode.getAttribute('v3');\\n          var p1 = triangleNode.getAttribute('p1');\\n          var p2 = triangleNode.getAttribute('p2');\\n          var p3 = triangleNode.getAttribute('p3');\\n          var pid = triangleNode.getAttribute('pid');\\n          var triangleProperty = {};\\n          triangleProperty['v1'] = parseInt(v1, 10);\\n          triangleProperty['v2'] = parseInt(v2, 10);\\n          triangleProperty['v3'] = parseInt(v3, 10);\\n          triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\\n\\n          if (p1) {\\n            triangleProperty['p1'] = parseInt(p1, 10);\\n          }\\n\\n          if (p2) {\\n            triangleProperty['p2'] = parseInt(p2, 10);\\n          }\\n\\n          if (p3) {\\n            triangleProperty['p3'] = parseInt(p3, 10);\\n          }\\n\\n          if (pid) {\\n            triangleProperty['pid'] = pid;\\n          }\\n\\n          if (0 < Object.keys(triangleProperty).length) {\\n            triangleProperties.push(triangleProperty);\\n          }\\n        }\\n\\n        meshData['triangleProperties'] = triangleProperties;\\n        meshData['triangles'] = new Uint32Array(triangles);\\n        return meshData;\\n      }\\n\\n      function parseComponentsNode(componentsNode) {\\n        var components = [];\\n        var componentNodes = componentsNode.querySelectorAll('component');\\n\\n        for (var i = 0; i < componentNodes.length; i++) {\\n          var componentNode = componentNodes[i];\\n          var componentData = parseComponentNode(componentNode);\\n          components.push(componentData);\\n        }\\n\\n        return components;\\n      }\\n\\n      function parseComponentNode(componentNode) {\\n        var componentData = {};\\n        componentData['objectId'] = componentNode.getAttribute('objectid'); // required\\n\\n        var transform = componentNode.getAttribute('transform');\\n\\n        if (transform) {\\n          componentData['transform'] = parseTransform(transform);\\n        }\\n\\n        return componentData;\\n      }\\n\\n      function parseTransform(transform) {\\n        var t = [];\\n        transform.split(' ').forEach(function (s) {\\n          t.push(parseFloat(s));\\n        });\\n        var matrix = new _three.Matrix4();\\n        matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\\n        return matrix;\\n      }\\n\\n      function parseObjectNode(objectNode) {\\n        var objectData = {\\n          type: objectNode.getAttribute('type')\\n        };\\n        var id = objectNode.getAttribute('id');\\n\\n        if (id) {\\n          objectData['id'] = id;\\n        }\\n\\n        var pid = objectNode.getAttribute('pid');\\n\\n        if (pid) {\\n          objectData['pid'] = pid;\\n        }\\n\\n        var pindex = objectNode.getAttribute('pindex');\\n\\n        if (pindex) {\\n          objectData['pindex'] = pindex;\\n        }\\n\\n        var thumbnail = objectNode.getAttribute('thumbnail');\\n\\n        if (thumbnail) {\\n          objectData['thumbnail'] = thumbnail;\\n        }\\n\\n        var partnumber = objectNode.getAttribute('partnumber');\\n\\n        if (partnumber) {\\n          objectData['partnumber'] = partnumber;\\n        }\\n\\n        var name = objectNode.getAttribute('name');\\n\\n        if (name) {\\n          objectData['name'] = name;\\n        }\\n\\n        var meshNode = objectNode.querySelector('mesh');\\n\\n        if (meshNode) {\\n          objectData['mesh'] = parseMeshNode(meshNode);\\n        }\\n\\n        var componentsNode = objectNode.querySelector('components');\\n\\n        if (componentsNode) {\\n          objectData['components'] = parseComponentsNode(componentsNode);\\n        }\\n\\n        return objectData;\\n      }\\n\\n      function parseResourcesNode(resourcesNode) {\\n        var resourcesData = {};\\n        resourcesData['basematerials'] = {};\\n        var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\\n\\n        for (var i = 0; i < basematerialsNodes.length; i++) {\\n          var basematerialsNode = basematerialsNodes[i];\\n          var basematerialsData = parseBasematerialsNode(basematerialsNode);\\n          resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\\n        } //\\n\\n\\n        resourcesData['texture2d'] = {};\\n        var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\\n\\n        for (var _i4 = 0; _i4 < textures2DNodes.length; _i4++) {\\n          var textures2DNode = textures2DNodes[_i4];\\n          var texture2DData = parseTexture2DNode(textures2DNode);\\n          resourcesData['texture2d'][texture2DData['id']] = texture2DData;\\n        } //\\n\\n\\n        resourcesData['colorgroup'] = {};\\n        var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\\n\\n        for (var _i5 = 0; _i5 < colorGroupNodes.length; _i5++) {\\n          var colorGroupNode = colorGroupNodes[_i5];\\n          var colorGroupData = parseColorGroupNode(colorGroupNode);\\n          resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\\n        } //\\n\\n\\n        resourcesData['pbmetallicdisplayproperties'] = {};\\n        var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\\n\\n        for (var _i6 = 0; _i6 < pbmetallicdisplaypropertiesNodes.length; _i6++) {\\n          var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[_i6];\\n          var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\\n          resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\\n        } //\\n\\n\\n        resourcesData['texture2dgroup'] = {};\\n        var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\\n\\n        for (var _i7 = 0; _i7 < textures2DGroupNodes.length; _i7++) {\\n          var textures2DGroupNode = textures2DGroupNodes[_i7];\\n          var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\\n          resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\\n        } //\\n\\n\\n        resourcesData['object'] = {};\\n        var objectNodes = resourcesNode.querySelectorAll('object');\\n\\n        for (var _i8 = 0; _i8 < objectNodes.length; _i8++) {\\n          var objectNode = objectNodes[_i8];\\n          var objectData = parseObjectNode(objectNode);\\n          resourcesData['object'][objectData['id']] = objectData;\\n        }\\n\\n        return resourcesData;\\n      }\\n\\n      function parseBuildNode(buildNode) {\\n        var buildData = [];\\n        var itemNodes = buildNode.querySelectorAll('item');\\n\\n        for (var i = 0; i < itemNodes.length; i++) {\\n          var itemNode = itemNodes[i];\\n          var buildItem = {\\n            objectId: itemNode.getAttribute('objectid')\\n          };\\n          var transform = itemNode.getAttribute('transform');\\n\\n          if (transform) {\\n            buildItem['transform'] = parseTransform(transform);\\n          }\\n\\n          buildData.push(buildItem);\\n        }\\n\\n        return buildData;\\n      }\\n\\n      function parseModelNode(modelNode) {\\n        var modelData = {\\n          unit: modelNode.getAttribute('unit') || 'millimeter'\\n        };\\n        var metadataNodes = modelNode.querySelectorAll('metadata');\\n\\n        if (metadataNodes) {\\n          modelData['metadata'] = parseMetadataNodes(metadataNodes);\\n        }\\n\\n        var resourcesNode = modelNode.querySelector('resources');\\n\\n        if (resourcesNode) {\\n          modelData['resources'] = parseResourcesNode(resourcesNode);\\n        }\\n\\n        var buildNode = modelNode.querySelector('build');\\n\\n        if (buildNode) {\\n          modelData['build'] = parseBuildNode(buildNode);\\n        }\\n\\n        return modelData;\\n      }\\n\\n      function buildTexture(texture2dgroup, objects, modelData, textureData) {\\n        var texid = texture2dgroup.texid;\\n        var texture2ds = modelData.resources.texture2d;\\n        var texture2d = texture2ds[texid];\\n\\n        if (texture2d) {\\n          var _data = textureData[texture2d.path];\\n          var type = texture2d.contenttype;\\n          var blob = new Blob([_data], {\\n            type: type\\n          });\\n          var sourceURI = URL.createObjectURL(blob);\\n          var texture = textureLoader.load(sourceURI, function () {\\n            URL.revokeObjectURL(sourceURI);\\n          });\\n          texture.encoding = _three.sRGBEncoding; // texture parameters\\n\\n          switch (texture2d.tilestyleu) {\\n            case 'wrap':\\n              texture.wrapS = _three.RepeatWrapping;\\n              break;\\n\\n            case 'mirror':\\n              texture.wrapS = _three.MirroredRepeatWrapping;\\n              break;\\n\\n            case 'none':\\n            case 'clamp':\\n              texture.wrapS = _three.ClampToEdgeWrapping;\\n              break;\\n\\n            default:\\n              texture.wrapS = _three.RepeatWrapping;\\n          }\\n\\n          switch (texture2d.tilestylev) {\\n            case 'wrap':\\n              texture.wrapT = _three.RepeatWrapping;\\n              break;\\n\\n            case 'mirror':\\n              texture.wrapT = _three.MirroredRepeatWrapping;\\n              break;\\n\\n            case 'none':\\n            case 'clamp':\\n              texture.wrapT = _three.ClampToEdgeWrapping;\\n              break;\\n\\n            default:\\n              texture.wrapT = _three.RepeatWrapping;\\n          }\\n\\n          switch (texture2d.filter) {\\n            case 'auto':\\n              texture.magFilter = _three.LinearFilter;\\n              texture.minFilter = _three.LinearMipmapLinearFilter;\\n              break;\\n\\n            case 'linear':\\n              texture.magFilter = _three.LinearFilter;\\n              texture.minFilter = _three.LinearFilter;\\n              break;\\n\\n            case 'nearest':\\n              texture.magFilter = _three.NearestFilter;\\n              texture.minFilter = _three.NearestFilter;\\n              break;\\n\\n            default:\\n              texture.magFilter = _three.LinearFilter;\\n              texture.minFilter = _three.LinearMipmapLinearFilter;\\n          }\\n\\n          return texture;\\n        } else {\\n          return null;\\n        }\\n      }\\n\\n      function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData) {\\n        var objectPindex = objectData.pindex;\\n        var materialMap = {};\\n\\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\\n          var triangleProperty = triangleProperties[i];\\n          var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\\n          if (materialMap[pindex] === undefined) materialMap[pindex] = [];\\n          materialMap[pindex].push(triangleProperty);\\n        } //\\n\\n\\n        var keys = Object.keys(materialMap);\\n        var meshes = [];\\n\\n        for (var _i9 = 0, _l = keys.length; _i9 < _l; _i9++) {\\n          var materialIndex = keys[_i9];\\n          var trianglePropertiesProps = materialMap[materialIndex];\\n          var basematerialData = basematerials.basematerials[materialIndex];\\n          var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\\n\\n          var geometry = new _three.BufferGeometry();\\n          var positionData = [];\\n          var vertices = meshData.vertices;\\n\\n          for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\\n            var _triangleProperty = trianglePropertiesProps[j];\\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 0]);\\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 1]);\\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 2]);\\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 0]);\\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 1]);\\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 2]);\\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 0]);\\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 1]);\\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 2]);\\n          }\\n\\n          geometry.setAttribute('position', new _three.Float32BufferAttribute(positionData, 3)); //\\n\\n          var mesh = new _three.Mesh(geometry, material);\\n          meshes.push(mesh);\\n        }\\n\\n        return meshes;\\n      }\\n\\n      function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData) {\\n        // geometry\\n        var geometry = new _three.BufferGeometry();\\n        var positionData = [];\\n        var uvData = [];\\n        var vertices = meshData.vertices;\\n        var uvs = texture2dgroup.uvs;\\n\\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\\n          var triangleProperty = triangleProperties[i];\\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\\n\\n          uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\\n          uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\\n          uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\\n          uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\\n          uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\\n          uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\\n        }\\n\\n        geometry.setAttribute('position', new _three.Float32BufferAttribute(positionData, 3));\\n        geometry.setAttribute('uv', new _three.Float32BufferAttribute(uvData, 2)); // material\\n\\n        var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\\n        var material = new _three.MeshPhongMaterial({\\n          map: texture,\\n          flatShading: true\\n        }); // mesh\\n\\n        var mesh = new _three.Mesh(geometry, material);\\n        return mesh;\\n      }\\n\\n      function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData) {\\n        // geometry\\n        var geometry = new _three.BufferGeometry();\\n        var positionData = [];\\n        var colorData = [];\\n        var vertices = meshData.vertices;\\n        var colors = colorgroup.colors;\\n\\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\\n          var triangleProperty = triangleProperties[i];\\n          var v1 = triangleProperty.v1;\\n          var v2 = triangleProperty.v2;\\n          var v3 = triangleProperty.v3;\\n          positionData.push(vertices[v1 * 3 + 0]);\\n          positionData.push(vertices[v1 * 3 + 1]);\\n          positionData.push(vertices[v1 * 3 + 2]);\\n          positionData.push(vertices[v2 * 3 + 0]);\\n          positionData.push(vertices[v2 * 3 + 1]);\\n          positionData.push(vertices[v2 * 3 + 2]);\\n          positionData.push(vertices[v3 * 3 + 0]);\\n          positionData.push(vertices[v3 * 3 + 1]);\\n          positionData.push(vertices[v3 * 3 + 2]); //\\n\\n          var p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\\n          var p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\\n          var p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\\n          colorData.push(colors[p1 * 3 + 0]);\\n          colorData.push(colors[p1 * 3 + 1]);\\n          colorData.push(colors[p1 * 3 + 2]);\\n          colorData.push(colors[p2 * 3 + 0]);\\n          colorData.push(colors[p2 * 3 + 1]);\\n          colorData.push(colors[p2 * 3 + 2]);\\n          colorData.push(colors[p3 * 3 + 0]);\\n          colorData.push(colors[p3 * 3 + 1]);\\n          colorData.push(colors[p3 * 3 + 2]);\\n        }\\n\\n        geometry.setAttribute('position', new _three.Float32BufferAttribute(positionData, 3));\\n        geometry.setAttribute('color', new _three.Float32BufferAttribute(colorData, 3)); // material\\n\\n        var material = new _three.MeshPhongMaterial({\\n          vertexColors: true,\\n          flatShading: true\\n        }); // mesh\\n\\n        var mesh = new _three.Mesh(geometry, material);\\n        return mesh;\\n      }\\n\\n      function buildDefaultMesh(meshData) {\\n        var geometry = new _three.BufferGeometry();\\n        geometry.setIndex(new _three.BufferAttribute(meshData['triangles'], 1));\\n        geometry.setAttribute('position', new _three.BufferAttribute(meshData['vertices'], 3));\\n        var material = new _three.MeshPhongMaterial({\\n          color: 0xaaaaff,\\n          flatShading: true\\n        });\\n        var mesh = new _three.Mesh(geometry, material);\\n        return mesh;\\n      }\\n\\n      function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\\n        var keys = Object.keys(resourceMap);\\n        var meshes = [];\\n\\n        for (var i = 0, il = keys.length; i < il; i++) {\\n          var resourceId = keys[i];\\n          var triangleProperties = resourceMap[resourceId];\\n          var resourceType = getResourceType(resourceId, modelData);\\n\\n          switch (resourceType) {\\n            case 'material':\\n              var basematerials = modelData.resources.basematerials[resourceId];\\n              var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData);\\n\\n              for (var j = 0, jl = newMeshes.length; j < jl; j++) {\\n                meshes.push(newMeshes[j]);\\n              }\\n\\n              break;\\n\\n            case 'texture':\\n              var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\\n              meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData));\\n              break;\\n\\n            case 'vertexColors':\\n              var colorgroup = modelData.resources.colorgroup[resourceId];\\n              meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects, modelData, objectData));\\n              break;\\n\\n            case 'default':\\n              meshes.push(buildDefaultMesh(meshData));\\n              break;\\n\\n            default:\\n              console.error('THREE.3MFLoader: Unsupported resource type.');\\n          }\\n        }\\n\\n        return meshes;\\n      }\\n\\n      function getResourceType(pid, modelData) {\\n        if (modelData.resources.texture2dgroup[pid] !== undefined) {\\n          return 'texture';\\n        } else if (modelData.resources.basematerials[pid] !== undefined) {\\n          return 'material';\\n        } else if (modelData.resources.colorgroup[pid] !== undefined) {\\n          return 'vertexColors';\\n        } else if (pid === 'default') {\\n          return 'default';\\n        } else {\\n          return undefined;\\n        }\\n      }\\n\\n      function analyzeObject(modelData, meshData, objectData) {\\n        var resourceMap = {};\\n        var triangleProperties = meshData['triangleProperties'];\\n        var objectPid = objectData.pid;\\n\\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\\n          var triangleProperty = triangleProperties[i];\\n          var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\\n          if (pid === undefined) pid = 'default';\\n          if (resourceMap[pid] === undefined) resourceMap[pid] = [];\\n          resourceMap[pid].push(triangleProperty);\\n        }\\n\\n        return resourceMap;\\n      }\\n\\n      function buildGroup(meshData, objects, modelData, textureData, objectData) {\\n        var group = new _three.Group();\\n        var resourceMap = analyzeObject(modelData, meshData, objectData);\\n        var meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData);\\n\\n        for (var i = 0, l = meshes.length; i < l; i++) {\\n          group.add(meshes[i]);\\n        }\\n\\n        return group;\\n      }\\n\\n      function applyExtensions(extensions, meshData, modelXml) {\\n        if (!extensions) {\\n          return;\\n        }\\n\\n        var availableExtensions = [];\\n        var keys = Object.keys(extensions);\\n\\n        for (var i = 0; i < keys.length; i++) {\\n          var ns = keys[i];\\n\\n          for (var j = 0; j < scope.availableExtensions.length; j++) {\\n            var extension = scope.availableExtensions[j];\\n\\n            if (extension.ns === ns) {\\n              availableExtensions.push(extension);\\n            }\\n          }\\n        }\\n\\n        for (var _i10 = 0; _i10 < availableExtensions.length; _i10++) {\\n          var _extension = availableExtensions[_i10];\\n\\n          _extension.apply(modelXml, extensions[_extension['ns']], meshData);\\n        }\\n      }\\n\\n      function getBuild(data, objects, modelData, textureData, objectData, builder) {\\n        if (data.build !== undefined) return data.build;\\n        data.build = builder(data, objects, modelData, textureData, objectData);\\n        return data.build;\\n      }\\n\\n      function buildBasematerial(materialData, objects, modelData) {\\n        var material;\\n        var displaypropertiesid = materialData.displaypropertiesid;\\n        var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\\n\\n        if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\\n          // metallic display property, use StandardMaterial\\n          var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\\n          var metallicData = pbmetallicdisplayproperty.data[materialData.index];\\n          material = new _three.MeshStandardMaterial({\\n            flatShading: true,\\n            roughness: metallicData.roughness,\\n            metalness: metallicData.metallicness\\n          });\\n        } else {\\n          // otherwise use PhongMaterial\\n          material = new _three.MeshPhongMaterial({\\n            flatShading: true\\n          });\\n        }\\n\\n        material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \\\"#RRGGBB\\\" or \\\"#RRGGBBAA\\\"\\n\\n        var displaycolor = materialData.displaycolor;\\n        var color = displaycolor.substring(0, 7);\\n        material.color.setStyle(color);\\n        material.color.convertSRGBToLinear(); // displaycolor is in sRGB\\n        // process alpha if set\\n\\n        if (displaycolor.length === 9) {\\n          material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\\n        }\\n\\n        return material;\\n      }\\n\\n      function buildComposite(compositeData, objects, modelData, textureData) {\\n        var composite = new _three.Group();\\n\\n        for (var j = 0; j < compositeData.length; j++) {\\n          var component = compositeData[j];\\n          var _build = objects[component.objectId];\\n\\n          if (_build === undefined) {\\n            buildObject(component.objectId, objects, modelData, textureData);\\n            _build = objects[component.objectId];\\n          }\\n\\n          var object3D = _build.clone(); // apply component transform\\n\\n\\n          var transform = component.transform;\\n\\n          if (transform) {\\n            object3D.applyMatrix4(transform);\\n          }\\n\\n          composite.add(object3D);\\n        }\\n\\n        return composite;\\n      }\\n\\n      function buildObject(objectId, objects, modelData, textureData) {\\n        var objectData = modelData['resources']['object'][objectId];\\n\\n        if (objectData['mesh']) {\\n          var meshData = objectData['mesh'];\\n          var extensions = modelData['extensions'];\\n          var modelXml = modelData['xml'];\\n          applyExtensions(extensions, meshData, modelXml);\\n          objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\\n        } else {\\n          var compositeData = objectData['components'];\\n          objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\\n        }\\n      }\\n\\n      function buildObjects(data3mf) {\\n        var modelsData = data3mf.model;\\n        var modelRels = data3mf.modelRels;\\n        var objects = {};\\n        var modelsKeys = Object.keys(modelsData);\\n        var textureData = {}; // evaluate model relationships to textures\\n\\n        if (modelRels) {\\n          for (var i = 0, l = modelRels.length; i < l; i++) {\\n            var modelRel = modelRels[i];\\n            var textureKey = modelRel.target.substring(1);\\n\\n            if (data3mf.texture[textureKey]) {\\n              textureData[modelRel.target] = data3mf.texture[textureKey];\\n            }\\n          }\\n        } // start build\\n\\n\\n        for (var _i11 = 0; _i11 < modelsKeys.length; _i11++) {\\n          var modelsKey = modelsKeys[_i11];\\n          var modelData = modelsData[modelsKey];\\n          var objectIds = Object.keys(modelData['resources']['object']);\\n\\n          for (var j = 0; j < objectIds.length; j++) {\\n            var objectId = objectIds[j];\\n            buildObject(objectId, objects, modelData, textureData);\\n          }\\n        }\\n\\n        return objects;\\n      }\\n\\n      function fetch3DModelPart(rels) {\\n        for (var i = 0; i < rels.length; i++) {\\n          var rel = rels[i];\\n          var extension = rel.target.split('.').pop();\\n          if (extension.toLowerCase() === 'model') return rel;\\n        }\\n      }\\n\\n      function build(objects, data3mf) {\\n        var group = new _three.Group();\\n        var relationship = fetch3DModelPart(data3mf['rels']);\\n        var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\\n\\n        for (var i = 0; i < buildData.length; i++) {\\n          var buildItem = buildData[i];\\n          var object3D = objects[buildItem['objectId']]; // apply transform\\n\\n          var transform = buildItem['transform'];\\n\\n          if (transform) {\\n            object3D.applyMatrix4(transform);\\n          }\\n\\n          group.add(object3D);\\n        }\\n\\n        return group;\\n      }\\n\\n      var data3mf = loadDocument(data);\\n      var objects = buildObjects(data3mf);\\n      return build(objects, data3mf);\\n    }\\n  }, {\\n    key: \\\"addExtension\\\",\\n    value: function addExtension(extension) {\\n      this.availableExtensions.push(extension);\\n    }\\n  }]);\\n\\n  return ThreeMFLoader;\\n}(_three.Loader);\\n\\nexports.ThreeMFLoader = ThreeMFLoader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"_getPrototypeOf\",\"o\",\"setPrototypeOf\",\"getPrototypeOf\",\"__proto__\",\"_inherits\",\"subClass\",\"superClass\",\"TypeError\",\"create\",\"value\",\"_setPrototypeOf\",\"p\",\"ThreeMFLoader\",\"_three\",\"_fflate\",\"_Loader\",\"manager\",\"instance\",\"call\",\"self\",\"ReferenceError\",\"_this\",\"availableExtensions\",\"load\",\"url\",\"onLoad\",\"onProgress\",\"onError\",\"scope\",\"loader\",\"FileLoader\",\"setPath\",\"path\",\"setResponseType\",\"setRequestHeader\",\"requestHeader\",\"setWithCredentials\",\"withCredentials\",\"buffer\",\"parse\",\"e\",\"console\",\"error\",\"itemError\",\"data\",\"parseRelsXml\",\"relsFileText\",\"relationships\",\"relsNodes\",\"parseFromString\",\"DOMParser\",\"relsXmlData\",\"querySelectorAll\",\"relsNode\",\"relationship\",\"getAttribute\",\"id\",\"type\",\"push\",\"parseTransform\",\"transform\",\"t\",\"split\",\"forEach\",\"s\",\"parseFloat\",\"matrix\",\"Matrix4\",\"set\",\"buildTexture\",\"texture2dgroup\",\"objects\",\"modelData\",\"textureData\",\"texture2d\",\"resources\",\"texid\",\"blob\",\"Blob\",\"_data\",\"contenttype\",\"sourceURI\",\"URL\",\"createObjectURL\",\"texture\",\"textureLoader\",\"revokeObjectURL\",\"encoding\",\"sRGBEncoding\",\"tilestyleu\",\"wrapS\",\"RepeatWrapping\",\"MirroredRepeatWrapping\",\"ClampToEdgeWrapping\",\"tilestylev\",\"wrapT\",\"filter\",\"magFilter\",\"LinearFilter\",\"minFilter\",\"LinearMipmapLinearFilter\",\"NearestFilter\",\"getResourceType\",\"pid\",\"undefined\",\"basematerials\",\"colorgroup\",\"buildGroup\",\"meshData\",\"objectData\",\"group\",\"Group\",\"resourceMap\",\"triangleProperties\",\"objectPid\",\"l\",\"triangleProperty\",\"keys\",\"meshes\",\"il\",\"resourceId\",\"resourceType\",\"objectPindex\",\"pindex\",\"materialMap\",\"p1\",\"_i9\",\"_l\",\"materialIndex\",\"trianglePropertiesProps\",\"material\",\"getBuild\",\"basematerialData\",\"buildBasematerial\",\"geometry\",\"BufferGeometry\",\"positionData\",\"vertices\",\"j\",\"jl\",\"_triangleProperty\",\"v1\",\"v2\",\"v3\",\"setAttribute\",\"Float32BufferAttribute\",\"mesh\",\"Mesh\",\"newMeshes\",\"uvData\",\"uvs\",\"p2\",\"p3\",\"MeshPhongMaterial\",\"map\",\"flatShading\",\"colorData\",\"colors\",\"vertexColors\",\"setIndex\",\"BufferAttribute\",\"color\",\"add\",\"builder\",\"build\",\"materialData\",\"displaypropertiesid\",\"pbmetallicdisplayproperties\",\"metallicData\",\"pbmetallicdisplayproperty\",\"index\",\"MeshStandardMaterial\",\"roughness\",\"metalness\",\"metallicness\",\"name\",\"displaycolor\",\"substring\",\"setStyle\",\"convertSRGBToLinear\",\"opacity\",\"parseInt\",\"charAt\",\"buildComposite\",\"compositeData\",\"composite\",\"component\",\"_build\",\"objectId\",\"buildObject\",\"object3D\",\"clone\",\"applyMatrix4\",\"extensions\",\"modelXml\",\"ns\",\"extension\",\"_i10\",\"_extension\",\"apply\",\"TextureLoader\",\"data3mf\",\"loadDocument\",\"zip\",\"file\",\"relsName\",\"modelRelsName\",\"modelPartNames\",\"texturesPartNames\",\"modelParts\",\"texturesParts\",\"unzipSync\",\"Uint8Array\",\"match\",\"LoaderUtils\",\"decodeText\",\"relsView\",\"rels\",\"_relsFileText\",\"_relsView\",\"modelRels\",\"modelPart\",\"fileText\",\"view\",\"xmlData\",\"documentElement\",\"nodeName\",\"toLowerCase\",\"modelNode\",\"querySelector\",\"_i\",\"attributes\",\"attr\",\"RegExp\",\"$1\",\"unit\",\"metadataNodes\",\"metadataData\",\"metadataNode\",\"validNames\",\"indexOf\",\"textContent\",\"resourcesNode\",\"resourcesData\",\"basematerialsNodes\",\"basematerialsData\",\"basematerialsNode\",\"basematerialNodes\",\"basematerialNode\",\"textures2DNodes\",\"_i4\",\"textures2DNode\",\"texture2dData\",\"texture2DNode\",\"texture2DData\",\"colorGroupNodes\",\"_i5\",\"colorGroupData\",\"colorGroupNode\",\"colorNodes\",\"colorObject\",\"Color\",\"colorNode\",\"r\",\"g\",\"b\",\"Float32Array\",\"pbmetallicdisplaypropertiesNodes\",\"_i6\",\"pbmetallicdisplaypropertiesData\",\"pbmetallicdisplaypropertiesNode\",\"metallicDisplaypropertiesData\",\"metallicDisplaypropetiesNode\",\"metallicNodes\",\"metallicNode\",\"textures2DGroupNodes\",\"_i7\",\"textures2DGroupData\",\"textures2DGroupNode\",\"texture2DGroupData\",\"texture2DGroupNode\",\"tex2coordNodes\",\"tex2coordNode\",\"u\",\"v\",\"objectNodes\",\"_i8\",\"objectNode\",\"thumbnail\",\"partnumber\",\"meshNode\",\"vertexNodes\",\"vertexNode\",\"x\",\"y\",\"z\",\"triangles\",\"triangleNodes\",\"_i3\",\"triangleNode\",\"Uint32Array\",\"componentsNode\",\"components\",\"componentNodes\",\"componentNode\",\"componentData\",\"buildNode\",\"buildData\",\"itemNodes\",\"itemNode\",\"buildItem\",\"_i2\",\"texturesPartName\",\"model\",\"printTicket\",\"printTicketParts\",\"other\",\"otherParts\",\"rel\",\"pop\",\"buildObjects\",\"modelsData\",\"modelsKeys\",\"modelRel\",\"textureKey\",\"_i11\",\"modelsKey\",\"objectIds\",\"addExtension\",\"Loader\"]\n}\n"]