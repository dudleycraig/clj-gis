["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/nodes/inputs/TextureNode.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$nodes$inputs$TextureNode=function(global,require,module,exports){function TextureNode(value,uv,bias,project){_InputNode.InputNode.call(this,\"v4\",{shared:!0});this.value=value;this.uv=uv||new _UVNode.UVNode;this.bias=bias;this.project=void 0!==project?project:!1}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.TextureNode=TextureNode;var _InputNode=require(\"module$node_modules$three_stdlib$nodes$core$InputNode\"),_UVNode=require(\"module$node_modules$three_stdlib$nodes$accessors$UVNode\"),\n_ColorSpaceNode=require(\"module$node_modules$three_stdlib$nodes$utils$ColorSpaceNode\"),_ExpressionNode=require(\"module$node_modules$three_stdlib$nodes$core$ExpressionNode\");TextureNode.prototype=Object.create(_InputNode.InputNode.prototype);TextureNode.prototype.constructor=TextureNode;TextureNode.prototype.nodeType=\"Texture\";TextureNode.prototype.getTexture=function(builder,output){return _InputNode.InputNode.prototype.generate.call(this,builder,output,this.value.uuid,\"t\")};TextureNode.prototype.generate=\nfunction(builder,output){if(\"sampler2D\"===output)return this.getTexture(builder,output);var tex=this.getTexture(builder,output),uv=this.uv.build(builder,this.project?\"v4\":\"v2\"),bias=this.bias?this.bias.build(builder,\"f\"):void 0;void 0===bias&&builder.context.bias&&(bias=builder.context.bias.setTexture(this).build(builder,\"f\"));var method=this.project?\"texture2DProj\":bias?\"tex2DBias\":\"tex2D\";tex=bias?method+\"( \"+tex+\", \"+uv+\", \"+bias+\" )\":method+\"( \"+tex+\", \"+uv+\" )\";uv={include:builder.isShader(\"vertex\"),\nignoreCache:!0};bias=this.getType(builder);builder.addContext(uv);this.colorSpace=this.colorSpace||new _ColorSpaceNode.ColorSpaceNode(new _ExpressionNode.ExpressionNode(\"\",bias));this.colorSpace.fromDecoding(builder.getTextureEncodingFromMap(this.value));this.colorSpace.input.parse(tex);tex=this.colorSpace.build(builder,bias);builder.removeContext();return builder.format(tex,bias,output)};TextureNode.prototype.copy=function(source){_InputNode.InputNode.prototype.copy.call(this,source);source.value&&\n(this.value=source.value);this.uv=source.uv;source.bias&&(this.bias=source.bias);void 0!==source.project&&(this.project=source.project);return this};TextureNode.prototype.toJSON=function(meta){var data=this.getJSONNode(meta);data||(data=this.createJSONNode(meta),this.value&&(data.value=this.value.uuid),data.uv=this.uv.toJSON(meta).uuid,data.project=this.project,this.bias&&(data.bias=this.bias.toJSON(meta).uuid));return data}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$nodes$inputs$TextureNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextureNode = TextureNode;\n\nvar _InputNode = require(\"../core/InputNode.js\");\n\nvar _UVNode = require(\"../accessors/UVNode.js\");\n\nvar _ColorSpaceNode = require(\"../utils/ColorSpaceNode.js\");\n\nvar _ExpressionNode = require(\"../core/ExpressionNode.js\");\n\nfunction TextureNode(value, uv, bias, project) {\n  _InputNode.InputNode.call(this, 'v4', {\n    shared: true\n  });\n\n  this.value = value;\n  this.uv = uv || new _UVNode.UVNode();\n  this.bias = bias;\n  this.project = project !== undefined ? project : false;\n}\n\nTextureNode.prototype = Object.create(_InputNode.InputNode.prototype);\nTextureNode.prototype.constructor = TextureNode;\nTextureNode.prototype.nodeType = 'Texture';\n\nTextureNode.prototype.getTexture = function (builder, output) {\n  return _InputNode.InputNode.prototype.generate.call(this, builder, output, this.value.uuid, 't');\n};\n\nTextureNode.prototype.generate = function (builder, output) {\n  if (output === 'sampler2D') {\n    return this.getTexture(builder, output);\n  }\n\n  var tex = this.getTexture(builder, output),\n      uv = this.uv.build(builder, this.project ? 'v4' : 'v2'),\n      bias = this.bias ? this.bias.build(builder, 'f') : undefined;\n\n  if (bias === undefined && builder.context.bias) {\n    bias = builder.context.bias.setTexture(this).build(builder, 'f');\n  }\n\n  var method, code;\n  if (this.project) method = 'texture2DProj';else method = bias ? 'tex2DBias' : 'tex2D';\n  if (bias) code = method + '( ' + tex + ', ' + uv + ', ' + bias + ' )';else code = method + '( ' + tex + ', ' + uv + ' )'; // add a custom context for fix incompatibility with the core\n  // include ColorSpace function only for vertex shader (in fragment shader color space functions is added automatically by core)\n  // this should be removed in the future\n  // context.include is used to include or not functions if used FunctionNode\n  // context.ignoreCache =: not create temp variables nodeT0..9 to optimize the code\n\n  var context = {\n    include: builder.isShader('vertex'),\n    ignoreCache: true\n  };\n  var outputType = this.getType(builder);\n  builder.addContext(context);\n  this.colorSpace = this.colorSpace || new _ColorSpaceNode.ColorSpaceNode(new _ExpressionNode.ExpressionNode('', outputType));\n  this.colorSpace.fromDecoding(builder.getTextureEncodingFromMap(this.value));\n  this.colorSpace.input.parse(code);\n  code = this.colorSpace.build(builder, outputType); // end custom context\n\n  builder.removeContext();\n  return builder.format(code, outputType, output);\n};\n\nTextureNode.prototype.copy = function (source) {\n  _InputNode.InputNode.prototype.copy.call(this, source);\n\n  if (source.value) this.value = source.value;\n  this.uv = source.uv;\n  if (source.bias) this.bias = source.bias;\n  if (source.project !== undefined) this.project = source.project;\n  return this;\n};\n\nTextureNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    if (this.value) data.value = this.value.uuid;\n    data.uv = this.uv.toJSON(meta).uuid;\n    data.project = this.project;\n    if (this.bias) data.bias = this.bias.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$three_stdlib$nodes$utils$ColorSpaceNode","~$module$node_modules$three_stdlib$nodes$core$InputNode","~$module$node_modules$three_stdlib$nodes$core$ExpressionNode","~$module$node_modules$three_stdlib$nodes$accessors$UVNode"]],"~:properties",["^5",["copy","prototype","shared","project","TextureNode","__esModule","generate","nodeType","value","include","uv","ignoreCache","colorSpace","bias","getTexture","constructor","toJSON"]],"~:compiled-at",1630917515232,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$nodes$inputs$TextureNode.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/nodes/inputs/TextureNode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$nodes$inputs$TextureNode\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.TextureNode = TextureNode;\\n\\nvar _InputNode = require(\\\"../core/InputNode.js\\\");\\n\\nvar _UVNode = require(\\\"../accessors/UVNode.js\\\");\\n\\nvar _ColorSpaceNode = require(\\\"../utils/ColorSpaceNode.js\\\");\\n\\nvar _ExpressionNode = require(\\\"../core/ExpressionNode.js\\\");\\n\\nfunction TextureNode(value, uv, bias, project) {\\n  _InputNode.InputNode.call(this, 'v4', {\\n    shared: true\\n  });\\n\\n  this.value = value;\\n  this.uv = uv || new _UVNode.UVNode();\\n  this.bias = bias;\\n  this.project = project !== undefined ? project : false;\\n}\\n\\nTextureNode.prototype = Object.create(_InputNode.InputNode.prototype);\\nTextureNode.prototype.constructor = TextureNode;\\nTextureNode.prototype.nodeType = 'Texture';\\n\\nTextureNode.prototype.getTexture = function (builder, output) {\\n  return _InputNode.InputNode.prototype.generate.call(this, builder, output, this.value.uuid, 't');\\n};\\n\\nTextureNode.prototype.generate = function (builder, output) {\\n  if (output === 'sampler2D') {\\n    return this.getTexture(builder, output);\\n  }\\n\\n  var tex = this.getTexture(builder, output),\\n      uv = this.uv.build(builder, this.project ? 'v4' : 'v2'),\\n      bias = this.bias ? this.bias.build(builder, 'f') : undefined;\\n\\n  if (bias === undefined && builder.context.bias) {\\n    bias = builder.context.bias.setTexture(this).build(builder, 'f');\\n  }\\n\\n  var method, code;\\n  if (this.project) method = 'texture2DProj';else method = bias ? 'tex2DBias' : 'tex2D';\\n  if (bias) code = method + '( ' + tex + ', ' + uv + ', ' + bias + ' )';else code = method + '( ' + tex + ', ' + uv + ' )'; // add a custom context for fix incompatibility with the core\\n  // include ColorSpace function only for vertex shader (in fragment shader color space functions is added automatically by core)\\n  // this should be removed in the future\\n  // context.include is used to include or not functions if used FunctionNode\\n  // context.ignoreCache =: not create temp variables nodeT0..9 to optimize the code\\n\\n  var context = {\\n    include: builder.isShader('vertex'),\\n    ignoreCache: true\\n  };\\n  var outputType = this.getType(builder);\\n  builder.addContext(context);\\n  this.colorSpace = this.colorSpace || new _ColorSpaceNode.ColorSpaceNode(new _ExpressionNode.ExpressionNode('', outputType));\\n  this.colorSpace.fromDecoding(builder.getTextureEncodingFromMap(this.value));\\n  this.colorSpace.input.parse(code);\\n  code = this.colorSpace.build(builder, outputType); // end custom context\\n\\n  builder.removeContext();\\n  return builder.format(code, outputType, output);\\n};\\n\\nTextureNode.prototype.copy = function (source) {\\n  _InputNode.InputNode.prototype.copy.call(this, source);\\n\\n  if (source.value) this.value = source.value;\\n  this.uv = source.uv;\\n  if (source.bias) this.bias = source.bias;\\n  if (source.project !== undefined) this.project = source.project;\\n  return this;\\n};\\n\\nTextureNode.prototype.toJSON = function (meta) {\\n  var data = this.getJSONNode(meta);\\n\\n  if (!data) {\\n    data = this.createJSONNode(meta);\\n    if (this.value) data.value = this.value.uuid;\\n    data.uv = this.uv.toJSON(meta).uuid;\\n    data.project = this.project;\\n    if (this.bias) data.bias = this.bias.toJSON(meta).uuid;\\n  }\\n\\n  return data;\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"TextureNode\",\"value\",\"uv\",\"bias\",\"project\",\"_InputNode\",\"InputNode\",\"call\",\"shared\",\"_UVNode\",\"UVNode\",\"undefined\",\"Object\",\"defineProperty\",\"_ColorSpaceNode\",\"_ExpressionNode\",\"prototype\",\"create\",\"constructor\",\"nodeType\",\"getTexture\",\"TextureNode.prototype.getTexture\",\"builder\",\"output\",\"generate\",\"uuid\",\"TextureNode.prototype.generate\",\"tex\",\"build\",\"context\",\"setTexture\",\"method\",\"code\",\"include\",\"isShader\",\"ignoreCache\",\"outputType\",\"getType\",\"addContext\",\"colorSpace\",\"ColorSpaceNode\",\"ExpressionNode\",\"fromDecoding\",\"getTextureEncodingFromMap\",\"input\",\"parse\",\"removeContext\",\"format\",\"copy\",\"TextureNode.prototype.copy\",\"source\",\"toJSON\",\"TextureNode.prototype.toJSON\",\"meta\",\"data\",\"getJSONNode\",\"createJSONNode\"]\n}\n"]