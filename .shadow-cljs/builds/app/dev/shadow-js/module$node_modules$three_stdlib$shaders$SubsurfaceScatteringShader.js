["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/SubsurfaceScatteringShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$SubsurfaceScatteringShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.SubsurfaceScatteringShader=void 0;var _three=require(\"module$node_modules$three$build$three_module\");global=_three.ShaderChunk.meshphong_frag.slice(0,_three.ShaderChunk.meshphong_frag.indexOf(\"void main() {\"));require=_three.ShaderChunk.meshphong_frag.slice(_three.ShaderChunk.meshphong_frag.indexOf(\"void main() {\"));\nmodule=_three.UniformsUtils.merge([_three.ShaderLib.phong.uniforms,{thicknessMap:{value:null},thicknessColor:{value:new _three.Color(16777215)},thicknessDistortion:{value:.1},thicknessAmbient:{value:0},thicknessAttenuation:{value:.1},thicknessPower:{value:2},thicknessScale:{value:10}}]);var JSCompiler_temp_const=[\"#define USE_UV\",_three.ShaderChunk.meshphong_vert].join(\"\\n\"),JSCompiler_temp_const$jscomp$0=require.replace;_three=_three.ShaderChunk.lights_fragment_begin.split(\"RE_Direct( directLight, geometry, material, reflectedLight );\").join(\"RE_Direct( directLight, geometry, material, reflectedLight );\\n#if defined( SUBSURFACE ) \\x26\\x26 defined( USE_UV )\\n RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);\\n#endif\");\nglobal={uniforms:module,vertexShader:JSCompiler_temp_const,fragmentShader:[\"#define USE_UV\\n#define SUBSURFACE\",global,\"uniform sampler2D thicknessMap;\\nuniform float thicknessPower;\\nuniform float thicknessScale;\\nuniform float thicknessDistortion;\\nuniform float thicknessAmbient;\\nuniform float thicknessAttenuation;\\nuniform vec3 thicknessColor;\\nvoid RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {\\n\\tvec3 thickness \\x3d thicknessColor * texture2D(thicknessMap, uv).r;\\n\\tvec3 scatteringHalf \\x3d normalize(directLight.direction + (geometry.normal * thicknessDistortion));\\n\\tfloat scatteringDot \\x3d pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;\\n\\tvec3 scatteringIllu \\x3d (scatteringDot + thicknessAmbient) * thickness;\\n\\treflectedLight.directDiffuse +\\x3d scatteringIllu * thicknessAttenuation * directLight.color;\\n}\",\nJSCompiler_temp_const$jscomp$0.call(require,\"#include \\x3clights_fragment_begin\\x3e\",_three)].join(\"\\n\")};exports.SubsurfaceScatteringShader=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$SubsurfaceScatteringShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SubsurfaceScatteringShader = void 0;\n\nvar _three = require(\"three\");\n\n/**\n * ------------------------------------------------------------------------------------------\n * Subsurface Scattering shader\n * Based on GDC 2011 â€“ Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look\n * https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/\n *------------------------------------------------------------------------------------------\n */\nfunction replaceAll(string, find, replace) {\n  return string.split(find).join(replace);\n}\n\nvar meshphong_frag_head = _three.ShaderChunk['meshphong_frag'].slice(0, _three.ShaderChunk['meshphong_frag'].indexOf('void main() {'));\n\nvar meshphong_frag_body = _three.ShaderChunk['meshphong_frag'].slice(_three.ShaderChunk['meshphong_frag'].indexOf('void main() {'));\n\nvar SubsurfaceScatteringShader = {\n  uniforms: _three.UniformsUtils.merge([_three.ShaderLib['phong'].uniforms, {\n    thicknessMap: {\n      value: null\n    },\n    thicknessColor: {\n      value: new _three.Color(0xffffff)\n    },\n    thicknessDistortion: {\n      value: 0.1\n    },\n    thicknessAmbient: {\n      value: 0.0\n    },\n    thicknessAttenuation: {\n      value: 0.1\n    },\n    thicknessPower: {\n      value: 2.0\n    },\n    thicknessScale: {\n      value: 10.0\n    }\n  }]),\n  vertexShader: ['#define USE_UV', _three.ShaderChunk['meshphong_vert']].join('\\n'),\n  fragmentShader: ['#define USE_UV', '#define SUBSURFACE', meshphong_frag_head, 'uniform sampler2D thicknessMap;', 'uniform float thicknessPower;', 'uniform float thicknessScale;', 'uniform float thicknessDistortion;', 'uniform float thicknessAmbient;', 'uniform float thicknessAttenuation;', 'uniform vec3 thicknessColor;', 'void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {', '\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;', '\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));', '\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;', '\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;', '\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;', '}', meshphong_frag_body.replace('#include <lights_fragment_begin>', replaceAll(_three.ShaderChunk['lights_fragment_begin'], 'RE_Direct( directLight, geometry, material, reflectedLight );', ['RE_Direct( directLight, geometry, material, reflectedLight );', '#if defined( SUBSURFACE ) && defined( USE_UV )', ' RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);', '#endif'].join('\\n')))].join('\\n')\n};\nexports.SubsurfaceScatteringShader = SubsurfaceScatteringShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["fragmentShader","thicknessMap","thicknessPower","__esModule","thicknessAttenuation","vertexShader","value","thicknessAmbient","thicknessScale","SubsurfaceScatteringShader","thicknessDistortion","uniforms","thicknessColor"]],"~:compiled-at",1630917515585,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$SubsurfaceScatteringShader.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,mEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,0BAAR,CAAqC,IAAK,EAE1C,KAAIC,OAASP,OAAA,CAAQ,8CAAR,CAaTQ,OAAAA,CAAsBD,MAAOE,CAAAA,WAAP,CAAA,cAAqCC,CAAAA,KAArC,CAA2C,CAA3C,CAA8CH,MAAOE,CAAAA,WAAP,CAAA,cAAqCE,CAAAA,OAArC,CAA6C,eAA7C,CAA9C,CAEtBC,QAAAA,CAAsBL,MAAOE,CAAAA,WAAP,CAAA,cAAqCC,CAAAA,KAArC,CAA2CH,MAAOE,CAAAA,WAAP,CAAA,cAAqCE,CAAAA,OAArC,CAA6C,eAA7C,CAA3C,CAGd;MAAA,CAAAJ,MAAOM,CAAAA,aAAcC,CAAAA,KAArB,CAA2B,CAACP,MAAOQ,CAAAA,SAAP,CAAA,KAA0BC,CAAAA,QAA3B,CAAqC,CACxEC,aAAc,CACZZ,MAAO,IADK,CAD0D,CAIxEa,eAAgB,CACdb,MAAO,IAAIE,MAAOY,CAAAA,KAAX,CAAiB,QAAjB,CADO,CAJwD,CAOxEC,oBAAqB,CACnBf,MAAO,EADY,CAPmD,CAUxEgB,iBAAkB,CAChBhB,MAAO,CADS,CAVsD,CAaxEiB,qBAAsB,CACpBjB,MAAO,EADa,CAbkD,CAgBxEkB,eAAgB,CACdlB,MAAO,CADO,CAhBwD,CAmBxEmB,eAAgB,CACdnB,MAAO,EADO,CAnBwD,CAArC,CAA3B,CAuBI,KAAA,sBAAA,CAAC,gBAAD,CAAmBE,MAAOE,CAAAA,WAAP,CAAA,cAAnB,CAAyDgB,CAAAA,IAAzD,CAA8D,IAA9D,CAAA,CACk7BC,+BAApBd,OAAoBc,CAAAA,OAhCh8B,OAAA,CAgCu/BnB,MAAOE,CAAAA,WAAPkB,CAAAA,qBAhCz+BC,CAAAA,KAAP,CAgC6hCC,+DAhC7hC,CAAmBJ,CAAAA,IAAnB,CAgCwxCC,iMAhCxxC,CAOLpB;MAAAA,CAA6B,CAC/BU,SAAU,MADqB,CAwB/Bc,aAAc,qBAxBiB,CAyB/BC,eAAgB,CAAmB,oCAAnB,CAAyCvB,MAAzC,CAAu5B,s1BAAv5B;AAAg7BkB,8BAApB,CAAA,IAAA,CAAAd,OAAA,CAA4B,wCAA5B,CAAgE,MAAhE,CAA55B,CAAuyCa,CAAAA,IAAvyC,CAA4yC,IAA5yC,CAzBe,CA2BjCvB,QAAQI,CAAAA,0BAAR,CAAqCA,MApD2F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/SubsurfaceScatteringShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$SubsurfaceScatteringShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.SubsurfaceScatteringShader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\n/**\\n * ------------------------------------------------------------------------------------------\\n * Subsurface Scattering shader\\n * Based on GDC 2011 \\u2013 Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look\\n * https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/\\n *------------------------------------------------------------------------------------------\\n */\\nfunction replaceAll(string, find, replace) {\\n  return string.split(find).join(replace);\\n}\\n\\nvar meshphong_frag_head = _three.ShaderChunk['meshphong_frag'].slice(0, _three.ShaderChunk['meshphong_frag'].indexOf('void main() {'));\\n\\nvar meshphong_frag_body = _three.ShaderChunk['meshphong_frag'].slice(_three.ShaderChunk['meshphong_frag'].indexOf('void main() {'));\\n\\nvar SubsurfaceScatteringShader = {\\n  uniforms: _three.UniformsUtils.merge([_three.ShaderLib['phong'].uniforms, {\\n    thicknessMap: {\\n      value: null\\n    },\\n    thicknessColor: {\\n      value: new _three.Color(0xffffff)\\n    },\\n    thicknessDistortion: {\\n      value: 0.1\\n    },\\n    thicknessAmbient: {\\n      value: 0.0\\n    },\\n    thicknessAttenuation: {\\n      value: 0.1\\n    },\\n    thicknessPower: {\\n      value: 2.0\\n    },\\n    thicknessScale: {\\n      value: 10.0\\n    }\\n  }]),\\n  vertexShader: ['#define USE_UV', _three.ShaderChunk['meshphong_vert']].join('\\\\n'),\\n  fragmentShader: ['#define USE_UV', '#define SUBSURFACE', meshphong_frag_head, 'uniform sampler2D thicknessMap;', 'uniform float thicknessPower;', 'uniform float thicknessScale;', 'uniform float thicknessDistortion;', 'uniform float thicknessAmbient;', 'uniform float thicknessAttenuation;', 'uniform vec3 thicknessColor;', 'void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {', '\\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;', '\\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));', '\\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;', '\\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;', '\\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;', '}', meshphong_frag_body.replace('#include <lights_fragment_begin>', replaceAll(_three.ShaderChunk['lights_fragment_begin'], 'RE_Direct( directLight, geometry, material, reflectedLight );', ['RE_Direct( directLight, geometry, material, reflectedLight );', '#if defined( SUBSURFACE ) && defined( USE_UV )', ' RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);', '#endif'].join('\\\\n')))].join('\\\\n')\\n};\\nexports.SubsurfaceScatteringShader = SubsurfaceScatteringShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"SubsurfaceScatteringShader\",\"_three\",\"meshphong_frag_head\",\"ShaderChunk\",\"slice\",\"indexOf\",\"meshphong_frag_body\",\"UniformsUtils\",\"merge\",\"ShaderLib\",\"uniforms\",\"thicknessMap\",\"thicknessColor\",\"Color\",\"thicknessDistortion\",\"thicknessAmbient\",\"thicknessAttenuation\",\"thicknessPower\",\"thicknessScale\",\"join\",\"replace\",\"string\",\"split\",\"find\",\"vertexShader\",\"fragmentShader\"]\n}\n"]