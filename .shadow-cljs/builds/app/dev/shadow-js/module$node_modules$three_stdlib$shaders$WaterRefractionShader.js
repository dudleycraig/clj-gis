["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/WaterRefractionShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$WaterRefractionShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.WaterRefractionShader=void 0;exports.WaterRefractionShader={uniforms:{color:{value:null},time:{value:0},tDiffuse:{value:null},tDudv:{value:null},textureMatrix:{value:null}},vertexShader:\"uniform mat4 textureMatrix;\\nvarying vec2 vUv;\\nvarying vec4 vUvRefraction;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tvUvRefraction \\x3d textureMatrix * vec4( position, 1.0 );\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",\nfragmentShader:\"uniform vec3 color;\\nuniform float time;\\nuniform sampler2D tDiffuse;\\nuniform sampler2D tDudv;\\nvarying vec2 vUv;\\nvarying vec4 vUvRefraction;\\nfloat blendOverlay( float base, float blend ) {\\n\\treturn( base \\x3c 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\\n}\\nvec3 blendOverlay( vec3 base, vec3 blend ) {\\n\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );\\n}\\nvoid main() {\\n float waveStrength \\x3d 0.1;\\n float waveSpeed \\x3d 0.03;\\n\\tvec2 distortedUv \\x3d texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;\\n\\tdistortedUv \\x3d vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );\\n\\tvec2 distortion \\x3d ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;\\n vec4 uv \\x3d vec4( vUvRefraction );\\n uv.xy +\\x3d distortion;\\n\\tvec4 base \\x3d texture2DProj( tDiffuse, uv );\\n\\tgl_FragColor \\x3d vec4( blendOverlay( base.rgb, color ), 1.0 );\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$WaterRefractionShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WaterRefractionShader = void 0;\nvar WaterRefractionShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    time: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    tDudv: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: ['uniform mat4 textureMatrix;', 'varying vec2 vUv;', 'varying vec4 vUvRefraction;', 'void main() {', '\tvUv = uv;', '\tvUvRefraction = textureMatrix * vec4( position, 1.0 );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 color;', 'uniform float time;', 'uniform sampler2D tDiffuse;', 'uniform sampler2D tDudv;', 'varying vec2 vUv;', 'varying vec4 vUvRefraction;', 'float blendOverlay( float base, float blend ) {', '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );', '}', 'vec3 blendOverlay( vec3 base, vec3 blend ) {', '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );', '}', 'void main() {', ' float waveStrength = 0.1;', ' float waveSpeed = 0.03;', // simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\n  '\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;', '\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );', '\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;', // new uv coords\n  ' vec4 uv = vec4( vUvRefraction );', ' uv.xy += distortion;', '\tvec4 base = texture2DProj( tDiffuse, uv );', '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );', '}'].join('\\n')\n};\nexports.WaterRefractionShader = WaterRefractionShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","textureMatrix","__esModule","tDiffuse","vertexShader","value","tDudv","time","uniforms","WaterRefractionShader","color"]],"~:compiled-at",1630917515581,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$WaterRefractionShader.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,qBAAR,CAAgC,IAAK,EAwBrCJ,QAAQI,CAAAA,qBAAR,CAvB4BA,CAC1BC,SAAU,CACRC,MAAO,CACLH,MAAO,IADF,CADC,CAIRI,KAAM,CACJJ,MAAO,CADH,CAJE,CAORK,SAAU,CACRL,MAAO,IADC,CAPF,CAURM,MAAO,CACLN,MAAO,IADF,CAVC,CAaRO,cAAe,CACbP,MAAO,IADM,CAbP,CADgBC,CAkB1BO,aAA0Q,4PAlBhPP;AAmB1BQ,eAE8K,6+BArBpJR,CAP+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/WaterRefractionShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$WaterRefractionShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.WaterRefractionShader = void 0;\\nvar WaterRefractionShader = {\\n  uniforms: {\\n    color: {\\n      value: null\\n    },\\n    time: {\\n      value: 0\\n    },\\n    tDiffuse: {\\n      value: null\\n    },\\n    tDudv: {\\n      value: null\\n    },\\n    textureMatrix: {\\n      value: null\\n    }\\n  },\\n  vertexShader: ['uniform mat4 textureMatrix;', 'varying vec2 vUv;', 'varying vec4 vUvRefraction;', 'void main() {', '\\tvUv = uv;', '\\tvUvRefraction = textureMatrix * vec4( position, 1.0 );', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform vec3 color;', 'uniform float time;', 'uniform sampler2D tDiffuse;', 'uniform sampler2D tDudv;', 'varying vec2 vUv;', 'varying vec4 vUvRefraction;', 'float blendOverlay( float base, float blend ) {', '\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );', '}', 'vec3 blendOverlay( vec3 base, vec3 blend ) {', '\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );', '}', 'void main() {', ' float waveStrength = 0.1;', ' float waveSpeed = 0.03;', // simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\\n  '\\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;', '\\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );', '\\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;', // new uv coords\\n  ' vec4 uv = vec4( vUvRefraction );', ' uv.xy += distortion;', '\\tvec4 base = texture2DProj( tDiffuse, uv );', '\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );', '}'].join('\\\\n')\\n};\\nexports.WaterRefractionShader = WaterRefractionShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"WaterRefractionShader\",\"uniforms\",\"color\",\"time\",\"tDiffuse\",\"tDudv\",\"textureMatrix\",\"vertexShader\",\"fragmentShader\"]\n}\n"]