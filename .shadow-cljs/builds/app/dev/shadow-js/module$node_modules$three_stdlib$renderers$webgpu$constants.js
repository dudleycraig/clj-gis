["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/renderers/webgpu/constants.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$renderers$webgpu$constants=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.OneMinusBlendColorFactor=exports.GPUVertexFormat=exports.GPUTextureViewDimension=exports.GPUTextureFormat=exports.GPUTextureDimension=exports.GPUStoreOp=exports.GPUStencilOperation=exports.GPUPrimitiveTopology=exports.GPULoadOp=exports.GPUInputStepMode=exports.GPUIndexFormat=exports.GPUFrontFace=exports.GPUFilterMode=exports.GPUCullMode=\nexports.GPUCompareFunction=exports.GPUColorWriteFlags=exports.GPUBlendOperation=exports.GPUBlendFactor=exports.GPUBindingType=exports.GPUAddressMode=exports.BlendColorFactor=void 0;exports.GPUPrimitiveTopology={PointList:\"point-list\",LineList:\"line-list\",LineStrip:\"line-strip\",TriangleList:\"triangle-list\",TriangleStrip:\"triangle-strip\"};exports.GPUCompareFunction={Never:\"never\",Less:\"less\",Equal:\"equal\",LessEqual:\"less-equal\",Greater:\"greater\",NotEqual:\"not-equal\",GreaterEqual:\"greater-equal\",Always:\"always\"};\nexports.GPUStoreOp={Store:\"store\",Clear:\"clear\"};exports.GPULoadOp={Load:\"load\"};exports.GPUFrontFace={CCW:\"ccw\",CW:\"cw\"};exports.GPUCullMode={None:\"none\",Front:\"front\",Back:\"back\"};exports.GPUIndexFormat={Uint16:\"uint16\",Uint32:\"uint32\"};exports.GPUVertexFormat={Uchar2:\"uchar2\",Uchar4:\"uchar4\",Char2:\"char2\",Char4:\"char4\",Uchar2Norm:\"uchar2norm\",Uchar4Norm:\"uchar4norm\",Char2Norm:\"char2norm\",Char4Norm:\"char4norm\",Ushort2:\"ushort2\",Ushort4:\"ushort4\",Short2:\"short2\",Short4:\"short4\",Ushort2Norm:\"ushort2norm\",\nUshort4Norm:\"ushort4norm\",Short2Norm:\"short2norm\",Short4Norm:\"short4norm\",Half2:\"half2\",Half4:\"half4\",Float:\"float\",Float2:\"float2\",Float3:\"float3\",Float4:\"float4\",Uint:\"uint\",Uint2:\"uint2\",Uint3:\"uint3\",Uint4:\"uint4\",Int:\"int\",Int2:\"int2\",Int3:\"int3\",Int4:\"int4\"};exports.GPUTextureFormat={R8Unorm:\"r8unorm\",R8Snorm:\"r8snorm\",R8Uint:\"r8uint\",R8Sint:\"r8sint\",R16Uint:\"r16uint\",R16Sint:\"r16sint\",R16Float:\"r16float\",RG8Unorm:\"rg8unorm\",RG8Snorm:\"rg8snorm\",RG8Uint:\"rg8uint\",RG8Sint:\"rg8sint\",R32Uint:\"r32uint\",\nR32Sint:\"r32sint\",R32Float:\"r32float\",RG16Uint:\"rg16uint\",RG16Sint:\"rg16sint\",RG16Float:\"rg16float\",RGBA8Unorm:\"rgba8unorm\",RGBA8UnormSRGB:\"rgba8unorm-srgb\",RGBA8Snorm:\"rgba8snorm\",RGBA8Uint:\"rgba8uint\",RGBA8Sint:\"rgba8sint\",BRGA8Unorm:\"bgra8unorm\",BRGA8UnormSRGB:\"bgra8unorm-srgb\",RGB9E5UFloat:\"rgb9e5ufloat\",RGB10A2Unorm:\"rgb10a2unorm\",RG11B10uFloat:\"rgb10a2unorm\",RG32Uint:\"rg32uint\",RG32Sint:\"rg32sint\",RG32Float:\"rg32float\",RGBA16Uint:\"rgba16uint\",RGBA16Sint:\"rgba16sint\",RGBA16Float:\"rgba16float\",\nRGBA32Uint:\"rgba32uint\",RGBA32Sint:\"rgba32sint\",RGBA32Float:\"rgba32float\",Stencil8:\"stencil8\",Depth16Unorm:\"depth16unorm\",Depth24Plus:\"depth24plus\",Depth24PlusStencil8:\"depth24plus-stencil8\",Depth32Float:\"depth32float\",BC1RGBAUnorm:\"bc1-rgba-unorm\",BC1RGBAUnormSRGB:\"bc1-rgba-unorm-srgb\",BC2RGBAUnorm:\"bc2-rgba-unorm\",BC2RGBAUnormSRGB:\"bc2-rgba-unorm-srgb\",BC3RGBAUnorm:\"bc3-rgba-unorm\",BC3RGBAUnormSRGB:\"bc3-rgba-unorm-srgb\",BC4RUnorm:\"bc4-r-unorm\",BC4RSNorm:\"bc4-r-snorm\",BC5RGUnorm:\"bc5-rg-unorm\",BC5RGSnorm:\"bc5-rg-snorm\",\nBC6HRGBUFloat:\"bc6h-rgb-ufloat\",BC6HRGBFloat:\"bc6h-rgb-float\",BC7RGBAUnorm:\"bc7-rgba-unorm\",BC7RGBAUnormSRGB:\"bc7-rgba-srgb\",Depth24UnormStencil8:\"depth24unorm-stencil8\",Depth32FloatStencil8:\"depth32float-stencil8\"};exports.GPUAddressMode={ClampToEdge:\"clamp-to-edge\",Repeat:\"repeat\",MirrorRepeat:\"mirror-repeat\"};exports.GPUFilterMode={Linear:\"linear\",Nearest:\"nearest\"};exports.GPUBlendFactor={Zero:\"zero\",One:\"one\",SrcColor:\"src-color\",OneMinusSrcColor:\"one-minus-src-color\",SrcAlpha:\"src-alpha\",OneMinusSrcAlpha:\"one-minus-src-alpha\",\nDstColor:\"dst-color\",OneMinusDstColor:\"one-minus-dst-color\",DstAlpha:\"dst-alpha\",OneMinusDstAlpha:\"one-minus-dst-alpha\",SrcAlphaSaturated:\"src-alpha-saturated\",BlendColor:\"blend-color\",OneMinusBlendColor:\"one-minus-blend-color\"};exports.GPUBlendOperation={Add:\"add\",Subtract:\"subtract\",ReverseSubtract:\"reverse-subtract\",Min:\"min\",Max:\"max\"};exports.GPUColorWriteFlags={None:0,Red:1,Green:2,Blue:4,Alpha:8,All:15};exports.GPUStencilOperation={Keep:\"keep\",Zero:\"zero\",Replace:\"replace\",Invert:\"invert\",\nIncrementClamp:\"increment-clamp\",DecrementClamp:\"decrement-clamp\",IncrementWrap:\"increment-wrap\",DecrementWrap:\"decrement-wrap\"};exports.GPUBindingType={UniformBuffer:\"uniform-buffer\",StorageBuffer:\"storage-buffer\",ReadonlyStorageBuffer:\"readonly-storage-buffer\",Sampler:\"sampler\",ComparisonSampler:\"comparison-sampler\",SampledTexture:\"sampled-texture\",MultisampledTexture:\"multisampled-texture\",ReadonlyStorageTexture:\"readonly-storage-texture\",WriteonlyStorageTexture:\"writeonly-storage-texture\"};exports.GPUTextureDimension=\n{OneD:\"1d\",TwoD:\"2d\",ThreeD:\"3d\"};exports.GPUTextureViewDimension={OneD:\"1d\",TwoD:\"2d\",TwoDArray:\"2d-array\",Cube:\"cube\",CubeArray:\"cube-array\",ThreeD:\"3d\"};exports.GPUInputStepMode={Vertex:\"vertex\",Instance:\"instance\"};exports.BlendColorFactor=211;exports.OneMinusBlendColorFactor=212}","~:source","shadow$provide[\"module$node_modules$three_stdlib$renderers$webgpu$constants\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OneMinusBlendColorFactor = exports.GPUVertexFormat = exports.GPUTextureViewDimension = exports.GPUTextureFormat = exports.GPUTextureDimension = exports.GPUStoreOp = exports.GPUStencilOperation = exports.GPUPrimitiveTopology = exports.GPULoadOp = exports.GPUInputStepMode = exports.GPUIndexFormat = exports.GPUFrontFace = exports.GPUFilterMode = exports.GPUCullMode = exports.GPUCompareFunction = exports.GPUColorWriteFlags = exports.GPUBlendOperation = exports.GPUBlendFactor = exports.GPUBindingType = exports.GPUAddressMode = exports.BlendColorFactor = void 0;\nvar GPUPrimitiveTopology = {\n  PointList: 'point-list',\n  LineList: 'line-list',\n  LineStrip: 'line-strip',\n  TriangleList: 'triangle-list',\n  TriangleStrip: 'triangle-strip'\n};\nexports.GPUPrimitiveTopology = GPUPrimitiveTopology;\nvar GPUCompareFunction = {\n  Never: 'never',\n  Less: 'less',\n  Equal: 'equal',\n  LessEqual: 'less-equal',\n  Greater: 'greater',\n  NotEqual: 'not-equal',\n  GreaterEqual: 'greater-equal',\n  Always: 'always'\n};\nexports.GPUCompareFunction = GPUCompareFunction;\nvar GPUStoreOp = {\n  Store: 'store',\n  Clear: 'clear'\n};\nexports.GPUStoreOp = GPUStoreOp;\nvar GPULoadOp = {\n  Load: 'load'\n};\nexports.GPULoadOp = GPULoadOp;\nvar GPUFrontFace = {\n  CCW: 'ccw',\n  CW: 'cw'\n};\nexports.GPUFrontFace = GPUFrontFace;\nvar GPUCullMode = {\n  None: 'none',\n  Front: 'front',\n  Back: 'back'\n};\nexports.GPUCullMode = GPUCullMode;\nvar GPUIndexFormat = {\n  Uint16: 'uint16',\n  Uint32: 'uint32'\n};\nexports.GPUIndexFormat = GPUIndexFormat;\nvar GPUVertexFormat = {\n  Uchar2: 'uchar2',\n  Uchar4: 'uchar4',\n  Char2: 'char2',\n  Char4: 'char4',\n  Uchar2Norm: 'uchar2norm',\n  Uchar4Norm: 'uchar4norm',\n  Char2Norm: 'char2norm',\n  Char4Norm: 'char4norm',\n  Ushort2: 'ushort2',\n  Ushort4: 'ushort4',\n  Short2: 'short2',\n  Short4: 'short4',\n  Ushort2Norm: 'ushort2norm',\n  Ushort4Norm: 'ushort4norm',\n  Short2Norm: 'short2norm',\n  Short4Norm: 'short4norm',\n  Half2: 'half2',\n  Half4: 'half4',\n  Float: 'float',\n  Float2: 'float2',\n  Float3: 'float3',\n  Float4: 'float4',\n  Uint: 'uint',\n  Uint2: 'uint2',\n  Uint3: 'uint3',\n  Uint4: 'uint4',\n  Int: 'int',\n  Int2: 'int2',\n  Int3: 'int3',\n  Int4: 'int4'\n};\nexports.GPUVertexFormat = GPUVertexFormat;\nvar GPUTextureFormat = {\n  // 8-bit formats\n  R8Unorm: 'r8unorm',\n  R8Snorm: 'r8snorm',\n  R8Uint: 'r8uint',\n  R8Sint: 'r8sint',\n  // 16-bit formats\n  R16Uint: 'r16uint',\n  R16Sint: 'r16sint',\n  R16Float: 'r16float',\n  RG8Unorm: 'rg8unorm',\n  RG8Snorm: 'rg8snorm',\n  RG8Uint: 'rg8uint',\n  RG8Sint: 'rg8sint',\n  // 32-bit formats\n  R32Uint: 'r32uint',\n  R32Sint: 'r32sint',\n  R32Float: 'r32float',\n  RG16Uint: 'rg16uint',\n  RG16Sint: 'rg16sint',\n  RG16Float: 'rg16float',\n  RGBA8Unorm: 'rgba8unorm',\n  RGBA8UnormSRGB: 'rgba8unorm-srgb',\n  RGBA8Snorm: 'rgba8snorm',\n  RGBA8Uint: 'rgba8uint',\n  RGBA8Sint: 'rgba8sint',\n  BRGA8Unorm: 'bgra8unorm',\n  BRGA8UnormSRGB: 'bgra8unorm-srgb',\n  // Packed 32-bit formats\n  RGB9E5UFloat: 'rgb9e5ufloat',\n  RGB10A2Unorm: 'rgb10a2unorm',\n  RG11B10uFloat: 'rgb10a2unorm',\n  // 64-bit formats\n  RG32Uint: 'rg32uint',\n  RG32Sint: 'rg32sint',\n  RG32Float: 'rg32float',\n  RGBA16Uint: 'rgba16uint',\n  RGBA16Sint: 'rgba16sint',\n  RGBA16Float: 'rgba16float',\n  // 128-bit formats\n  RGBA32Uint: 'rgba32uint',\n  RGBA32Sint: 'rgba32sint',\n  RGBA32Float: 'rgba32float',\n  // Depth and stencil formats\n  Stencil8: 'stencil8',\n  Depth16Unorm: 'depth16unorm',\n  Depth24Plus: 'depth24plus',\n  Depth24PlusStencil8: 'depth24plus-stencil8',\n  Depth32Float: 'depth32float',\n  // BC compressed formats usable if 'texture-compression-bc' is both\n  // supported by the device/user agent and enabled in requestDevice.\n  BC1RGBAUnorm: 'bc1-rgba-unorm',\n  BC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',\n  BC2RGBAUnorm: 'bc2-rgba-unorm',\n  BC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',\n  BC3RGBAUnorm: 'bc3-rgba-unorm',\n  BC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',\n  BC4RUnorm: 'bc4-r-unorm',\n  BC4RSNorm: 'bc4-r-snorm',\n  BC5RGUnorm: 'bc5-rg-unorm',\n  BC5RGSnorm: 'bc5-rg-snorm',\n  BC6HRGBUFloat: 'bc6h-rgb-ufloat',\n  BC6HRGBFloat: 'bc6h-rgb-float',\n  BC7RGBAUnorm: 'bc7-rgba-unorm',\n  BC7RGBAUnormSRGB: 'bc7-rgba-srgb',\n  // 'depth24unorm-stencil8' extension\n  Depth24UnormStencil8: 'depth24unorm-stencil8',\n  // 'depth32float-stencil8' extension\n  Depth32FloatStencil8: 'depth32float-stencil8'\n};\nexports.GPUTextureFormat = GPUTextureFormat;\nvar GPUAddressMode = {\n  ClampToEdge: 'clamp-to-edge',\n  Repeat: 'repeat',\n  MirrorRepeat: 'mirror-repeat'\n};\nexports.GPUAddressMode = GPUAddressMode;\nvar GPUFilterMode = {\n  Linear: 'linear',\n  Nearest: 'nearest'\n};\nexports.GPUFilterMode = GPUFilterMode;\nvar GPUBlendFactor = {\n  Zero: 'zero',\n  One: 'one',\n  SrcColor: 'src-color',\n  OneMinusSrcColor: 'one-minus-src-color',\n  SrcAlpha: 'src-alpha',\n  OneMinusSrcAlpha: 'one-minus-src-alpha',\n  DstColor: 'dst-color',\n  OneMinusDstColor: 'one-minus-dst-color',\n  DstAlpha: 'dst-alpha',\n  OneMinusDstAlpha: 'one-minus-dst-alpha',\n  SrcAlphaSaturated: 'src-alpha-saturated',\n  BlendColor: 'blend-color',\n  OneMinusBlendColor: 'one-minus-blend-color'\n};\nexports.GPUBlendFactor = GPUBlendFactor;\nvar GPUBlendOperation = {\n  Add: 'add',\n  Subtract: 'subtract',\n  ReverseSubtract: 'reverse-subtract',\n  Min: 'min',\n  Max: 'max'\n};\nexports.GPUBlendOperation = GPUBlendOperation;\nvar GPUColorWriteFlags = {\n  None: 0,\n  Red: 0x1,\n  Green: 0x2,\n  Blue: 0x4,\n  Alpha: 0x8,\n  All: 0xf\n};\nexports.GPUColorWriteFlags = GPUColorWriteFlags;\nvar GPUStencilOperation = {\n  Keep: 'keep',\n  Zero: 'zero',\n  Replace: 'replace',\n  Invert: 'invert',\n  IncrementClamp: 'increment-clamp',\n  DecrementClamp: 'decrement-clamp',\n  IncrementWrap: 'increment-wrap',\n  DecrementWrap: 'decrement-wrap'\n};\nexports.GPUStencilOperation = GPUStencilOperation;\nvar GPUBindingType = {\n  UniformBuffer: 'uniform-buffer',\n  StorageBuffer: 'storage-buffer',\n  ReadonlyStorageBuffer: 'readonly-storage-buffer',\n  Sampler: 'sampler',\n  ComparisonSampler: 'comparison-sampler',\n  SampledTexture: 'sampled-texture',\n  MultisampledTexture: 'multisampled-texture',\n  ReadonlyStorageTexture: 'readonly-storage-texture',\n  WriteonlyStorageTexture: 'writeonly-storage-texture'\n};\nexports.GPUBindingType = GPUBindingType;\nvar GPUTextureDimension = {\n  OneD: '1d',\n  TwoD: '2d',\n  ThreeD: '3d'\n};\nexports.GPUTextureDimension = GPUTextureDimension;\nvar GPUTextureViewDimension = {\n  OneD: '1d',\n  TwoD: '2d',\n  TwoDArray: '2d-array',\n  Cube: 'cube',\n  CubeArray: 'cube-array',\n  ThreeD: '3d'\n};\nexports.GPUTextureViewDimension = GPUTextureViewDimension;\nvar GPUInputStepMode = {\n  Vertex: 'vertex',\n  Instance: 'instance'\n}; // @TODO: Move to src/constants.js\n\nexports.GPUInputStepMode = GPUInputStepMode;\nvar BlendColorFactor = 211;\nexports.BlendColorFactor = BlendColorFactor;\nvar OneMinusBlendColorFactor = 212;\nexports.OneMinusBlendColorFactor = OneMinusBlendColorFactor;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["Uint4","RGBA16Float","OneMinusDstAlpha","Ushort4","BC5RGUnorm","RG16Float","Half4","Depth24UnormStencil8","RG8Unorm","NotEqual","BRGA8UnormSRGB","Depth16Unorm","TriangleList","RG11B10uFloat","RGB10A2Unorm","DecrementClamp","R8Unorm","R16Uint","RGBA8Unorm","R8Snorm","GPUCompareFunction","Front","Store","Equal","Max","Uchar2Norm","IncrementWrap","RGBA8Uint","GPUColorWriteFlags","OneD","WriteonlyStorageTexture","RGBA8UnormSRGB","RG16Sint","BRGA8Unorm","Short2","RG8Uint","OneMinusSrcAlpha","Depth24Plus","GPUStencilOperation","Subtract","ReadonlyStorageTexture","Blue","Short4Norm","Uint3","Uint16","BC7RGBAUnorm","GPULoadOp","Zero","TriangleStrip","BC6HRGBFloat","Clear","Int2","ReverseSubtract","BC7RGBAUnormSRGB","__esModule","BC1RGBAUnorm","Green","Always","ReadonlyStorageBuffer","GPUStoreOp","OneMinusDstColor","GreaterEqual","PointList","RGBA16Sint","OneMinusBlendColor","BC4RSNorm","Uchar4Norm","CCW","R32Sint","Nearest","Depth24PlusStencil8","Back","Uint","None","TwoDArray","Int3","RG32Uint","Alpha","BC2RGBAUnorm","Float2","GPUTextureViewDimension","Linear","value","Int4","Add","Short2Norm","Cube","OneMinusSrcColor","CubeArray","RGBA16Uint","LessEqual","GPUFrontFace","GPUTextureDimension","OneMinusBlendColorFactor","BC5RGSnorm","Greater","Float3","R8Sint","TwoD","Invert","Less","Char4","BC2RGBAUnormSRGB","IncrementClamp","One","RGBA32Float","RGBA32Sint","Stencil8","Red","Replace","R16Sint","Char2","Int","RGBA8Snorm","BC1RGBAUnormSRGB","RGB9E5UFloat","RG8Sint","R32Uint","Uint2","RG32Float","Char2Norm","Uchar4","DecrementWrap","SampledTexture","UniformBuffer","Uint32","BlendColor","Never","Load","SrcColor","Sampler","DstColor","GPUBlendOperation","GPUInputStepMode","Vertex","GPUIndexFormat","GPUPrimitiveTopology","Ushort2","GPUBlendFactor","Depth32FloatStencil8","ComparisonSampler","BlendColorFactor","DstAlpha","Depth32Float","RGBA8Sint","Ushort2Norm","RGBA32Uint","GPUCullMode","MirrorRepeat","Ushort4Norm","Short4","MultisampledTexture","BC3RGBAUnorm","RG32Sint","LineStrip","Half2","Char4Norm","BC6HRGBUFloat","Instance","RG16Uint","R16Float","GPUTextureFormat","Float4","All","Repeat","ThreeD","GPUFilterMode","R8Uint","BC3RGBAUnormSRGB","GPUAddressMode","Uchar2","Min","Float","LineList","ClampToEdge","GPUVertexFormat","GPUBindingType","CW","StorageBuffer","R32Float","SrcAlphaSaturated","SrcAlpha","Keep","BC4RUnorm","RG8Snorm"]],"~:compiled-at",1630917515140,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$renderers$webgpu$constants.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/renderers/webgpu/constants.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$renderers$webgpu$constants\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.OneMinusBlendColorFactor = exports.GPUVertexFormat = exports.GPUTextureViewDimension = exports.GPUTextureFormat = exports.GPUTextureDimension = exports.GPUStoreOp = exports.GPUStencilOperation = exports.GPUPrimitiveTopology = exports.GPULoadOp = exports.GPUInputStepMode = exports.GPUIndexFormat = exports.GPUFrontFace = exports.GPUFilterMode = exports.GPUCullMode = exports.GPUCompareFunction = exports.GPUColorWriteFlags = exports.GPUBlendOperation = exports.GPUBlendFactor = exports.GPUBindingType = exports.GPUAddressMode = exports.BlendColorFactor = void 0;\\nvar GPUPrimitiveTopology = {\\n  PointList: 'point-list',\\n  LineList: 'line-list',\\n  LineStrip: 'line-strip',\\n  TriangleList: 'triangle-list',\\n  TriangleStrip: 'triangle-strip'\\n};\\nexports.GPUPrimitiveTopology = GPUPrimitiveTopology;\\nvar GPUCompareFunction = {\\n  Never: 'never',\\n  Less: 'less',\\n  Equal: 'equal',\\n  LessEqual: 'less-equal',\\n  Greater: 'greater',\\n  NotEqual: 'not-equal',\\n  GreaterEqual: 'greater-equal',\\n  Always: 'always'\\n};\\nexports.GPUCompareFunction = GPUCompareFunction;\\nvar GPUStoreOp = {\\n  Store: 'store',\\n  Clear: 'clear'\\n};\\nexports.GPUStoreOp = GPUStoreOp;\\nvar GPULoadOp = {\\n  Load: 'load'\\n};\\nexports.GPULoadOp = GPULoadOp;\\nvar GPUFrontFace = {\\n  CCW: 'ccw',\\n  CW: 'cw'\\n};\\nexports.GPUFrontFace = GPUFrontFace;\\nvar GPUCullMode = {\\n  None: 'none',\\n  Front: 'front',\\n  Back: 'back'\\n};\\nexports.GPUCullMode = GPUCullMode;\\nvar GPUIndexFormat = {\\n  Uint16: 'uint16',\\n  Uint32: 'uint32'\\n};\\nexports.GPUIndexFormat = GPUIndexFormat;\\nvar GPUVertexFormat = {\\n  Uchar2: 'uchar2',\\n  Uchar4: 'uchar4',\\n  Char2: 'char2',\\n  Char4: 'char4',\\n  Uchar2Norm: 'uchar2norm',\\n  Uchar4Norm: 'uchar4norm',\\n  Char2Norm: 'char2norm',\\n  Char4Norm: 'char4norm',\\n  Ushort2: 'ushort2',\\n  Ushort4: 'ushort4',\\n  Short2: 'short2',\\n  Short4: 'short4',\\n  Ushort2Norm: 'ushort2norm',\\n  Ushort4Norm: 'ushort4norm',\\n  Short2Norm: 'short2norm',\\n  Short4Norm: 'short4norm',\\n  Half2: 'half2',\\n  Half4: 'half4',\\n  Float: 'float',\\n  Float2: 'float2',\\n  Float3: 'float3',\\n  Float4: 'float4',\\n  Uint: 'uint',\\n  Uint2: 'uint2',\\n  Uint3: 'uint3',\\n  Uint4: 'uint4',\\n  Int: 'int',\\n  Int2: 'int2',\\n  Int3: 'int3',\\n  Int4: 'int4'\\n};\\nexports.GPUVertexFormat = GPUVertexFormat;\\nvar GPUTextureFormat = {\\n  // 8-bit formats\\n  R8Unorm: 'r8unorm',\\n  R8Snorm: 'r8snorm',\\n  R8Uint: 'r8uint',\\n  R8Sint: 'r8sint',\\n  // 16-bit formats\\n  R16Uint: 'r16uint',\\n  R16Sint: 'r16sint',\\n  R16Float: 'r16float',\\n  RG8Unorm: 'rg8unorm',\\n  RG8Snorm: 'rg8snorm',\\n  RG8Uint: 'rg8uint',\\n  RG8Sint: 'rg8sint',\\n  // 32-bit formats\\n  R32Uint: 'r32uint',\\n  R32Sint: 'r32sint',\\n  R32Float: 'r32float',\\n  RG16Uint: 'rg16uint',\\n  RG16Sint: 'rg16sint',\\n  RG16Float: 'rg16float',\\n  RGBA8Unorm: 'rgba8unorm',\\n  RGBA8UnormSRGB: 'rgba8unorm-srgb',\\n  RGBA8Snorm: 'rgba8snorm',\\n  RGBA8Uint: 'rgba8uint',\\n  RGBA8Sint: 'rgba8sint',\\n  BRGA8Unorm: 'bgra8unorm',\\n  BRGA8UnormSRGB: 'bgra8unorm-srgb',\\n  // Packed 32-bit formats\\n  RGB9E5UFloat: 'rgb9e5ufloat',\\n  RGB10A2Unorm: 'rgb10a2unorm',\\n  RG11B10uFloat: 'rgb10a2unorm',\\n  // 64-bit formats\\n  RG32Uint: 'rg32uint',\\n  RG32Sint: 'rg32sint',\\n  RG32Float: 'rg32float',\\n  RGBA16Uint: 'rgba16uint',\\n  RGBA16Sint: 'rgba16sint',\\n  RGBA16Float: 'rgba16float',\\n  // 128-bit formats\\n  RGBA32Uint: 'rgba32uint',\\n  RGBA32Sint: 'rgba32sint',\\n  RGBA32Float: 'rgba32float',\\n  // Depth and stencil formats\\n  Stencil8: 'stencil8',\\n  Depth16Unorm: 'depth16unorm',\\n  Depth24Plus: 'depth24plus',\\n  Depth24PlusStencil8: 'depth24plus-stencil8',\\n  Depth32Float: 'depth32float',\\n  // BC compressed formats usable if 'texture-compression-bc' is both\\n  // supported by the device/user agent and enabled in requestDevice.\\n  BC1RGBAUnorm: 'bc1-rgba-unorm',\\n  BC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',\\n  BC2RGBAUnorm: 'bc2-rgba-unorm',\\n  BC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',\\n  BC3RGBAUnorm: 'bc3-rgba-unorm',\\n  BC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',\\n  BC4RUnorm: 'bc4-r-unorm',\\n  BC4RSNorm: 'bc4-r-snorm',\\n  BC5RGUnorm: 'bc5-rg-unorm',\\n  BC5RGSnorm: 'bc5-rg-snorm',\\n  BC6HRGBUFloat: 'bc6h-rgb-ufloat',\\n  BC6HRGBFloat: 'bc6h-rgb-float',\\n  BC7RGBAUnorm: 'bc7-rgba-unorm',\\n  BC7RGBAUnormSRGB: 'bc7-rgba-srgb',\\n  // 'depth24unorm-stencil8' extension\\n  Depth24UnormStencil8: 'depth24unorm-stencil8',\\n  // 'depth32float-stencil8' extension\\n  Depth32FloatStencil8: 'depth32float-stencil8'\\n};\\nexports.GPUTextureFormat = GPUTextureFormat;\\nvar GPUAddressMode = {\\n  ClampToEdge: 'clamp-to-edge',\\n  Repeat: 'repeat',\\n  MirrorRepeat: 'mirror-repeat'\\n};\\nexports.GPUAddressMode = GPUAddressMode;\\nvar GPUFilterMode = {\\n  Linear: 'linear',\\n  Nearest: 'nearest'\\n};\\nexports.GPUFilterMode = GPUFilterMode;\\nvar GPUBlendFactor = {\\n  Zero: 'zero',\\n  One: 'one',\\n  SrcColor: 'src-color',\\n  OneMinusSrcColor: 'one-minus-src-color',\\n  SrcAlpha: 'src-alpha',\\n  OneMinusSrcAlpha: 'one-minus-src-alpha',\\n  DstColor: 'dst-color',\\n  OneMinusDstColor: 'one-minus-dst-color',\\n  DstAlpha: 'dst-alpha',\\n  OneMinusDstAlpha: 'one-minus-dst-alpha',\\n  SrcAlphaSaturated: 'src-alpha-saturated',\\n  BlendColor: 'blend-color',\\n  OneMinusBlendColor: 'one-minus-blend-color'\\n};\\nexports.GPUBlendFactor = GPUBlendFactor;\\nvar GPUBlendOperation = {\\n  Add: 'add',\\n  Subtract: 'subtract',\\n  ReverseSubtract: 'reverse-subtract',\\n  Min: 'min',\\n  Max: 'max'\\n};\\nexports.GPUBlendOperation = GPUBlendOperation;\\nvar GPUColorWriteFlags = {\\n  None: 0,\\n  Red: 0x1,\\n  Green: 0x2,\\n  Blue: 0x4,\\n  Alpha: 0x8,\\n  All: 0xf\\n};\\nexports.GPUColorWriteFlags = GPUColorWriteFlags;\\nvar GPUStencilOperation = {\\n  Keep: 'keep',\\n  Zero: 'zero',\\n  Replace: 'replace',\\n  Invert: 'invert',\\n  IncrementClamp: 'increment-clamp',\\n  DecrementClamp: 'decrement-clamp',\\n  IncrementWrap: 'increment-wrap',\\n  DecrementWrap: 'decrement-wrap'\\n};\\nexports.GPUStencilOperation = GPUStencilOperation;\\nvar GPUBindingType = {\\n  UniformBuffer: 'uniform-buffer',\\n  StorageBuffer: 'storage-buffer',\\n  ReadonlyStorageBuffer: 'readonly-storage-buffer',\\n  Sampler: 'sampler',\\n  ComparisonSampler: 'comparison-sampler',\\n  SampledTexture: 'sampled-texture',\\n  MultisampledTexture: 'multisampled-texture',\\n  ReadonlyStorageTexture: 'readonly-storage-texture',\\n  WriteonlyStorageTexture: 'writeonly-storage-texture'\\n};\\nexports.GPUBindingType = GPUBindingType;\\nvar GPUTextureDimension = {\\n  OneD: '1d',\\n  TwoD: '2d',\\n  ThreeD: '3d'\\n};\\nexports.GPUTextureDimension = GPUTextureDimension;\\nvar GPUTextureViewDimension = {\\n  OneD: '1d',\\n  TwoD: '2d',\\n  TwoDArray: '2d-array',\\n  Cube: 'cube',\\n  CubeArray: 'cube-array',\\n  ThreeD: '3d'\\n};\\nexports.GPUTextureViewDimension = GPUTextureViewDimension;\\nvar GPUInputStepMode = {\\n  Vertex: 'vertex',\\n  Instance: 'instance'\\n}; // @TODO: Move to src/constants.js\\n\\nexports.GPUInputStepMode = GPUInputStepMode;\\nvar BlendColorFactor = 211;\\nexports.BlendColorFactor = BlendColorFactor;\\nvar OneMinusBlendColorFactor = 212;\\nexports.OneMinusBlendColorFactor = OneMinusBlendColorFactor;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"OneMinusBlendColorFactor\",\"GPUVertexFormat\",\"GPUTextureViewDimension\",\"GPUTextureFormat\",\"GPUTextureDimension\",\"GPUStoreOp\",\"GPUStencilOperation\",\"GPUPrimitiveTopology\",\"GPULoadOp\",\"GPUInputStepMode\",\"GPUIndexFormat\",\"GPUFrontFace\",\"GPUFilterMode\",\"GPUCullMode\",\"GPUCompareFunction\",\"GPUColorWriteFlags\",\"GPUBlendOperation\",\"GPUBlendFactor\",\"GPUBindingType\",\"GPUAddressMode\",\"BlendColorFactor\",\"PointList\",\"LineList\",\"LineStrip\",\"TriangleList\",\"TriangleStrip\",\"Never\",\"Less\",\"Equal\",\"LessEqual\",\"Greater\",\"NotEqual\",\"GreaterEqual\",\"Always\",\"Store\",\"Clear\",\"Load\",\"CCW\",\"CW\",\"None\",\"Front\",\"Back\",\"Uint16\",\"Uint32\",\"Uchar2\",\"Uchar4\",\"Char2\",\"Char4\",\"Uchar2Norm\",\"Uchar4Norm\",\"Char2Norm\",\"Char4Norm\",\"Ushort2\",\"Ushort4\",\"Short2\",\"Short4\",\"Ushort2Norm\",\"Ushort4Norm\",\"Short2Norm\",\"Short4Norm\",\"Half2\",\"Half4\",\"Float\",\"Float2\",\"Float3\",\"Float4\",\"Uint\",\"Uint2\",\"Uint3\",\"Uint4\",\"Int\",\"Int2\",\"Int3\",\"Int4\",\"R8Unorm\",\"R8Snorm\",\"R8Uint\",\"R8Sint\",\"R16Uint\",\"R16Sint\",\"R16Float\",\"RG8Unorm\",\"RG8Snorm\",\"RG8Uint\",\"RG8Sint\",\"R32Uint\",\"R32Sint\",\"R32Float\",\"RG16Uint\",\"RG16Sint\",\"RG16Float\",\"RGBA8Unorm\",\"RGBA8UnormSRGB\",\"RGBA8Snorm\",\"RGBA8Uint\",\"RGBA8Sint\",\"BRGA8Unorm\",\"BRGA8UnormSRGB\",\"RGB9E5UFloat\",\"RGB10A2Unorm\",\"RG11B10uFloat\",\"RG32Uint\",\"RG32Sint\",\"RG32Float\",\"RGBA16Uint\",\"RGBA16Sint\",\"RGBA16Float\",\"RGBA32Uint\",\"RGBA32Sint\",\"RGBA32Float\",\"Stencil8\",\"Depth16Unorm\",\"Depth24Plus\",\"Depth24PlusStencil8\",\"Depth32Float\",\"BC1RGBAUnorm\",\"BC1RGBAUnormSRGB\",\"BC2RGBAUnorm\",\"BC2RGBAUnormSRGB\",\"BC3RGBAUnorm\",\"BC3RGBAUnormSRGB\",\"BC4RUnorm\",\"BC4RSNorm\",\"BC5RGUnorm\",\"BC5RGSnorm\",\"BC6HRGBUFloat\",\"BC6HRGBFloat\",\"BC7RGBAUnorm\",\"BC7RGBAUnormSRGB\",\"Depth24UnormStencil8\",\"Depth32FloatStencil8\",\"ClampToEdge\",\"Repeat\",\"MirrorRepeat\",\"Linear\",\"Nearest\",\"Zero\",\"One\",\"SrcColor\",\"OneMinusSrcColor\",\"SrcAlpha\",\"OneMinusSrcAlpha\",\"DstColor\",\"OneMinusDstColor\",\"DstAlpha\",\"OneMinusDstAlpha\",\"SrcAlphaSaturated\",\"BlendColor\",\"OneMinusBlendColor\",\"Add\",\"Subtract\",\"ReverseSubtract\",\"Min\",\"Max\",\"Red\",\"Green\",\"Blue\",\"Alpha\",\"All\",\"Keep\",\"Replace\",\"Invert\",\"IncrementClamp\",\"DecrementClamp\",\"IncrementWrap\",\"DecrementWrap\",\"UniformBuffer\",\"StorageBuffer\",\"ReadonlyStorageBuffer\",\"Sampler\",\"ComparisonSampler\",\"SampledTexture\",\"MultisampledTexture\",\"ReadonlyStorageTexture\",\"WriteonlyStorageTexture\",\"OneD\",\"TwoD\",\"ThreeD\",\"TwoDArray\",\"Cube\",\"CubeArray\",\"Vertex\",\"Instance\"]\n}\n"]