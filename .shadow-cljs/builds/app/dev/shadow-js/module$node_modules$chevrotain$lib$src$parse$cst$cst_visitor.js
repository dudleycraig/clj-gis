["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js"],"~:js","shadow$provide.module$node_modules$chevrotain$lib$src$parse$cst$cst_visitor=function(global,require,module,exports){function defaultVisit(ctx,param){for(var childrenNames=utils_1.keys(ctx),childrenNamesLength=childrenNames.length,i=0;i<childrenNamesLength;i++)for(var currChildArray=ctx[childrenNames[i]],currChildArrayLength=currChildArray.length,j=0;j<currChildArrayLength;j++){var currChild=currChildArray[j];if(void 0===currChild.tokenTypeIdx)this[currChild.name](currChild.children,param)}}function validateVisitor(visitorInstance,\nruleNames){var missingErrors=validateMissingCstMethods(visitorInstance,ruleNames);visitorInstance=validateRedundantMethods(visitorInstance,ruleNames);return missingErrors.concat(visitorInstance)}function validateMissingCstMethods(visitorInstance,ruleNames){ruleNames=utils_1.map(ruleNames,function(currRuleName){if(!utils_1.isFunction(visitorInstance[currRuleName]))return{msg:\"Missing visitor method: \\x3c\"+currRuleName+\"\\x3e on \"+lang_extensions_1.functionName(visitorInstance.constructor)+\" CST Visitor.\",\ntype:CstVisitorDefinitionError.MISSING_METHOD,methodName:currRuleName}});return utils_1.compact(ruleNames)}function validateRedundantMethods(visitorInstance,ruleNames){var errors=[],prop;for(prop in visitorInstance)!utils_1.isFunction(visitorInstance[prop])||utils_1.contains(VALID_PROP_NAMES,prop)||utils_1.contains(ruleNames,prop)||errors.push({msg:\"Redundant visitor method: \\x3c\"+prop+\"\\x3e on \"+lang_extensions_1.functionName(visitorInstance.constructor)+\" CST Visitor\\nThere is no Grammar Rule corresponding to this method's name.\\n\",\ntype:CstVisitorDefinitionError.REDUNDANT_METHOD,methodName:prop});return errors}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.validateRedundantMethods=exports.validateMissingCstMethods=exports.validateVisitor=exports.CstVisitorDefinitionError=exports.createBaseVisitorConstructorWithDefaults=exports.createBaseSemanticVisitorConstructor=exports.defaultVisit=void 0;var utils_1=require(\"module$node_modules$$chevrotain$utils$lib$src$api\"),lang_extensions_1=require(\"module$node_modules$chevrotain$lib$src$lang$lang_extensions\");\nexports.defaultVisit=defaultVisit;exports.createBaseSemanticVisitorConstructor=function(grammarName,ruleNames){var derivedConstructor=function(){};lang_extensions_1.defineNameProp(derivedConstructor,grammarName+\"BaseSemantics\");derivedConstructor.prototype={visit:function(cstNode,param){utils_1.isArray(cstNode)&&(cstNode=cstNode[0]);if(!utils_1.isUndefined(cstNode))return this[cstNode.name](cstNode.children,param)},validateVisitor:function(){var semanticDefinitionErrors=validateVisitor(this,ruleNames);\nif(!utils_1.isEmpty(semanticDefinitionErrors))throw semanticDefinitionErrors=utils_1.map(semanticDefinitionErrors,function(currDefError){return currDefError.msg}),Error(\"Errors Detected in CST Visitor \\x3c\"+lang_extensions_1.functionName(this.constructor)+\"\\x3e:\\n\\t\"+semanticDefinitionErrors.join(\"\\n\\n\").replace(/\\n/g,\"\\n\\t\"));}};derivedConstructor.prototype.constructor=derivedConstructor;derivedConstructor._RULE_NAMES=ruleNames;return derivedConstructor};exports.createBaseVisitorConstructorWithDefaults=\nfunction(grammarName,ruleNames,baseConstructor){var derivedConstructor=function(){};lang_extensions_1.defineNameProp(derivedConstructor,grammarName+\"BaseSemanticsWithDefaults\");var withDefaultsProto=Object.create(baseConstructor.prototype);utils_1.forEach(ruleNames,function(ruleName){withDefaultsProto[ruleName]=defaultVisit});derivedConstructor.prototype=withDefaultsProto;return derivedConstructor.prototype.constructor=derivedConstructor};var CstVisitorDefinitionError;(function(CstVisitorDefinitionError){CstVisitorDefinitionError[CstVisitorDefinitionError.REDUNDANT_METHOD=\n0]=\"REDUNDANT_METHOD\";CstVisitorDefinitionError[CstVisitorDefinitionError.MISSING_METHOD=1]=\"MISSING_METHOD\"})(CstVisitorDefinitionError=exports.CstVisitorDefinitionError||(exports.CstVisitorDefinitionError={}));exports.validateVisitor=validateVisitor;exports.validateMissingCstMethods=validateMissingCstMethods;var VALID_PROP_NAMES=[\"constructor\",\"visit\",\"validateVisitor\"];exports.validateRedundantMethods=validateRedundantMethods}","~:source","shadow$provide[\"module$node_modules$chevrotain$lib$src$parse$cst$cst_visitor\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateRedundantMethods = exports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nvar lang_extensions_1 = require(\"../../lang/lang_extensions\");\nfunction defaultVisit(ctx, param) {\n    var childrenNames = utils_1.keys(ctx);\n    var childrenNamesLength = childrenNames.length;\n    for (var i = 0; i < childrenNamesLength; i++) {\n        var currChildName = childrenNames[i];\n        var currChildArray = ctx[currChildName];\n        var currChildArrayLength = currChildArray.length;\n        for (var j = 0; j < currChildArrayLength; j++) {\n            var currChild = currChildArray[j];\n            // distinction between Tokens Children and CstNode children\n            if (currChild.tokenTypeIdx === undefined) {\n                this[currChild.name](currChild.children, param);\n            }\n        }\n    }\n    // defaultVisit does not support generic out param\n    return undefined;\n}\nexports.defaultVisit = defaultVisit;\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    lang_extensions_1.defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n    var semanticProto = {\n        visit: function (cstNode, param) {\n            // enables writing more concise visitor methods when CstNode has only a single child\n            if (utils_1.isArray(cstNode)) {\n                // A CST Node's children dictionary can never have empty arrays as values\n                // If a key is defined there will be at least one element in the corresponding value array.\n                cstNode = cstNode[0];\n            }\n            // enables passing optional CstNodes concisely.\n            if (utils_1.isUndefined(cstNode)) {\n                return undefined;\n            }\n            return this[cstNode.name](cstNode.children, param);\n        },\n        validateVisitor: function () {\n            var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n            if (!utils_1.isEmpty(semanticDefinitionErrors)) {\n                var errorMessages = utils_1.map(semanticDefinitionErrors, function (currDefError) { return currDefError.msg; });\n                throw Error(\"Errors Detected in CST Visitor <\" + lang_extensions_1.functionName(this.constructor) + \">:\\n\\t\" + (\"\" + errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n            }\n        }\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n}\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    lang_extensions_1.defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    var withDefaultsProto = Object.create(baseConstructor.prototype);\n    utils_1.forEach(ruleNames, function (ruleName) {\n        withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n}\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\nvar CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\nfunction validateVisitor(visitorInstance, ruleNames) {\n    var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n    return missingErrors.concat(redundantErrors);\n}\nexports.validateVisitor = validateVisitor;\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n    var errors = utils_1.map(ruleNames, function (currRuleName) {\n        if (!utils_1.isFunction(visitorInstance[currRuleName])) {\n            return {\n                msg: \"Missing visitor method: <\" + currRuleName + \"> on \" + lang_extensions_1.functionName(visitorInstance.constructor) + \" CST Visitor.\",\n                type: CstVisitorDefinitionError.MISSING_METHOD,\n                methodName: currRuleName\n            };\n        }\n    });\n    return utils_1.compact(errors);\n}\nexports.validateMissingCstMethods = validateMissingCstMethods;\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\nfunction validateRedundantMethods(visitorInstance, ruleNames) {\n    var errors = [];\n    for (var prop in visitorInstance) {\n        if (utils_1.isFunction(visitorInstance[prop]) &&\n            !utils_1.contains(VALID_PROP_NAMES, prop) &&\n            !utils_1.contains(ruleNames, prop)) {\n            errors.push({\n                msg: \"Redundant visitor method: <\" + prop + \"> on \" + lang_extensions_1.functionName(visitorInstance.constructor) + \" CST Visitor\\n\" +\n                    \"There is no Grammar Rule corresponding to this method's name.\\n\",\n                type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n                methodName: prop\n            });\n        }\n    }\n    return errors;\n}\nexports.validateRedundantMethods = validateRedundantMethods;\n//# sourceMappingURL=cst_visitor.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$chevrotain$utils$lib$src$api","~$shadow.js","~$module$node_modules$chevrotain$lib$src$lang$lang_extensions"]],"~:properties",["^5",["validateMissingCstMethods","validateVisitor","prototype","visit","msg","__esModule","validateRedundantMethods","value","createBaseSemanticVisitorConstructor","methodName","_RULE_NAMES","createBaseVisitorConstructorWithDefaults","type","CstVisitorDefinitionError","defaultVisit","constructor"]],"~:compiled-at",1630917515704,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$chevrotain$lib$src$parse$cst$cst_visitor.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/chevrotain/lib/src/parse/cst/cst_visitor.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$chevrotain$lib$src$parse$cst$cst_visitor\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.validateRedundantMethods = exports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\\nvar utils_1 = require(\\\"@chevrotain/utils\\\");\\nvar lang_extensions_1 = require(\\\"../../lang/lang_extensions\\\");\\nfunction defaultVisit(ctx, param) {\\n    var childrenNames = utils_1.keys(ctx);\\n    var childrenNamesLength = childrenNames.length;\\n    for (var i = 0; i < childrenNamesLength; i++) {\\n        var currChildName = childrenNames[i];\\n        var currChildArray = ctx[currChildName];\\n        var currChildArrayLength = currChildArray.length;\\n        for (var j = 0; j < currChildArrayLength; j++) {\\n            var currChild = currChildArray[j];\\n            // distinction between Tokens Children and CstNode children\\n            if (currChild.tokenTypeIdx === undefined) {\\n                this[currChild.name](currChild.children, param);\\n            }\\n        }\\n    }\\n    // defaultVisit does not support generic out param\\n    return undefined;\\n}\\nexports.defaultVisit = defaultVisit;\\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\\n    var derivedConstructor = function () { };\\n    // can be overwritten according to:\\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\\n    lang_extensions_1.defineNameProp(derivedConstructor, grammarName + \\\"BaseSemantics\\\");\\n    var semanticProto = {\\n        visit: function (cstNode, param) {\\n            // enables writing more concise visitor methods when CstNode has only a single child\\n            if (utils_1.isArray(cstNode)) {\\n                // A CST Node's children dictionary can never have empty arrays as values\\n                // If a key is defined there will be at least one element in the corresponding value array.\\n                cstNode = cstNode[0];\\n            }\\n            // enables passing optional CstNodes concisely.\\n            if (utils_1.isUndefined(cstNode)) {\\n                return undefined;\\n            }\\n            return this[cstNode.name](cstNode.children, param);\\n        },\\n        validateVisitor: function () {\\n            var semanticDefinitionErrors = validateVisitor(this, ruleNames);\\n            if (!utils_1.isEmpty(semanticDefinitionErrors)) {\\n                var errorMessages = utils_1.map(semanticDefinitionErrors, function (currDefError) { return currDefError.msg; });\\n                throw Error(\\\"Errors Detected in CST Visitor <\\\" + lang_extensions_1.functionName(this.constructor) + \\\">:\\\\n\\\\t\\\" + (\\\"\\\" + errorMessages.join(\\\"\\\\n\\\\n\\\").replace(/\\\\n/g, \\\"\\\\n\\\\t\\\")));\\n            }\\n        }\\n    };\\n    derivedConstructor.prototype = semanticProto;\\n    derivedConstructor.prototype.constructor = derivedConstructor;\\n    derivedConstructor._RULE_NAMES = ruleNames;\\n    return derivedConstructor;\\n}\\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\\n    var derivedConstructor = function () { };\\n    // can be overwritten according to:\\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\\n    lang_extensions_1.defineNameProp(derivedConstructor, grammarName + \\\"BaseSemanticsWithDefaults\\\");\\n    var withDefaultsProto = Object.create(baseConstructor.prototype);\\n    utils_1.forEach(ruleNames, function (ruleName) {\\n        withDefaultsProto[ruleName] = defaultVisit;\\n    });\\n    derivedConstructor.prototype = withDefaultsProto;\\n    derivedConstructor.prototype.constructor = derivedConstructor;\\n    return derivedConstructor;\\n}\\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\\nvar CstVisitorDefinitionError;\\n(function (CstVisitorDefinitionError) {\\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\\\"REDUNDANT_METHOD\\\"] = 0] = \\\"REDUNDANT_METHOD\\\";\\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\\\"MISSING_METHOD\\\"] = 1] = \\\"MISSING_METHOD\\\";\\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\\nfunction validateVisitor(visitorInstance, ruleNames) {\\n    var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\\n    var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\\n    return missingErrors.concat(redundantErrors);\\n}\\nexports.validateVisitor = validateVisitor;\\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\\n    var errors = utils_1.map(ruleNames, function (currRuleName) {\\n        if (!utils_1.isFunction(visitorInstance[currRuleName])) {\\n            return {\\n                msg: \\\"Missing visitor method: <\\\" + currRuleName + \\\"> on \\\" + lang_extensions_1.functionName(visitorInstance.constructor) + \\\" CST Visitor.\\\",\\n                type: CstVisitorDefinitionError.MISSING_METHOD,\\n                methodName: currRuleName\\n            };\\n        }\\n    });\\n    return utils_1.compact(errors);\\n}\\nexports.validateMissingCstMethods = validateMissingCstMethods;\\nvar VALID_PROP_NAMES = [\\\"constructor\\\", \\\"visit\\\", \\\"validateVisitor\\\"];\\nfunction validateRedundantMethods(visitorInstance, ruleNames) {\\n    var errors = [];\\n    for (var prop in visitorInstance) {\\n        if (utils_1.isFunction(visitorInstance[prop]) &&\\n            !utils_1.contains(VALID_PROP_NAMES, prop) &&\\n            !utils_1.contains(ruleNames, prop)) {\\n            errors.push({\\n                msg: \\\"Redundant visitor method: <\\\" + prop + \\\"> on \\\" + lang_extensions_1.functionName(visitorInstance.constructor) + \\\" CST Visitor\\\\n\\\" +\\n                    \\\"There is no Grammar Rule corresponding to this method's name.\\\\n\\\",\\n                type: CstVisitorDefinitionError.REDUNDANT_METHOD,\\n                methodName: prop\\n            });\\n        }\\n    }\\n    return errors;\\n}\\nexports.validateRedundantMethods = validateRedundantMethods;\\n//# sourceMappingURL=cst_visitor.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"defaultVisit\",\"ctx\",\"param\",\"childrenNames\",\"utils_1\",\"keys\",\"childrenNamesLength\",\"length\",\"i\",\"currChildArray\",\"currChildName\",\"currChildArrayLength\",\"j\",\"currChild\",\"undefined\",\"tokenTypeIdx\",\"name\",\"children\",\"validateVisitor\",\"visitorInstance\",\"ruleNames\",\"missingErrors\",\"validateMissingCstMethods\",\"redundantErrors\",\"validateRedundantMethods\",\"concat\",\"errors\",\"map\",\"currRuleName\",\"isFunction\",\"msg\",\"lang_extensions_1\",\"functionName\",\"constructor\",\"type\",\"CstVisitorDefinitionError\",\"MISSING_METHOD\",\"methodName\",\"compact\",\"prop\",\"contains\",\"VALID_PROP_NAMES\",\"push\",\"REDUNDANT_METHOD\",\"Object\",\"defineProperty\",\"value\",\"createBaseVisitorConstructorWithDefaults\",\"createBaseSemanticVisitorConstructor\",\"grammarName\",\"derivedConstructor\",\"defineNameProp\",\"prototype\",\"semanticProto\",\"visit\",\"cstNode\",\"isArray\",\"isUndefined\",\"semanticDefinitionErrors\",\"isEmpty\",\"errorMessages\",\"currDefError\",\"Error\",\"join\",\"replace\",\"_RULE_NAMES\",\"baseConstructor\",\"withDefaultsProto\",\"create\",\"forEach\",\"ruleName\"]\n}\n"]