["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/loaders/PLYLoader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$loaders$PLYLoader=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=\ndescriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);staticProps&&_defineProperties(Constructor,staticProps);return Constructor}function _getPrototypeOf(o$jscomp$0){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)};\nreturn _getPrototypeOf(o$jscomp$0)}function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&null!==superClass)throw new TypeError(\"Super expression must either be null or a function\");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}});superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o$jscomp$0,p$jscomp$0){_setPrototypeOf=Object.setPrototypeOf||function(o,p){o.__proto__=p;return o};\nreturn _setPrototypeOf(o$jscomp$0,p$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.PLYLoader=void 0;var _three=require(\"module$node_modules$three$build$three_module\");global=function(_Loader){function PLYLoader(manager){if(!(this instanceof PLYLoader))throw new TypeError(\"Cannot call a class as a function\");manager=_getPrototypeOf(PLYLoader).call(this,manager);if(!manager||\"object\"!==_typeof(manager)&&\"function\"!==typeof manager){if(void 0===this)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\nmanager=this}manager.propertyNameMapping={};return manager}_inherits(PLYLoader,_Loader);_createClass(PLYLoader,[{key:\"load\",value:function(url,onLoad,onProgress,onError){var scope=this,loader=new _three.FileLoader(this.manager);loader.setPath(this.path);loader.setResponseType(\"arraybuffer\");loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(text))}catch(e){onError?onError(e):console.error(e),scope.manager.itemError(url)}},\nonProgress,onError)}},{key:\"setPropertyNameMapping\",value:function(mapping){this.propertyNameMapping=mapping}},{key:\"parse\",value:function(data$jscomp$0){function parseHeader(data){var headerText=\"\",headerLength=0;data=/ply([\\s\\S]*)end_header\\r?\\n/.exec(data);null!==data&&(headerText=data[1],headerLength=(new Blob([data[0]])).size);headerLength={comments:[],elements:[],headerLength,objInfo:\"\"};headerText=headerText.split(\"\\n\");for(data=0;data<headerText.length;data++){var line=headerText[data];line=\nline.trim();if(\"\"!==line){var lineValues=line.split(/\\s+/),lineType=lineValues.shift();line=lineValues.join(\" \");switch(lineType){case \"format\":headerLength.format=lineValues[0];headerLength.version=lineValues[1];break;case \"comment\":headerLength.comments.push(line);break;case \"element\":void 0!==currentElement&&headerLength.elements.push(currentElement);var currentElement={};currentElement.name=lineValues[0];currentElement.count=parseInt(lineValues[1]);currentElement.properties=[];break;case \"property\":line=\ncurrentElement.properties;lineType=line.push;var propertyNameMapping=scope.propertyNameMapping,property={type:lineValues[0]};\"list\"===property.type?(property.name=lineValues[3],property.countType=lineValues[1],property.itemType=lineValues[2]):property.name=lineValues[1];property.name in propertyNameMapping&&(property.name=propertyNameMapping[property.name]);lineType.call(line,property);break;case \"obj_info\":headerLength.objInfo=line;break;default:console.log(\"unhandled\",lineType,lineValues)}}}void 0!==\ncurrentElement&&headerLength.elements.push(currentElement);return headerLength}function parseASCIINumber(n,type){switch(type){case \"char\":case \"uchar\":case \"short\":case \"ushort\":case \"int\":case \"uint\":case \"int8\":case \"uint8\":case \"int16\":case \"uint16\":case \"int32\":case \"uint32\":return parseInt(n);case \"float\":case \"double\":case \"float32\":case \"float64\":return parseFloat(n)}}function parseASCII(data,header){var buffer={indices:[],vertices:[],normals:[],uvs:[],faceVertexUvs:[],colors:[]},result,body=\n\"\";null!==(result=/end_header\\s([\\s\\S]*)$/.exec(data))&&(body=result[1]);data=body.split(\"\\n\");for(var i=body=result=0;i<data.length;i++){var line=data[i];line=line.trim();if(\"\"!==line){body>=header.elements[result].count&&(result++,body=0);var properties=header.elements[result].properties;line=line.split(/\\s+/);for(var element={},i$jscomp$0=0;i$jscomp$0<properties.length;i$jscomp$0++)if(\"list\"===properties[i$jscomp$0].type){for(var list=[],n=parseASCIINumber(line.shift(),properties[i$jscomp$0].countType),\nj=0;j<n;j++)list.push(parseASCIINumber(line.shift(),properties[i$jscomp$0].itemType));element[properties[i$jscomp$0].name]=list}else element[properties[i$jscomp$0].name]=parseASCIINumber(line.shift(),properties[i$jscomp$0].type);handleElement(buffer,header.elements[result].name,element);body++}}return postProcess(buffer)}function postProcess(buffer){var geometry=new _three.BufferGeometry;0<buffer.indices.length&&geometry.setIndex(buffer.indices);geometry.setAttribute(\"position\",new _three.Float32BufferAttribute(buffer.vertices,\n3));0<buffer.normals.length&&geometry.setAttribute(\"normal\",new _three.Float32BufferAttribute(buffer.normals,3));0<buffer.uvs.length&&geometry.setAttribute(\"uv\",new _three.Float32BufferAttribute(buffer.uvs,2));0<buffer.colors.length&&geometry.setAttribute(\"color\",new _three.Float32BufferAttribute(buffer.colors,3));0<buffer.faceVertexUvs.length&&(geometry=geometry.toNonIndexed(),geometry.setAttribute(\"uv\",new _three.Float32BufferAttribute(buffer.faceVertexUvs,2)));geometry.computeBoundingSphere();\nreturn geometry}function handleElement(buffer,elementName,element){\"vertex\"===elementName?(buffer.vertices.push(element.x,element.y,element.z),\"nx\"in element&&\"ny\"in element&&\"nz\"in element&&buffer.normals.push(element.nx,element.ny,element.nz),\"s\"in element&&\"t\"in element&&buffer.uvs.push(element.s,element.t),\"red\"in element&&\"green\"in element&&\"blue\"in element&&buffer.colors.push(element.red/255,element.green/255,element.blue/255)):\"face\"===elementName&&(elementName=element.vertex_indices||element.vertex_index,\nelement=element.texcoord,3===elementName.length?(buffer.indices.push(elementName[0],elementName[1],elementName[2]),element&&6===element.length&&(buffer.faceVertexUvs.push(element[0],element[1]),buffer.faceVertexUvs.push(element[2],element[3]),buffer.faceVertexUvs.push(element[4],element[5]))):4===elementName.length&&(buffer.indices.push(elementName[0],elementName[1],elementName[3]),buffer.indices.push(elementName[1],elementName[2],elementName[3])))}function binaryRead(dataview,at,type,little_endian){switch(type){case \"int8\":case \"char\":return[dataview.getInt8(at),\n1];case \"uint8\":case \"uchar\":return[dataview.getUint8(at),1];case \"int16\":case \"short\":return[dataview.getInt16(at,little_endian),2];case \"uint16\":case \"ushort\":return[dataview.getUint16(at,little_endian),2];case \"int32\":case \"int\":return[dataview.getInt32(at,little_endian),4];case \"uint32\":case \"uint\":return[dataview.getUint32(at,little_endian),4];case \"float32\":case \"float\":return[dataview.getFloat32(at,little_endian),4];case \"float64\":case \"double\":return[dataview.getFloat64(at,little_endian),\n8]}}function parseBinary(data,header){var buffer={indices:[],vertices:[],normals:[],uvs:[],faceVertexUvs:[],colors:[]},little_endian=\"binary_little_endian\"===header.format;data=new DataView(data,header.headerLength);for(var result,loc=0,currentElement=0;currentElement<header.elements.length;currentElement++)for(var currentElementCount=0;currentElementCount<header.elements[currentElement].count;currentElementCount++){for(var dataview=data,at=loc,properties=header.elements[currentElement].properties,\nlittle_endian$jscomp$0=little_endian,element={},read=0,i=0;i<properties.length;i++)if(\"list\"===properties[i].type){var list=[];result=binaryRead(dataview,at+read,properties[i].countType,little_endian$jscomp$0);var n=result[0];read+=result[1];for(var j=0;j<n;j++)result=binaryRead(dataview,at+read,properties[i].itemType,little_endian$jscomp$0),list.push(result[0]),read+=result[1];element[properties[i].name]=list}else result=binaryRead(dataview,at+read,properties[i].type,little_endian$jscomp$0),element[properties[i].name]=\nresult[0],read+=result[1];result=[element,read];loc+=result[1];handleElement(buffer,header.elements[currentElement].name,result[0])}return postProcess(buffer)}var scope=this;if(data$jscomp$0 instanceof ArrayBuffer){var text=_three.LoaderUtils.decodeText(new Uint8Array(data$jscomp$0)),header$jscomp$0=parseHeader(text);data$jscomp$0=\"ascii\"===header$jscomp$0.format?parseASCII(text,header$jscomp$0):parseBinary(data$jscomp$0,header$jscomp$0)}else data$jscomp$0=parseASCII(data$jscomp$0,parseHeader(data$jscomp$0));\nreturn data$jscomp$0}}]);return PLYLoader}(_three.Loader);exports.PLYLoader=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$loaders$PLYLoader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PLYLoader = void 0;\n\nvar _three = require(\"three\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tconst loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n */\nvar PLYLoader =\n/*#__PURE__*/\nfunction (_Loader) {\n  _inherits(PLYLoader, _Loader);\n\n  function PLYLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, PLYLoader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PLYLoader).call(this, manager));\n    _this.propertyNameMapping = {};\n    return _this;\n  }\n\n  _createClass(PLYLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new _three.FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"setPropertyNameMapping\",\n    value: function setPropertyNameMapping(mapping) {\n      this.propertyNameMapping = mapping;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function parseHeader(data) {\n        var patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n        var headerText = '';\n        var headerLength = 0;\n        var result = patternHeader.exec(data);\n\n        if (result !== null) {\n          headerText = result[1];\n          headerLength = new Blob([result[0]]).size;\n        }\n\n        var header = {\n          comments: [],\n          elements: [],\n          headerLength: headerLength,\n          objInfo: ''\n        };\n        var lines = headerText.split('\\n');\n        var currentElement;\n\n        function make_ply_element_property(propertValues, propertyNameMapping) {\n          var property = {\n            type: propertValues[0]\n          };\n\n          if (property.type === 'list') {\n            property.name = propertValues[3];\n            property.countType = propertValues[1];\n            property.itemType = propertValues[2];\n          } else {\n            property.name = propertValues[1];\n          }\n\n          if (property.name in propertyNameMapping) {\n            property.name = propertyNameMapping[property.name];\n          }\n\n          return property;\n        }\n\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[i];\n          line = line.trim();\n          if (line === '') continue;\n          var lineValues = line.split(/\\s+/);\n          var lineType = lineValues.shift();\n          line = lineValues.join(' ');\n\n          switch (lineType) {\n            case 'format':\n              header.format = lineValues[0];\n              header.version = lineValues[1];\n              break;\n\n            case 'comment':\n              header.comments.push(line);\n              break;\n\n            case 'element':\n              if (currentElement !== undefined) {\n                header.elements.push(currentElement);\n              }\n\n              currentElement = {};\n              currentElement.name = lineValues[0];\n              currentElement.count = parseInt(lineValues[1]);\n              currentElement.properties = [];\n              break;\n\n            case 'property':\n              currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n              break;\n\n            case 'obj_info':\n              header.objInfo = line;\n              break;\n\n            default:\n              console.log('unhandled', lineType, lineValues);\n          }\n        }\n\n        if (currentElement !== undefined) {\n          header.elements.push(currentElement);\n        }\n\n        return header;\n      }\n\n      function parseASCIINumber(n, type) {\n        switch (type) {\n          case 'char':\n          case 'uchar':\n          case 'short':\n          case 'ushort':\n          case 'int':\n          case 'uint':\n          case 'int8':\n          case 'uint8':\n          case 'int16':\n          case 'uint16':\n          case 'int32':\n          case 'uint32':\n            return parseInt(n);\n\n          case 'float':\n          case 'double':\n          case 'float32':\n          case 'float64':\n            return parseFloat(n);\n        }\n      }\n\n      function parseASCIIElement(properties, line) {\n        var values = line.split(/\\s+/);\n        var element = {};\n\n        for (var i = 0; i < properties.length; i++) {\n          if (properties[i].type === 'list') {\n            var list = [];\n            var n = parseASCIINumber(values.shift(), properties[i].countType);\n\n            for (var j = 0; j < n; j++) {\n              list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n            }\n\n            element[properties[i].name] = list;\n          } else {\n            element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n          }\n        }\n\n        return element;\n      }\n\n      function parseASCII(data, header) {\n        // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n        var buffer = {\n          indices: [],\n          vertices: [],\n          normals: [],\n          uvs: [],\n          faceVertexUvs: [],\n          colors: []\n        };\n        var result;\n        var patternBody = /end_header\\s([\\s\\S]*)$/;\n        var body = '';\n\n        if ((result = patternBody.exec(data)) !== null) {\n          body = result[1];\n        }\n\n        var lines = body.split('\\n');\n        var currentElement = 0;\n        var currentElementCount = 0;\n\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[i];\n          line = line.trim();\n\n          if (line === '') {\n            continue;\n          }\n\n          if (currentElementCount >= header.elements[currentElement].count) {\n            currentElement++;\n            currentElementCount = 0;\n          }\n\n          var element = parseASCIIElement(header.elements[currentElement].properties, line);\n          handleElement(buffer, header.elements[currentElement].name, element);\n          currentElementCount++;\n        }\n\n        return postProcess(buffer);\n      }\n\n      function postProcess(buffer) {\n        var geometry = new _three.BufferGeometry(); // mandatory buffer data\n\n        if (buffer.indices.length > 0) {\n          geometry.setIndex(buffer.indices);\n        }\n\n        geometry.setAttribute('position', new _three.Float32BufferAttribute(buffer.vertices, 3)); // optional buffer data\n\n        if (buffer.normals.length > 0) {\n          geometry.setAttribute('normal', new _three.Float32BufferAttribute(buffer.normals, 3));\n        }\n\n        if (buffer.uvs.length > 0) {\n          geometry.setAttribute('uv', new _three.Float32BufferAttribute(buffer.uvs, 2));\n        }\n\n        if (buffer.colors.length > 0) {\n          geometry.setAttribute('color', new _three.Float32BufferAttribute(buffer.colors, 3));\n        }\n\n        if (buffer.faceVertexUvs.length > 0) {\n          geometry = geometry.toNonIndexed();\n          geometry.setAttribute('uv', new _three.Float32BufferAttribute(buffer.faceVertexUvs, 2));\n        }\n\n        geometry.computeBoundingSphere();\n        return geometry;\n      }\n\n      function handleElement(buffer, elementName, element) {\n        if (elementName === 'vertex') {\n          buffer.vertices.push(element.x, element.y, element.z);\n\n          if ('nx' in element && 'ny' in element && 'nz' in element) {\n            buffer.normals.push(element.nx, element.ny, element.nz);\n          }\n\n          if ('s' in element && 't' in element) {\n            buffer.uvs.push(element.s, element.t);\n          }\n\n          if ('red' in element && 'green' in element && 'blue' in element) {\n            buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0);\n          }\n        } else if (elementName === 'face') {\n          var vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\n          var texcoord = element.texcoord;\n\n          if (vertex_indices.length === 3) {\n            buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n\n            if (texcoord && texcoord.length === 6) {\n              buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n              buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n              buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n            }\n          } else if (vertex_indices.length === 4) {\n            buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n            buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n          }\n        }\n      }\n\n      function binaryRead(dataview, at, type, little_endian) {\n        switch (type) {\n          // corespondences for non-specific length types here match rply:\n          case 'int8':\n          case 'char':\n            return [dataview.getInt8(at), 1];\n\n          case 'uint8':\n          case 'uchar':\n            return [dataview.getUint8(at), 1];\n\n          case 'int16':\n          case 'short':\n            return [dataview.getInt16(at, little_endian), 2];\n\n          case 'uint16':\n          case 'ushort':\n            return [dataview.getUint16(at, little_endian), 2];\n\n          case 'int32':\n          case 'int':\n            return [dataview.getInt32(at, little_endian), 4];\n\n          case 'uint32':\n          case 'uint':\n            return [dataview.getUint32(at, little_endian), 4];\n\n          case 'float32':\n          case 'float':\n            return [dataview.getFloat32(at, little_endian), 4];\n\n          case 'float64':\n          case 'double':\n            return [dataview.getFloat64(at, little_endian), 8];\n        }\n      }\n\n      function binaryReadElement(dataview, at, properties, little_endian) {\n        var element = {};\n        var result,\n            read = 0;\n\n        for (var i = 0; i < properties.length; i++) {\n          if (properties[i].type === 'list') {\n            var list = [];\n            result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n            var n = result[0];\n            read += result[1];\n\n            for (var j = 0; j < n; j++) {\n              result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n              list.push(result[0]);\n              read += result[1];\n            }\n\n            element[properties[i].name] = list;\n          } else {\n            result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n            element[properties[i].name] = result[0];\n            read += result[1];\n          }\n        }\n\n        return [element, read];\n      }\n\n      function parseBinary(data, header) {\n        var buffer = {\n          indices: [],\n          vertices: [],\n          normals: [],\n          uvs: [],\n          faceVertexUvs: [],\n          colors: []\n        };\n        var little_endian = header.format === 'binary_little_endian';\n        var body = new DataView(data, header.headerLength);\n        var result,\n            loc = 0;\n\n        for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {\n          for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n            result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n            loc += result[1];\n            var element = result[0];\n            handleElement(buffer, header.elements[currentElement].name, element);\n          }\n        }\n\n        return postProcess(buffer);\n      } //\n\n\n      var geometry;\n      var scope = this;\n\n      if (data instanceof ArrayBuffer) {\n        var text = _three.LoaderUtils.decodeText(new Uint8Array(data));\n\n        var header = parseHeader(text);\n        geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n      } else {\n        geometry = parseASCII(data, parseHeader(data));\n      }\n\n      return geometry;\n    }\n  }]);\n\n  return PLYLoader;\n}(_three.Loader);\n\nexports.PLYLoader = PLYLoader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["properties","prototype","uvs","objInfo","key","__esModule","count","PLYLoader","normals","name","configurable","value","faceVertexUvs","enumerable","vertices","writable","type","itemType","comments","version","__proto__","colors","headerLength","propertyNameMapping","elements","format","constructor","indices","countType"]],"~:compiled-at",1630917515960,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$loaders$PLYLoader.js\",\n\"lineCount\":19,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/loaders/PLYLoader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$loaders$PLYLoader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.PLYLoader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/**\\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\\n * File Format or the Stanford Triangle Format).\\n *\\n * Limitations: ASCII decoding assumes file is UTF-8.\\n *\\n * Usage:\\n *\\tconst loader = new PLYLoader();\\n *\\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\\n *\\n *\\t\\tscene.add( new THREE.Mesh( geometry ) );\\n *\\n *\\t} );\\n *\\n * If the PLY file uses non standard property names, they can be mapped while\\n * loading. For example, the following maps the properties\\n * \\u201cdiffuse_(red|green|blue)\\u201d in the file to standard color names.\\n *\\n * loader.setPropertyNameMapping( {\\n *\\tdiffuse_red: 'red',\\n *\\tdiffuse_green: 'green',\\n *\\tdiffuse_blue: 'blue'\\n * } );\\n *\\n */\\nvar PLYLoader =\\n/*#__PURE__*/\\nfunction (_Loader) {\\n  _inherits(PLYLoader, _Loader);\\n\\n  function PLYLoader(manager) {\\n    var _this;\\n\\n    _classCallCheck(this, PLYLoader);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PLYLoader).call(this, manager));\\n    _this.propertyNameMapping = {};\\n    return _this;\\n  }\\n\\n  _createClass(PLYLoader, [{\\n    key: \\\"load\\\",\\n    value: function load(url, onLoad, onProgress, onError) {\\n      var scope = this;\\n      var loader = new _three.FileLoader(this.manager);\\n      loader.setPath(this.path);\\n      loader.setResponseType('arraybuffer');\\n      loader.setRequestHeader(this.requestHeader);\\n      loader.setWithCredentials(this.withCredentials);\\n      loader.load(url, function (text) {\\n        try {\\n          onLoad(scope.parse(text));\\n        } catch (e) {\\n          if (onError) {\\n            onError(e);\\n          } else {\\n            console.error(e);\\n          }\\n\\n          scope.manager.itemError(url);\\n        }\\n      }, onProgress, onError);\\n    }\\n  }, {\\n    key: \\\"setPropertyNameMapping\\\",\\n    value: function setPropertyNameMapping(mapping) {\\n      this.propertyNameMapping = mapping;\\n    }\\n  }, {\\n    key: \\\"parse\\\",\\n    value: function parse(data) {\\n      function parseHeader(data) {\\n        var patternHeader = /ply([\\\\s\\\\S]*)end_header\\\\r?\\\\n/;\\n        var headerText = '';\\n        var headerLength = 0;\\n        var result = patternHeader.exec(data);\\n\\n        if (result !== null) {\\n          headerText = result[1];\\n          headerLength = new Blob([result[0]]).size;\\n        }\\n\\n        var header = {\\n          comments: [],\\n          elements: [],\\n          headerLength: headerLength,\\n          objInfo: ''\\n        };\\n        var lines = headerText.split('\\\\n');\\n        var currentElement;\\n\\n        function make_ply_element_property(propertValues, propertyNameMapping) {\\n          var property = {\\n            type: propertValues[0]\\n          };\\n\\n          if (property.type === 'list') {\\n            property.name = propertValues[3];\\n            property.countType = propertValues[1];\\n            property.itemType = propertValues[2];\\n          } else {\\n            property.name = propertValues[1];\\n          }\\n\\n          if (property.name in propertyNameMapping) {\\n            property.name = propertyNameMapping[property.name];\\n          }\\n\\n          return property;\\n        }\\n\\n        for (var i = 0; i < lines.length; i++) {\\n          var line = lines[i];\\n          line = line.trim();\\n          if (line === '') continue;\\n          var lineValues = line.split(/\\\\s+/);\\n          var lineType = lineValues.shift();\\n          line = lineValues.join(' ');\\n\\n          switch (lineType) {\\n            case 'format':\\n              header.format = lineValues[0];\\n              header.version = lineValues[1];\\n              break;\\n\\n            case 'comment':\\n              header.comments.push(line);\\n              break;\\n\\n            case 'element':\\n              if (currentElement !== undefined) {\\n                header.elements.push(currentElement);\\n              }\\n\\n              currentElement = {};\\n              currentElement.name = lineValues[0];\\n              currentElement.count = parseInt(lineValues[1]);\\n              currentElement.properties = [];\\n              break;\\n\\n            case 'property':\\n              currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\\n              break;\\n\\n            case 'obj_info':\\n              header.objInfo = line;\\n              break;\\n\\n            default:\\n              console.log('unhandled', lineType, lineValues);\\n          }\\n        }\\n\\n        if (currentElement !== undefined) {\\n          header.elements.push(currentElement);\\n        }\\n\\n        return header;\\n      }\\n\\n      function parseASCIINumber(n, type) {\\n        switch (type) {\\n          case 'char':\\n          case 'uchar':\\n          case 'short':\\n          case 'ushort':\\n          case 'int':\\n          case 'uint':\\n          case 'int8':\\n          case 'uint8':\\n          case 'int16':\\n          case 'uint16':\\n          case 'int32':\\n          case 'uint32':\\n            return parseInt(n);\\n\\n          case 'float':\\n          case 'double':\\n          case 'float32':\\n          case 'float64':\\n            return parseFloat(n);\\n        }\\n      }\\n\\n      function parseASCIIElement(properties, line) {\\n        var values = line.split(/\\\\s+/);\\n        var element = {};\\n\\n        for (var i = 0; i < properties.length; i++) {\\n          if (properties[i].type === 'list') {\\n            var list = [];\\n            var n = parseASCIINumber(values.shift(), properties[i].countType);\\n\\n            for (var j = 0; j < n; j++) {\\n              list.push(parseASCIINumber(values.shift(), properties[i].itemType));\\n            }\\n\\n            element[properties[i].name] = list;\\n          } else {\\n            element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\\n          }\\n        }\\n\\n        return element;\\n      }\\n\\n      function parseASCII(data, header) {\\n        // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\\n        var buffer = {\\n          indices: [],\\n          vertices: [],\\n          normals: [],\\n          uvs: [],\\n          faceVertexUvs: [],\\n          colors: []\\n        };\\n        var result;\\n        var patternBody = /end_header\\\\s([\\\\s\\\\S]*)$/;\\n        var body = '';\\n\\n        if ((result = patternBody.exec(data)) !== null) {\\n          body = result[1];\\n        }\\n\\n        var lines = body.split('\\\\n');\\n        var currentElement = 0;\\n        var currentElementCount = 0;\\n\\n        for (var i = 0; i < lines.length; i++) {\\n          var line = lines[i];\\n          line = line.trim();\\n\\n          if (line === '') {\\n            continue;\\n          }\\n\\n          if (currentElementCount >= header.elements[currentElement].count) {\\n            currentElement++;\\n            currentElementCount = 0;\\n          }\\n\\n          var element = parseASCIIElement(header.elements[currentElement].properties, line);\\n          handleElement(buffer, header.elements[currentElement].name, element);\\n          currentElementCount++;\\n        }\\n\\n        return postProcess(buffer);\\n      }\\n\\n      function postProcess(buffer) {\\n        var geometry = new _three.BufferGeometry(); // mandatory buffer data\\n\\n        if (buffer.indices.length > 0) {\\n          geometry.setIndex(buffer.indices);\\n        }\\n\\n        geometry.setAttribute('position', new _three.Float32BufferAttribute(buffer.vertices, 3)); // optional buffer data\\n\\n        if (buffer.normals.length > 0) {\\n          geometry.setAttribute('normal', new _three.Float32BufferAttribute(buffer.normals, 3));\\n        }\\n\\n        if (buffer.uvs.length > 0) {\\n          geometry.setAttribute('uv', new _three.Float32BufferAttribute(buffer.uvs, 2));\\n        }\\n\\n        if (buffer.colors.length > 0) {\\n          geometry.setAttribute('color', new _three.Float32BufferAttribute(buffer.colors, 3));\\n        }\\n\\n        if (buffer.faceVertexUvs.length > 0) {\\n          geometry = geometry.toNonIndexed();\\n          geometry.setAttribute('uv', new _three.Float32BufferAttribute(buffer.faceVertexUvs, 2));\\n        }\\n\\n        geometry.computeBoundingSphere();\\n        return geometry;\\n      }\\n\\n      function handleElement(buffer, elementName, element) {\\n        if (elementName === 'vertex') {\\n          buffer.vertices.push(element.x, element.y, element.z);\\n\\n          if ('nx' in element && 'ny' in element && 'nz' in element) {\\n            buffer.normals.push(element.nx, element.ny, element.nz);\\n          }\\n\\n          if ('s' in element && 't' in element) {\\n            buffer.uvs.push(element.s, element.t);\\n          }\\n\\n          if ('red' in element && 'green' in element && 'blue' in element) {\\n            buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0);\\n          }\\n        } else if (elementName === 'face') {\\n          var vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\\n\\n          var texcoord = element.texcoord;\\n\\n          if (vertex_indices.length === 3) {\\n            buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\\n\\n            if (texcoord && texcoord.length === 6) {\\n              buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\\n              buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\\n              buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\\n            }\\n          } else if (vertex_indices.length === 4) {\\n            buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\\n            buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\\n          }\\n        }\\n      }\\n\\n      function binaryRead(dataview, at, type, little_endian) {\\n        switch (type) {\\n          // corespondences for non-specific length types here match rply:\\n          case 'int8':\\n          case 'char':\\n            return [dataview.getInt8(at), 1];\\n\\n          case 'uint8':\\n          case 'uchar':\\n            return [dataview.getUint8(at), 1];\\n\\n          case 'int16':\\n          case 'short':\\n            return [dataview.getInt16(at, little_endian), 2];\\n\\n          case 'uint16':\\n          case 'ushort':\\n            return [dataview.getUint16(at, little_endian), 2];\\n\\n          case 'int32':\\n          case 'int':\\n            return [dataview.getInt32(at, little_endian), 4];\\n\\n          case 'uint32':\\n          case 'uint':\\n            return [dataview.getUint32(at, little_endian), 4];\\n\\n          case 'float32':\\n          case 'float':\\n            return [dataview.getFloat32(at, little_endian), 4];\\n\\n          case 'float64':\\n          case 'double':\\n            return [dataview.getFloat64(at, little_endian), 8];\\n        }\\n      }\\n\\n      function binaryReadElement(dataview, at, properties, little_endian) {\\n        var element = {};\\n        var result,\\n            read = 0;\\n\\n        for (var i = 0; i < properties.length; i++) {\\n          if (properties[i].type === 'list') {\\n            var list = [];\\n            result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\\n            var n = result[0];\\n            read += result[1];\\n\\n            for (var j = 0; j < n; j++) {\\n              result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\\n              list.push(result[0]);\\n              read += result[1];\\n            }\\n\\n            element[properties[i].name] = list;\\n          } else {\\n            result = binaryRead(dataview, at + read, properties[i].type, little_endian);\\n            element[properties[i].name] = result[0];\\n            read += result[1];\\n          }\\n        }\\n\\n        return [element, read];\\n      }\\n\\n      function parseBinary(data, header) {\\n        var buffer = {\\n          indices: [],\\n          vertices: [],\\n          normals: [],\\n          uvs: [],\\n          faceVertexUvs: [],\\n          colors: []\\n        };\\n        var little_endian = header.format === 'binary_little_endian';\\n        var body = new DataView(data, header.headerLength);\\n        var result,\\n            loc = 0;\\n\\n        for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {\\n          for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\\n            result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\\n            loc += result[1];\\n            var element = result[0];\\n            handleElement(buffer, header.elements[currentElement].name, element);\\n          }\\n        }\\n\\n        return postProcess(buffer);\\n      } //\\n\\n\\n      var geometry;\\n      var scope = this;\\n\\n      if (data instanceof ArrayBuffer) {\\n        var text = _three.LoaderUtils.decodeText(new Uint8Array(data));\\n\\n        var header = parseHeader(text);\\n        geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\\n      } else {\\n        geometry = parseASCII(data, parseHeader(data));\\n      }\\n\\n      return geometry;\\n    }\\n  }]);\\n\\n  return PLYLoader;\\n}(_three.Loader);\\n\\nexports.PLYLoader = PLYLoader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"_getPrototypeOf\",\"o\",\"setPrototypeOf\",\"getPrototypeOf\",\"__proto__\",\"_inherits\",\"subClass\",\"superClass\",\"TypeError\",\"create\",\"value\",\"_setPrototypeOf\",\"p\",\"PLYLoader\",\"_three\",\"_Loader\",\"manager\",\"instance\",\"call\",\"self\",\"ReferenceError\",\"_this\",\"propertyNameMapping\",\"load\",\"url\",\"onLoad\",\"onProgress\",\"onError\",\"scope\",\"loader\",\"FileLoader\",\"setPath\",\"path\",\"setResponseType\",\"setRequestHeader\",\"requestHeader\",\"setWithCredentials\",\"withCredentials\",\"text\",\"parse\",\"e\",\"console\",\"error\",\"itemError\",\"setPropertyNameMapping\",\"mapping\",\"data\",\"parseHeader\",\"headerText\",\"headerLength\",\"result\",\"patternHeader\",\"exec\",\"size\",\"Blob\",\"header\",\"comments\",\"elements\",\"objInfo\",\"lines\",\"split\",\"line\",\"trim\",\"lineValues\",\"lineType\",\"shift\",\"join\",\"format\",\"version\",\"push\",\"undefined\",\"currentElement\",\"name\",\"count\",\"parseInt\",\"properties\",\"property\",\"type\",\"propertValues\",\"countType\",\"itemType\",\"log\",\"parseASCIINumber\",\"n\",\"parseFloat\",\"parseASCII\",\"buffer\",\"indices\",\"vertices\",\"normals\",\"uvs\",\"faceVertexUvs\",\"colors\",\"body\",\"patternBody\",\"currentElementCount\",\"values\",\"element\",\"list\",\"j\",\"handleElement\",\"postProcess\",\"geometry\",\"BufferGeometry\",\"setIndex\",\"setAttribute\",\"Float32BufferAttribute\",\"toNonIndexed\",\"computeBoundingSphere\",\"elementName\",\"x\",\"y\",\"z\",\"nx\",\"ny\",\"nz\",\"s\",\"t\",\"red\",\"green\",\"blue\",\"vertex_indices\",\"vertex_index\",\"texcoord\",\"binaryRead\",\"dataview\",\"at\",\"little_endian\",\"getInt8\",\"getUint8\",\"getInt16\",\"getUint16\",\"getInt32\",\"getUint32\",\"getFloat32\",\"getFloat64\",\"parseBinary\",\"DataView\",\"loc\",\"read\",\"ArrayBuffer\",\"LoaderUtils\",\"decodeText\",\"Uint8Array\",\"Loader\"]\n}\n"]