["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@blueprintjs/core/lib/cjs/components/editable-text/editableText.js"],"~:js","shadow$provide.module$node_modules$$blueprintjs$core$lib$cjs$components$editable_text$editableText=function(global,require,module,exports){function getFontSize(element){element=getComputedStyle(element).fontSize;return\"\"===element?0:parseInt(element.slice(0,-2),10)}function getLineHeight(element){var lineHeight=parseInt(getComputedStyle(element).lineHeight.slice(0,-2),10);if(isNaN(lineHeight)){lineHeight=document.createElement(\"span\");lineHeight.innerHTML=\"\\x3cbr\\x3e\";element.appendChild(lineHeight);\nvar singleLineHeight=element.offsetHeight;lineHeight.innerHTML=\"\\x3cbr\\x3e\\x3cbr\\x3e\";var doubleLineHeight=element.offsetHeight;element.removeChild(lineHeight);lineHeight=doubleLineHeight-singleLineHeight}return lineHeight}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.EditableText=void 0;var tslib_1=require(\"module$node_modules$tslib$tslib\"),classnames_1=tslib_1.__importDefault(require(\"module$node_modules$classnames$index\")),React=tslib_1.__importStar(require(\"module$node_modules$react$index\")),\nreact_lifecycles_compat_1=require(\"module$node_modules$react_lifecycles_compat$react_lifecycles_compat_cjs\"),common_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$common$index\"),props_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$common$props\"),utils_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$common$utils$index\"),compatibility_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$compatibility$index\");global=function(_super){function EditableText(props,context){var _this=\n_super.call(this,props,context)||this;_this.inputElement=null;_this.valueElement=null;_this.refHandlers={content:function(spanElement){_this.valueElement=spanElement},input:function(input){if(null!=input&&(_this.inputElement=input,_this.props.alwaysRenderInput||_this.inputElement.focus(),null!=_this.state&&_this.state.isEditing)){a:switch(input.type){case \"textarea\":var supportsSelection=!0;break a;case \"text\":case \"search\":case \"tel\":case \"url\":case \"password\":supportsSelection=!0;break a;default:supportsSelection=\n!1}if(supportsSelection){var length_1=input.value.length;input.setSelectionRange(_this.props.selectAllOnFocus?0:length_1,length_1)}supportsSelection&&_this.props.selectAllOnFocus||(input.scrollLeft=input.scrollWidth)}}};_this.cancelEditing=function(){var _a,_b,_c,_d,_e=_this.state,lastValue=_e.lastValue;_e=_e.value;_this.setState({isEditing:!1,value:lastValue});_e!==lastValue&&(null===(_b=(_a=_this.props).onChange)||void 0===_b?void 0:_b.call(_a,lastValue));null===(_d=(_c=_this.props).onCancel)||\nvoid 0===_d?void 0:_d.call(_c,lastValue)};_this.toggleEditing=function(){var _a,_b;if(_this.state.isEditing){var value=_this.state.value;_this.setState({isEditing:!1,lastValue:value});null===(_b=(_a=_this.props).onConfirm)||void 0===_b?void 0:_b.call(_a,value)}else _this.props.disabled||_this.setState({isEditing:!0})};_this.handleFocus=function(){var _a=_this.props,alwaysRenderInput=_a.alwaysRenderInput,selectAllOnFocus=_a.selectAllOnFocus;_a.disabled||_this.setState({isEditing:!0});alwaysRenderInput&&\nselectAllOnFocus&&null!=_this.inputElement&&_this.inputElement.setSelectionRange(0,_this.inputElement.value.length)};_this.handleTextChange=function(event){var _a,_b;event=event.target.value;null==_this.props.value&&_this.setState({value:event});null===(_b=(_a=_this.props).onChange)||void 0===_b?void 0:_b.call(_a,event)};_this.handleKeyEvent=function(event){var altKey=event.altKey,ctrlKey=event.ctrlKey,metaKey=event.metaKey,shiftKey=event.shiftKey,which=event.which;which===common_1.Keys.ESCAPE?_this.cancelEditing():\n(ctrlKey=altKey||ctrlKey||metaKey||shiftKey,which===common_1.Keys.ENTER&&((altKey||shiftKey)&&event.preventDefault(),_this.props.confirmOnEnterKey&&_this.props.multiline?null!=event.target&&ctrlKey?(altKey=event.target,ctrlKey=altKey.selectionEnd,shiftKey=altKey.selectionStart,metaKey=altKey.value,0<=shiftKey&&(which=metaKey.substring(0,shiftKey),ctrlKey=metaKey.substring(ctrlKey,metaKey.length),altKey.value=\"\"+which+\"\\n\"+ctrlKey,altKey.selectionStart=shiftKey+1,altKey.selectionEnd=shiftKey+1),_this.handleTextChange(event)):\n_this.toggleEditing():_this.props.multiline&&!ctrlKey||_this.toggleEditing()))};context=null==props.value?props.defaultValue:props.value;_this.state={inputHeight:0,inputWidth:0,isEditing:!0===props.isEditing&&!1===props.disabled,lastValue:context,value:context};return _this}tslib_1.__extends(EditableText,_super);EditableText.prototype.render=function(){var _a,_b,_c=this.props,alwaysRenderInput=_c.alwaysRenderInput,disabled=_c.disabled,multiline=_c.multiline;_c=null!==(_b=this.props.value)&&void 0!==\n_b?_b:this.state.value;_b=null!=_c&&\"\"!==_c;var classes=classnames_1.default(common_1.Classes.EDITABLE_TEXT,common_1.Classes.intentClass(this.props.intent),(_a={},_a[common_1.Classes.DISABLED]=disabled,_a[common_1.Classes.EDITABLE_TEXT_EDITING]=this.state.isEditing,_a[common_1.Classes.EDITABLE_TEXT_PLACEHOLDER]=!_b,_a[common_1.Classes.MULTILINE]=multiline,_a),this.props.className);_a=multiline?{height:this.state.isEditing?void 0:this.state.inputHeight}:{height:this.state.inputHeight,lineHeight:null!=\nthis.state.inputHeight?this.state.inputHeight+\"px\":void 0,minWidth:this.props.minWidth};multiline=alwaysRenderInput&&!this.state.isEditing;return React.createElement(\"div\",{className:classes,onFocus:this.handleFocus,tabIndex:alwaysRenderInput||this.state.isEditing||disabled?void 0:0},alwaysRenderInput||this.state.isEditing?this.renderInput(_c):void 0,multiline?void 0:React.createElement(\"span\",{className:common_1.Classes.EDITABLE_TEXT_CONTENT,ref:this.refHandlers.content,style:_a},_b?_c:this.props.placeholder))};\nEditableText.prototype.componentDidMount=function(){this.updateInputDimensions()};EditableText.prototype.componentDidUpdate=function(prevProps,prevState){var _a,_b,newState={};this.props.value===prevProps.value||null==prevProps.value&&null==this.props.value||(newState.value=this.props.value);null!=this.props.isEditing&&this.props.isEditing!==prevProps.isEditing&&(newState.isEditing=this.props.isEditing);if(this.props.disabled||null==this.props.disabled&&prevProps.disabled)newState.isEditing=!1;this.setState(newState);\nthis.state.isEditing&&!prevState.isEditing&&(null===(_b=(_a=this.props).onEdit)||void 0===_b?void 0:_b.call(_a,this.state.value));this.state.value===prevState.value&&this.props.alwaysRenderInput===prevProps.alwaysRenderInput&&this.props.maxLines===prevProps.maxLines&&this.props.minLines===prevProps.minLines&&this.props.minWidth===prevProps.minWidth&&this.props.multiline===prevProps.multiline||this.updateInputDimensions()};EditableText.prototype.renderInput=function(value){var _a=this.props,multiline=\n_a.multiline,type=_a.type;value={className:common_1.Classes.EDITABLE_TEXT_INPUT,disabled:_a.disabled,maxLength:_a.maxLength,onBlur:this.toggleEditing,onChange:this.handleTextChange,onKeyDown:this.handleKeyEvent,placeholder:_a.placeholder,value};var _b=this.state;_a=_b.inputHeight;_b=_b.inputWidth;0!==_a&&0!==_b&&(value.style={height:_a,lineHeight:multiline||null==_a?void 0:_a+\"px\",width:multiline?\"100%\":_b});return multiline?React.createElement(\"textarea\",tslib_1.__assign({ref:this.refHandlers.input},\nvalue)):React.createElement(\"input\",tslib_1.__assign({ref:this.refHandlers.input,type},value))};EditableText.prototype.updateInputDimensions=function(){if(null!=this.valueElement){var _a=this.props,maxLines=_a.maxLines,minLines=_a.minLines,minWidth=_a.minWidth;_a=_a.multiline;var _b=this.valueElement,parentElement_1=_b.parentElement;_b=_b.textContent;var _c=this.valueElement,scrollHeight_1=_c.scrollHeight;_c=_c.scrollWidth;var lineHeight=getLineHeight(this.valueElement);_a&&this.state.isEditing&&\n/\\n$/.test(null!==_b&&void 0!==_b?_b:\"\")&&(scrollHeight_1+=lineHeight);0<lineHeight&&(scrollHeight_1=utils_1.clamp(scrollHeight_1,minLines*lineHeight,maxLines*lineHeight));scrollHeight_1=Math.max(scrollHeight_1,getFontSize(this.valueElement)+1,getLineHeight(parentElement_1));_c+=compatibility_1.Browser.isInternetExplorer()?30:5;this.setState({inputHeight:scrollHeight_1,inputWidth:Math.max(_c,minWidth)});_a&&this.state.isEditing&&this.setTimeout(function(){return parentElement_1.style.height=scrollHeight_1+\n\"px\"})}};EditableText.displayName=props_1.DISPLAYNAME_PREFIX+\".EditableText\";EditableText.defaultProps={alwaysRenderInput:!1,confirmOnEnterKey:!1,defaultValue:\"\",disabled:!1,maxLines:Infinity,minLines:1,minWidth:80,multiline:!1,placeholder:\"Click to Edit\",type:\"text\"};return EditableText=tslib_1.__decorate([react_lifecycles_compat_1.polyfill],EditableText)}(common_1.AbstractPureComponent2);exports.EditableText=global}","~:source","shadow$provide[\"module$node_modules$$blueprintjs$core$lib$cjs$components$editable_text$editableText\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EditableText = void 0;\nvar tslib_1 = require(\"tslib\");\nvar classnames_1 = tslib_1.__importDefault(require(\"classnames\"));\nvar React = tslib_1.__importStar(require(\"react\"));\nvar react_lifecycles_compat_1 = require(\"react-lifecycles-compat\");\nvar common_1 = require(\"../../common\");\nvar props_1 = require(\"../../common/props\");\nvar utils_1 = require(\"../../common/utils\");\nvar compatibility_1 = require(\"../../compatibility\");\nvar BUFFER_WIDTH_DEFAULT = 5;\nvar BUFFER_WIDTH_IE = 30;\nvar EditableText = /** @class */ (function (_super) {\n    tslib_1.__extends(EditableText, _super);\n    function EditableText(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.inputElement = null;\n        _this.valueElement = null;\n        _this.refHandlers = {\n            content: function (spanElement) {\n                _this.valueElement = spanElement;\n            },\n            input: function (input) {\n                if (input != null) {\n                    _this.inputElement = input;\n                    // temporary fix for #3882\n                    if (!_this.props.alwaysRenderInput) {\n                        _this.inputElement.focus();\n                    }\n                    if (_this.state != null && _this.state.isEditing) {\n                        var supportsSelection = inputSupportsSelection(input);\n                        if (supportsSelection) {\n                            var length_1 = input.value.length;\n                            input.setSelectionRange(_this.props.selectAllOnFocus ? 0 : length_1, length_1);\n                        }\n                        if (!supportsSelection || !_this.props.selectAllOnFocus) {\n                            input.scrollLeft = input.scrollWidth;\n                        }\n                    }\n                }\n            },\n        };\n        _this.cancelEditing = function () {\n            var _a, _b, _c, _d;\n            var _e = _this.state, lastValue = _e.lastValue, value = _e.value;\n            _this.setState({ isEditing: false, value: lastValue });\n            if (value !== lastValue) {\n                (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, lastValue);\n            }\n            (_d = (_c = _this.props).onCancel) === null || _d === void 0 ? void 0 : _d.call(_c, lastValue);\n        };\n        _this.toggleEditing = function () {\n            var _a, _b;\n            if (_this.state.isEditing) {\n                var value = _this.state.value;\n                _this.setState({ isEditing: false, lastValue: value });\n                (_b = (_a = _this.props).onConfirm) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n            }\n            else if (!_this.props.disabled) {\n                _this.setState({ isEditing: true });\n            }\n        };\n        _this.handleFocus = function () {\n            var _a = _this.props, alwaysRenderInput = _a.alwaysRenderInput, disabled = _a.disabled, selectAllOnFocus = _a.selectAllOnFocus;\n            if (!disabled) {\n                _this.setState({ isEditing: true });\n            }\n            if (alwaysRenderInput && selectAllOnFocus && _this.inputElement != null) {\n                var length_2 = _this.inputElement.value.length;\n                _this.inputElement.setSelectionRange(0, length_2);\n            }\n        };\n        _this.handleTextChange = function (event) {\n            var _a, _b;\n            var value = event.target.value;\n            // state value should be updated only when uncontrolled\n            if (_this.props.value == null) {\n                _this.setState({ value: value });\n            }\n            (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n        };\n        _this.handleKeyEvent = function (event) {\n            // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n            /* eslint-disable-next-line deprecation/deprecation */\n            var altKey = event.altKey, ctrlKey = event.ctrlKey, metaKey = event.metaKey, shiftKey = event.shiftKey, which = event.which;\n            if (which === common_1.Keys.ESCAPE) {\n                _this.cancelEditing();\n                return;\n            }\n            var hasModifierKey = altKey || ctrlKey || metaKey || shiftKey;\n            if (which === common_1.Keys.ENTER) {\n                // prevent IE11 from full screening with alt + enter\n                // shift + enter adds a newline by default\n                if (altKey || shiftKey) {\n                    event.preventDefault();\n                }\n                if (_this.props.confirmOnEnterKey && _this.props.multiline) {\n                    if (event.target != null && hasModifierKey) {\n                        insertAtCaret(event.target, \"\\n\");\n                        _this.handleTextChange(event);\n                    }\n                    else {\n                        _this.toggleEditing();\n                    }\n                }\n                else if (!_this.props.multiline || hasModifierKey) {\n                    _this.toggleEditing();\n                }\n            }\n        };\n        var value = props.value == null ? props.defaultValue : props.value;\n        _this.state = {\n            inputHeight: 0,\n            inputWidth: 0,\n            isEditing: props.isEditing === true && props.disabled === false,\n            lastValue: value,\n            value: value,\n        };\n        return _this;\n    }\n    EditableText.prototype.render = function () {\n        var _a;\n        var _b;\n        var _c = this.props, alwaysRenderInput = _c.alwaysRenderInput, disabled = _c.disabled, multiline = _c.multiline;\n        var value = (_b = this.props.value) !== null && _b !== void 0 ? _b : this.state.value;\n        var hasValue = value != null && value !== \"\";\n        var classes = classnames_1.default(common_1.Classes.EDITABLE_TEXT, common_1.Classes.intentClass(this.props.intent), (_a = {},\n            _a[common_1.Classes.DISABLED] = disabled,\n            _a[common_1.Classes.EDITABLE_TEXT_EDITING] = this.state.isEditing,\n            _a[common_1.Classes.EDITABLE_TEXT_PLACEHOLDER] = !hasValue,\n            _a[common_1.Classes.MULTILINE] = multiline,\n            _a), this.props.className);\n        var contentStyle;\n        if (multiline) {\n            // set height only in multiline mode when not editing\n            // otherwise we're measuring this element to determine appropriate height of text\n            contentStyle = { height: !this.state.isEditing ? this.state.inputHeight : undefined };\n        }\n        else {\n            // minWidth only applies in single line mode (multiline == width 100%)\n            contentStyle = {\n                height: this.state.inputHeight,\n                lineHeight: this.state.inputHeight != null ? this.state.inputHeight + \"px\" : undefined,\n                minWidth: this.props.minWidth,\n            };\n        }\n        // If we are always rendering an input, then NEVER make the container div focusable.\n        // Otherwise, make container div focusable when not editing, so it can still be tabbed\n        // to focus (when the input is rendered, it is itself focusable so container div doesn't need to be)\n        var tabIndex = alwaysRenderInput || this.state.isEditing || disabled ? undefined : 0;\n        // we need the contents to be rendered while editing so that we can measure their height\n        // and size the container element responsively\n        var shouldHideContents = alwaysRenderInput && !this.state.isEditing;\n        return (React.createElement(\"div\", { className: classes, onFocus: this.handleFocus, tabIndex: tabIndex },\n            alwaysRenderInput || this.state.isEditing ? this.renderInput(value) : undefined,\n            shouldHideContents ? undefined : (React.createElement(\"span\", { className: common_1.Classes.EDITABLE_TEXT_CONTENT, ref: this.refHandlers.content, style: contentStyle }, hasValue ? value : this.props.placeholder))));\n    };\n    EditableText.prototype.componentDidMount = function () {\n        this.updateInputDimensions();\n    };\n    EditableText.prototype.componentDidUpdate = function (prevProps, prevState) {\n        var _a, _b;\n        var newState = {};\n        // allow setting the value to undefined/null in controlled mode\n        if (this.props.value !== prevProps.value && (prevProps.value != null || this.props.value != null)) {\n            newState.value = this.props.value;\n        }\n        if (this.props.isEditing != null && this.props.isEditing !== prevProps.isEditing) {\n            newState.isEditing = this.props.isEditing;\n        }\n        if (this.props.disabled || (this.props.disabled == null && prevProps.disabled)) {\n            newState.isEditing = false;\n        }\n        this.setState(newState);\n        if (this.state.isEditing && !prevState.isEditing) {\n            (_b = (_a = this.props).onEdit) === null || _b === void 0 ? void 0 : _b.call(_a, this.state.value);\n        }\n        // updateInputDimensions is an expensive method. Call it only when the props\n        // it depends on change\n        if (this.state.value !== prevState.value ||\n            this.props.alwaysRenderInput !== prevProps.alwaysRenderInput ||\n            this.props.maxLines !== prevProps.maxLines ||\n            this.props.minLines !== prevProps.minLines ||\n            this.props.minWidth !== prevProps.minWidth ||\n            this.props.multiline !== prevProps.multiline) {\n            this.updateInputDimensions();\n        }\n    };\n    EditableText.prototype.renderInput = function (value) {\n        var _a = this.props, disabled = _a.disabled, maxLength = _a.maxLength, multiline = _a.multiline, type = _a.type, placeholder = _a.placeholder;\n        var props = {\n            className: common_1.Classes.EDITABLE_TEXT_INPUT,\n            disabled: disabled,\n            maxLength: maxLength,\n            onBlur: this.toggleEditing,\n            onChange: this.handleTextChange,\n            onKeyDown: this.handleKeyEvent,\n            placeholder: placeholder,\n            value: value,\n        };\n        var _b = this.state, inputHeight = _b.inputHeight, inputWidth = _b.inputWidth;\n        if (inputHeight !== 0 && inputWidth !== 0) {\n            props.style = {\n                height: inputHeight,\n                lineHeight: !multiline && inputHeight != null ? inputHeight + \"px\" : undefined,\n                width: multiline ? \"100%\" : inputWidth,\n            };\n        }\n        return multiline ? (React.createElement(\"textarea\", tslib_1.__assign({ ref: this.refHandlers.input }, props))) : (React.createElement(\"input\", tslib_1.__assign({ ref: this.refHandlers.input, type: type }, props)));\n    };\n    EditableText.prototype.updateInputDimensions = function () {\n        if (this.valueElement != null) {\n            var _a = this.props, maxLines = _a.maxLines, minLines = _a.minLines, minWidth = _a.minWidth, multiline = _a.multiline;\n            var _b = this.valueElement, parentElement_1 = _b.parentElement, textContent = _b.textContent;\n            var _c = this.valueElement, scrollHeight_1 = _c.scrollHeight, scrollWidth = _c.scrollWidth;\n            var lineHeight = getLineHeight(this.valueElement);\n            // add one line to computed <span> height if text ends in newline\n            // because <span> collapses that trailing whitespace but <textarea> shows it\n            if (multiline && this.state.isEditing && /\\n$/.test(textContent !== null && textContent !== void 0 ? textContent : \"\")) {\n                scrollHeight_1 += lineHeight;\n            }\n            if (lineHeight > 0) {\n                // line height could be 0 if the isNaN block from getLineHeight kicks in\n                scrollHeight_1 = utils_1.clamp(scrollHeight_1, minLines * lineHeight, maxLines * lineHeight);\n            }\n            // Chrome's input caret height misaligns text so the line-height must be larger than font-size.\n            // The computed scrollHeight must also account for a larger inherited line-height from the parent.\n            scrollHeight_1 = Math.max(scrollHeight_1, getFontSize(this.valueElement) + 1, getLineHeight(parentElement_1));\n            // Need to add a small buffer so text does not shift prior to resizing, causing an infinite loop.\n            // IE needs a larger buffer than other browsers.\n            scrollWidth += compatibility_1.Browser.isInternetExplorer() ? BUFFER_WIDTH_IE : BUFFER_WIDTH_DEFAULT;\n            this.setState({\n                inputHeight: scrollHeight_1,\n                inputWidth: Math.max(scrollWidth, minWidth),\n            });\n            // synchronizes the ::before pseudo-element's height while editing for Chrome 53\n            if (multiline && this.state.isEditing) {\n                this.setTimeout(function () { return (parentElement_1.style.height = scrollHeight_1 + \"px\"); });\n            }\n        }\n    };\n    EditableText.displayName = props_1.DISPLAYNAME_PREFIX + \".EditableText\";\n    EditableText.defaultProps = {\n        alwaysRenderInput: false,\n        confirmOnEnterKey: false,\n        defaultValue: \"\",\n        disabled: false,\n        maxLines: Infinity,\n        minLines: 1,\n        minWidth: 80,\n        multiline: false,\n        placeholder: \"Click to Edit\",\n        type: \"text\",\n    };\n    EditableText = tslib_1.__decorate([\n        react_lifecycles_compat_1.polyfill\n    ], EditableText);\n    return EditableText;\n}(common_1.AbstractPureComponent2));\nexports.EditableText = EditableText;\nfunction getFontSize(element) {\n    var fontSize = getComputedStyle(element).fontSize;\n    return fontSize === \"\" ? 0 : parseInt(fontSize.slice(0, -2), 10);\n}\nfunction getLineHeight(element) {\n    // getComputedStyle() => 18.0001px => 18\n    var lineHeight = parseInt(getComputedStyle(element).lineHeight.slice(0, -2), 10);\n    // this check will be true if line-height is a keyword like \"normal\"\n    if (isNaN(lineHeight)) {\n        // @see http://stackoverflow.com/a/18430767/6342931\n        var line = document.createElement(\"span\");\n        line.innerHTML = \"<br>\";\n        element.appendChild(line);\n        var singleLineHeight = element.offsetHeight;\n        line.innerHTML = \"<br><br>\";\n        var doubleLineHeight = element.offsetHeight;\n        element.removeChild(line);\n        // this can return 0 in edge cases\n        lineHeight = doubleLineHeight - singleLineHeight;\n    }\n    return lineHeight;\n}\nfunction insertAtCaret(el, text) {\n    var selectionEnd = el.selectionEnd, selectionStart = el.selectionStart, value = el.value;\n    if (selectionStart >= 0) {\n        var before_1 = value.substring(0, selectionStart);\n        var after_1 = value.substring(selectionEnd, value.length);\n        var len = text.length;\n        el.value = \"\" + before_1 + text + after_1;\n        el.selectionStart = selectionStart + len;\n        el.selectionEnd = selectionStart + len;\n    }\n}\nfunction inputSupportsSelection(input) {\n    switch (input.type) {\n        // HTMLTextAreaElement\n        case \"textarea\":\n            return true;\n        // HTMLInputElement\n        // see https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n        case \"text\":\n        case \"search\":\n        case \"tel\":\n        case \"url\":\n        case \"password\":\n            return true;\n        default:\n            return false;\n    }\n}\n//# sourceMappingURL=editableText.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$tslib$tslib","~$module$node_modules$react_lifecycles_compat$react_lifecycles_compat_cjs","~$module$node_modules$react$index","~$shadow.js","~$module$node_modules$$blueprintjs$core$lib$cjs$common$utils$index","~$module$node_modules$$blueprintjs$core$lib$cjs$common$props","~$module$node_modules$classnames$index","~$module$node_modules$$blueprintjs$core$lib$cjs$common$index","~$module$node_modules$$blueprintjs$core$lib$cjs$compatibility$index"]],"~:properties",["^5",["valueElement","maxLines","handleFocus","width","confirmOnEnterKey","onChange","selectionStart","height","innerHTML","tabIndex","multiline","scrollLeft","EditableText","className","minLines","inputWidth","displayName","placeholder","lineHeight","__esModule","lastValue","renderInput","minWidth","toggleEditing","maxLength","alwaysRenderInput","style","inputElement","value","onFocus","componentDidUpdate","updateInputDimensions","handleTextChange","content","onBlur","componentDidMount","input","defaultProps","refHandlers","type","render","inputHeight","state","ref","selectionEnd","defaultValue","handleKeyEvent","onKeyDown","isEditing","disabled","cancelEditing"]],"~:compiled-at",1630405505169,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$blueprintjs$core$lib$cjs$components$editable_text$editableText.js\",\n\"lineCount\":17,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@blueprintjs/core/lib/cjs/components/editable-text/editableText.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$blueprintjs$core$lib$cjs$components$editable_text$editableText\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n/*\\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.EditableText = void 0;\\nvar tslib_1 = require(\\\"tslib\\\");\\nvar classnames_1 = tslib_1.__importDefault(require(\\\"classnames\\\"));\\nvar React = tslib_1.__importStar(require(\\\"react\\\"));\\nvar react_lifecycles_compat_1 = require(\\\"react-lifecycles-compat\\\");\\nvar common_1 = require(\\\"../../common\\\");\\nvar props_1 = require(\\\"../../common/props\\\");\\nvar utils_1 = require(\\\"../../common/utils\\\");\\nvar compatibility_1 = require(\\\"../../compatibility\\\");\\nvar BUFFER_WIDTH_DEFAULT = 5;\\nvar BUFFER_WIDTH_IE = 30;\\nvar EditableText = /** @class */ (function (_super) {\\n    tslib_1.__extends(EditableText, _super);\\n    function EditableText(props, context) {\\n        var _this = _super.call(this, props, context) || this;\\n        _this.inputElement = null;\\n        _this.valueElement = null;\\n        _this.refHandlers = {\\n            content: function (spanElement) {\\n                _this.valueElement = spanElement;\\n            },\\n            input: function (input) {\\n                if (input != null) {\\n                    _this.inputElement = input;\\n                    // temporary fix for #3882\\n                    if (!_this.props.alwaysRenderInput) {\\n                        _this.inputElement.focus();\\n                    }\\n                    if (_this.state != null && _this.state.isEditing) {\\n                        var supportsSelection = inputSupportsSelection(input);\\n                        if (supportsSelection) {\\n                            var length_1 = input.value.length;\\n                            input.setSelectionRange(_this.props.selectAllOnFocus ? 0 : length_1, length_1);\\n                        }\\n                        if (!supportsSelection || !_this.props.selectAllOnFocus) {\\n                            input.scrollLeft = input.scrollWidth;\\n                        }\\n                    }\\n                }\\n            },\\n        };\\n        _this.cancelEditing = function () {\\n            var _a, _b, _c, _d;\\n            var _e = _this.state, lastValue = _e.lastValue, value = _e.value;\\n            _this.setState({ isEditing: false, value: lastValue });\\n            if (value !== lastValue) {\\n                (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, lastValue);\\n            }\\n            (_d = (_c = _this.props).onCancel) === null || _d === void 0 ? void 0 : _d.call(_c, lastValue);\\n        };\\n        _this.toggleEditing = function () {\\n            var _a, _b;\\n            if (_this.state.isEditing) {\\n                var value = _this.state.value;\\n                _this.setState({ isEditing: false, lastValue: value });\\n                (_b = (_a = _this.props).onConfirm) === null || _b === void 0 ? void 0 : _b.call(_a, value);\\n            }\\n            else if (!_this.props.disabled) {\\n                _this.setState({ isEditing: true });\\n            }\\n        };\\n        _this.handleFocus = function () {\\n            var _a = _this.props, alwaysRenderInput = _a.alwaysRenderInput, disabled = _a.disabled, selectAllOnFocus = _a.selectAllOnFocus;\\n            if (!disabled) {\\n                _this.setState({ isEditing: true });\\n            }\\n            if (alwaysRenderInput && selectAllOnFocus && _this.inputElement != null) {\\n                var length_2 = _this.inputElement.value.length;\\n                _this.inputElement.setSelectionRange(0, length_2);\\n            }\\n        };\\n        _this.handleTextChange = function (event) {\\n            var _a, _b;\\n            var value = event.target.value;\\n            // state value should be updated only when uncontrolled\\n            if (_this.props.value == null) {\\n                _this.setState({ value: value });\\n            }\\n            (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value);\\n        };\\n        _this.handleKeyEvent = function (event) {\\n            // HACKHACK: https://github.com/palantir/blueprint/issues/4165\\n            /* eslint-disable-next-line deprecation/deprecation */\\n            var altKey = event.altKey, ctrlKey = event.ctrlKey, metaKey = event.metaKey, shiftKey = event.shiftKey, which = event.which;\\n            if (which === common_1.Keys.ESCAPE) {\\n                _this.cancelEditing();\\n                return;\\n            }\\n            var hasModifierKey = altKey || ctrlKey || metaKey || shiftKey;\\n            if (which === common_1.Keys.ENTER) {\\n                // prevent IE11 from full screening with alt + enter\\n                // shift + enter adds a newline by default\\n                if (altKey || shiftKey) {\\n                    event.preventDefault();\\n                }\\n                if (_this.props.confirmOnEnterKey && _this.props.multiline) {\\n                    if (event.target != null && hasModifierKey) {\\n                        insertAtCaret(event.target, \\\"\\\\n\\\");\\n                        _this.handleTextChange(event);\\n                    }\\n                    else {\\n                        _this.toggleEditing();\\n                    }\\n                }\\n                else if (!_this.props.multiline || hasModifierKey) {\\n                    _this.toggleEditing();\\n                }\\n            }\\n        };\\n        var value = props.value == null ? props.defaultValue : props.value;\\n        _this.state = {\\n            inputHeight: 0,\\n            inputWidth: 0,\\n            isEditing: props.isEditing === true && props.disabled === false,\\n            lastValue: value,\\n            value: value,\\n        };\\n        return _this;\\n    }\\n    EditableText.prototype.render = function () {\\n        var _a;\\n        var _b;\\n        var _c = this.props, alwaysRenderInput = _c.alwaysRenderInput, disabled = _c.disabled, multiline = _c.multiline;\\n        var value = (_b = this.props.value) !== null && _b !== void 0 ? _b : this.state.value;\\n        var hasValue = value != null && value !== \\\"\\\";\\n        var classes = classnames_1.default(common_1.Classes.EDITABLE_TEXT, common_1.Classes.intentClass(this.props.intent), (_a = {},\\n            _a[common_1.Classes.DISABLED] = disabled,\\n            _a[common_1.Classes.EDITABLE_TEXT_EDITING] = this.state.isEditing,\\n            _a[common_1.Classes.EDITABLE_TEXT_PLACEHOLDER] = !hasValue,\\n            _a[common_1.Classes.MULTILINE] = multiline,\\n            _a), this.props.className);\\n        var contentStyle;\\n        if (multiline) {\\n            // set height only in multiline mode when not editing\\n            // otherwise we're measuring this element to determine appropriate height of text\\n            contentStyle = { height: !this.state.isEditing ? this.state.inputHeight : undefined };\\n        }\\n        else {\\n            // minWidth only applies in single line mode (multiline == width 100%)\\n            contentStyle = {\\n                height: this.state.inputHeight,\\n                lineHeight: this.state.inputHeight != null ? this.state.inputHeight + \\\"px\\\" : undefined,\\n                minWidth: this.props.minWidth,\\n            };\\n        }\\n        // If we are always rendering an input, then NEVER make the container div focusable.\\n        // Otherwise, make container div focusable when not editing, so it can still be tabbed\\n        // to focus (when the input is rendered, it is itself focusable so container div doesn't need to be)\\n        var tabIndex = alwaysRenderInput || this.state.isEditing || disabled ? undefined : 0;\\n        // we need the contents to be rendered while editing so that we can measure their height\\n        // and size the container element responsively\\n        var shouldHideContents = alwaysRenderInput && !this.state.isEditing;\\n        return (React.createElement(\\\"div\\\", { className: classes, onFocus: this.handleFocus, tabIndex: tabIndex },\\n            alwaysRenderInput || this.state.isEditing ? this.renderInput(value) : undefined,\\n            shouldHideContents ? undefined : (React.createElement(\\\"span\\\", { className: common_1.Classes.EDITABLE_TEXT_CONTENT, ref: this.refHandlers.content, style: contentStyle }, hasValue ? value : this.props.placeholder))));\\n    };\\n    EditableText.prototype.componentDidMount = function () {\\n        this.updateInputDimensions();\\n    };\\n    EditableText.prototype.componentDidUpdate = function (prevProps, prevState) {\\n        var _a, _b;\\n        var newState = {};\\n        // allow setting the value to undefined/null in controlled mode\\n        if (this.props.value !== prevProps.value && (prevProps.value != null || this.props.value != null)) {\\n            newState.value = this.props.value;\\n        }\\n        if (this.props.isEditing != null && this.props.isEditing !== prevProps.isEditing) {\\n            newState.isEditing = this.props.isEditing;\\n        }\\n        if (this.props.disabled || (this.props.disabled == null && prevProps.disabled)) {\\n            newState.isEditing = false;\\n        }\\n        this.setState(newState);\\n        if (this.state.isEditing && !prevState.isEditing) {\\n            (_b = (_a = this.props).onEdit) === null || _b === void 0 ? void 0 : _b.call(_a, this.state.value);\\n        }\\n        // updateInputDimensions is an expensive method. Call it only when the props\\n        // it depends on change\\n        if (this.state.value !== prevState.value ||\\n            this.props.alwaysRenderInput !== prevProps.alwaysRenderInput ||\\n            this.props.maxLines !== prevProps.maxLines ||\\n            this.props.minLines !== prevProps.minLines ||\\n            this.props.minWidth !== prevProps.minWidth ||\\n            this.props.multiline !== prevProps.multiline) {\\n            this.updateInputDimensions();\\n        }\\n    };\\n    EditableText.prototype.renderInput = function (value) {\\n        var _a = this.props, disabled = _a.disabled, maxLength = _a.maxLength, multiline = _a.multiline, type = _a.type, placeholder = _a.placeholder;\\n        var props = {\\n            className: common_1.Classes.EDITABLE_TEXT_INPUT,\\n            disabled: disabled,\\n            maxLength: maxLength,\\n            onBlur: this.toggleEditing,\\n            onChange: this.handleTextChange,\\n            onKeyDown: this.handleKeyEvent,\\n            placeholder: placeholder,\\n            value: value,\\n        };\\n        var _b = this.state, inputHeight = _b.inputHeight, inputWidth = _b.inputWidth;\\n        if (inputHeight !== 0 && inputWidth !== 0) {\\n            props.style = {\\n                height: inputHeight,\\n                lineHeight: !multiline && inputHeight != null ? inputHeight + \\\"px\\\" : undefined,\\n                width: multiline ? \\\"100%\\\" : inputWidth,\\n            };\\n        }\\n        return multiline ? (React.createElement(\\\"textarea\\\", tslib_1.__assign({ ref: this.refHandlers.input }, props))) : (React.createElement(\\\"input\\\", tslib_1.__assign({ ref: this.refHandlers.input, type: type }, props)));\\n    };\\n    EditableText.prototype.updateInputDimensions = function () {\\n        if (this.valueElement != null) {\\n            var _a = this.props, maxLines = _a.maxLines, minLines = _a.minLines, minWidth = _a.minWidth, multiline = _a.multiline;\\n            var _b = this.valueElement, parentElement_1 = _b.parentElement, textContent = _b.textContent;\\n            var _c = this.valueElement, scrollHeight_1 = _c.scrollHeight, scrollWidth = _c.scrollWidth;\\n            var lineHeight = getLineHeight(this.valueElement);\\n            // add one line to computed <span> height if text ends in newline\\n            // because <span> collapses that trailing whitespace but <textarea> shows it\\n            if (multiline && this.state.isEditing && /\\\\n$/.test(textContent !== null && textContent !== void 0 ? textContent : \\\"\\\")) {\\n                scrollHeight_1 += lineHeight;\\n            }\\n            if (lineHeight > 0) {\\n                // line height could be 0 if the isNaN block from getLineHeight kicks in\\n                scrollHeight_1 = utils_1.clamp(scrollHeight_1, minLines * lineHeight, maxLines * lineHeight);\\n            }\\n            // Chrome's input caret height misaligns text so the line-height must be larger than font-size.\\n            // The computed scrollHeight must also account for a larger inherited line-height from the parent.\\n            scrollHeight_1 = Math.max(scrollHeight_1, getFontSize(this.valueElement) + 1, getLineHeight(parentElement_1));\\n            // Need to add a small buffer so text does not shift prior to resizing, causing an infinite loop.\\n            // IE needs a larger buffer than other browsers.\\n            scrollWidth += compatibility_1.Browser.isInternetExplorer() ? BUFFER_WIDTH_IE : BUFFER_WIDTH_DEFAULT;\\n            this.setState({\\n                inputHeight: scrollHeight_1,\\n                inputWidth: Math.max(scrollWidth, minWidth),\\n            });\\n            // synchronizes the ::before pseudo-element's height while editing for Chrome 53\\n            if (multiline && this.state.isEditing) {\\n                this.setTimeout(function () { return (parentElement_1.style.height = scrollHeight_1 + \\\"px\\\"); });\\n            }\\n        }\\n    };\\n    EditableText.displayName = props_1.DISPLAYNAME_PREFIX + \\\".EditableText\\\";\\n    EditableText.defaultProps = {\\n        alwaysRenderInput: false,\\n        confirmOnEnterKey: false,\\n        defaultValue: \\\"\\\",\\n        disabled: false,\\n        maxLines: Infinity,\\n        minLines: 1,\\n        minWidth: 80,\\n        multiline: false,\\n        placeholder: \\\"Click to Edit\\\",\\n        type: \\\"text\\\",\\n    };\\n    EditableText = tslib_1.__decorate([\\n        react_lifecycles_compat_1.polyfill\\n    ], EditableText);\\n    return EditableText;\\n}(common_1.AbstractPureComponent2));\\nexports.EditableText = EditableText;\\nfunction getFontSize(element) {\\n    var fontSize = getComputedStyle(element).fontSize;\\n    return fontSize === \\\"\\\" ? 0 : parseInt(fontSize.slice(0, -2), 10);\\n}\\nfunction getLineHeight(element) {\\n    // getComputedStyle() => 18.0001px => 18\\n    var lineHeight = parseInt(getComputedStyle(element).lineHeight.slice(0, -2), 10);\\n    // this check will be true if line-height is a keyword like \\\"normal\\\"\\n    if (isNaN(lineHeight)) {\\n        // @see http://stackoverflow.com/a/18430767/6342931\\n        var line = document.createElement(\\\"span\\\");\\n        line.innerHTML = \\\"<br>\\\";\\n        element.appendChild(line);\\n        var singleLineHeight = element.offsetHeight;\\n        line.innerHTML = \\\"<br><br>\\\";\\n        var doubleLineHeight = element.offsetHeight;\\n        element.removeChild(line);\\n        // this can return 0 in edge cases\\n        lineHeight = doubleLineHeight - singleLineHeight;\\n    }\\n    return lineHeight;\\n}\\nfunction insertAtCaret(el, text) {\\n    var selectionEnd = el.selectionEnd, selectionStart = el.selectionStart, value = el.value;\\n    if (selectionStart >= 0) {\\n        var before_1 = value.substring(0, selectionStart);\\n        var after_1 = value.substring(selectionEnd, value.length);\\n        var len = text.length;\\n        el.value = \\\"\\\" + before_1 + text + after_1;\\n        el.selectionStart = selectionStart + len;\\n        el.selectionEnd = selectionStart + len;\\n    }\\n}\\nfunction inputSupportsSelection(input) {\\n    switch (input.type) {\\n        // HTMLTextAreaElement\\n        case \\\"textarea\\\":\\n            return true;\\n        // HTMLInputElement\\n        // see https://html.spec.whatwg.org/multipage/input.html#do-not-apply\\n        case \\\"text\\\":\\n        case \\\"search\\\":\\n        case \\\"tel\\\":\\n        case \\\"url\\\":\\n        case \\\"password\\\":\\n            return true;\\n        default:\\n            return false;\\n    }\\n}\\n//# sourceMappingURL=editableText.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"getFontSize\",\"element\",\"fontSize\",\"getComputedStyle\",\"parseInt\",\"slice\",\"getLineHeight\",\"lineHeight\",\"isNaN\",\"line\",\"document\",\"createElement\",\"innerHTML\",\"appendChild\",\"singleLineHeight\",\"offsetHeight\",\"doubleLineHeight\",\"removeChild\",\"Object\",\"defineProperty\",\"value\",\"EditableText\",\"tslib_1\",\"classnames_1\",\"__importDefault\",\"React\",\"__importStar\",\"react_lifecycles_compat_1\",\"common_1\",\"props_1\",\"utils_1\",\"compatibility_1\",\"_super\",\"props\",\"context\",\"_this\",\"call\",\"inputElement\",\"valueElement\",\"refHandlers\",\"content\",\"spanElement\",\"input\",\"alwaysRenderInput\",\"focus\",\"state\",\"isEditing\",\"type\",\"supportsSelection\",\"length_1\",\"length\",\"setSelectionRange\",\"selectAllOnFocus\",\"scrollLeft\",\"scrollWidth\",\"cancelEditing\",\"_this.cancelEditing\",\"_a\",\"_b\",\"_c\",\"_d\",\"_e\",\"lastValue\",\"setState\",\"onChange\",\"onCancel\",\"toggleEditing\",\"_this.toggleEditing\",\"onConfirm\",\"disabled\",\"handleFocus\",\"_this.handleFocus\",\"handleTextChange\",\"_this.handleTextChange\",\"event\",\"target\",\"handleKeyEvent\",\"_this.handleKeyEvent\",\"altKey\",\"ctrlKey\",\"metaKey\",\"shiftKey\",\"which\",\"Keys\",\"ESCAPE\",\"hasModifierKey\",\"ENTER\",\"preventDefault\",\"confirmOnEnterKey\",\"multiline\",\"selectionEnd\",\"el\",\"selectionStart\",\"before_1\",\"substring\",\"after_1\",\"text\",\"defaultValue\",\"inputHeight\",\"inputWidth\",\"__extends\",\"prototype\",\"render\",\"EditableText.prototype.render\",\"hasValue\",\"classes\",\"default\",\"Classes\",\"EDITABLE_TEXT\",\"intentClass\",\"intent\",\"DISABLED\",\"EDITABLE_TEXT_EDITING\",\"EDITABLE_TEXT_PLACEHOLDER\",\"MULTILINE\",\"className\",\"contentStyle\",\"height\",\"undefined\",\"minWidth\",\"shouldHideContents\",\"onFocus\",\"tabIndex\",\"renderInput\",\"EDITABLE_TEXT_CONTENT\",\"ref\",\"style\",\"placeholder\",\"componentDidMount\",\"EditableText.prototype.componentDidMount\",\"updateInputDimensions\",\"componentDidUpdate\",\"EditableText.prototype.componentDidUpdate\",\"prevProps\",\"prevState\",\"newState\",\"onEdit\",\"maxLines\",\"minLines\",\"EditableText.prototype.renderInput\",\"EDITABLE_TEXT_INPUT\",\"maxLength\",\"onBlur\",\"onKeyDown\",\"width\",\"__assign\",\"EditableText.prototype.updateInputDimensions\",\"parentElement_1\",\"parentElement\",\"textContent\",\"scrollHeight_1\",\"scrollHeight\",\"test\",\"clamp\",\"Math\",\"max\",\"Browser\",\"isInternetExplorer\",\"BUFFER_WIDTH_IE\",\"BUFFER_WIDTH_DEFAULT\",\"setTimeout\",\"displayName\",\"DISPLAYNAME_PREFIX\",\"defaultProps\",\"Infinity\",\"__decorate\",\"polyfill\",\"AbstractPureComponent2\"]\n}\n"]