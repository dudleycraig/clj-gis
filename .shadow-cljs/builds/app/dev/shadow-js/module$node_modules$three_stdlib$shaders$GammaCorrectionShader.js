["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/GammaCorrectionShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$GammaCorrectionShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.GammaCorrectionShader=void 0;exports.GammaCorrectionShader={uniforms:{tDiffuse:{value:null}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform sampler2D tDiffuse;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 tex \\x3d texture2D( tDiffuse, vUv );\\n\\tgl_FragColor \\x3d LinearTosRGB( tex );\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$GammaCorrectionShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GammaCorrectionShader = void 0;\n\n/**\n * Gamma Correction Shader\n * http://en.wikipedia.org/wiki/gamma_correction\n */\nvar GammaCorrectionShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 tex = texture2D( tDiffuse, vUv );', '\tgl_FragColor = LinearTosRGB( tex );', // optional: LinearToGamma( tex, float( GAMMA_FACTOR ) );\n  '}'].join('\\n')\n};\nexports.GammaCorrectionShader = GammaCorrectionShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","__esModule","GammaCorrectionShader","tDiffuse","vertexShader","value","uniforms"]],"~:compiled-at",1630917515590,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$GammaCorrectionShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,qBAAR,CAAgC,IAAK,EAgBrCJ,QAAQI,CAAAA,qBAAR,CAV4BA,CAC1BC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CADgBC,CAM1BG,aAAiJ,qIANvHH,CAO1BI,eACA,yJAR0BJ,CAZ+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/GammaCorrectionShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$GammaCorrectionShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.GammaCorrectionShader = void 0;\\n\\n/**\\n * Gamma Correction Shader\\n * http://en.wikipedia.org/wiki/gamma_correction\\n */\\nvar GammaCorrectionShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\\tvec4 tex = texture2D( tDiffuse, vUv );', '\\tgl_FragColor = LinearTosRGB( tex );', // optional: LinearToGamma( tex, float( GAMMA_FACTOR ) );\\n  '}'].join('\\\\n')\\n};\\nexports.GammaCorrectionShader = GammaCorrectionShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"GammaCorrectionShader\",\"uniforms\",\"tDiffuse\",\"vertexShader\",\"fragmentShader\"]\n}\n"]