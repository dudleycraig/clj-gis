["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/nodes/accessors/ColorsNode.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$nodes$accessors$ColorsNode=function(global,require,module,exports){function ColorsNode(index){_TempNode.TempNode.call(this,\"v4\",{shared:!1});this.index=index||0}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.ColorsNode=ColorsNode;var _TempNode=require(\"module$node_modules$three_stdlib$nodes$core$TempNode\"),vertexDict=[\"color\",\"color2\"],fragmentDict=[\"vColor\",\"vColor2\"];ColorsNode.prototype=Object.create(_TempNode.TempNode.prototype);\nColorsNode.prototype.constructor=ColorsNode;ColorsNode.prototype.nodeType=\"Colors\";ColorsNode.prototype.generate=function(builder,output){builder.requires.color[this.index]=!0;var result=builder.isShader(\"vertex\")?vertexDict[this.index]:fragmentDict[this.index];return builder.format(result,this.getType(builder),output)};ColorsNode.prototype.copy=function(source){_TempNode.TempNode.prototype.copy.call(this,source);this.index=source.index;return this};ColorsNode.prototype.toJSON=function(meta){var data=\nthis.getJSONNode(meta);data||(data=this.createJSONNode(meta),data.index=this.index);return data}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$nodes$accessors$ColorsNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorsNode = ColorsNode;\n\nvar _TempNode = require(\"../core/TempNode.js\");\n\nvar vertexDict = ['color', 'color2'],\n    fragmentDict = ['vColor', 'vColor2'];\n\nfunction ColorsNode(index) {\n  _TempNode.TempNode.call(this, 'v4', {\n    shared: false\n  });\n\n  this.index = index || 0;\n}\n\nColorsNode.prototype = Object.create(_TempNode.TempNode.prototype);\nColorsNode.prototype.constructor = ColorsNode;\nColorsNode.prototype.nodeType = 'Colors';\n\nColorsNode.prototype.generate = function (builder, output) {\n  builder.requires.color[this.index] = true;\n  var result = builder.isShader('vertex') ? vertexDict[this.index] : fragmentDict[this.index];\n  return builder.format(result, this.getType(builder), output);\n};\n\nColorsNode.prototype.copy = function (source) {\n  _TempNode.TempNode.prototype.copy.call(this, source);\n\n  this.index = source.index;\n  return this;\n};\n\nColorsNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.index = this.index;\n  }\n\n  return data;\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$three_stdlib$nodes$core$TempNode"]],"~:properties",["^5",["index","copy","prototype","shared","__esModule","generate","ColorsNode","nodeType","value","constructor","toJSON"]],"~:compiled-at",1630917515259,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$nodes$accessors$ColorsNode.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAaxHC,QAASA,WAAU,CAACC,KAAD,CAAQ,CACzBC,SAAUC,CAAAA,QAASC,CAAAA,IAAnB,CAAwB,IAAxB,CAA8B,IAA9B,CAAoC,CAClCC,OAAQ,CAAA,CAD0B,CAApC,CAIA,KAAKJ,CAAAA,KAAL,CAAaA,KAAb,EAAsB,CALG,CAV3BK,MAAOC,CAAAA,cAAP,CAAsBR,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CS,MAAO,CAAA,CADoC,CAA7C,CAGAT,QAAQC,CAAAA,UAAR,CAAqBA,UAErB,KAAIE,UAAYL,OAAA,CAAQ,sDAAR,CAAhB,CAEIY,WAAa,CAAC,OAAD,CAAU,QAAV,CAFjB,CAGIC,aAAe,CAAC,QAAD,CAAW,SAAX,CAUnBV,WAAWW,CAAAA,SAAX,CAAuBL,MAAOM,CAAAA,MAAP,CAAcV,SAAUC,CAAAA,QAASQ,CAAAA,SAAjC,CACvBX;UAAWW,CAAAA,SAAUE,CAAAA,WAArB,CAAmCb,UACnCA,WAAWW,CAAAA,SAAUG,CAAAA,QAArB,CAAgC,QAEhCd,WAAWW,CAAAA,SAAUI,CAAAA,QAArB,CAAgCC,QAAS,CAACC,OAAD,CAAUC,MAAV,CAAkB,CACzDD,OAAQE,CAAAA,QAASC,CAAAA,KAAjB,CAAuB,IAAKnB,CAAAA,KAA5B,CAAA,CAAqC,CAAA,CACrC,KAAIoB,OAASJ,OAAQK,CAAAA,QAAR,CAAiB,QAAjB,CAAA,CAA6Bb,UAAA,CAAW,IAAKR,CAAAA,KAAhB,CAA7B,CAAsDS,YAAA,CAAa,IAAKT,CAAAA,KAAlB,CACnE,OAAOgB,QAAQM,CAAAA,MAAR,CAAeF,MAAf,CAAuB,IAAKG,CAAAA,OAAL,CAAaP,OAAb,CAAvB,CAA8CC,MAA9C,CAHkD,CAM3DlB,WAAWW,CAAAA,SAAUc,CAAAA,IAArB,CAA4BC,QAAS,CAACC,MAAD,CAAS,CAC5CzB,SAAUC,CAAAA,QAASQ,CAAAA,SAAUc,CAAAA,IAAKrB,CAAAA,IAAlC,CAAuC,IAAvC,CAA6CuB,MAA7C,CAEA,KAAK1B,CAAAA,KAAL,CAAa0B,MAAO1B,CAAAA,KACpB,OAAO,KAJqC,CAO9CD,WAAWW,CAAAA,SAAUiB,CAAAA,MAArB,CAA8BC,QAAS,CAACC,IAAD,CAAO,CAC5C,IAAIC;AAAO,IAAKC,CAAAA,WAAL,CAAiBF,IAAjB,CAENC,KAAL,GACEA,IACA,CADO,IAAKE,CAAAA,cAAL,CAAoBH,IAApB,CACP,CAAAC,IAAK9B,CAAAA,KAAL,CAAa,IAAKA,CAAAA,KAFpB,CAKA,OAAO8B,KARqC,CAtC0E;\",\n\"sources\":[\"node_modules/three-stdlib/nodes/accessors/ColorsNode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$nodes$accessors$ColorsNode\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.ColorsNode = ColorsNode;\\n\\nvar _TempNode = require(\\\"../core/TempNode.js\\\");\\n\\nvar vertexDict = ['color', 'color2'],\\n    fragmentDict = ['vColor', 'vColor2'];\\n\\nfunction ColorsNode(index) {\\n  _TempNode.TempNode.call(this, 'v4', {\\n    shared: false\\n  });\\n\\n  this.index = index || 0;\\n}\\n\\nColorsNode.prototype = Object.create(_TempNode.TempNode.prototype);\\nColorsNode.prototype.constructor = ColorsNode;\\nColorsNode.prototype.nodeType = 'Colors';\\n\\nColorsNode.prototype.generate = function (builder, output) {\\n  builder.requires.color[this.index] = true;\\n  var result = builder.isShader('vertex') ? vertexDict[this.index] : fragmentDict[this.index];\\n  return builder.format(result, this.getType(builder), output);\\n};\\n\\nColorsNode.prototype.copy = function (source) {\\n  _TempNode.TempNode.prototype.copy.call(this, source);\\n\\n  this.index = source.index;\\n  return this;\\n};\\n\\nColorsNode.prototype.toJSON = function (meta) {\\n  var data = this.getJSONNode(meta);\\n\\n  if (!data) {\\n    data = this.createJSONNode(meta);\\n    data.index = this.index;\\n  }\\n\\n  return data;\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"ColorsNode\",\"index\",\"_TempNode\",\"TempNode\",\"call\",\"shared\",\"Object\",\"defineProperty\",\"value\",\"vertexDict\",\"fragmentDict\",\"prototype\",\"create\",\"constructor\",\"nodeType\",\"generate\",\"ColorsNode.prototype.generate\",\"builder\",\"output\",\"requires\",\"color\",\"result\",\"isShader\",\"format\",\"getType\",\"copy\",\"ColorsNode.prototype.copy\",\"source\",\"toJSON\",\"ColorsNode.prototype.toJSON\",\"meta\",\"data\",\"getJSONNode\",\"createJSONNode\"]\n}\n"]