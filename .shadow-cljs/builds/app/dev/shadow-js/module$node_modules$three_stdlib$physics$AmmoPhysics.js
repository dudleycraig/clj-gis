["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/physics/AmmoPhysics.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$physics$AmmoPhysics=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.AmmoPhysics=function(){var AmmoLib,collisionConfiguration,dispatcher,broadphase,solver,world,worldTransform,getShape,meshes,meshMap,addMesh,handleMesh,handleInstancedMesh,setMeshPosition,lastTime,step;return regeneratorRuntime.async(function(_context){for(;;)switch(_context.prev=_context.next){case 0:step=function(){var time=performance.now();\n0<lastTime&&world.stepSimulation((time-lastTime)/1E3,10);lastTime=time;time=0;for(var l=meshes.length;time<l;time++){var mesh=meshes[time];if(mesh.isInstancedMesh){for(var array=mesh.instanceMatrix.array,bodies=meshMap.get(mesh),j=0;j<bodies.length;j++){bodies[j].getMotionState().getWorldTransform(worldTransform);var position=worldTransform.getOrigin(),quaternion=worldTransform.getRotation(),quaternion$jscomp$0=quaternion;quaternion=array;var index=16*j,x=quaternion$jscomp$0.x(),y=quaternion$jscomp$0.y(),\nz=quaternion$jscomp$0.z(),w=quaternion$jscomp$0.w(),x2=x+x,y2=y+y,z2=z+z;quaternion$jscomp$0=x*x2;var xy=x*y2;x*=z2;var yy=y*y2;y*=z2;z*=z2;x2*=w;y2*=w;w*=z2;quaternion[index+0]=1-(yy+z);quaternion[index+1]=xy+w;quaternion[index+2]=x-y2;quaternion[index+3]=0;quaternion[index+4]=xy-w;quaternion[index+5]=1-(quaternion$jscomp$0+z);quaternion[index+6]=y+x2;quaternion[index+7]=0;quaternion[index+8]=x+y2;quaternion[index+9]=y-x2;quaternion[index+10]=1-(quaternion$jscomp$0+yy);quaternion[index+11]=0;quaternion[index+\n12]=position.x();quaternion[index+13]=position.y();quaternion[index+14]=position.z();quaternion[index+15]=1}mesh.instanceMatrix.needsUpdate=!0}else mesh.isMesh&&(meshMap.get(mesh).getMotionState().getWorldTransform(worldTransform),array=worldTransform.getOrigin(),bodies=worldTransform.getRotation(),mesh.position.set(array.x(),array.y(),array.z()),mesh.quaternion.set(bodies.x(),bodies.y(),bodies.z(),bodies.w()))}};setMeshPosition=function(mesh,position){var index=2<arguments.length&&void 0!==arguments[2]?\narguments[2]:0;mesh.isInstancedMesh?(index=meshMap.get(mesh)[index],index.setAngularVelocity(new AmmoLib.btVector3(0,0,0)),index.setLinearVelocity(new AmmoLib.btVector3(0,0,0)),worldTransform.setIdentity(),worldTransform.setOrigin(new AmmoLib.btVector3(position.x,position.y,position.z)),index.setWorldTransform(worldTransform)):mesh.isMesh&&(index=meshMap.get(mesh),index.setAngularVelocity(new AmmoLib.btVector3(0,0,0)),index.setLinearVelocity(new AmmoLib.btVector3(0,0,0)),worldTransform.setIdentity(),\nworldTransform.setOrigin(new AmmoLib.btVector3(position.x,position.y,position.z)),index.setWorldTransform(worldTransform))};handleInstancedMesh=function(mesh,mass,shape){for(var array=mesh.instanceMatrix.array,bodies=[],i=0;i<mesh.count;i++){var index=16*i,transform=new AmmoLib.btTransform;transform.setFromOpenGLMatrix(array.slice(index,index+16));index=new AmmoLib.btDefaultMotionState(transform);transform=new AmmoLib.btVector3(0,0,0);shape.calculateLocalInertia(mass,transform);index=new AmmoLib.btRigidBodyConstructionInfo(mass,\nindex,shape,transform);index=new AmmoLib.btRigidBody(index);world.addRigidBody(index);bodies.push(index)}0<mass&&(mesh.instanceMatrix.setUsage(35048),meshes.push(mesh),meshMap.set(mesh,bodies))};handleMesh=function(mesh,mass,shape){var position=mesh.position,quaternion=mesh.quaternion,transform=new AmmoLib.btTransform;transform.setIdentity();transform.setOrigin(new AmmoLib.btVector3(position.x,position.y,position.z));transform.setRotation(new AmmoLib.btQuaternion(quaternion.x,quaternion.y,quaternion.z,\nquaternion.w));position=new AmmoLib.btDefaultMotionState(transform);quaternion=new AmmoLib.btVector3(0,0,0);shape.calculateLocalInertia(mass,quaternion);shape=new AmmoLib.btRigidBodyConstructionInfo(mass,position,shape,quaternion);shape=new AmmoLib.btRigidBody(shape);world.addRigidBody(shape);0<mass&&(meshes.push(mesh),meshMap.set(mesh,shape))};addMesh=function(mesh){var mass=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,shape=getShape(mesh.geometry);null!==shape&&(mesh.isInstancedMesh?\nhandleInstancedMesh(mesh,mass,shape):mesh.isMesh&&handleMesh(mesh,mass,shape))};getShape=function(geometry){var parameters=geometry.parameters;return\"BoxGeometry\"===geometry.type?(geometry=new AmmoLib.btBoxShape(new AmmoLib.btVector3(void 0!==parameters.width?parameters.width/2:.5,void 0!==parameters.height?parameters.height/2:.5,void 0!==parameters.depth?parameters.depth/2:.5)),geometry.setMargin(.05),geometry):\"SphereGeometry\"===geometry.type||\"IcosahedronGeometry\"===geometry.type?(geometry=new AmmoLib.btSphereShape(void 0!==\nparameters.radius?parameters.radius:1),geometry.setMargin(.05),geometry):null};if(!1!==\"Ammo\"in window){_context.next=9;break}console.error(\"AmmoPhysics: Couldn't find Ammo.js\");return _context.abrupt(\"return\");case 9:return _context.next=11,regeneratorRuntime.awrap(Ammo());case 11:return AmmoLib=_context.sent,collisionConfiguration=new AmmoLib.btDefaultCollisionConfiguration,dispatcher=new AmmoLib.btCollisionDispatcher(collisionConfiguration),broadphase=new AmmoLib.btDbvtBroadphase,solver=new AmmoLib.btSequentialImpulseConstraintSolver,\nworld=new AmmoLib.btDiscreteDynamicsWorld(dispatcher,broadphase,solver,collisionConfiguration),world.setGravity(new AmmoLib.btVector3(0,-9.8,0)),worldTransform=new AmmoLib.btTransform,meshes=[],meshMap=new WeakMap,lastTime=0,setInterval(step,1E3/60),_context.abrupt(\"return\",{addMesh,setMeshPosition});case 25:case \"end\":return _context.stop()}})}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$physics$AmmoPhysics\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AmmoPhysics = AmmoPhysics;\n\nfunction AmmoPhysics() {\n  var AmmoLib, frameRate, collisionConfiguration, dispatcher, broadphase, solver, world, worldTransform, getShape, meshes, meshMap, addMesh, handleMesh, handleInstancedMesh, setMeshPosition, lastTime, step;\n  return regeneratorRuntime.async(function AmmoPhysics$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          step = function _ref6() {\n            var time = performance.now();\n\n            if (lastTime > 0) {\n              var delta = (time - lastTime) / 1000; // console.time( 'world.step' );\n\n              world.stepSimulation(delta, 10); // console.timeEnd( 'world.step' );\n            }\n\n            lastTime = time; //\n\n            for (var i = 0, l = meshes.length; i < l; i++) {\n              var mesh = meshes[i];\n\n              if (mesh.isInstancedMesh) {\n                var array = mesh.instanceMatrix.array;\n                var bodies = meshMap.get(mesh);\n\n                for (var j = 0; j < bodies.length; j++) {\n                  var body = bodies[j];\n                  var motionState = body.getMotionState();\n                  motionState.getWorldTransform(worldTransform);\n                  var position = worldTransform.getOrigin();\n                  var quaternion = worldTransform.getRotation();\n                  compose(position, quaternion, array, j * 16);\n                }\n\n                mesh.instanceMatrix.needsUpdate = true;\n              } else if (mesh.isMesh) {\n                var _body2 = meshMap.get(mesh);\n\n                var _motionState = _body2.getMotionState();\n\n                _motionState.getWorldTransform(worldTransform);\n\n                var _position = worldTransform.getOrigin();\n\n                var _quaternion = worldTransform.getRotation();\n\n                mesh.position.set(_position.x(), _position.y(), _position.z());\n                mesh.quaternion.set(_quaternion.x(), _quaternion.y(), _quaternion.z(), _quaternion.w());\n              }\n            }\n          };\n\n          setMeshPosition = function _ref5(mesh, position) {\n            var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n            if (mesh.isInstancedMesh) {\n              var bodies = meshMap.get(mesh);\n              var body = bodies[index];\n              body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n              body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n              worldTransform.setIdentity();\n              worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n              body.setWorldTransform(worldTransform);\n            } else if (mesh.isMesh) {\n              var _body = meshMap.get(mesh);\n\n              _body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n\n              _body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n\n              worldTransform.setIdentity();\n              worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n\n              _body.setWorldTransform(worldTransform);\n            }\n          };\n\n          handleInstancedMesh = function _ref4(mesh, mass, shape) {\n            var array = mesh.instanceMatrix.array;\n            var bodies = [];\n\n            for (var i = 0; i < mesh.count; i++) {\n              var index = i * 16;\n              var transform = new AmmoLib.btTransform();\n              transform.setFromOpenGLMatrix(array.slice(index, index + 16));\n              var motionState = new AmmoLib.btDefaultMotionState(transform);\n              var localInertia = new AmmoLib.btVector3(0, 0, 0);\n              shape.calculateLocalInertia(mass, localInertia);\n              var rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n              var body = new AmmoLib.btRigidBody(rbInfo);\n              world.addRigidBody(body);\n              bodies.push(body);\n            }\n\n            if (mass > 0) {\n              mesh.instanceMatrix.setUsage(35048); // THREE.DynamicDrawUsage = 35048\n\n              meshes.push(mesh);\n              meshMap.set(mesh, bodies);\n            }\n          };\n\n          handleMesh = function _ref3(mesh, mass, shape) {\n            var position = mesh.position;\n            var quaternion = mesh.quaternion;\n            var transform = new AmmoLib.btTransform();\n            transform.setIdentity();\n            transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n            transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n            var motionState = new AmmoLib.btDefaultMotionState(transform);\n            var localInertia = new AmmoLib.btVector3(0, 0, 0);\n            shape.calculateLocalInertia(mass, localInertia);\n            var rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n            var body = new AmmoLib.btRigidBody(rbInfo); // body.setFriction( 4 );\n\n            world.addRigidBody(body);\n\n            if (mass > 0) {\n              meshes.push(mesh);\n              meshMap.set(mesh, body);\n            }\n          };\n\n          addMesh = function _ref2(mesh) {\n            var mass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var shape = getShape(mesh.geometry);\n\n            if (shape !== null) {\n              if (mesh.isInstancedMesh) {\n                handleInstancedMesh(mesh, mass, shape);\n              } else if (mesh.isMesh) {\n                handleMesh(mesh, mass, shape);\n              }\n            }\n          };\n\n          getShape = function _ref(geometry) {\n            var parameters = geometry.parameters; // TODO change type to is*\n\n            if (geometry.type === 'BoxGeometry') {\n              var sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n              var sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n              var sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n              var shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\n              shape.setMargin(0.05);\n              return shape;\n            } else if (geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry') {\n              var radius = parameters.radius !== undefined ? parameters.radius : 1;\n\n              var _shape = new AmmoLib.btSphereShape(radius);\n\n              _shape.setMargin(0.05);\n\n              return _shape;\n            }\n\n            return null;\n          };\n\n          if (!('Ammo' in window === false)) {\n            _context.next = 9;\n            break;\n          }\n\n          console.error(\"AmmoPhysics: Couldn't find Ammo.js\");\n          return _context.abrupt(\"return\");\n\n        case 9:\n          _context.next = 11;\n          return regeneratorRuntime.awrap(Ammo());\n\n        case 11:\n          AmmoLib = _context.sent;\n          // eslint-disable-line no-undef\n          frameRate = 60;\n          collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n          dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n          broadphase = new AmmoLib.btDbvtBroadphase();\n          solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n          world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n          world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\n          worldTransform = new AmmoLib.btTransform(); //\n\n          meshes = [];\n          meshMap = new WeakMap();\n          //\n          lastTime = 0;\n          // animate\n          setInterval(step, 1000 / frameRate);\n          return _context.abrupt(\"return\", {\n            addMesh: addMesh,\n            setMeshPosition: setMeshPosition // addCompoundMesh\n\n          });\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\n\nfunction compose(position, quaternion, array, index) {\n  var x = quaternion.x(),\n      y = quaternion.y(),\n      z = quaternion.z(),\n      w = quaternion.w();\n  var x2 = x + x,\n      y2 = y + y,\n      z2 = z + z;\n  var xx = x * x2,\n      xy = x * y2,\n      xz = x * z2;\n  var yy = y * y2,\n      yz = y * z2,\n      zz = z * z2;\n  var wx = w * x2,\n      wy = w * y2,\n      wz = w * z2;\n  array[index + 0] = 1 - (yy + zz);\n  array[index + 1] = xy + wz;\n  array[index + 2] = xz - wy;\n  array[index + 3] = 0;\n  array[index + 4] = xy - wz;\n  array[index + 5] = 1 - (xx + zz);\n  array[index + 6] = yz + wx;\n  array[index + 7] = 0;\n  array[index + 8] = xz + wy;\n  array[index + 9] = yz - wx;\n  array[index + 10] = 1 - (xx + yy);\n  array[index + 11] = 0;\n  array[index + 12] = position.x();\n  array[index + 13] = position.y();\n  array[index + 14] = position.z();\n  array[index + 15] = 1;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["next","needsUpdate","__esModule","AmmoPhysics","addMesh","value","prev","setMeshPosition"]],"~:compiled-at",1630917515596,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$physics$AmmoPhysics.js\",\n\"lineCount\":11,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/physics/AmmoPhysics.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$physics$AmmoPhysics\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.AmmoPhysics = AmmoPhysics;\\n\\nfunction AmmoPhysics() {\\n  var AmmoLib, frameRate, collisionConfiguration, dispatcher, broadphase, solver, world, worldTransform, getShape, meshes, meshMap, addMesh, handleMesh, handleInstancedMesh, setMeshPosition, lastTime, step;\\n  return regeneratorRuntime.async(function AmmoPhysics$(_context) {\\n    while (1) {\\n      switch (_context.prev = _context.next) {\\n        case 0:\\n          step = function _ref6() {\\n            var time = performance.now();\\n\\n            if (lastTime > 0) {\\n              var delta = (time - lastTime) / 1000; // console.time( 'world.step' );\\n\\n              world.stepSimulation(delta, 10); // console.timeEnd( 'world.step' );\\n            }\\n\\n            lastTime = time; //\\n\\n            for (var i = 0, l = meshes.length; i < l; i++) {\\n              var mesh = meshes[i];\\n\\n              if (mesh.isInstancedMesh) {\\n                var array = mesh.instanceMatrix.array;\\n                var bodies = meshMap.get(mesh);\\n\\n                for (var j = 0; j < bodies.length; j++) {\\n                  var body = bodies[j];\\n                  var motionState = body.getMotionState();\\n                  motionState.getWorldTransform(worldTransform);\\n                  var position = worldTransform.getOrigin();\\n                  var quaternion = worldTransform.getRotation();\\n                  compose(position, quaternion, array, j * 16);\\n                }\\n\\n                mesh.instanceMatrix.needsUpdate = true;\\n              } else if (mesh.isMesh) {\\n                var _body2 = meshMap.get(mesh);\\n\\n                var _motionState = _body2.getMotionState();\\n\\n                _motionState.getWorldTransform(worldTransform);\\n\\n                var _position = worldTransform.getOrigin();\\n\\n                var _quaternion = worldTransform.getRotation();\\n\\n                mesh.position.set(_position.x(), _position.y(), _position.z());\\n                mesh.quaternion.set(_quaternion.x(), _quaternion.y(), _quaternion.z(), _quaternion.w());\\n              }\\n            }\\n          };\\n\\n          setMeshPosition = function _ref5(mesh, position) {\\n            var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\\n\\n            if (mesh.isInstancedMesh) {\\n              var bodies = meshMap.get(mesh);\\n              var body = bodies[index];\\n              body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\\n              body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\\n              worldTransform.setIdentity();\\n              worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\\n              body.setWorldTransform(worldTransform);\\n            } else if (mesh.isMesh) {\\n              var _body = meshMap.get(mesh);\\n\\n              _body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\\n\\n              _body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\\n\\n              worldTransform.setIdentity();\\n              worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\\n\\n              _body.setWorldTransform(worldTransform);\\n            }\\n          };\\n\\n          handleInstancedMesh = function _ref4(mesh, mass, shape) {\\n            var array = mesh.instanceMatrix.array;\\n            var bodies = [];\\n\\n            for (var i = 0; i < mesh.count; i++) {\\n              var index = i * 16;\\n              var transform = new AmmoLib.btTransform();\\n              transform.setFromOpenGLMatrix(array.slice(index, index + 16));\\n              var motionState = new AmmoLib.btDefaultMotionState(transform);\\n              var localInertia = new AmmoLib.btVector3(0, 0, 0);\\n              shape.calculateLocalInertia(mass, localInertia);\\n              var rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\\n              var body = new AmmoLib.btRigidBody(rbInfo);\\n              world.addRigidBody(body);\\n              bodies.push(body);\\n            }\\n\\n            if (mass > 0) {\\n              mesh.instanceMatrix.setUsage(35048); // THREE.DynamicDrawUsage = 35048\\n\\n              meshes.push(mesh);\\n              meshMap.set(mesh, bodies);\\n            }\\n          };\\n\\n          handleMesh = function _ref3(mesh, mass, shape) {\\n            var position = mesh.position;\\n            var quaternion = mesh.quaternion;\\n            var transform = new AmmoLib.btTransform();\\n            transform.setIdentity();\\n            transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\\n            transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\\n            var motionState = new AmmoLib.btDefaultMotionState(transform);\\n            var localInertia = new AmmoLib.btVector3(0, 0, 0);\\n            shape.calculateLocalInertia(mass, localInertia);\\n            var rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\\n            var body = new AmmoLib.btRigidBody(rbInfo); // body.setFriction( 4 );\\n\\n            world.addRigidBody(body);\\n\\n            if (mass > 0) {\\n              meshes.push(mesh);\\n              meshMap.set(mesh, body);\\n            }\\n          };\\n\\n          addMesh = function _ref2(mesh) {\\n            var mass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n            var shape = getShape(mesh.geometry);\\n\\n            if (shape !== null) {\\n              if (mesh.isInstancedMesh) {\\n                handleInstancedMesh(mesh, mass, shape);\\n              } else if (mesh.isMesh) {\\n                handleMesh(mesh, mass, shape);\\n              }\\n            }\\n          };\\n\\n          getShape = function _ref(geometry) {\\n            var parameters = geometry.parameters; // TODO change type to is*\\n\\n            if (geometry.type === 'BoxGeometry') {\\n              var sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\\n              var sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\\n              var sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\\n              var shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\\n              shape.setMargin(0.05);\\n              return shape;\\n            } else if (geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry') {\\n              var radius = parameters.radius !== undefined ? parameters.radius : 1;\\n\\n              var _shape = new AmmoLib.btSphereShape(radius);\\n\\n              _shape.setMargin(0.05);\\n\\n              return _shape;\\n            }\\n\\n            return null;\\n          };\\n\\n          if (!('Ammo' in window === false)) {\\n            _context.next = 9;\\n            break;\\n          }\\n\\n          console.error(\\\"AmmoPhysics: Couldn't find Ammo.js\\\");\\n          return _context.abrupt(\\\"return\\\");\\n\\n        case 9:\\n          _context.next = 11;\\n          return regeneratorRuntime.awrap(Ammo());\\n\\n        case 11:\\n          AmmoLib = _context.sent;\\n          // eslint-disable-line no-undef\\n          frameRate = 60;\\n          collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\\n          dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\\n          broadphase = new AmmoLib.btDbvtBroadphase();\\n          solver = new AmmoLib.btSequentialImpulseConstraintSolver();\\n          world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\\n          world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\\n          worldTransform = new AmmoLib.btTransform(); //\\n\\n          meshes = [];\\n          meshMap = new WeakMap();\\n          //\\n          lastTime = 0;\\n          // animate\\n          setInterval(step, 1000 / frameRate);\\n          return _context.abrupt(\\\"return\\\", {\\n            addMesh: addMesh,\\n            setMeshPosition: setMeshPosition // addCompoundMesh\\n\\n          });\\n\\n        case 25:\\n        case \\\"end\\\":\\n          return _context.stop();\\n      }\\n    }\\n  });\\n}\\n\\nfunction compose(position, quaternion, array, index) {\\n  var x = quaternion.x(),\\n      y = quaternion.y(),\\n      z = quaternion.z(),\\n      w = quaternion.w();\\n  var x2 = x + x,\\n      y2 = y + y,\\n      z2 = z + z;\\n  var xx = x * x2,\\n      xy = x * y2,\\n      xz = x * z2;\\n  var yy = y * y2,\\n      yz = y * z2,\\n      zz = z * z2;\\n  var wx = w * x2,\\n      wy = w * y2,\\n      wz = w * z2;\\n  array[index + 0] = 1 - (yy + zz);\\n  array[index + 1] = xy + wz;\\n  array[index + 2] = xz - wy;\\n  array[index + 3] = 0;\\n  array[index + 4] = xy - wz;\\n  array[index + 5] = 1 - (xx + zz);\\n  array[index + 6] = yz + wx;\\n  array[index + 7] = 0;\\n  array[index + 8] = xz + wy;\\n  array[index + 9] = yz - wx;\\n  array[index + 10] = 1 - (xx + yy);\\n  array[index + 11] = 0;\\n  array[index + 12] = position.x();\\n  array[index + 13] = position.y();\\n  array[index + 14] = position.z();\\n  array[index + 15] = 1;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"AmmoPhysics\",\"AmmoLib\",\"collisionConfiguration\",\"dispatcher\",\"broadphase\",\"solver\",\"world\",\"worldTransform\",\"getShape\",\"meshes\",\"meshMap\",\"addMesh\",\"handleMesh\",\"handleInstancedMesh\",\"setMeshPosition\",\"lastTime\",\"step\",\"regeneratorRuntime\",\"async\",\"AmmoPhysics$\",\"_context\",\"prev\",\"next\",\"time\",\"performance\",\"now\",\"stepSimulation\",\"i\",\"l\",\"length\",\"mesh\",\"isInstancedMesh\",\"array\",\"instanceMatrix\",\"bodies\",\"get\",\"j\",\"body\",\"getMotionState\",\"motionState\",\"getWorldTransform\",\"position\",\"getOrigin\",\"quaternion\",\"getRotation\",\"x\",\"y\",\"z\",\"w\",\"x2\",\"y2\",\"z2\",\"xx\",\"xy\",\"xz\",\"yy\",\"yz\",\"zz\",\"wx\",\"wy\",\"wz\",\"index\",\"needsUpdate\",\"isMesh\",\"_body2\",\"_motionState\",\"_position\",\"_quaternion\",\"set\",\"arguments\",\"undefined\",\"setAngularVelocity\",\"btVector3\",\"setLinearVelocity\",\"setIdentity\",\"setOrigin\",\"setWorldTransform\",\"_body\",\"mass\",\"shape\",\"count\",\"transform\",\"btTransform\",\"setFromOpenGLMatrix\",\"slice\",\"btDefaultMotionState\",\"localInertia\",\"calculateLocalInertia\",\"rbInfo\",\"btRigidBodyConstructionInfo\",\"btRigidBody\",\"addRigidBody\",\"push\",\"setUsage\",\"setRotation\",\"btQuaternion\",\"geometry\",\"parameters\",\"type\",\"btBoxShape\",\"sx\",\"width\",\"sy\",\"height\",\"sz\",\"depth\",\"setMargin\",\"_shape\",\"btSphereShape\",\"radius\",\"window\",\"console\",\"error\",\"abrupt\",\"awrap\",\"Ammo\",\"sent\",\"btDefaultCollisionConfiguration\",\"btCollisionDispatcher\",\"btDbvtBroadphase\",\"btSequentialImpulseConstraintSolver\",\"btDiscreteDynamicsWorld\",\"setGravity\",\"WeakMap\",\"setInterval\",\"frameRate\",\"stop\"]\n}\n"]