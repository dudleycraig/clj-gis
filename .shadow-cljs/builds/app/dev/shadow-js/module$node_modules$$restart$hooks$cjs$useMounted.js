["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@restart/hooks/cjs/useMounted.js"],"~:js","shadow$provide.module$node_modules$$restart$hooks$cjs$useMounted=function(global,require,module,exports){exports.__esModule=!0;exports.default=function(){var mounted=(0,_react.useRef)(!0),isMounted=(0,_react.useRef)(function(){return mounted.current});(0,_react.useEffect)(function(){return function(){mounted.current=!1}},[]);return isMounted.current};var _react=require(\"module$node_modules$react$index\")}","~:source","shadow$provide[\"module$node_modules$$restart$hooks$cjs$useMounted\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = useMounted;\n\nvar _react = require(\"react\");\n\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\nfunction useMounted() {\n  var mounted = (0, _react.useRef)(true);\n  var isMounted = (0, _react.useRef)(function () {\n    return mounted.current;\n  });\n  (0, _react.useEffect)(function () {\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js"]],"~:properties",["^5",["__esModule","current","default"]],"~:compiled-at",1630505482897,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$restart$hooks$cjs$useMounted.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9GA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAwBAC,QAAmB,EAAG,CACpB,IAAIC,QAAU,CAAC,CAAA,CAAGC,MAAOC,CAAAA,MAAX,EAAmB,CAAA,CAAnB,CAAd,CACIC,UAAY,CAAC,CAAA,CAAGF,MAAOC,CAAAA,MAAX,EAAmB,QAAS,EAAG,CAC7C,MAAOF,QAAQI,CAAAA,OAD8B,CAA/B,CAGhB,EAAC,CAAA,CAAGH,MAAOI,CAAAA,SAAX,EAAsB,QAAS,EAAG,CAChC,MAAO,SAAS,EAAG,CACjBL,OAAQI,CAAAA,OAAR,CAAkB,CAAA,CADD,CADa,CAAlC,CAIG,EAJH,CAKA,OAAOD,UAAUC,CAAAA,OAVG,CAtBtB,KAAIH,OAASP,OAAA,CAAQ,iCAAR,CANiG;\",\n\"sources\":[\"node_modules/@restart/hooks/cjs/useMounted.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$restart$hooks$cjs$useMounted\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nexports.__esModule = true;\\nexports.default = useMounted;\\n\\nvar _react = require(\\\"react\\\");\\n\\n/**\\n * Track whether a component is current mounted. Generally less preferable than\\n * properlly canceling effects so they don't run after a component is unmounted,\\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\\n *\\n * @returns a function that returns the current isMounted state of the component\\n *\\n * ```ts\\n * const [data, setData] = useState(null)\\n * const isMounted = useMounted()\\n *\\n * useEffect(() => {\\n *   fetchdata().then((newData) => {\\n *      if (isMounted()) {\\n *        setData(newData);\\n *      }\\n *   })\\n * })\\n * ```\\n */\\nfunction useMounted() {\\n  var mounted = (0, _react.useRef)(true);\\n  var isMounted = (0, _react.useRef)(function () {\\n    return mounted.current;\\n  });\\n  (0, _react.useEffect)(function () {\\n    return function () {\\n      mounted.current = false;\\n    };\\n  }, []);\\n  return isMounted.current;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"__esModule\",\"default\",\"useMounted\",\"mounted\",\"_react\",\"useRef\",\"isMounted\",\"current\",\"useEffect\"]\n}\n"]