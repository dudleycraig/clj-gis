["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@restart/hooks/esm/usePrevious.js"],"~:js","shadow$provide.module$node_modules$$restart$hooks$esm$usePrevious=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=function(value){var ref=(0,_react.useRef)(null);(0,_react.useEffect)(function(){ref.current=value});return ref.current};var _react=require(\"module$node_modules$react$index\")}","~:source","shadow$provide[\"module$node_modules$$restart$hooks$esm$usePrevious\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = usePrevious;\n\nvar _react = require(\"react\");\n\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\nfunction usePrevious(value) {\n  var ref = (0, _react.useRef)(null);\n  (0, _react.useEffect)(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js"]],"~:properties",["^5",["__esModule","value","current"]],"~:compiled-at",1630917514045,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$restart$hooks$esm$usePrevious.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQ,SAAR,CAAA,CAqBAI,QAAoB,CAACD,KAAD,CAAQ,CAC1B,IAAIE,IAAM,CAAC,CAAA,CAAGC,MAAOC,CAAAA,MAAX,EAAmB,IAAnB,CACV,EAAC,CAAA,CAAGD,MAAOE,CAAAA,SAAX,EAAsB,QAAS,EAAG,CAChCH,GAAII,CAAAA,OAAJ,CAAcN,KADkB,CAAlC,CAGA,OAAOE,IAAII,CAAAA,OALe,CAnB5B,KAAIH,OAASR,OAAA,CAAQ,iCAAR,CARkG;\",\n\"sources\":[\"node_modules/@restart/hooks/esm/usePrevious.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$restart$hooks$esm$usePrevious\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = usePrevious;\\n\\nvar _react = require(\\\"react\\\");\\n\\n/**\\n * Store the last of some value. Tracked via a `Ref` only updating it\\n * after the component renders.\\n *\\n * Helpful if you need to compare a prop value to it's previous value during render.\\n *\\n * ```ts\\n * function Component(props) {\\n *   const lastProps = usePrevious(props)\\n *\\n *   if (lastProps.foo !== props.foo)\\n *     resetValueFromProps(props.foo)\\n * }\\n * ```\\n *\\n * @param value the value to track\\n */\\nfunction usePrevious(value) {\\n  var ref = (0, _react.useRef)(null);\\n  (0, _react.useEffect)(function () {\\n    ref.current = value;\\n  });\\n  return ref.current;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"usePrevious\",\"ref\",\"_react\",\"useRef\",\"useEffect\",\"current\"]\n}\n"]