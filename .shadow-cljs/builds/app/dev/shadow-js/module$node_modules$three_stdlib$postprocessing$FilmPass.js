["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/postprocessing/FilmPass.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$postprocessing$FilmPass=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.FilmPass=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_Pass=require(\"module$node_modules$three_stdlib$postprocessing$Pass\"),_FilmShader=require(\"module$node_modules$three_stdlib$shaders$FilmShader\");global=function(noiseIntensity,scanlinesIntensity,scanlinesCount,grayscale){void 0===_FilmShader.FilmShader&&\nconsole.error(\"THREE.FilmPass relies on FilmShader\");var shader=_FilmShader.FilmShader;this.uniforms=_three.UniformsUtils.clone(shader.uniforms);this.material=new _three.ShaderMaterial({uniforms:this.uniforms,vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader});void 0!==grayscale&&(this.uniforms.grayscale.value=grayscale);void 0!==noiseIntensity&&(this.uniforms.nIntensity.value=noiseIntensity);void 0!==scanlinesIntensity&&(this.uniforms.sIntensity.value=scanlinesIntensity);void 0!==\nscanlinesCount&&(this.uniforms.sCount.value=scanlinesCount);this.fsQuad=new _Pass.FullScreenQuad(this.material)};exports.FilmPass=global;global.prototype=Object.assign(Object.create(_Pass.Pass.prototype),{constructor:global,render:function(renderer,writeBuffer,readBuffer,deltaTime){this.uniforms.tDiffuse.value=readBuffer.texture;this.uniforms.time.value+=deltaTime;this.renderToScreen?renderer.setRenderTarget(null):(renderer.setRenderTarget(writeBuffer),this.clear&&renderer.clear());this.fsQuad.render(renderer)}})}","~:source","shadow$provide[\"module$node_modules$three_stdlib$postprocessing$FilmPass\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilmPass = void 0;\n\nvar _three = require(\"three\");\n\nvar _Pass = require(\"./Pass.js\");\n\nvar _FilmShader = require(\"../shaders/FilmShader.js\");\n\nvar FilmPass = function FilmPass(noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n  if (_FilmShader.FilmShader === undefined) console.error('THREE.FilmPass relies on FilmShader');\n  var shader = _FilmShader.FilmShader;\n  this.uniforms = _three.UniformsUtils.clone(shader.uniforms);\n  this.material = new _three.ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\n  if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\n  if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\n  if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\n  this.fsQuad = new _Pass.FullScreenQuad(this.material);\n};\n\nexports.FilmPass = FilmPass;\nFilmPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\n  constructor: FilmPass,\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime\n  /*, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['time'].value += deltaTime;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js","~$module$node_modules$three_stdlib$postprocessing$Pass","~$module$node_modules$three_stdlib$shaders$FilmShader"]],"~:properties",["^5",["fragmentShader","prototype","__esModule","vertexShader","value","fsQuad","render","FilmPass","uniforms","constructor","material"]],"~:compiled-at",1630917515494,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$postprocessing$FilmPass.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,QAAR,CAAmB,IAAK,EAExB,KAAIC,OAASP,OAAA,CAAQ,8CAAR,CAAb,CAEIQ,MAAQR,OAAA,CAAQ,sDAAR,CAFZ,CAIIS,YAAcT,OAAA,CAAQ,qDAAR,CAEdM,OAAAA,CAAWA,QAAiB,CAACI,cAAD,CAAiBC,kBAAjB,CAAqCC,cAArC,CAAqDC,SAArD,CAAgE,CAC/DC,IAAAA,EAA/B,GAAIL,WAAYM,CAAAA,UAAhB;AAA0CC,OAAQC,CAAAA,KAAR,CAAc,qCAAd,CAC1C,KAAIC,OAAST,WAAYM,CAAAA,UACzB,KAAKI,CAAAA,QAAL,CAAgBZ,MAAOa,CAAAA,aAAcC,CAAAA,KAArB,CAA2BH,MAAOC,CAAAA,QAAlC,CAChB,KAAKG,CAAAA,QAAL,CAAgB,IAAIf,MAAOgB,CAAAA,cAAX,CAA0B,CACxCJ,SAAU,IAAKA,CAAAA,QADyB,CAExCK,aAAcN,MAAOM,CAAAA,YAFmB,CAGxCC,eAAgBP,MAAOO,CAAAA,cAHiB,CAA1B,CAKEX,KAAAA,EAAlB,GAAID,SAAJ,GAA6B,IAAKM,CAAAA,QAASN,CAAAA,SAAUR,CAAAA,KAArD,CAA6DQ,SAA7D,CACuBC,KAAAA,EAAvB,GAAIJ,cAAJ,GAAkC,IAAKS,CAAAA,QAASO,CAAAA,UAAWrB,CAAAA,KAA3D,CAAmEK,cAAnE,CAC2BI,KAAAA,EAA3B,GAAIH,kBAAJ,GAAsC,IAAKQ,CAAAA,QAASQ,CAAAA,UAAWtB,CAAAA,KAA/D,CAAuEM,kBAAvE,CACuBG,KAAAA,EAAvB;AAAIF,cAAJ,GAAkC,IAAKO,CAAAA,QAASS,CAAAA,MAAOvB,CAAAA,KAAvD,CAA+DO,cAA/D,CACA,KAAKiB,CAAAA,MAAL,CAAc,IAAIrB,KAAMsB,CAAAA,cAAV,CAAyB,IAAKR,CAAAA,QAA9B,CAbgF,CAgBhGpB,QAAQI,CAAAA,QAAR,CAAmBA,MACnBA,OAASyB,CAAAA,SAAT,CAAqB5B,MAAO6B,CAAAA,MAAP,CAAc7B,MAAO8B,CAAAA,MAAP,CAAczB,KAAM0B,CAAAA,IAAKH,CAAAA,SAAzB,CAAd,CAAmD,CACtEI,YAAa7B,MADyD,CAEtE8B,OAAQA,QAAe,CAACC,QAAD,CAAWC,WAAX,CAAwBC,UAAxB,CAAoCC,SAApC,CAErB,CACA,IAAKrB,CAAAA,QAAL,CAAA,QAA0Bd,CAAAA,KAA1B,CAAkCkC,UAAWE,CAAAA,OAC7C,KAAKtB,CAAAA,QAAL,CAAA,IAAsBd,CAAAA,KAAtB,EAA+BmC,SAE3B,KAAKE,CAAAA,cAAT,CACEL,QAASM,CAAAA,eAAT,CAAyB,IAAzB,CADF,EAIEN,QAASM,CAAAA,eAAT,CAAyBL,WAAzB,CACA,CAAI,IAAKM,CAAAA,KAAT,EAAgBP,QAASO,CAAAA,KAAT,EALlB,CAEE,KAAKf,CAAAA,MAAOO,CAAAA,MAAZ,CAAmBC,QAAnB,CANF,CAJoE,CAAnD,CA/BgG;\",\n\"sources\":[\"node_modules/three-stdlib/postprocessing/FilmPass.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$postprocessing$FilmPass\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.FilmPass = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _Pass = require(\\\"./Pass.js\\\");\\n\\nvar _FilmShader = require(\\\"../shaders/FilmShader.js\\\");\\n\\nvar FilmPass = function FilmPass(noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\\n  if (_FilmShader.FilmShader === undefined) console.error('THREE.FilmPass relies on FilmShader');\\n  var shader = _FilmShader.FilmShader;\\n  this.uniforms = _three.UniformsUtils.clone(shader.uniforms);\\n  this.material = new _three.ShaderMaterial({\\n    uniforms: this.uniforms,\\n    vertexShader: shader.vertexShader,\\n    fragmentShader: shader.fragmentShader\\n  });\\n  if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\\n  if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\\n  if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\\n  if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\\n  this.fsQuad = new _Pass.FullScreenQuad(this.material);\\n};\\n\\nexports.FilmPass = FilmPass;\\nFilmPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\\n  constructor: FilmPass,\\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime\\n  /*, maskActive */\\n  ) {\\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\\n    this.uniforms['time'].value += deltaTime;\\n\\n    if (this.renderToScreen) {\\n      renderer.setRenderTarget(null);\\n      this.fsQuad.render(renderer);\\n    } else {\\n      renderer.setRenderTarget(writeBuffer);\\n      if (this.clear) renderer.clear();\\n      this.fsQuad.render(renderer);\\n    }\\n  }\\n});\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"FilmPass\",\"_three\",\"_Pass\",\"_FilmShader\",\"noiseIntensity\",\"scanlinesIntensity\",\"scanlinesCount\",\"grayscale\",\"undefined\",\"FilmShader\",\"console\",\"error\",\"shader\",\"uniforms\",\"UniformsUtils\",\"clone\",\"material\",\"ShaderMaterial\",\"vertexShader\",\"fragmentShader\",\"nIntensity\",\"sIntensity\",\"sCount\",\"fsQuad\",\"FullScreenQuad\",\"prototype\",\"assign\",\"create\",\"Pass\",\"constructor\",\"render\",\"renderer\",\"writeBuffer\",\"readBuffer\",\"deltaTime\",\"texture\",\"renderToScreen\",\"setRenderTarget\",\"clear\"]\n}\n"]