["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/VerticalTiltShiftShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$VerticalTiltShiftShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.VerticalTiltShiftShader=void 0;exports.VerticalTiltShiftShader={uniforms:{tDiffuse:{value:null},v:{value:1/512},r:{value:.35}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform sampler2D tDiffuse;\\nuniform float v;\\nuniform float r;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 sum \\x3d vec4( 0.0 );\\n\\tfloat vv \\x3d v * abs( r - vUv.y );\\n\\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\\n\\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\\n\\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\\n\\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\\n\\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\\n\\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\\n\\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\\n\\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\\n\\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\\n\\tgl_FragColor \\x3d sum;\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$VerticalTiltShiftShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VerticalTiltShiftShader = void 0;\n\n/**\n * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n * - \"r\" parameter control where \"focused\" horizontal line lies\n */\nvar VerticalTiltShiftShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    },\n    r: {\n      value: 0.35\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float v;', 'uniform float r;', 'varying vec2 vUv;', 'void main() {', '\tvec4 sum = vec4( 0.0 );', '\tfloat vv = v * abs( r - vUv.y );', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;', '\tgl_FragColor = sum;', '}'].join('\\n')\n};\nexports.VerticalTiltShiftShader = VerticalTiltShiftShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","__esModule","v","tDiffuse","VerticalTiltShiftShader","vertexShader","value","r","uniforms"]],"~:compiled-at",1630917515589,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$VerticalTiltShiftShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,uBAAR,CAAkC,IAAK,EAyBvCJ,QAAQI,CAAAA,uBAAR,CAf8BA,CAC5BC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,EAAG,CACDJ,MAAO,CAAPA,CAAa,GADZ,CAJK,CAORK,EAAG,CACDL,MAAO,GADN,CAPK,CADkBC,CAY5BK,aAAiJ,qIAZrHL,CAa5BM,eAAw3B,w3BAb51BN,CAhB+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/VerticalTiltShiftShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$VerticalTiltShiftShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.VerticalTiltShiftShader = void 0;\\n\\n/**\\n * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\\n *\\n * - 9 samples per pass\\n * - standard deviation 2.7\\n * - \\\"h\\\" and \\\"v\\\" parameters should be set to \\\"1 / width\\\" and \\\"1 / height\\\"\\n * - \\\"r\\\" parameter control where \\\"focused\\\" horizontal line lies\\n */\\nvar VerticalTiltShiftShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    v: {\\n      value: 1.0 / 512.0\\n    },\\n    r: {\\n      value: 0.35\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float v;', 'uniform float r;', 'varying vec2 vUv;', 'void main() {', '\\tvec4 sum = vec4( 0.0 );', '\\tfloat vv = v * abs( r - vUv.y );', '\\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;', '\\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;', '\\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;', '\\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;', '\\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;', '\\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;', '\\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;', '\\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;', '\\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;', '\\tgl_FragColor = sum;', '}'].join('\\\\n')\\n};\\nexports.VerticalTiltShiftShader = VerticalTiltShiftShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"VerticalTiltShiftShader\",\"uniforms\",\"tDiffuse\",\"v\",\"r\",\"vertexShader\",\"fragmentShader\"]\n}\n"]