["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/loaders/BasisTextureLoader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$loaders$BasisTextureLoader=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=\nObject.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}));keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(source,!0).forEach(function(key){var value=source[key];key in target?Object.defineProperty(target,key,{value,enumerable:!0,configurable:!0,writable:!0}):target[key]=value}):Object.getOwnPropertyDescriptors?\nObject.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}return target}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,\nprotoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);staticProps&&_defineProperties(Constructor,staticProps);return Constructor}function _getPrototypeOf(o$jscomp$0){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)};return _getPrototypeOf(o$jscomp$0)}function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&null!==superClass)throw new TypeError(\"Super expression must either be null or a function\");\nsubClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}});superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o$jscomp$0,p$jscomp$0){_setPrototypeOf=Object.setPrototypeOf||function(o,p){o.__proto__=p;return o};return _setPrototypeOf(o$jscomp$0,p$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.BasisTextureLoader=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),\n_taskCache=new WeakMap;global=function(_Loader){function BasisTextureLoader(manager){if(!(this instanceof BasisTextureLoader))throw new TypeError(\"Cannot call a class as a function\");manager=_getPrototypeOf(BasisTextureLoader).call(this,manager);if(!manager||\"object\"!==_typeof(manager)&&\"function\"!==typeof manager){if(void 0===this)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");manager=this}manager.transcoderPath=\"\";manager.transcoderBinary=null;manager.transcoderPending=\nnull;manager.workerLimit=4;manager.workerPool=[];manager.workerNextTaskID=1;manager.workerSourceURL=\"\";manager.workerConfig=null;return manager}_inherits(BasisTextureLoader,_Loader);_createClass(BasisTextureLoader,[{key:\"setTranscoderPath\",value:function(path){this.transcoderPath=path;return this}},{key:\"setWorkerLimit\",value:function(workerLimit){this.workerLimit=workerLimit;return this}},{key:\"detectSupport\",value:function(renderer){this.workerConfig={astcSupported:renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\netc1Supported:renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),etc2Supported:renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),dxtSupported:renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),bptcSupported:renderer.extensions.has(\"EXT_texture_compression_bptc\"),pvrtcSupported:renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\")||renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")};return this}},{key:\"load\",value:function(url,onLoad,onProgress,onError){var _this2=\nthis,loader=new _three.FileLoader(this.manager);loader.setResponseType(\"arraybuffer\");loader.setWithCredentials(this.withCredentials);var texture=new _three.CompressedTexture;loader.load(url,function(buffer){if(_taskCache.has(buffer))return _taskCache.get(buffer).promise.then(onLoad)[\"catch\"](onError);_this2._createTexture([buffer]).then(function(_texture){texture.copy(_texture);texture.needsUpdate=!0;onLoad&&onLoad(texture)})[\"catch\"](onError)},onProgress,onError);return texture}},{key:\"parseInternalAsync\",\nvalue:function(options){for(var levels=options.levels,buffers=new Set,i=0;i<levels.length;i++)buffers.add(levels[i].data.buffer);return this._createTexture(Array.from(buffers),_objectSpread({},options,{lowLevel:!0}))}},{key:\"_createTexture\",value:function(buffers){for(var _this3=this,worker,taskID,taskConfig=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},taskCost=0,i=0;i<buffers.length;i++)taskCost+=buffers[i].byteLength;i=this._allocateWorker(taskCost).then(function(_worker){worker=_worker;\ntaskID=_this3.workerNextTaskID++;return new Promise(function(resolve,reject){worker._callbacks[taskID]={resolve,reject};worker.postMessage({type:\"transcode\",id:taskID,buffers,taskConfig},buffers)})}).then(function(message){var mipmaps=message.mipmaps;message=new _three.CompressedTexture(mipmaps,message.width,message.height,message.format,_three.UnsignedByteType);message.minFilter=1===mipmaps.length?_three.LinearFilter:_three.LinearMipmapLinearFilter;message.magFilter=_three.LinearFilter;message.generateMipmaps=\n!1;message.needsUpdate=!0;return message});i[\"catch\"](function(){return!0}).then(function(){worker&&taskID&&(worker._taskLoad-=taskCost,delete worker._callbacks[taskID])});_taskCache.set(buffers[0],{promise:i});return i}},{key:\"_initTranscoder\",value:function(){var _this4=this;if(!this.transcoderPending){var jsLoader=new _three.FileLoader(this.manager);jsLoader.setPath(this.transcoderPath);jsLoader.setWithCredentials(this.withCredentials);var jsContent=new Promise(function(resolve,reject){jsLoader.load(\"basis_transcoder.js\",\nresolve,void 0,reject)}),binaryLoader=new _three.FileLoader(this.manager);binaryLoader.setPath(this.transcoderPath);binaryLoader.setResponseType(\"arraybuffer\");binaryLoader.setWithCredentials(this.withCredentials);var binaryContent=new Promise(function(resolve,reject){binaryLoader.load(\"basis_transcoder.wasm\",resolve,void 0,reject)});this.transcoderPending=Promise.all([jsContent,binaryContent]).then(function(_ref){var JSCompiler_temp=Array.isArray(_ref)?_ref:void 0;if(!JSCompiler_temp)if(Symbol.iterator in\nObject(_ref)||\"[object Arguments]\"===Object.prototype.toString.call(_ref)){JSCompiler_temp=[];var _n=!0,_d=!1,_e=void 0;try{var JSCompiler_temp$jscomp$0=_ref[Symbol.iterator]();for(var _s;!(_n=(_s=JSCompiler_temp$jscomp$0.next()).done)&&(JSCompiler_temp.push(_s.value),2!==JSCompiler_temp.length);_n=!0);}catch(err){_d=!0,_e=err}finally{try{if(!_n&&null!=JSCompiler_temp$jscomp$0[\"return\"])JSCompiler_temp$jscomp$0[\"return\"]()}finally{if(_d)throw _e;}}}else JSCompiler_temp=void 0;if(!(JSCompiler_temp$jscomp$0=\nJSCompiler_temp))throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");_ref=JSCompiler_temp$jscomp$0[0];JSCompiler_temp$jscomp$0=JSCompiler_temp$jscomp$0[1];_s=BasisTextureLoader.BasisWorker.toString();_ref=[\"/* constants */\",\"let _EngineFormat \\x3d \"+JSON.stringify(BasisTextureLoader.EngineFormat),\"let _TranscoderFormat \\x3d \"+JSON.stringify(BasisTextureLoader.TranscoderFormat),\"let _BasisFormat \\x3d \"+JSON.stringify(BasisTextureLoader.BasisFormat),\"/* basis_transcoder.js */\",\n_ref,\"/* worker */\",_s.substring(_s.indexOf(\"{\")+1,_s.lastIndexOf(\"}\"))].join(\"\\n\");_this4.workerSourceURL=URL.createObjectURL(new Blob([_ref]));_this4.transcoderBinary=JSCompiler_temp$jscomp$0})}return this.transcoderPending}},{key:\"_allocateWorker\",value:function(taskCost){var _this5=this;return this._initTranscoder().then(function(){if(_this5.workerPool.length<_this5.workerLimit){var _worker2=new Worker(_this5.workerSourceURL);_worker2._callbacks={};_worker2._taskLoad=0;_worker2.postMessage({type:\"init\",\nconfig:_this5.workerConfig,transcoderBinary:_this5.transcoderBinary});_worker2.onmessage=function(e){e=e.data;switch(e.type){case \"transcode\":_worker2._callbacks[e.id].resolve(e);break;case \"error\":_worker2._callbacks[e.id].reject(e);break;default:console.error('THREE.BasisTextureLoader: Unexpected message, \"'+e.type+'\"')}};_this5.workerPool.push(_worker2)}else _this5.workerPool.sort(function(a,b){return a._taskLoad>b._taskLoad?-1:1});var worker=_this5.workerPool[_this5.workerPool.length-1];worker._taskLoad+=\ntaskCost;return worker})}},{key:\"dispose\",value:function(){for(var i=0;i<this.workerPool.length;i++)this.workerPool[i].terminate();this.workerPool.length=0;return this}}]);return BasisTextureLoader}(_three.Loader);exports.BasisTextureLoader=global;global.BasisFormat={ETC1S:0,UASTC_4x4:1};global.TranscoderFormat={ETC1:0,ETC2:1,BC1:2,BC3:3,BC4:4,BC5:5,BC7_M6_OPAQUE_ONLY:6,BC7_M5:7,PVRTC1_4_RGB:8,PVRTC1_4_RGBA:9,ASTC_4x4:10,ATC_RGB:11,ATC_RGBA_INTERPOLATED_ALPHA:12,RGBA32:13,RGB565:14,BGR565:15,RGBA4444:16};\nglobal.EngineFormat={RGBAFormat:_three.RGBAFormat,RGBA_ASTC_4x4_Format:_three.RGBA_ASTC_4x4_Format,RGBA_BPTC_Format:_three.RGBA_BPTC_Format,RGBA_ETC2_EAC_Format:_three.RGBA_ETC2_EAC_Format,RGBA_PVRTC_4BPPV1_Format:_three.RGBA_PVRTC_4BPPV1_Format,RGBA_S3TC_DXT5_Format:_three.RGBA_S3TC_DXT5_Format,RGB_ETC1_Format:_three.RGB_ETC1_Format,RGB_ETC2_Format:_three.RGB_ETC2_Format,RGB_PVRTC_4BPPV1_Format:_three.RGB_PVRTC_4BPPV1_Format,RGB_S3TC_DXT1_Format:_three.RGB_S3TC_DXT1_Format};global.BasisWorker=function(){function init(wasmBinary){transcoderPending=\n(new Promise(function(resolve){BasisModule={wasmBinary,onRuntimeInitialized:resolve};BASIS(BasisModule)})).then(function(){BasisModule.initializeBasis()})}function transcode(buffer){function cleanup(){basisFile.close();basisFile[\"delete\"]()}var basisFile=new BasisModule.BasisFile(new Uint8Array(buffer)),basisFormat=basisFile.isUASTC()?BasisFormat.UASTC_4x4:BasisFormat.ETC1S;buffer=basisFile.getImageWidth(0,0);var height=basisFile.getImageHeight(0,0),levels=basisFile.getNumLevels(0),hasAlpha=basisFile.getHasAlpha(),\n_getTranscoderFormat2=getTranscoderFormat(basisFormat,buffer,height,hasAlpha);basisFormat=_getTranscoderFormat2.transcoderFormat;_getTranscoderFormat2=_getTranscoderFormat2.engineFormat;if(!buffer||!height||!levels)throw cleanup(),Error(\"THREE.BasisTextureLoader:\\tInvalid texture\");if(!basisFile.startTranscoding())throw cleanup(),Error(\"THREE.BasisTextureLoader: .startTranscoding failed\");for(var mipmaps=[],mip=0;mip<levels;mip++){var mipWidth=basisFile.getImageWidth(0,mip),mipHeight=basisFile.getImageHeight(0,\nmip),dst=new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0,mip,basisFormat));if(!basisFile.transcodeImage(dst,0,mip,basisFormat,0,hasAlpha))throw cleanup(),Error(\"THREE.BasisTextureLoader: .transcodeImage failed.\");mipmaps.push({data:dst,width:mipWidth,height:mipHeight})}cleanup();return{width:buffer,height,hasAlpha,mipmaps,format:_getTranscoderFormat2}}function getTranscoderFormat(basisFormat,width,height,hasAlpha){for(var options=basisFormat===BasisFormat.ETC1S?ETC1S_OPTIONS:UASTC_OPTIONS,\ni=0;i<options.length;i++){var opt=options[i];if(config[opt[\"if\"]]&&opt.basisFormat.includes(basisFormat)&&(!opt.needsPowerOfTwo||(2>=width||0===(width&width-1)&&0!==width)&&(2>=height||0===(height&height-1)&&0!==height)))return basisFormat=opt.transcoderFormat[hasAlpha?1:0],hasAlpha=opt.engineFormat[hasAlpha?1:0],{transcoderFormat:basisFormat,engineFormat:hasAlpha}}console.warn(\"THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.\");basisFormat=TranscoderFormat.RGBA32;\nhasAlpha=EngineFormat.RGBAFormat;return{transcoderFormat:basisFormat,engineFormat:hasAlpha}}function assert(ok,message){if(!ok)throw Error(message);}function getTranscodedImageByteLength(transcoderFormat,width,height){var blockByteLength=BasisModule.getBytesPerBlockOrPixel(transcoderFormat);return BasisModule.formatIsUncompressed(transcoderFormat)?width*height*blockByteLength:transcoderFormat===TranscoderFormat.PVRTC1_4_RGB||transcoderFormat===TranscoderFormat.PVRTC1_4_RGBA?(Math.max(8,width+3&-4)*\nMath.max(8,height+3&-4)*4+7)/8:Math.ceil(width/BasisModule.getFormatBlockWidth(transcoderFormat))*Math.ceil(height/BasisModule.getFormatBlockHeight(transcoderFormat))*blockByteLength}var config,transcoderPending,BasisModule,EngineFormat=_EngineFormat,TranscoderFormat=_TranscoderFormat,BasisFormat=_BasisFormat;onmessage=function(e){var message=e.data;switch(message.type){case \"init\":config=message.config;init(message.transcoderBinary);break;case \"transcode\":transcoderPending.then(function(){try{if(message.taskConfig.lowLevel){var taskConfig=\nmessage.taskConfig,basisFormat=taskConfig.basisFormat,width=taskConfig.width,height=taskConfig.height,hasAlpha=taskConfig.hasAlpha,_getTranscoderFormat=getTranscoderFormat(basisFormat,width,height,hasAlpha),transcoderFormat=_getTranscoderFormat.transcoderFormat,engineFormat=_getTranscoderFormat.engineFormat,blockByteLength=BasisModule.getBytesPerBlockOrPixel(transcoderFormat);assert(BasisModule.isFormatSupported(transcoderFormat),\"THREE.BasisTextureLoader: Unsupported format.\");_getTranscoderFormat=\n[];if(basisFormat===BasisFormat.ETC1S){var transcoder=new BasisModule.LowLevelETC1SImageTranscoder,_taskConfig$globalDat=taskConfig.globalData,endpointCount=_taskConfig$globalDat.endpointCount,endpointsData=_taskConfig$globalDat.endpointsData,selectorCount=_taskConfig$globalDat.selectorCount,selectorsData=_taskConfig$globalDat.selectorsData,tablesData=_taskConfig$globalDat.tablesData;try{var ok=transcoder.decodePalettes(endpointCount,endpointsData,selectorCount,selectorsData);assert(ok,\"THREE.BasisTextureLoader: decodePalettes() failed.\");\nok=transcoder.decodeTables(tablesData);assert(ok,\"THREE.BasisTextureLoader: decodeTables() failed.\");for(var i=0;i<taskConfig.levels.length;i++){var level=taskConfig.levels[i],imageDesc=taskConfig.globalData.imageDescs[i],dstByteLength=getTranscodedImageByteLength(transcoderFormat,level.width,level.height),dst=new Uint8Array(dstByteLength);ok=transcoder.transcodeImage(transcoderFormat,dst,dstByteLength/blockByteLength,level.data,Math.ceil(level.width/BasisModule.getFormatBlockWidth(transcoderFormat)),\nMath.ceil(level.height/BasisModule.getFormatBlockHeight(transcoderFormat)),level.width,level.height,level.index,imageDesc.rgbSliceByteOffset,imageDesc.rgbSliceByteLength,imageDesc.alphaSliceByteOffset,imageDesc.alphaSliceByteLength,imageDesc.imageFlags,hasAlpha,!1,0,0);assert(ok,\"THREE.BasisTextureLoader: transcodeImage() failed for level \"+level.index+\".\");_getTranscoderFormat.push({data:dst,width:level.width,height:level.height})}}finally{transcoder[\"delete\"]()}}else for(transcoder=0;transcoder<\ntaskConfig.levels.length;transcoder++){i=taskConfig.levels[transcoder];var _dstByteLength=getTranscodedImageByteLength(transcoderFormat,i.width,i.height),_dst=new Uint8Array(_dstByteLength),_ok=BasisModule.transcodeUASTCImage(transcoderFormat,_dst,_dstByteLength/blockByteLength,i.data,Math.ceil(i.width/BasisModule.getFormatBlockWidth(transcoderFormat)),Math.ceil(i.height/BasisModule.getFormatBlockHeight(transcoderFormat)),i.width,i.height,i.index,0,i.data.byteLength,0,hasAlpha,!1,0,0,-1,-1);assert(_ok,\n\"THREE.BasisTextureLoader: transcodeUASTCImage() failed for level \"+i.index+\".\");_getTranscoderFormat.push({data:_dst,width:i.width,height:i.height})}var JSCompiler_temp={width,height,hasAlpha,mipmaps:_getTranscoderFormat,format:engineFormat}}else JSCompiler_temp=transcode(message.buffers[0]);var width$jscomp$0=JSCompiler_temp.width,height$jscomp$0=JSCompiler_temp.height,hasAlpha$jscomp$0=JSCompiler_temp.hasAlpha,mipmaps=JSCompiler_temp.mipmaps,format=JSCompiler_temp.format;JSCompiler_temp=[];for(taskConfig=\n0;taskConfig<mipmaps.length;++taskConfig)JSCompiler_temp.push(mipmaps[taskConfig].data.buffer);self.postMessage({type:\"transcode\",id:message.id,width:width$jscomp$0,height:height$jscomp$0,hasAlpha:hasAlpha$jscomp$0,mipmaps,format},JSCompiler_temp)}catch(error){console.error(error),self.postMessage({type:\"error\",id:message.id,error:error.message})}})}};var FORMAT_OPTIONS=[{\"if\":\"astcSupported\",basisFormat:[BasisFormat.UASTC_4x4],transcoderFormat:[TranscoderFormat.ASTC_4x4,TranscoderFormat.ASTC_4x4],\nengineFormat:[EngineFormat.RGBA_ASTC_4x4_Format,EngineFormat.RGBA_ASTC_4x4_Format],priorityETC1S:Infinity,priorityUASTC:1,needsPowerOfTwo:!1},{\"if\":\"bptcSupported\",basisFormat:[BasisFormat.ETC1S,BasisFormat.UASTC_4x4],transcoderFormat:[TranscoderFormat.BC7_M5,TranscoderFormat.BC7_M5],engineFormat:[EngineFormat.RGBA_BPTC_Format,EngineFormat.RGBA_BPTC_Format],priorityETC1S:3,priorityUASTC:2,needsPowerOfTwo:!1},{\"if\":\"dxtSupported\",basisFormat:[BasisFormat.ETC1S,BasisFormat.UASTC_4x4],transcoderFormat:[TranscoderFormat.BC1,\nTranscoderFormat.BC3],engineFormat:[EngineFormat.RGB_S3TC_DXT1_Format,EngineFormat.RGBA_S3TC_DXT5_Format],priorityETC1S:4,priorityUASTC:5,needsPowerOfTwo:!1},{\"if\":\"etc2Supported\",basisFormat:[BasisFormat.ETC1S,BasisFormat.UASTC_4x4],transcoderFormat:[TranscoderFormat.ETC1,TranscoderFormat.ETC2],engineFormat:[EngineFormat.RGB_ETC2_Format,EngineFormat.RGBA_ETC2_EAC_Format],priorityETC1S:1,priorityUASTC:3,needsPowerOfTwo:!1},{\"if\":\"etc1Supported\",basisFormat:[BasisFormat.ETC1S,BasisFormat.UASTC_4x4],\ntranscoderFormat:[TranscoderFormat.ETC1,TranscoderFormat.ETC1],engineFormat:[EngineFormat.RGB_ETC1_Format,EngineFormat.RGB_ETC1_Format],priorityETC1S:2,priorityUASTC:4,needsPowerOfTwo:!1},{\"if\":\"pvrtcSupported\",basisFormat:[BasisFormat.ETC1S,BasisFormat.UASTC_4x4],transcoderFormat:[TranscoderFormat.PVRTC1_4_RGB,TranscoderFormat.PVRTC1_4_RGBA],engineFormat:[EngineFormat.RGB_PVRTC_4BPPV1_Format,EngineFormat.RGBA_PVRTC_4BPPV1_Format],priorityETC1S:5,priorityUASTC:6,needsPowerOfTwo:!0}],ETC1S_OPTIONS=\nFORMAT_OPTIONS.sort(function(a,b){return a.priorityETC1S-b.priorityETC1S}),UASTC_OPTIONS=FORMAT_OPTIONS.sort(function(a,b){return a.priorityUASTC-b.priorityUASTC})}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$loaders$BasisTextureLoader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BasisTextureLoader = void 0;\n\nvar _three = require(\"three\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\nvar _taskCache = new WeakMap();\n\nvar BasisTextureLoader =\n/*#__PURE__*/\nfunction (_Loader) {\n  _inherits(BasisTextureLoader, _Loader);\n\n  function BasisTextureLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, BasisTextureLoader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BasisTextureLoader).call(this, manager));\n    _this.transcoderPath = '';\n    _this.transcoderBinary = null;\n    _this.transcoderPending = null;\n    _this.workerLimit = 4;\n    _this.workerPool = [];\n    _this.workerNextTaskID = 1;\n    _this.workerSourceURL = '';\n    _this.workerConfig = null;\n    return _this;\n  }\n\n  _createClass(BasisTextureLoader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(workerLimit) {\n      this.workerLimit = workerLimit;\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n        etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n        etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n        dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n        bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n        pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n      };\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this2 = this;\n\n      var loader = new _three.FileLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.setWithCredentials(this.withCredentials);\n      var texture = new _three.CompressedTexture();\n      loader.load(url, function (buffer) {\n        // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n        // again from this thread.\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n\n          return cachedTask.promise.then(onLoad)[\"catch\"](onError);\n        }\n\n        _this2._createTexture([buffer]).then(function (_texture) {\n          texture.copy(_texture);\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        })[\"catch\"](onError);\n      }, onProgress, onError);\n      return texture;\n    }\n    /** Low-level transcoding API, exposed for use by KTX2Loader. */\n\n  }, {\n    key: \"parseInternalAsync\",\n    value: function parseInternalAsync(options) {\n      var levels = options.levels;\n      var buffers = new Set();\n\n      for (var i = 0; i < levels.length; i++) {\n        buffers.add(levels[i].data.buffer);\n      }\n\n      return this._createTexture(Array.from(buffers), _objectSpread({}, options, {\n        lowLevel: true\n      }));\n    }\n    /**\n     * @param {ArrayBuffer[]} buffers\n     * @param {object?} config\n     * @return {Promise<CompressedTexture>}\n     */\n\n  }, {\n    key: \"_createTexture\",\n    value: function _createTexture(buffers) {\n      var _this3 = this;\n\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var worker;\n      var taskID;\n      var taskConfig = config;\n      var taskCost = 0;\n\n      for (var i = 0; i < buffers.length; i++) {\n        taskCost += buffers[i].byteLength;\n      }\n\n      var texturePending = this._allocateWorker(taskCost).then(function (_worker) {\n        worker = _worker;\n        taskID = _this3.workerNextTaskID++;\n        return new Promise(function (resolve, reject) {\n          worker._callbacks[taskID] = {\n            resolve: resolve,\n            reject: reject\n          };\n          worker.postMessage({\n            type: 'transcode',\n            id: taskID,\n            buffers: buffers,\n            taskConfig: taskConfig\n          }, buffers);\n        });\n      }).then(function (message) {\n        var mipmaps = message.mipmaps,\n            width = message.width,\n            height = message.height,\n            format = message.format;\n        var texture = new _three.CompressedTexture(mipmaps, width, height, format, _three.UnsignedByteType);\n        texture.minFilter = mipmaps.length === 1 ? _three.LinearFilter : _three.LinearMipmapLinearFilter;\n        texture.magFilter = _three.LinearFilter;\n        texture.generateMipmaps = false;\n        texture.needsUpdate = true;\n        return texture;\n      }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n      texturePending[\"catch\"](function () {\n        return true;\n      }).then(function () {\n        if (worker && taskID) {\n          worker._taskLoad -= taskCost;\n          delete worker._callbacks[taskID];\n        }\n      }); // Cache the task result.\n\n      _taskCache.set(buffers[0], {\n        promise: texturePending\n      });\n\n      return texturePending;\n    }\n  }, {\n    key: \"_initTranscoder\",\n    value: function _initTranscoder() {\n      var _this4 = this;\n\n      if (!this.transcoderPending) {\n        // Load transcoder wrapper.\n        var jsLoader = new _three.FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        var jsContent = new Promise(function (resolve, reject) {\n          jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\n        }); // Load transcoder WASM binary.\n\n        var binaryLoader = new _three.FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType('arraybuffer');\n        binaryLoader.setWithCredentials(this.withCredentials);\n        var binaryContent = new Promise(function (resolve, reject) {\n          binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n        });\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              jsContent = _ref2[0],\n              binaryContent = _ref2[1];\n\n          var fn = BasisTextureLoader.BasisWorker.toString();\n          var body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n          _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          _this4.transcoderBinary = binaryContent;\n        });\n      }\n\n      return this.transcoderPending;\n    }\n  }, {\n    key: \"_allocateWorker\",\n    value: function _allocateWorker(taskCost) {\n      var _this5 = this;\n\n      return this._initTranscoder().then(function () {\n        if (_this5.workerPool.length < _this5.workerLimit) {\n          var _worker2 = new Worker(_this5.workerSourceURL);\n\n          _worker2._callbacks = {};\n          _worker2._taskLoad = 0;\n\n          _worker2.postMessage({\n            type: 'init',\n            config: _this5.workerConfig,\n            transcoderBinary: _this5.transcoderBinary\n          });\n\n          _worker2.onmessage = function (e) {\n            var message = e.data;\n\n            switch (message.type) {\n              case 'transcode':\n                _worker2._callbacks[message.id].resolve(message);\n\n                break;\n\n              case 'error':\n                _worker2._callbacks[message.id].reject(message);\n\n                break;\n\n              default:\n                console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n            }\n          };\n\n          _this5.workerPool.push(_worker2);\n        } else {\n          _this5.workerPool.sort(function (a, b) {\n            return a._taskLoad > b._taskLoad ? -1 : 1;\n          });\n        }\n\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\n        worker._taskLoad += taskCost;\n        return worker;\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.workerPool.length; i++) {\n        this.workerPool[i].terminate();\n      }\n\n      this.workerPool.length = 0;\n      return this;\n    }\n  }]);\n\n  return BasisTextureLoader;\n}(_three.Loader);\n/* CONSTANTS */\n\n\nexports.BasisTextureLoader = BasisTextureLoader;\nBasisTextureLoader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nBasisTextureLoader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nBasisTextureLoader.EngineFormat = {\n  RGBAFormat: _three.RGBAFormat,\n  RGBA_ASTC_4x4_Format: _three.RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: _three.RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: _three.RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: _three.RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: _three.RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: _three.RGB_ETC1_Format,\n  RGB_ETC2_Format: _three.RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: _three.RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: _three.RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  var TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  var BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  onmessage = function onmessage(e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(function () {\n          try {\n            var _ref3 = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]),\n                width = _ref3.width,\n                height = _ref3.height,\n                hasAlpha = _ref3.hasAlpha,\n                mipmaps = _ref3.mipmaps,\n                format = _ref3.format;\n\n            var buffers = [];\n\n            for (var i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width: width,\n              height: height,\n              hasAlpha: hasAlpha,\n              mipmaps: mipmaps,\n              format: format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(function (resolve) {\n      BasisModule = {\n        wasmBinary: wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(function () {\n      BasisModule.initializeBasis();\n    });\n  }\n\n  function transcodeLowLevel(taskConfig) {\n    var basisFormat = taskConfig.basisFormat,\n        width = taskConfig.width,\n        height = taskConfig.height,\n        hasAlpha = taskConfig.hasAlpha;\n\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n        transcoderFormat = _getTranscoderFormat.transcoderFormat,\n        engineFormat = _getTranscoderFormat.engineFormat;\n\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\n    var mipmaps = [];\n\n    if (basisFormat === BasisFormat.ETC1S) {\n      var transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      var _taskConfig$globalDat = taskConfig.globalData,\n          endpointCount = _taskConfig$globalDat.endpointCount,\n          endpointsData = _taskConfig$globalDat.endpointsData,\n          selectorCount = _taskConfig$globalDat.selectorCount,\n          selectorsData = _taskConfig$globalDat.selectorsData,\n          tablesData = _taskConfig$globalDat.tablesData;\n\n      try {\n        var ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\n\n        for (var i = 0; i < taskConfig.levels.length; i++) {\n          var level = taskConfig.levels[i];\n          var imageDesc = taskConfig.globalData.imageDescs[i];\n          var dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          var dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder[\"delete\"]();\n      }\n    } else {\n      for (var _i2 = 0; _i2 < taskConfig.levels.length; _i2++) {\n        var _level = taskConfig.levels[_i2];\n\n        var _dstByteLength = getTranscodedImageByteLength(transcoderFormat, _level.width, _level.height);\n\n        var _dst = new Uint8Array(_dstByteLength);\n\n        var _ok = BasisModule.transcodeUASTCImage(transcoderFormat, _dst, _dstByteLength / blockByteLength, _level.data, getWidthInBlocks(transcoderFormat, _level.width), getHeightInBlocks(transcoderFormat, _level.height), _level.width, _level.height, _level.index, 0, _level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n\n        assert(_ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + _level.index + '.');\n        mipmaps.push({\n          data: _dst,\n          width: _level.width,\n          height: _level.height\n        });\n      }\n    }\n\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat\n    };\n  }\n\n  function transcode(buffer) {\n    var basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    var basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = basisFile.getImageWidth(0, 0);\n    var height = basisFile.getImageHeight(0, 0);\n    var levels = basisFile.getNumLevels(0);\n    var hasAlpha = basisFile.getHasAlpha();\n\n    function cleanup() {\n      basisFile.close();\n      basisFile[\"delete\"]();\n    }\n\n    var _getTranscoderFormat2 = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n        transcoderFormat = _getTranscoderFormat2.transcoderFormat,\n        engineFormat = _getTranscoderFormat2.engineFormat;\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader:\tInvalid texture');\n    }\n\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n    }\n\n    var mipmaps = [];\n\n    for (var mip = 0; mip < levels; mip++) {\n      var mipWidth = basisFile.getImageWidth(0, mip);\n      var mipHeight = basisFile.getImageHeight(0, mip);\n      var dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      var status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  var FORMAT_OPTIONS = [{\n    \"if\": 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    \"if\": 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    \"if\": 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    \"if\": 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    \"if\": 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    \"if\": 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (var i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt[\"if\"]]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat: transcoderFormat,\n        engineFormat: engineFormat\n      };\n    }\n\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat: transcoderFormat,\n      engineFormat: engineFormat\n    };\n  }\n\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      // GL requires extra padding for very small textures:\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\n      var paddedWidth = width + 3 & ~3;\n      var paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["transcoderPending","mipmaps","BC4","BC5","RGBA_ASTC_4x4_Format","promise","onRuntimeInitialized","width","TranscoderFormat","astcSupported","etc2Supported","resolve","engineFormat","etc1Supported","config","needsUpdate","prototype","height","wasmBinary","RGBA32","BC1","RGB_S3TC_DXT1_Format","basisFormat","key","workerPool","BGR565","__esModule","workerSourceURL","error","id","bptcSupported","transcoderPath","RGB_ETC1_Format","RGB_PVRTC_4BPPV1_Format","UASTC_4x4","PVRTC1_4_RGB","BC7_M6_OPAQUE_ONLY","taskConfig","configurable","transcoderFormat","value","enumerable","ETC2","pvrtcSupported","ETC1S","hasAlpha","workerNextTaskID","transcoderBinary","magFilter","ETC1","_taskLoad","writable","_callbacks","ASTC_4x4","RGBA_PVRTC_4BPPV1_Format","ATC_RGB","length","priorityETC1S","lowLevel","workerConfig","RGBA_S3TC_DXT5_Format","type","RGBA4444","__proto__","RGBA_ETC2_EAC_Format","RGB565","needsPowerOfTwo","RGBA_BPTC_Format","generateMipmaps","PVRTC1_4_RGBA","BC7_M5","BC3","reject","minFilter","EngineFormat","dxtSupported","workerLimit","data","RGBAFormat","BasisTextureLoader","buffers","onmessage","priorityUASTC","ATC_RGBA_INTERPOLATED_ALPHA","BasisFormat","format","RGB_ETC2_Format","constructor","BasisWorker"]],"~:compiled-at",1630917515743,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$loaders$BasisTextureLoader.js\",\n\"lineCount\":36,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/loaders/BasisTextureLoader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$loaders$BasisTextureLoader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.BasisTextureLoader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance\\\"); }\\n\\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \\\"[object Arguments]\\\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/**\\n * Loader for Basis Universal GPU Texture Codec.\\n *\\n * Basis Universal is a \\\"supercompressed\\\" GPU texture and texture video\\n * compression system that outputs a highly compressed intermediate file format\\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\\n * compression formats.\\n *\\n * This loader parallelizes the transcoding process across a configurable number\\n * of web workers, before transferring the transcoded compressed texture back\\n * to the main thread.\\n */\\nvar _taskCache = new WeakMap();\\n\\nvar BasisTextureLoader =\\n/*#__PURE__*/\\nfunction (_Loader) {\\n  _inherits(BasisTextureLoader, _Loader);\\n\\n  function BasisTextureLoader(manager) {\\n    var _this;\\n\\n    _classCallCheck(this, BasisTextureLoader);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BasisTextureLoader).call(this, manager));\\n    _this.transcoderPath = '';\\n    _this.transcoderBinary = null;\\n    _this.transcoderPending = null;\\n    _this.workerLimit = 4;\\n    _this.workerPool = [];\\n    _this.workerNextTaskID = 1;\\n    _this.workerSourceURL = '';\\n    _this.workerConfig = null;\\n    return _this;\\n  }\\n\\n  _createClass(BasisTextureLoader, [{\\n    key: \\\"setTranscoderPath\\\",\\n    value: function setTranscoderPath(path) {\\n      this.transcoderPath = path;\\n      return this;\\n    }\\n  }, {\\n    key: \\\"setWorkerLimit\\\",\\n    value: function setWorkerLimit(workerLimit) {\\n      this.workerLimit = workerLimit;\\n      return this;\\n    }\\n  }, {\\n    key: \\\"detectSupport\\\",\\n    value: function detectSupport(renderer) {\\n      this.workerConfig = {\\n        astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\\n        etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\\n        etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\\n        dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\\n        bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\\n        pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\\n      };\\n      return this;\\n    }\\n  }, {\\n    key: \\\"load\\\",\\n    value: function load(url, onLoad, onProgress, onError) {\\n      var _this2 = this;\\n\\n      var loader = new _three.FileLoader(this.manager);\\n      loader.setResponseType('arraybuffer');\\n      loader.setWithCredentials(this.withCredentials);\\n      var texture = new _three.CompressedTexture();\\n      loader.load(url, function (buffer) {\\n        // Check for an existing task using this buffer. A transferred buffer cannot be transferred\\n        // again from this thread.\\n        if (_taskCache.has(buffer)) {\\n          var cachedTask = _taskCache.get(buffer);\\n\\n          return cachedTask.promise.then(onLoad)[\\\"catch\\\"](onError);\\n        }\\n\\n        _this2._createTexture([buffer]).then(function (_texture) {\\n          texture.copy(_texture);\\n          texture.needsUpdate = true;\\n          if (onLoad) onLoad(texture);\\n        })[\\\"catch\\\"](onError);\\n      }, onProgress, onError);\\n      return texture;\\n    }\\n    /** Low-level transcoding API, exposed for use by KTX2Loader. */\\n\\n  }, {\\n    key: \\\"parseInternalAsync\\\",\\n    value: function parseInternalAsync(options) {\\n      var levels = options.levels;\\n      var buffers = new Set();\\n\\n      for (var i = 0; i < levels.length; i++) {\\n        buffers.add(levels[i].data.buffer);\\n      }\\n\\n      return this._createTexture(Array.from(buffers), _objectSpread({}, options, {\\n        lowLevel: true\\n      }));\\n    }\\n    /**\\n     * @param {ArrayBuffer[]} buffers\\n     * @param {object?} config\\n     * @return {Promise<CompressedTexture>}\\n     */\\n\\n  }, {\\n    key: \\\"_createTexture\\\",\\n    value: function _createTexture(buffers) {\\n      var _this3 = this;\\n\\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n      var worker;\\n      var taskID;\\n      var taskConfig = config;\\n      var taskCost = 0;\\n\\n      for (var i = 0; i < buffers.length; i++) {\\n        taskCost += buffers[i].byteLength;\\n      }\\n\\n      var texturePending = this._allocateWorker(taskCost).then(function (_worker) {\\n        worker = _worker;\\n        taskID = _this3.workerNextTaskID++;\\n        return new Promise(function (resolve, reject) {\\n          worker._callbacks[taskID] = {\\n            resolve: resolve,\\n            reject: reject\\n          };\\n          worker.postMessage({\\n            type: 'transcode',\\n            id: taskID,\\n            buffers: buffers,\\n            taskConfig: taskConfig\\n          }, buffers);\\n        });\\n      }).then(function (message) {\\n        var mipmaps = message.mipmaps,\\n            width = message.width,\\n            height = message.height,\\n            format = message.format;\\n        var texture = new _three.CompressedTexture(mipmaps, width, height, format, _three.UnsignedByteType);\\n        texture.minFilter = mipmaps.length === 1 ? _three.LinearFilter : _three.LinearMipmapLinearFilter;\\n        texture.magFilter = _three.LinearFilter;\\n        texture.generateMipmaps = false;\\n        texture.needsUpdate = true;\\n        return texture;\\n      }); // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\\n\\n\\n      texturePending[\\\"catch\\\"](function () {\\n        return true;\\n      }).then(function () {\\n        if (worker && taskID) {\\n          worker._taskLoad -= taskCost;\\n          delete worker._callbacks[taskID];\\n        }\\n      }); // Cache the task result.\\n\\n      _taskCache.set(buffers[0], {\\n        promise: texturePending\\n      });\\n\\n      return texturePending;\\n    }\\n  }, {\\n    key: \\\"_initTranscoder\\\",\\n    value: function _initTranscoder() {\\n      var _this4 = this;\\n\\n      if (!this.transcoderPending) {\\n        // Load transcoder wrapper.\\n        var jsLoader = new _three.FileLoader(this.manager);\\n        jsLoader.setPath(this.transcoderPath);\\n        jsLoader.setWithCredentials(this.withCredentials);\\n        var jsContent = new Promise(function (resolve, reject) {\\n          jsLoader.load('basis_transcoder.js', resolve, undefined, reject);\\n        }); // Load transcoder WASM binary.\\n\\n        var binaryLoader = new _three.FileLoader(this.manager);\\n        binaryLoader.setPath(this.transcoderPath);\\n        binaryLoader.setResponseType('arraybuffer');\\n        binaryLoader.setWithCredentials(this.withCredentials);\\n        var binaryContent = new Promise(function (resolve, reject) {\\n          binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\\n        });\\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\\n          var _ref2 = _slicedToArray(_ref, 2),\\n              jsContent = _ref2[0],\\n              binaryContent = _ref2[1];\\n\\n          var fn = BasisTextureLoader.BasisWorker.toString();\\n          var body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(BasisTextureLoader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(BasisTextureLoader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(BasisTextureLoader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\\\n');\\n          _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\\n          _this4.transcoderBinary = binaryContent;\\n        });\\n      }\\n\\n      return this.transcoderPending;\\n    }\\n  }, {\\n    key: \\\"_allocateWorker\\\",\\n    value: function _allocateWorker(taskCost) {\\n      var _this5 = this;\\n\\n      return this._initTranscoder().then(function () {\\n        if (_this5.workerPool.length < _this5.workerLimit) {\\n          var _worker2 = new Worker(_this5.workerSourceURL);\\n\\n          _worker2._callbacks = {};\\n          _worker2._taskLoad = 0;\\n\\n          _worker2.postMessage({\\n            type: 'init',\\n            config: _this5.workerConfig,\\n            transcoderBinary: _this5.transcoderBinary\\n          });\\n\\n          _worker2.onmessage = function (e) {\\n            var message = e.data;\\n\\n            switch (message.type) {\\n              case 'transcode':\\n                _worker2._callbacks[message.id].resolve(message);\\n\\n                break;\\n\\n              case 'error':\\n                _worker2._callbacks[message.id].reject(message);\\n\\n                break;\\n\\n              default:\\n                console.error('THREE.BasisTextureLoader: Unexpected message, \\\"' + message.type + '\\\"');\\n            }\\n          };\\n\\n          _this5.workerPool.push(_worker2);\\n        } else {\\n          _this5.workerPool.sort(function (a, b) {\\n            return a._taskLoad > b._taskLoad ? -1 : 1;\\n          });\\n        }\\n\\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\\n        worker._taskLoad += taskCost;\\n        return worker;\\n      });\\n    }\\n  }, {\\n    key: \\\"dispose\\\",\\n    value: function dispose() {\\n      for (var i = 0; i < this.workerPool.length; i++) {\\n        this.workerPool[i].terminate();\\n      }\\n\\n      this.workerPool.length = 0;\\n      return this;\\n    }\\n  }]);\\n\\n  return BasisTextureLoader;\\n}(_three.Loader);\\n/* CONSTANTS */\\n\\n\\nexports.BasisTextureLoader = BasisTextureLoader;\\nBasisTextureLoader.BasisFormat = {\\n  ETC1S: 0,\\n  UASTC_4x4: 1\\n};\\nBasisTextureLoader.TranscoderFormat = {\\n  ETC1: 0,\\n  ETC2: 1,\\n  BC1: 2,\\n  BC3: 3,\\n  BC4: 4,\\n  BC5: 5,\\n  BC7_M6_OPAQUE_ONLY: 6,\\n  BC7_M5: 7,\\n  PVRTC1_4_RGB: 8,\\n  PVRTC1_4_RGBA: 9,\\n  ASTC_4x4: 10,\\n  ATC_RGB: 11,\\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\\n  RGBA32: 13,\\n  RGB565: 14,\\n  BGR565: 15,\\n  RGBA4444: 16\\n};\\nBasisTextureLoader.EngineFormat = {\\n  RGBAFormat: _three.RGBAFormat,\\n  RGBA_ASTC_4x4_Format: _three.RGBA_ASTC_4x4_Format,\\n  RGBA_BPTC_Format: _three.RGBA_BPTC_Format,\\n  RGBA_ETC2_EAC_Format: _three.RGBA_ETC2_EAC_Format,\\n  RGBA_PVRTC_4BPPV1_Format: _three.RGBA_PVRTC_4BPPV1_Format,\\n  RGBA_S3TC_DXT5_Format: _three.RGBA_S3TC_DXT5_Format,\\n  RGB_ETC1_Format: _three.RGB_ETC1_Format,\\n  RGB_ETC2_Format: _three.RGB_ETC2_Format,\\n  RGB_PVRTC_4BPPV1_Format: _three.RGB_PVRTC_4BPPV1_Format,\\n  RGB_S3TC_DXT1_Format: _three.RGB_S3TC_DXT1_Format\\n};\\n/* WEB WORKER */\\n\\nBasisTextureLoader.BasisWorker = function () {\\n  var config;\\n  var transcoderPending;\\n  var BasisModule;\\n  var EngineFormat = _EngineFormat; // eslint-disable-line no-undef\\n\\n  var TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\\n\\n  var BasisFormat = _BasisFormat; // eslint-disable-line no-undef\\n\\n  onmessage = function onmessage(e) {\\n    var message = e.data;\\n\\n    switch (message.type) {\\n      case 'init':\\n        config = message.config;\\n        init(message.transcoderBinary);\\n        break;\\n\\n      case 'transcode':\\n        transcoderPending.then(function () {\\n          try {\\n            var _ref3 = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]),\\n                width = _ref3.width,\\n                height = _ref3.height,\\n                hasAlpha = _ref3.hasAlpha,\\n                mipmaps = _ref3.mipmaps,\\n                format = _ref3.format;\\n\\n            var buffers = [];\\n\\n            for (var i = 0; i < mipmaps.length; ++i) {\\n              buffers.push(mipmaps[i].data.buffer);\\n            }\\n\\n            self.postMessage({\\n              type: 'transcode',\\n              id: message.id,\\n              width: width,\\n              height: height,\\n              hasAlpha: hasAlpha,\\n              mipmaps: mipmaps,\\n              format: format\\n            }, buffers);\\n          } catch (error) {\\n            console.error(error);\\n            self.postMessage({\\n              type: 'error',\\n              id: message.id,\\n              error: error.message\\n            });\\n          }\\n        });\\n        break;\\n    }\\n  };\\n\\n  function init(wasmBinary) {\\n    transcoderPending = new Promise(function (resolve) {\\n      BasisModule = {\\n        wasmBinary: wasmBinary,\\n        onRuntimeInitialized: resolve\\n      };\\n      BASIS(BasisModule); // eslint-disable-line no-undef\\n    }).then(function () {\\n      BasisModule.initializeBasis();\\n    });\\n  }\\n\\n  function transcodeLowLevel(taskConfig) {\\n    var basisFormat = taskConfig.basisFormat,\\n        width = taskConfig.width,\\n        height = taskConfig.height,\\n        hasAlpha = taskConfig.hasAlpha;\\n\\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\\n        transcoderFormat = _getTranscoderFormat.transcoderFormat,\\n        engineFormat = _getTranscoderFormat.engineFormat;\\n\\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\\n    assert(BasisModule.isFormatSupported(transcoderFormat), 'THREE.BasisTextureLoader: Unsupported format.');\\n    var mipmaps = [];\\n\\n    if (basisFormat === BasisFormat.ETC1S) {\\n      var transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\\n      var _taskConfig$globalDat = taskConfig.globalData,\\n          endpointCount = _taskConfig$globalDat.endpointCount,\\n          endpointsData = _taskConfig$globalDat.endpointsData,\\n          selectorCount = _taskConfig$globalDat.selectorCount,\\n          selectorsData = _taskConfig$globalDat.selectorsData,\\n          tablesData = _taskConfig$globalDat.tablesData;\\n\\n      try {\\n        var ok;\\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\\n        assert(ok, 'THREE.BasisTextureLoader: decodePalettes() failed.');\\n        ok = transcoder.decodeTables(tablesData);\\n        assert(ok, 'THREE.BasisTextureLoader: decodeTables() failed.');\\n\\n        for (var i = 0; i < taskConfig.levels.length; i++) {\\n          var level = taskConfig.levels[i];\\n          var imageDesc = taskConfig.globalData.imageDescs[i];\\n          var dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\\n          var dst = new Uint8Array(dstByteLength);\\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\\n          assert(ok, 'THREE.BasisTextureLoader: transcodeImage() failed for level ' + level.index + '.');\\n          mipmaps.push({\\n            data: dst,\\n            width: level.width,\\n            height: level.height\\n          });\\n        }\\n      } finally {\\n        transcoder[\\\"delete\\\"]();\\n      }\\n    } else {\\n      for (var _i2 = 0; _i2 < taskConfig.levels.length; _i2++) {\\n        var _level = taskConfig.levels[_i2];\\n\\n        var _dstByteLength = getTranscodedImageByteLength(transcoderFormat, _level.width, _level.height);\\n\\n        var _dst = new Uint8Array(_dstByteLength);\\n\\n        var _ok = BasisModule.transcodeUASTCImage(transcoderFormat, _dst, _dstByteLength / blockByteLength, _level.data, getWidthInBlocks(transcoderFormat, _level.width), getHeightInBlocks(transcoderFormat, _level.height), _level.width, _level.height, _level.index, 0, _level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\\n\\n        assert(_ok, 'THREE.BasisTextureLoader: transcodeUASTCImage() failed for level ' + _level.index + '.');\\n        mipmaps.push({\\n          data: _dst,\\n          width: _level.width,\\n          height: _level.height\\n        });\\n      }\\n    }\\n\\n    return {\\n      width: width,\\n      height: height,\\n      hasAlpha: hasAlpha,\\n      mipmaps: mipmaps,\\n      format: engineFormat\\n    };\\n  }\\n\\n  function transcode(buffer) {\\n    var basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\\n    var basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\\n    var width = basisFile.getImageWidth(0, 0);\\n    var height = basisFile.getImageHeight(0, 0);\\n    var levels = basisFile.getNumLevels(0);\\n    var hasAlpha = basisFile.getHasAlpha();\\n\\n    function cleanup() {\\n      basisFile.close();\\n      basisFile[\\\"delete\\\"]();\\n    }\\n\\n    var _getTranscoderFormat2 = getTranscoderFormat(basisFormat, width, height, hasAlpha),\\n        transcoderFormat = _getTranscoderFormat2.transcoderFormat,\\n        engineFormat = _getTranscoderFormat2.engineFormat;\\n\\n    if (!width || !height || !levels) {\\n      cleanup();\\n      throw new Error('THREE.BasisTextureLoader:\\tInvalid texture');\\n    }\\n\\n    if (!basisFile.startTranscoding()) {\\n      cleanup();\\n      throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\\n    }\\n\\n    var mipmaps = [];\\n\\n    for (var mip = 0; mip < levels; mip++) {\\n      var mipWidth = basisFile.getImageWidth(0, mip);\\n      var mipHeight = basisFile.getImageHeight(0, mip);\\n      var dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\\n      var status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\\n\\n      if (!status) {\\n        cleanup();\\n        throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\\n      }\\n\\n      mipmaps.push({\\n        data: dst,\\n        width: mipWidth,\\n        height: mipHeight\\n      });\\n    }\\n\\n    cleanup();\\n    return {\\n      width: width,\\n      height: height,\\n      hasAlpha: hasAlpha,\\n      mipmaps: mipmaps,\\n      format: engineFormat\\n    };\\n  } //\\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\\n  // for ETC1S and UASTC.\\n  //\\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\\n\\n\\n  var FORMAT_OPTIONS = [{\\n    \\\"if\\\": 'astcSupported',\\n    basisFormat: [BasisFormat.UASTC_4x4],\\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\\n    priorityETC1S: Infinity,\\n    priorityUASTC: 1,\\n    needsPowerOfTwo: false\\n  }, {\\n    \\\"if\\\": 'bptcSupported',\\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\\n    priorityETC1S: 3,\\n    priorityUASTC: 2,\\n    needsPowerOfTwo: false\\n  }, {\\n    \\\"if\\\": 'dxtSupported',\\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\\n    priorityETC1S: 4,\\n    priorityUASTC: 5,\\n    needsPowerOfTwo: false\\n  }, {\\n    \\\"if\\\": 'etc2Supported',\\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\\n    priorityETC1S: 1,\\n    priorityUASTC: 3,\\n    needsPowerOfTwo: false\\n  }, {\\n    \\\"if\\\": 'etc1Supported',\\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\\n    priorityETC1S: 2,\\n    priorityUASTC: 4,\\n    needsPowerOfTwo: false\\n  }, {\\n    \\\"if\\\": 'pvrtcSupported',\\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\\n    priorityETC1S: 5,\\n    priorityUASTC: 6,\\n    needsPowerOfTwo: true\\n  }];\\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\\n    return a.priorityETC1S - b.priorityETC1S;\\n  });\\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\\n    return a.priorityUASTC - b.priorityUASTC;\\n  });\\n\\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\\n    var transcoderFormat;\\n    var engineFormat;\\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\\n\\n    for (var i = 0; i < options.length; i++) {\\n      var opt = options[i];\\n      if (!config[opt[\\\"if\\\"]]) continue;\\n      if (!opt.basisFormat.includes(basisFormat)) continue;\\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\\n      return {\\n        transcoderFormat: transcoderFormat,\\n        engineFormat: engineFormat\\n      };\\n    }\\n\\n    console.warn('THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.');\\n    transcoderFormat = TranscoderFormat.RGBA32;\\n    engineFormat = EngineFormat.RGBAFormat;\\n    return {\\n      transcoderFormat: transcoderFormat,\\n      engineFormat: engineFormat\\n    };\\n  }\\n\\n  function assert(ok, message) {\\n    if (!ok) throw new Error(message);\\n  }\\n\\n  function getWidthInBlocks(transcoderFormat, width) {\\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\\n  }\\n\\n  function getHeightInBlocks(transcoderFormat, height) {\\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\\n  }\\n\\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\\n\\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\\n      return width * height * blockByteLength;\\n    }\\n\\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\\n      // GL requires extra padding for very small textures:\\n      // https://www.khronos.org/registry/OpenGL/extensions/IMG/IMG_texture_compression_pvrtc.txt\\n      var paddedWidth = width + 3 & ~3;\\n      var paddedHeight = height + 3 & ~3;\\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\\n    }\\n\\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\\n  }\\n\\n  function isPowerOfTwo(value) {\\n    if (value <= 2) return true;\\n    return (value & value - 1) === 0 && value !== 0;\\n  }\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"ownKeys\",\"object\",\"enumerableOnly\",\"keys\",\"Object\",\"getOwnPropertySymbols\",\"symbols\",\"filter\",\"sym\",\"getOwnPropertyDescriptor\",\"enumerable\",\"push\",\"apply\",\"_objectSpread\",\"target\",\"i\",\"arguments\",\"length\",\"source\",\"forEach\",\"key\",\"defineProperty\",\"value\",\"configurable\",\"writable\",\"getOwnPropertyDescriptors\",\"defineProperties\",\"_defineProperties\",\"props\",\"descriptor\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"_getPrototypeOf\",\"o\",\"setPrototypeOf\",\"getPrototypeOf\",\"__proto__\",\"_inherits\",\"subClass\",\"superClass\",\"TypeError\",\"create\",\"_setPrototypeOf\",\"p\",\"BasisTextureLoader\",\"_three\",\"_taskCache\",\"WeakMap\",\"_Loader\",\"manager\",\"instance\",\"call\",\"self\",\"ReferenceError\",\"_this\",\"transcoderPath\",\"transcoderBinary\",\"transcoderPending\",\"workerLimit\",\"workerPool\",\"workerNextTaskID\",\"workerSourceURL\",\"workerConfig\",\"setTranscoderPath\",\"path\",\"setWorkerLimit\",\"detectSupport\",\"renderer\",\"astcSupported\",\"extensions\",\"has\",\"etc1Supported\",\"etc2Supported\",\"dxtSupported\",\"bptcSupported\",\"pvrtcSupported\",\"load\",\"url\",\"onLoad\",\"onProgress\",\"onError\",\"_this2\",\"loader\",\"FileLoader\",\"setResponseType\",\"setWithCredentials\",\"withCredentials\",\"texture\",\"CompressedTexture\",\"buffer\",\"get\",\"cachedTask\",\"promise\",\"then\",\"_createTexture\",\"_texture\",\"copy\",\"needsUpdate\",\"parseInternalAsync\",\"options\",\"levels\",\"buffers\",\"Set\",\"add\",\"data\",\"Array\",\"from\",\"lowLevel\",\"_this3\",\"worker\",\"taskID\",\"taskConfig\",\"config\",\"undefined\",\"taskCost\",\"byteLength\",\"texturePending\",\"_allocateWorker\",\"_worker\",\"Promise\",\"resolve\",\"reject\",\"_callbacks\",\"postMessage\",\"type\",\"id\",\"message\",\"mipmaps\",\"width\",\"height\",\"format\",\"UnsignedByteType\",\"minFilter\",\"LinearFilter\",\"LinearMipmapLinearFilter\",\"magFilter\",\"generateMipmaps\",\"_taskLoad\",\"set\",\"_initTranscoder\",\"_this4\",\"jsLoader\",\"setPath\",\"jsContent\",\"binaryLoader\",\"binaryContent\",\"all\",\"_ref\",\"isArray\",\"arr\",\"toString\",\"_arr\",\"_n\",\"_d\",\"_e\",\"_i\",\"_s\",\"done\",\"next\",\"err\",\"_ref2\",\"fn\",\"BasisWorker\",\"body\",\"JSON\",\"stringify\",\"EngineFormat\",\"TranscoderFormat\",\"BasisFormat\",\"substring\",\"indexOf\",\"lastIndexOf\",\"join\",\"URL\",\"createObjectURL\",\"Blob\",\"_this5\",\"_worker2\",\"Worker\",\"onmessage\",\"_worker2.onmessage\",\"e\",\"console\",\"error\",\"sort\",\"a\",\"b\",\"dispose\",\"terminate\",\"Loader\",\"ETC1S\",\"UASTC_4x4\",\"ETC1\",\"ETC2\",\"BC1\",\"BC3\",\"BC4\",\"BC5\",\"BC7_M6_OPAQUE_ONLY\",\"BC7_M5\",\"PVRTC1_4_RGB\",\"PVRTC1_4_RGBA\",\"ASTC_4x4\",\"ATC_RGB\",\"ATC_RGBA_INTERPOLATED_ALPHA\",\"RGBA32\",\"RGB565\",\"BGR565\",\"RGBA4444\",\"RGBAFormat\",\"RGBA_ASTC_4x4_Format\",\"RGBA_BPTC_Format\",\"RGBA_ETC2_EAC_Format\",\"RGBA_PVRTC_4BPPV1_Format\",\"RGBA_S3TC_DXT5_Format\",\"RGB_ETC1_Format\",\"RGB_ETC2_Format\",\"RGB_PVRTC_4BPPV1_Format\",\"RGB_S3TC_DXT1_Format\",\"BasisTextureLoader.BasisWorker\",\"init\",\"wasmBinary\",\"BasisModule\",\"onRuntimeInitialized\",\"BASIS\",\"initializeBasis\",\"transcode\",\"cleanup\",\"basisFile\",\"close\",\"BasisFile\",\"Uint8Array\",\"basisFormat\",\"isUASTC\",\"getImageWidth\",\"getImageHeight\",\"getNumLevels\",\"hasAlpha\",\"getHasAlpha\",\"_getTranscoderFormat2\",\"getTranscoderFormat\",\"transcoderFormat\",\"engineFormat\",\"Error\",\"startTranscoding\",\"mip\",\"mipWidth\",\"mipHeight\",\"dst\",\"getImageTranscodedSizeInBytes\",\"transcodeImage\",\"status\",\"ETC1S_OPTIONS\",\"UASTC_OPTIONS\",\"opt\",\"includes\",\"needsPowerOfTwo\",\"warn\",\"assert\",\"ok\",\"getTranscodedImageByteLength\",\"blockByteLength\",\"getBytesPerBlockOrPixel\",\"formatIsUncompressed\",\"Math\",\"max\",\"ceil\",\"getFormatBlockWidth\",\"getFormatBlockHeight\",\"_EngineFormat\",\"_TranscoderFormat\",\"_BasisFormat\",\"_getTranscoderFormat\",\"isFormatSupported\",\"transcoder\",\"LowLevelETC1SImageTranscoder\",\"_taskConfig$globalDat\",\"globalData\",\"endpointCount\",\"endpointsData\",\"selectorCount\",\"selectorsData\",\"tablesData\",\"decodePalettes\",\"decodeTables\",\"level\",\"imageDesc\",\"imageDescs\",\"dstByteLength\",\"index\",\"rgbSliceByteOffset\",\"rgbSliceByteLength\",\"alphaSliceByteOffset\",\"alphaSliceByteLength\",\"imageFlags\",\"_i2\",\"_level\",\"_dstByteLength\",\"_dst\",\"_ok\",\"transcodeUASTCImage\",\"_ref3\",\"FORMAT_OPTIONS\",\"priorityETC1S\",\"Infinity\",\"priorityUASTC\"]\n}\n"]