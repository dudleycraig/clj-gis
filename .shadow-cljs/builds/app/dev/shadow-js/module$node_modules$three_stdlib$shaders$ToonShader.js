["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/ToonShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$ToonShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.ToonShaderHatching=exports.ToonShaderDotted=exports.ToonShader2=exports.ToonShader1=void 0;global=require(\"module$node_modules$three$build$three_module\");require={uniforms:{uDirLightPos:{value:new global.Vector3},uDirLightColor:{value:new global.Color(15658734)},uAmbientLightColor:{value:new global.Color(328965)},uBaseColor:{value:new global.Color(16777215)}},\nvertexShader:\"varying vec3 vNormal;\\nvarying vec3 vRefract;\\nvoid main() {\\n\\tvec4 worldPosition \\x3d modelMatrix * vec4( position, 1.0 );\\n\\tvec4 mvPosition \\x3d modelViewMatrix * vec4( position, 1.0 );\\n\\tvec3 worldNormal \\x3d normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\\n\\tvNormal \\x3d normalize( normalMatrix * normal );\\n\\tvec3 I \\x3d worldPosition.xyz - cameraPosition;\\n\\tvRefract \\x3d refract( normalize( I ), worldNormal, 1.02 );\\n\\tgl_Position \\x3d projectionMatrix * mvPosition;\\n}\",\nfragmentShader:\"uniform vec3 uBaseColor;\\nuniform vec3 uDirLightPos;\\nuniform vec3 uDirLightColor;\\nuniform vec3 uAmbientLightColor;\\nvarying vec3 vNormal;\\nvarying vec3 vRefract;\\nvoid main() {\\n\\tfloat directionalLightWeighting \\x3d max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\\n\\tvec3 lightWeighting \\x3d uAmbientLightColor + uDirLightColor * directionalLightWeighting;\\n\\tfloat intensity \\x3d smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );\\n\\tintensity +\\x3d length(lightWeighting) * 0.2;\\n\\tfloat cameraWeighting \\x3d dot( normalize( vNormal ), vRefract );\\n\\tintensity +\\x3d pow( 1.0 - length( cameraWeighting ), 6.0 );\\n\\tintensity \\x3d intensity * 0.2 + 0.3;\\n\\tif ( intensity \\x3c 0.50 ) {\\n\\t\\tgl_FragColor \\x3d vec4( 2.0 * intensity * uBaseColor, 1.0 );\\n\\t} else {\\n\\t\\tgl_FragColor \\x3d vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );\\n}\\n}\"};\nexports.ToonShader1=require;require={uniforms:{uDirLightPos:{value:new global.Vector3},uDirLightColor:{value:new global.Color(15658734)},uAmbientLightColor:{value:new global.Color(328965)},uBaseColor:{value:new global.Color(15658734)},uLineColor1:{value:new global.Color(8421504)},uLineColor2:{value:new global.Color(0)},uLineColor3:{value:new global.Color(0)},uLineColor4:{value:new global.Color(0)}},vertexShader:\"varying vec3 vNormal;\\nvoid main() {\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\tvNormal \\x3d normalize( normalMatrix * normal );\\n}\",\nfragmentShader:\"uniform vec3 uBaseColor;\\nuniform vec3 uLineColor1;\\nuniform vec3 uLineColor2;\\nuniform vec3 uLineColor3;\\nuniform vec3 uLineColor4;\\nuniform vec3 uDirLightPos;\\nuniform vec3 uDirLightColor;\\nuniform vec3 uAmbientLightColor;\\nvarying vec3 vNormal;\\nvoid main() {\\n\\tfloat camera \\x3d max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);\\n\\tfloat light \\x3d max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\\n\\tgl_FragColor \\x3d vec4( uBaseColor, 1.0 );\\n\\tif ( length(uAmbientLightColor + uDirLightColor * light) \\x3c 1.00 ) {\\n\\t\\tgl_FragColor *\\x3d vec4( uLineColor1, 1.0 );\\n\\t}\\n\\tif ( length(uAmbientLightColor + uDirLightColor * camera) \\x3c 0.50 ) {\\n\\t\\tgl_FragColor *\\x3d vec4( uLineColor2, 1.0 );\\n\\t}\\n}\"};\nexports.ToonShader2=require;require={uniforms:{uDirLightPos:{value:new global.Vector3},uDirLightColor:{value:new global.Color(15658734)},uAmbientLightColor:{value:new global.Color(328965)},uBaseColor:{value:new global.Color(16777215)},uLineColor1:{value:new global.Color(0)},uLineColor2:{value:new global.Color(0)},uLineColor3:{value:new global.Color(0)},uLineColor4:{value:new global.Color(0)}},vertexShader:\"varying vec3 vNormal;\\nvoid main() {\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\tvNormal \\x3d normalize( normalMatrix * normal );\\n}\",\nfragmentShader:\"uniform vec3 uBaseColor;\\nuniform vec3 uLineColor1;\\nuniform vec3 uLineColor2;\\nuniform vec3 uLineColor3;\\nuniform vec3 uLineColor4;\\nuniform vec3 uDirLightPos;\\nuniform vec3 uDirLightColor;\\nuniform vec3 uAmbientLightColor;\\nvarying vec3 vNormal;\\nvoid main() {\\n\\tfloat directionalLightWeighting \\x3d max( dot( normalize(vNormal), uDirLightPos ), 0.0);\\n\\tvec3 lightWeighting \\x3d uAmbientLightColor + uDirLightColor * directionalLightWeighting;\\n\\tgl_FragColor \\x3d vec4( uBaseColor, 1.0 );\\n\\tif ( length(lightWeighting) \\x3c 1.00 ) {\\n\\t\\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) \\x3d\\x3d 0.0) {\\n\\t\\t\\tgl_FragColor \\x3d vec4( uLineColor1, 1.0 );\\n\\t\\t}\\n\\t}\\n\\tif ( length(lightWeighting) \\x3c 0.75 ) {\\n\\t\\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) \\x3d\\x3d 0.0) {\\n\\t\\t\\tgl_FragColor \\x3d vec4( uLineColor2, 1.0 );\\n\\t\\t}\\n\\t}\\n\\tif ( length(lightWeighting) \\x3c 0.50 ) {\\n\\t\\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) \\x3d\\x3d 0.0) {\\n\\t\\t\\tgl_FragColor \\x3d vec4( uLineColor3, 1.0 );\\n\\t\\t}\\n\\t}\\n\\tif ( length(lightWeighting) \\x3c 0.3465 ) {\\n\\t\\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) \\x3d\\x3d 0.0) {\\n\\t\\t\\tgl_FragColor \\x3d vec4( uLineColor4, 1.0 );\\n\\t}\\n\\t}\\n}\"};\nexports.ToonShaderHatching=require;global={uniforms:{uDirLightPos:{value:new global.Vector3},uDirLightColor:{value:new global.Color(15658734)},uAmbientLightColor:{value:new global.Color(328965)},uBaseColor:{value:new global.Color(16777215)},uLineColor1:{value:new global.Color(0)}},vertexShader:\"varying vec3 vNormal;\\nvoid main() {\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\tvNormal \\x3d normalize( normalMatrix * normal );\\n}\",fragmentShader:\"uniform vec3 uBaseColor;\\nuniform vec3 uLineColor1;\\nuniform vec3 uLineColor2;\\nuniform vec3 uLineColor3;\\nuniform vec3 uLineColor4;\\nuniform vec3 uDirLightPos;\\nuniform vec3 uDirLightColor;\\nuniform vec3 uAmbientLightColor;\\nvarying vec3 vNormal;\\nvoid main() {\\nfloat directionalLightWeighting \\x3d max( dot( normalize(vNormal), uDirLightPos ), 0.0);\\nvec3 lightWeighting \\x3d uAmbientLightColor + uDirLightColor * directionalLightWeighting;\\ngl_FragColor \\x3d vec4( uBaseColor, 1.0 );\\nif ( length(lightWeighting) \\x3c 1.00 ) {\\n\\t\\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) \\x3e 6.00 ) {\\n\\t\\t\\tgl_FragColor \\x3d vec4( uLineColor1, 1.0 );\\n\\t\\t}\\n\\t}\\n\\tif ( length(lightWeighting) \\x3c 0.50 ) {\\n\\t\\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) \\x3e 6.00 ) {\\n\\t\\t\\tgl_FragColor \\x3d vec4( uLineColor1, 1.0 );\\n\\t\\t}\\n\\t}\\n}\"};\nexports.ToonShaderDotted=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$ToonShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToonShaderHatching = exports.ToonShaderDotted = exports.ToonShader2 = exports.ToonShader1 = void 0;\n\nvar _three = require(\"three\");\n\n/**\n * Currently contains:\n *\n *\ttoon1\n *\ttoon2\n *\thatching\n *\tdotted\n */\nvar ToonShader1 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new _three.Vector3()\n    },\n    uDirLightColor: {\n      value: new _three.Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new _three.Color(0x050505)\n    },\n    uBaseColor: {\n      value: new _three.Color(0xffffff)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', '\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );', '\tvNormal = normalize( normalMatrix * normal );', '\tvec3 I = worldPosition.xyz - cameraPosition;', '\tvRefract = refract( normalize( I ), worldNormal, 1.02 );', '\tgl_Position = projectionMatrix * mvPosition;', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );', '\tintensity += length(lightWeighting) * 0.2;', '\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );', '\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );', '\tintensity = intensity * 0.2 + 0.3;', '\tif ( intensity < 0.50 ) {', '\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );', '\t} else {', '\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );', '}', '}'].join('\\n')\n};\nexports.ToonShader1 = ToonShader1;\nvar ToonShader2 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new _three.Vector3()\n    },\n    uDirLightColor: {\n      value: new _three.Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new _three.Color(0x050505)\n    },\n    uBaseColor: {\n      value: new _three.Color(0xeeeeee)\n    },\n    uLineColor1: {\n      value: new _three.Color(0x808080)\n    },\n    uLineColor2: {\n      value: new _three.Color(0x000000)\n    },\n    uLineColor3: {\n      value: new _three.Color(0x000000)\n    },\n    uLineColor4: {\n      value: new _three.Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);', '\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {', '\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );', '\t}', '\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {', '\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );', '\t}', '}'].join('\\n')\n};\nexports.ToonShader2 = ToonShader2;\nvar ToonShaderHatching = {\n  uniforms: {\n    uDirLightPos: {\n      value: new _three.Vector3()\n    },\n    uDirLightColor: {\n      value: new _three.Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new _three.Color(0x050505)\n    },\n    uBaseColor: {\n      value: new _three.Color(0xffffff)\n    },\n    uLineColor1: {\n      value: new _three.Color(0x000000)\n    },\n    uLineColor2: {\n      value: new _three.Color(0x000000)\n    },\n    uLineColor3: {\n      value: new _three.Color(0x000000)\n    },\n    uLineColor4: {\n      value: new _three.Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\tif ( length(lightWeighting) < 1.00 ) {', '\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.75 ) {', '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.50 ) {', '\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.3465 ) {', '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );', '\t}', '\t}', '}'].join('\\n')\n};\nexports.ToonShaderHatching = ToonShaderHatching;\nvar ToonShaderDotted = {\n  uniforms: {\n    uDirLightPos: {\n      value: new _three.Vector3()\n    },\n    uDirLightColor: {\n      value: new _three.Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new _three.Color(0x050505)\n    },\n    uBaseColor: {\n      value: new _three.Color(0xffffff)\n    },\n    uLineColor1: {\n      value: new _three.Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', 'float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', 'vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', 'gl_FragColor = vec4( uBaseColor, 1.0 );', 'if ( length(lightWeighting) < 1.00 ) {', '\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.50 ) {', '\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '}'].join('\\n')\n};\nexports.ToonShaderDotted = ToonShaderDotted;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["fragmentShader","ToonShader1","uAmbientLightColor","uLineColor2","__esModule","uLineColor1","ToonShaderDotted","uLineColor3","vertexShader","value","uDirLightPos","uniforms","ToonShader2","uDirLightColor","uLineColor4","ToonShaderHatching","uBaseColor"]],"~:compiled-at",1630917515586,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$ToonShader.js\",\n\"lineCount\":9,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/shaders/ToonShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$ToonShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.ToonShaderHatching = exports.ToonShaderDotted = exports.ToonShader2 = exports.ToonShader1 = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\n/**\\n * Currently contains:\\n *\\n *\\ttoon1\\n *\\ttoon2\\n *\\thatching\\n *\\tdotted\\n */\\nvar ToonShader1 = {\\n  uniforms: {\\n    uDirLightPos: {\\n      value: new _three.Vector3()\\n    },\\n    uDirLightColor: {\\n      value: new _three.Color(0xeeeeee)\\n    },\\n    uAmbientLightColor: {\\n      value: new _three.Color(0x050505)\\n    },\\n    uBaseColor: {\\n      value: new _three.Color(0xffffff)\\n    }\\n  },\\n  vertexShader: ['varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', '\\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );', '\\tvNormal = normalize( normalMatrix * normal );', '\\tvec3 I = worldPosition.xyz - cameraPosition;', '\\tvRefract = refract( normalize( I ), worldNormal, 1.02 );', '\\tgl_Position = projectionMatrix * mvPosition;', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );', '\\tintensity += length(lightWeighting) * 0.2;', '\\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );', '\\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );', '\\tintensity = intensity * 0.2 + 0.3;', '\\tif ( intensity < 0.50 ) {', '\\t\\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );', '\\t} else {', '\\t\\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );', '}', '}'].join('\\\\n')\\n};\\nexports.ToonShader1 = ToonShader1;\\nvar ToonShader2 = {\\n  uniforms: {\\n    uDirLightPos: {\\n      value: new _three.Vector3()\\n    },\\n    uDirLightColor: {\\n      value: new _three.Color(0xeeeeee)\\n    },\\n    uAmbientLightColor: {\\n      value: new _three.Color(0x050505)\\n    },\\n    uBaseColor: {\\n      value: new _three.Color(0xeeeeee)\\n    },\\n    uLineColor1: {\\n      value: new _three.Color(0x808080)\\n    },\\n    uLineColor2: {\\n      value: new _three.Color(0x000000)\\n    },\\n    uLineColor3: {\\n      value: new _three.Color(0x000000)\\n    },\\n    uLineColor4: {\\n      value: new _three.Color(0x000000)\\n    }\\n  },\\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);', '\\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {', '\\t\\tgl_FragColor *= vec4( uLineColor1, 1.0 );', '\\t}', '\\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {', '\\t\\tgl_FragColor *= vec4( uLineColor2, 1.0 );', '\\t}', '}'].join('\\\\n')\\n};\\nexports.ToonShader2 = ToonShader2;\\nvar ToonShaderHatching = {\\n  uniforms: {\\n    uDirLightPos: {\\n      value: new _three.Vector3()\\n    },\\n    uDirLightColor: {\\n      value: new _three.Color(0xeeeeee)\\n    },\\n    uAmbientLightColor: {\\n      value: new _three.Color(0x050505)\\n    },\\n    uBaseColor: {\\n      value: new _three.Color(0xffffff)\\n    },\\n    uLineColor1: {\\n      value: new _three.Color(0x000000)\\n    },\\n    uLineColor2: {\\n      value: new _three.Color(0x000000)\\n    },\\n    uLineColor3: {\\n      value: new _three.Color(0x000000)\\n    },\\n    uLineColor4: {\\n      value: new _three.Color(0x000000)\\n    }\\n  },\\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', '\\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\\tif ( length(lightWeighting) < 1.00 ) {', '\\t\\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {', '\\t\\t\\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\\t\\t}', '\\t}', '\\tif ( length(lightWeighting) < 0.75 ) {', '\\t\\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {', '\\t\\t\\tgl_FragColor = vec4( uLineColor2, 1.0 );', '\\t\\t}', '\\t}', '\\tif ( length(lightWeighting) < 0.50 ) {', '\\t\\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\\t\\t\\tgl_FragColor = vec4( uLineColor3, 1.0 );', '\\t\\t}', '\\t}', '\\tif ( length(lightWeighting) < 0.3465 ) {', '\\t\\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\\t\\t\\tgl_FragColor = vec4( uLineColor4, 1.0 );', '\\t}', '\\t}', '}'].join('\\\\n')\\n};\\nexports.ToonShaderHatching = ToonShaderHatching;\\nvar ToonShaderDotted = {\\n  uniforms: {\\n    uDirLightPos: {\\n      value: new _three.Vector3()\\n    },\\n    uDirLightColor: {\\n      value: new _three.Color(0xeeeeee)\\n    },\\n    uAmbientLightColor: {\\n      value: new _three.Color(0x050505)\\n    },\\n    uBaseColor: {\\n      value: new _three.Color(0xffffff)\\n    },\\n    uLineColor1: {\\n      value: new _three.Color(0x000000)\\n    }\\n  },\\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', 'float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', 'vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', 'gl_FragColor = vec4( uBaseColor, 1.0 );', 'if ( length(lightWeighting) < 1.00 ) {', '\\t\\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {', '\\t\\t\\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\\t\\t}', '\\t}', '\\tif ( length(lightWeighting) < 0.50 ) {', '\\t\\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {', '\\t\\t\\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\\t\\t}', '\\t}', '}'].join('\\\\n')\\n};\\nexports.ToonShaderDotted = ToonShaderDotted;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"ToonShaderHatching\",\"ToonShaderDotted\",\"ToonShader2\",\"ToonShader1\",\"_three\",\"uniforms\",\"uDirLightPos\",\"Vector3\",\"uDirLightColor\",\"Color\",\"uAmbientLightColor\",\"uBaseColor\",\"vertexShader\",\"fragmentShader\",\"uLineColor1\",\"uLineColor2\",\"uLineColor3\",\"uLineColor4\"]\n}\n"]