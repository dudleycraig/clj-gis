["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/VignetteShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$VignetteShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.VignetteShader=void 0;exports.VignetteShader={uniforms:{tDiffuse:{value:null},offset:{value:1},darkness:{value:1}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform float offset;\\nuniform float darkness;\\nuniform sampler2D tDiffuse;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texel \\x3d texture2D( tDiffuse, vUv );\\n\\tvec2 uv \\x3d ( vUv - vec2( 0.5 ) ) * vec2( offset );\\n\\tgl_FragColor \\x3d vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$VignetteShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VignetteShader = void 0;\n\n/**\n * Vignette shader\n * based on PaintEffect postprocess from ro.me\n * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\n */\nvar VignetteShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    offset: {\n      value: 1.0\n    },\n    darkness: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float offset;', 'uniform float darkness;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', // Eskil's vignette\n  '\tvec4 texel = texture2D( tDiffuse, vUv );', '\tvec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );', '\tgl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );',\n  /*\n  // alternative version from glfx.js\n  // this one makes more \"dusty\" look (as opposed to \"burned\")\n  \"\tvec4 color = texture2D( tDiffuse, vUv );\",\n  \"\tfloat dist = distance( vUv, vec2( 0.5 ) );\",\n  \"\tcolor.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );\",\n  \"\tgl_FragColor = color;\",\n  */\n  '}'].join('\\n')\n};\nexports.VignetteShader = VignetteShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","offset","darkness","__esModule","VignetteShader","tDiffuse","vertexShader","value","uniforms"]],"~:compiled-at",1630917515591,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$VignetteShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,cAAR,CAAyB,IAAK,EAgC9BJ,QAAQI,CAAAA,cAAR,CAzBqBA,CACnBC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,OAAQ,CACNJ,MAAO,CADD,CAJA,CAORK,SAAU,CACRL,MAAO,CADC,CAPF,CADSC,CAYnBK,aAAiJ,qIAZ9HL,CAanBM,eAUA,wTAvBmBN,CAb+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/VignetteShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$VignetteShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.VignetteShader = void 0;\\n\\n/**\\n * Vignette shader\\n * based on PaintEffect postprocess from ro.me\\n * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\\n */\\nvar VignetteShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    offset: {\\n      value: 1.0\\n    },\\n    darkness: {\\n      value: 1.0\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform float offset;', 'uniform float darkness;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', // Eskil's vignette\\n  '\\tvec4 texel = texture2D( tDiffuse, vUv );', '\\tvec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );', '\\tgl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );',\\n  /*\\n  // alternative version from glfx.js\\n  // this one makes more \\\"dusty\\\" look (as opposed to \\\"burned\\\")\\n  \\\"\\tvec4 color = texture2D( tDiffuse, vUv );\\\",\\n  \\\"\\tfloat dist = distance( vUv, vec2( 0.5 ) );\\\",\\n  \\\"\\tcolor.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );\\\",\\n  \\\"\\tgl_FragColor = color;\\\",\\n  */\\n  '}'].join('\\\\n')\\n};\\nexports.VignetteShader = VignetteShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"VignetteShader\",\"uniforms\",\"tDiffuse\",\"offset\",\"darkness\",\"vertexShader\",\"fragmentShader\"]\n}\n"]