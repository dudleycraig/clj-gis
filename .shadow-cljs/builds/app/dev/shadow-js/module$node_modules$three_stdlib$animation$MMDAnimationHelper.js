["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/animation/MMDAnimationHelper.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$animation$MMDAnimationHelper=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.MMDAnimationHelper=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_CCDIKSolver=require(\"module$node_modules$three_stdlib$animation$CCDIKSolver\"),_MMDPhysics=require(\"module$node_modules$three_stdlib$animation$MMDPhysics\");global=function(){function MMDAnimationHelper(params){params=params||{};\nthis.meshes=[];this.camera=null;this.cameraTarget=new _three.Object3D;this.cameraTarget.name=\"target\";this.audioManager=this.audio=null;this.objects=new WeakMap;this.configuration={sync:void 0!==params.sync?params.sync:!0,afterglow:void 0!==params.afterglow?params.afterglow:0,resetPhysicsOnLoop:void 0!==params.resetPhysicsOnLoop?params.resetPhysicsOnLoop:!0};this.enabled={animation:!0,ik:!0,grant:!0,physics:!0,cameraAnimation:!0};this.onBeforePhysics=function(){};this.sharedPhysics=!1;this.masterPhysics=\nnull}function AudioManager(audio,params){params=params||{};this.audio=audio;this.currentTime=this.elapsedTime=0;this.delayTime=void 0!==params.delayTime?params.delayTime:0;this.audioDuration=this.audio.buffer.duration;this.duration=this.audioDuration+this.delayTime}function GrantSolver(mesh,grants){this.mesh=mesh;this.grants=grants||[]}MMDAnimationHelper.prototype={constructor:MMDAnimationHelper,add:function(object,params){params=params||{};if(object.isSkinnedMesh)this._addMesh(object,params);else if(object.isCamera)this._setupCamera(object,\nparams);else if(\"Audio\"===object.type)this._setupAudio(object,params);else throw Error(\"THREE.MMDAnimationHelper.add: accepts only THREE.SkinnedMesh or THREE.Camera or THREE.Audio instance.\");this.configuration.sync&&this._syncDuration();return this},remove:function(object){if(object.isSkinnedMesh)this._removeMesh(object);else if(object.isCamera)this._clearCamera(object);else if(\"Audio\"===object.type)this._clearAudio(object);else throw Error(\"THREE.MMDAnimationHelper.remove: accepts only THREE.SkinnedMesh or THREE.Camera or THREE.Audio instance.\");\nthis.configuration.sync&&this._syncDuration();return this},update:function(delta){null!==this.audioManager&&this.audioManager.control(delta);for(var i=0;i<this.meshes.length;i++)this._animateMesh(this.meshes[i],delta);this.sharedPhysics&&this._updateSharedPhysics(delta);null!==this.camera&&this._animateCamera(this.camera,delta);return this},pose:function(mesh,vpd,params){params=params||{};!1!==params.resetPose&&mesh.pose();var bones=mesh.skeleton.bones;vpd=vpd.bones;for(var boneNameDictionary={},\ni=0,il=bones.length;i<il;i++)boneNameDictionary[bones[i].name]=i;i=new _three.Vector3;il=new _three.Quaternion;for(var _i=0,_il=vpd.length;_i<_il;_i++){var boneParam=vpd[_i],boneIndex=boneNameDictionary[boneParam.name];void 0!==boneIndex&&(boneIndex=bones[boneIndex],boneIndex.position.add(i.fromArray(boneParam.translation)),boneIndex.quaternion.multiply(il.fromArray(boneParam.quaternion)))}mesh.updateMatrixWorld(!0);!1!==params.ik&&this._createCCDIKSolver(mesh).update(params.saveOriginalBonesBeforeIK);\n!1!==params.grant&&this.createGrantSolver(mesh).update();return this},enable:function(key,enabled){if(void 0===this.enabled[key])throw Error(\"THREE.MMDAnimationHelper.enable: unknown key \".concat(key));this.enabled[key]=enabled;if(\"physics\"===key){key=0;for(var il=this.meshes.length;key<il;key++)this._optimizeIK(this.meshes[key],enabled)}return this},createGrantSolver:function(mesh){return new GrantSolver(mesh,mesh.geometry.userData.MMD.grants)},_addMesh:function(mesh,params){if(0<=this.meshes.indexOf(mesh))throw Error(\"THREE.MMDAnimationHelper._addMesh: SkinnedMesh '\".concat(mesh.name,\n\"' has already been added.\"));this.meshes.push(mesh);this.objects.set(mesh,{looped:!1});this._setupMeshAnimation(mesh,params.animation);!1!==params.physics&&this._setupMeshPhysics(mesh,params);return this},_setupCamera:function(camera,params){if(this.camera===camera)throw Error(\"THREE.MMDAnimationHelper._setupCamera: Camera '\".concat(camera.name,\"' has already been set.\"));this.camera&&this.clearCamera(this.camera);this.camera=camera;camera.add(this.cameraTarget);this.objects.set(camera,{});void 0!==\nparams.animation&&this._setupCameraAnimation(camera,params.animation);return this},_setupAudio:function(audio,params){if(this.audio===audio)throw Error(\"THREE.MMDAnimationHelper._setupAudio: Audio '\".concat(audio.name,\"' has already been set.\"));this.audio&&this.clearAudio(this.audio);this.audio=audio;this.audioManager=new AudioManager(audio,params);this.objects.set(this.audioManager,{duration:this.audioManager.duration});return this},_removeMesh:function(mesh){for(var found=!1,writeIndex=0,i=0,il=\nthis.meshes.length;i<il;i++)this.meshes[i]===mesh?(this.objects[\"delete\"](mesh),found=!0):this.meshes[writeIndex++]=this.meshes[i];if(!found)throw Error(\"THREE.MMDAnimationHelper._removeMesh: SkinnedMesh '\".concat(mesh.name,\"' has not been added yet.\"));this.meshes.length=writeIndex;return this},_clearCamera:function(camera){if(camera!==this.camera)throw Error(\"THREE.MMDAnimationHelper._clearCamera: Camera '\".concat(camera.name,\"' has not been set yet.\"));this.camera.remove(this.cameraTarget);this.objects[\"delete\"](this.camera);\nthis.camera=null;return this},_clearAudio:function(audio){if(audio!==this.audio)throw Error(\"THREE.MMDAnimationHelper._clearAudio: Audio '\".concat(audio.name,\"' has not been set yet.\"));this.objects[\"delete\"](this.audioManager);this.audioManager=this.audio=null;return this},_setupMeshAnimation:function(mesh,animation){var objects=this.objects.get(mesh);if(void 0!==animation){animation=Array.isArray(animation)?animation:[animation];objects.mixer=new _three.AnimationMixer(mesh);for(var i=0,il=animation.length;i<\nil;i++)objects.mixer.clipAction(animation[i]).play();objects.mixer.addEventListener(\"loop\",function(event){event=event.action._clip.tracks;0<event.length&&\".bones\"!==event[0].name.slice(0,6)||(objects.looped=!0)})}objects.ikSolver=this._createCCDIKSolver(mesh);objects.grantSolver=this.createGrantSolver(mesh);return this},_setupCameraAnimation:function(camera,animation){animation=Array.isArray(animation)?animation:[animation];var objects=this.objects.get(camera);objects.mixer=new _three.AnimationMixer(camera);\ncamera=0;for(var il=animation.length;camera<il;camera++)objects.mixer.clipAction(animation[camera]).play()},_setupMeshPhysics:function(mesh,params){var objects=this.objects.get(mesh);if(void 0===params.world&&this.sharedPhysics){var masterPhysics=this._getMasterPhysics();null!==masterPhysics&&(world=masterPhysics.world)}objects.physics=this._createMMDPhysics(mesh,params);objects.mixer&&!1!==params.animationWarmup&&(this._animateMesh(mesh,0),objects.physics.reset());objects.physics.warmup(void 0!==\nparams.warmup?params.warmup:60);this._optimizeIK(mesh,!0)},_animateMesh:function(mesh,delta){var objects=this.objects.get(mesh),mixer=objects.mixer,ikSolver=objects.ikSolver,grantSolver=objects.grantSolver,physics=objects.physics,looped=objects.looped;mixer&&this.enabled.animation&&(this._restoreBones(mesh),mixer.update(delta),this._saveBones(mesh),ikSolver&&this.enabled.ik&&(mesh.updateMatrixWorld(!0),ikSolver.update()),grantSolver&&this.enabled.grant&&grantSolver.update());!0===looped&&this.enabled.physics&&\n(physics&&this.configuration.resetPhysicsOnLoop&&physics.reset(),objects.looped=!1);physics&&this.enabled.physics&&!this.sharedPhysics&&(this.onBeforePhysics(mesh),physics.update(delta))},_animateCamera:function(camera,delta){var mixer=this.objects.get(camera).mixer;mixer&&this.enabled.cameraAnimation&&(mixer.update(delta),camera.updateProjectionMatrix(),camera.up.set(0,1,0),camera.up.applyQuaternion(camera.quaternion),camera.lookAt(this.cameraTarget.position))},_optimizeIK:function(mesh,physicsEnabled){var iks=\nmesh.geometry.userData.MMD.iks;mesh=mesh.geometry.userData.MMD.bones;for(var i=0,il=iks.length;i<il;i++)for(var links=iks[i].links,j=0,jl=links.length;j<jl;j++){var link=links[j];link.enabled=!0===physicsEnabled?0<mesh[link.index].rigidBodyType?!1:!0:!0}},_createCCDIKSolver:function(mesh){if(void 0===_CCDIKSolver.CCDIKSolver)throw Error(\"THREE.MMDAnimationHelper: Import CCDIKSolver.\");return new _CCDIKSolver.CCDIKSolver(mesh,mesh.geometry.userData.MMD.iks)},_createMMDPhysics:function(mesh,params){if(void 0===\n_MMDPhysics.MMDPhysics)throw Error(\"THREE.MMDPhysics: Import MMDPhysics.\");return new _MMDPhysics.MMDPhysics(mesh,mesh.geometry.userData.MMD.rigidBodies,mesh.geometry.userData.MMD.constraints,params)},_syncDuration:function(){for(var max=0,objects=this.objects,meshes=this.meshes,camera=this.camera,audioManager=this.audioManager,i=0,il=meshes.length;i<il;i++){var mixer=this.objects.get(meshes[i]).mixer;if(void 0!==mixer)for(var j=0;j<mixer._actions.length;j++){var clip=mixer._actions[j]._clip;objects.has(clip)||\nobjects.set(clip,{duration:clip.duration});max=Math.max(max,objects.get(clip).duration)}}if(null!==camera&&(mixer=this.objects.get(camera).mixer,void 0!==mixer))for(meshes=0,i=mixer._actions.length;meshes<i;meshes++)clip=mixer._actions[meshes]._clip,objects.has(clip)||objects.set(clip,{duration:clip.duration}),max=Math.max(max,objects.get(clip).duration);null!==audioManager&&(max=Math.max(max,objects.get(audioManager).duration));max+=this.configuration.afterglow;objects=0;for(clip=this.meshes.length;objects<\nclip;objects++)if(mixer=this.objects.get(this.meshes[objects]).mixer,void 0!==mixer)for(meshes=0,i=mixer._actions.length;meshes<i;meshes++)mixer._actions[meshes]._clip.duration=max;if(null!==camera&&(mixer=this.objects.get(camera).mixer,void 0!==mixer))for(camera=0,objects=mixer._actions.length;camera<objects;camera++)mixer._actions[camera]._clip.duration=max;null!==audioManager&&(audioManager.duration=max)},_updatePropertyMixersBuffer:function(mesh){var mixer=this.objects.get(mesh).mixer;mesh=mixer._bindings;\nmixer=mixer._accuIndex;for(var i=0,il=mesh.length;i<il;i++){var propertyMixer=mesh[i];propertyMixer.binding.getValue(propertyMixer.buffer,(mixer+1)*propertyMixer.valueSize)}},_saveBones:function(mesh){var objects=this.objects.get(mesh);mesh=mesh.skeleton.bones;var backupBones=objects.backupBones;void 0===backupBones&&(backupBones=new Float32Array(7*mesh.length),objects.backupBones=backupBones);objects=0;for(var il=mesh.length;objects<il;objects++){var bone=mesh[objects];bone.position.toArray(backupBones,\n7*objects);bone.quaternion.toArray(backupBones,7*objects+3)}},_restoreBones:function(mesh){var backupBones=this.objects.get(mesh).backupBones;if(void 0!==backupBones){mesh=mesh.skeleton.bones;for(var i=0,il=mesh.length;i<il;i++){var bone=mesh[i];bone.position.fromArray(backupBones,7*i);bone.quaternion.fromArray(backupBones,7*i+3)}}},_getMasterPhysics:function(){if(null!==this.masterPhysics)return this.masterPhysics;for(var i=0,il=this.meshes.length;i<il;i++){var physics=this.meshes[i].physics;if(void 0!==\nphysics&&null!==physics)return this.masterPhysics=physics}return null},_updateSharedPhysics:function(delta){if(0!==this.meshes.length&&this.enabled.physics&&this.sharedPhysics){var physics=this._getMasterPhysics();if(null!==physics){for(var i=0,il=this.meshes.length;i<il;i++){var p=this.meshes[i].physics;null!==p&&void 0!==p&&p.updateRigidBodies()}physics.stepSimulation(delta);delta=0;for(physics=this.meshes.length;delta<physics;delta++)p=this.meshes[delta].physics,null!==p&&void 0!==p&&p.updateBones()}}}};\nAudioManager.prototype={constructor:AudioManager,control:function(delta){this.elapsed+=delta;this.currentTime+=delta;this._shouldStopAudio()&&this.audio.stop();this._shouldStartAudio()&&this.audio.play();return this},_shouldStartAudio:function(){if(this.audio.isPlaying)return!1;for(;this.currentTime>=this.duration;)this.currentTime-=this.duration;return this.currentTime<this.delayTime||this.currentTime-this.delayTime>this.audioDuration?!1:!0},_shouldStopAudio:function(){return this.audio.isPlaying&&\nthis.currentTime>=this.duration}};GrantSolver.prototype={constructor:GrantSolver,update:function(){var quaternion=new _three.Quaternion;return function(){for(var bones=this.mesh.skeleton.bones,grants=this.grants,i=0,il=grants.length;i<il;i++){var grant=grants[i],bone=bones[grant.index],parentBone=bones[grant.parentIndex];!grant.isLocal&&grant.affectRotation&&(quaternion.set(0,0,0,1),quaternion.slerp(parentBone.quaternion,grant.ratio),bone.quaternion.multiply(quaternion))}return this}}()};return MMDAnimationHelper}();\nexports.MMDAnimationHelper=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$animation$MMDAnimationHelper\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MMDAnimationHelper = void 0;\n\nvar _three = require(\"three\");\n\nvar _CCDIKSolver = require(\"./CCDIKSolver.js\");\n\nvar _MMDPhysics = require(\"./MMDPhysics.js\");\n\n/**\n * MMDAnimationHelper handles animation of MMD assets loaded by MMDLoader\n * with MMD special features as IK, Grant, and Physics.\n *\n * Dependencies\n *  - ammo.js https://github.com/kripken/ammo.js\n *  - MMDPhysics\n *  - CCDIKSolver\n *\n * TODO\n *  - more precise grant skinning support.\n */\nvar MMDAnimationHelper = function () {\n  /**\n   * @param {Object} params - (optional)\n   * @param {boolean} params.sync - Whether animation durations of added objects are synched. Default is true.\n   * @param {Number} params.afterglow - Default is 0.0.\n   * @param {boolean} params.resetPhysicsOnLoop - Default is true.\n   */\n  function MMDAnimationHelper(params) {\n    params = params || {};\n    this.meshes = [];\n    this.camera = null;\n    this.cameraTarget = new _three.Object3D();\n    this.cameraTarget.name = 'target';\n    this.audio = null;\n    this.audioManager = null;\n    this.objects = new WeakMap();\n    this.configuration = {\n      sync: params.sync !== undefined ? params.sync : true,\n      afterglow: params.afterglow !== undefined ? params.afterglow : 0.0,\n      resetPhysicsOnLoop: params.resetPhysicsOnLoop !== undefined ? params.resetPhysicsOnLoop : true\n    };\n    this.enabled = {\n      animation: true,\n      ik: true,\n      grant: true,\n      physics: true,\n      cameraAnimation: true\n    };\n\n    this.onBeforePhysics = function ()\n    /* mesh */\n    {}; // experimental\n\n\n    this.sharedPhysics = false;\n    this.masterPhysics = null;\n  }\n\n  MMDAnimationHelper.prototype = {\n    constructor: MMDAnimationHelper,\n\n    /**\n     * Adds an Three.js Object to helper and setups animation.\n     * The anmation durations of added objects are synched\n     * if this.configuration.sync is true.\n     *\n     * @param {THREE.SkinnedMesh|THREE.Camera|THREE.Audio} object\n     * @param {Object} params - (optional)\n     * @param {THREE.AnimationClip|Array<THREE.AnimationClip>} params.animation - Only for THREE.SkinnedMesh and THREE.Camera. Default is undefined.\n     * @param {boolean} params.physics - Only for THREE.SkinnedMesh. Default is true.\n     * @param {Integer} params.warmup - Only for THREE.SkinnedMesh and physics is true. Default is 60.\n     * @param {Number} params.unitStep - Only for THREE.SkinnedMesh and physics is true. Default is 1 / 65.\n     * @param {Integer} params.maxStepNum - Only for THREE.SkinnedMesh and physics is true. Default is 3.\n     * @param {Vector3} params.gravity - Only for THREE.SkinnedMesh and physics is true. Default ( 0, - 9.8 * 10, 0 ).\n     * @param {Number} params.delayTime - Only for THREE.Audio. Default is 0.0.\n     * @return {MMDAnimationHelper}\n     */\n    add: function add(object, params) {\n      params = params || {};\n\n      if (object.isSkinnedMesh) {\n        this._addMesh(object, params);\n      } else if (object.isCamera) {\n        this._setupCamera(object, params);\n      } else if (object.type === 'Audio') {\n        this._setupAudio(object, params);\n      } else {\n        throw new Error('THREE.MMDAnimationHelper.add: ' + 'accepts only ' + 'THREE.SkinnedMesh or ' + 'THREE.Camera or ' + 'THREE.Audio instance.');\n      }\n\n      if (this.configuration.sync) this._syncDuration();\n      return this;\n    },\n\n    /**\n     * Removes an Three.js Object from helper.\n     *\n     * @param {THREE.SkinnedMesh|THREE.Camera|THREE.Audio} object\n     * @return {MMDAnimationHelper}\n     */\n    remove: function remove(object) {\n      if (object.isSkinnedMesh) {\n        this._removeMesh(object);\n      } else if (object.isCamera) {\n        this._clearCamera(object);\n      } else if (object.type === 'Audio') {\n        this._clearAudio(object);\n      } else {\n        throw new Error('THREE.MMDAnimationHelper.remove: ' + 'accepts only ' + 'THREE.SkinnedMesh or ' + 'THREE.Camera or ' + 'THREE.Audio instance.');\n      }\n\n      if (this.configuration.sync) this._syncDuration();\n      return this;\n    },\n\n    /**\n     * Updates the animation.\n     *\n     * @param {Number} delta\n     * @return {MMDAnimationHelper}\n     */\n    update: function update(delta) {\n      if (this.audioManager !== null) this.audioManager.control(delta);\n\n      for (var i = 0; i < this.meshes.length; i++) {\n        this._animateMesh(this.meshes[i], delta);\n      }\n\n      if (this.sharedPhysics) this._updateSharedPhysics(delta);\n      if (this.camera !== null) this._animateCamera(this.camera, delta);\n      return this;\n    },\n\n    /**\n     * Changes the pose of SkinnedMesh as VPD specifies.\n     *\n     * @param {THREE.SkinnedMesh} mesh\n     * @param {Object} vpd - VPD content parsed MMDParser\n     * @param {Object} params - (optional)\n     * @param {boolean} params.resetPose - Default is true.\n     * @param {boolean} params.ik - Default is true.\n     * @param {boolean} params.grant - Default is true.\n     * @return {MMDAnimationHelper}\n     */\n    pose: function pose(mesh, vpd, params) {\n      params = params || {};\n      if (params.resetPose !== false) mesh.pose();\n      var bones = mesh.skeleton.bones;\n      var boneParams = vpd.bones;\n      var boneNameDictionary = {};\n\n      for (var i = 0, il = bones.length; i < il; i++) {\n        boneNameDictionary[bones[i].name] = i;\n      }\n\n      var vector = new _three.Vector3();\n      var quaternion = new _three.Quaternion();\n\n      for (var _i = 0, _il = boneParams.length; _i < _il; _i++) {\n        var boneParam = boneParams[_i];\n        var boneIndex = boneNameDictionary[boneParam.name];\n        if (boneIndex === undefined) continue;\n        var bone = bones[boneIndex];\n        bone.position.add(vector.fromArray(boneParam.translation));\n        bone.quaternion.multiply(quaternion.fromArray(boneParam.quaternion));\n      }\n\n      mesh.updateMatrixWorld(true);\n\n      if (params.ik !== false) {\n        this._createCCDIKSolver(mesh).update(params.saveOriginalBonesBeforeIK); // this param is experimental\n\n      }\n\n      if (params.grant !== false) {\n        this.createGrantSolver(mesh).update();\n      }\n\n      return this;\n    },\n\n    /**\n     * Enabes/Disables an animation feature.\n     *\n     * @param {string} key\n     * @param {boolean} enabled\n     * @return {MMDAnimationHelper}\n     */\n    enable: function enable(key, enabled) {\n      if (this.enabled[key] === undefined) {\n        throw new Error(\"THREE.MMDAnimationHelper.enable: unknown key \".concat(key));\n      }\n\n      this.enabled[key] = enabled;\n\n      if (key === 'physics') {\n        for (var i = 0, il = this.meshes.length; i < il; i++) {\n          this._optimizeIK(this.meshes[i], enabled);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Creates an GrantSolver instance.\n     *\n     * @param {THREE.SkinnedMesh} mesh\n     * @return {GrantSolver}\n     */\n    createGrantSolver: function createGrantSolver(mesh) {\n      return new GrantSolver(mesh, mesh.geometry.userData.MMD.grants);\n    },\n    // private methods\n    _addMesh: function _addMesh(mesh, params) {\n      if (this.meshes.indexOf(mesh) >= 0) {\n        throw new Error(\"THREE.MMDAnimationHelper._addMesh: SkinnedMesh '\".concat(mesh.name, \"' has already been added.\"));\n      }\n\n      this.meshes.push(mesh);\n      this.objects.set(mesh, {\n        looped: false\n      });\n\n      this._setupMeshAnimation(mesh, params.animation);\n\n      if (params.physics !== false) {\n        this._setupMeshPhysics(mesh, params);\n      }\n\n      return this;\n    },\n    _setupCamera: function _setupCamera(camera, params) {\n      if (this.camera === camera) {\n        throw new Error(\"THREE.MMDAnimationHelper._setupCamera: Camera '\".concat(camera.name, \"' has already been set.\"));\n      }\n\n      if (this.camera) this.clearCamera(this.camera);\n      this.camera = camera;\n      camera.add(this.cameraTarget);\n      this.objects.set(camera, {});\n\n      if (params.animation !== undefined) {\n        this._setupCameraAnimation(camera, params.animation);\n      }\n\n      return this;\n    },\n    _setupAudio: function _setupAudio(audio, params) {\n      if (this.audio === audio) {\n        throw new Error(\"THREE.MMDAnimationHelper._setupAudio: Audio '\".concat(audio.name, \"' has already been set.\"));\n      }\n\n      if (this.audio) this.clearAudio(this.audio);\n      this.audio = audio;\n      this.audioManager = new AudioManager(audio, params);\n      this.objects.set(this.audioManager, {\n        duration: this.audioManager.duration\n      });\n      return this;\n    },\n    _removeMesh: function _removeMesh(mesh) {\n      var found = false;\n      var writeIndex = 0;\n\n      for (var i = 0, il = this.meshes.length; i < il; i++) {\n        if (this.meshes[i] === mesh) {\n          this.objects[\"delete\"](mesh);\n          found = true;\n          continue;\n        }\n\n        this.meshes[writeIndex++] = this.meshes[i];\n      }\n\n      if (!found) {\n        throw new Error(\"THREE.MMDAnimationHelper._removeMesh: SkinnedMesh '\".concat(mesh.name, \"' has not been added yet.\"));\n      }\n\n      this.meshes.length = writeIndex;\n      return this;\n    },\n    _clearCamera: function _clearCamera(camera) {\n      if (camera !== this.camera) {\n        throw new Error(\"THREE.MMDAnimationHelper._clearCamera: Camera '\".concat(camera.name, \"' has not been set yet.\"));\n      }\n\n      this.camera.remove(this.cameraTarget);\n      this.objects[\"delete\"](this.camera);\n      this.camera = null;\n      return this;\n    },\n    _clearAudio: function _clearAudio(audio) {\n      if (audio !== this.audio) {\n        throw new Error(\"THREE.MMDAnimationHelper._clearAudio: Audio '\".concat(audio.name, \"' has not been set yet.\"));\n      }\n\n      this.objects[\"delete\"](this.audioManager);\n      this.audio = null;\n      this.audioManager = null;\n      return this;\n    },\n    _setupMeshAnimation: function _setupMeshAnimation(mesh, animation) {\n      var objects = this.objects.get(mesh);\n\n      if (animation !== undefined) {\n        var animations = Array.isArray(animation) ? animation : [animation];\n        objects.mixer = new _three.AnimationMixer(mesh);\n\n        for (var i = 0, il = animations.length; i < il; i++) {\n          objects.mixer.clipAction(animations[i]).play();\n        } // TODO: find a workaround not to access ._clip looking like a private property\n\n\n        objects.mixer.addEventListener('loop', function (event) {\n          var tracks = event.action._clip.tracks;\n          if (tracks.length > 0 && tracks[0].name.slice(0, 6) !== '.bones') return;\n          objects.looped = true;\n        });\n      }\n\n      objects.ikSolver = this._createCCDIKSolver(mesh);\n      objects.grantSolver = this.createGrantSolver(mesh);\n      return this;\n    },\n    _setupCameraAnimation: function _setupCameraAnimation(camera, animation) {\n      var animations = Array.isArray(animation) ? animation : [animation];\n      var objects = this.objects.get(camera);\n      objects.mixer = new _three.AnimationMixer(camera);\n\n      for (var i = 0, il = animations.length; i < il; i++) {\n        objects.mixer.clipAction(animations[i]).play();\n      }\n    },\n    _setupMeshPhysics: function _setupMeshPhysics(mesh, params) {\n      var objects = this.objects.get(mesh); // shared physics is experimental\n\n      if (params.world === undefined && this.sharedPhysics) {\n        var masterPhysics = this._getMasterPhysics();\n\n        if (masterPhysics !== null) world = masterPhysics.world; // eslint-disable-line no-undef\n      }\n\n      objects.physics = this._createMMDPhysics(mesh, params);\n\n      if (objects.mixer && params.animationWarmup !== false) {\n        this._animateMesh(mesh, 0);\n\n        objects.physics.reset();\n      }\n\n      objects.physics.warmup(params.warmup !== undefined ? params.warmup : 60);\n\n      this._optimizeIK(mesh, true);\n    },\n    _animateMesh: function _animateMesh(mesh, delta) {\n      var objects = this.objects.get(mesh);\n      var mixer = objects.mixer;\n      var ikSolver = objects.ikSolver;\n      var grantSolver = objects.grantSolver;\n      var physics = objects.physics;\n      var looped = objects.looped; // alternate solution to save/restore bones but less performant?\n      //mesh.pose();\n      //this._updatePropertyMixersBuffer( mesh );\n\n      if (mixer && this.enabled.animation) {\n        this._restoreBones(mesh);\n\n        mixer.update(delta);\n\n        this._saveBones(mesh);\n\n        if (ikSolver && this.enabled.ik) {\n          mesh.updateMatrixWorld(true);\n          ikSolver.update();\n        }\n\n        if (grantSolver && this.enabled.grant) {\n          grantSolver.update();\n        }\n      }\n\n      if (looped === true && this.enabled.physics) {\n        if (physics && this.configuration.resetPhysicsOnLoop) physics.reset();\n        objects.looped = false;\n      }\n\n      if (physics && this.enabled.physics && !this.sharedPhysics) {\n        this.onBeforePhysics(mesh);\n        physics.update(delta);\n      }\n    },\n    _animateCamera: function _animateCamera(camera, delta) {\n      var mixer = this.objects.get(camera).mixer;\n\n      if (mixer && this.enabled.cameraAnimation) {\n        mixer.update(delta);\n        camera.updateProjectionMatrix();\n        camera.up.set(0, 1, 0);\n        camera.up.applyQuaternion(camera.quaternion);\n        camera.lookAt(this.cameraTarget.position);\n      }\n    },\n    _optimizeIK: function _optimizeIK(mesh, physicsEnabled) {\n      var iks = mesh.geometry.userData.MMD.iks;\n      var bones = mesh.geometry.userData.MMD.bones;\n\n      for (var i = 0, il = iks.length; i < il; i++) {\n        var ik = iks[i];\n        var links = ik.links;\n\n        for (var j = 0, jl = links.length; j < jl; j++) {\n          var link = links[j];\n\n          if (physicsEnabled === true) {\n            // disable IK of the bone the corresponding rigidBody type of which is 1 or 2\n            // because its rotation will be overriden by physics\n            link.enabled = bones[link.index].rigidBodyType > 0 ? false : true;\n          } else {\n            link.enabled = true;\n          }\n        }\n      }\n    },\n    _createCCDIKSolver: function _createCCDIKSolver(mesh) {\n      if (_CCDIKSolver.CCDIKSolver === undefined) {\n        throw new Error('THREE.MMDAnimationHelper: Import CCDIKSolver.');\n      }\n\n      return new _CCDIKSolver.CCDIKSolver(mesh, mesh.geometry.userData.MMD.iks);\n    },\n    _createMMDPhysics: function _createMMDPhysics(mesh, params) {\n      if (_MMDPhysics.MMDPhysics === undefined) {\n        throw new Error('THREE.MMDPhysics: Import MMDPhysics.');\n      }\n\n      return new _MMDPhysics.MMDPhysics(mesh, mesh.geometry.userData.MMD.rigidBodies, mesh.geometry.userData.MMD.constraints, params);\n    },\n\n    /*\n     * Detects the longest duration and then sets it to them to sync.\n     * TODO: Not to access private properties ( ._actions and ._clip )\n     */\n    _syncDuration: function _syncDuration() {\n      var max = 0.0;\n      var objects = this.objects;\n      var meshes = this.meshes;\n      var camera = this.camera;\n      var audioManager = this.audioManager; // get the longest duration\n\n      for (var i = 0, il = meshes.length; i < il; i++) {\n        var mixer = this.objects.get(meshes[i]).mixer;\n        if (mixer === undefined) continue;\n\n        for (var j = 0; j < mixer._actions.length; j++) {\n          var clip = mixer._actions[j]._clip;\n\n          if (!objects.has(clip)) {\n            objects.set(clip, {\n              duration: clip.duration\n            });\n          }\n\n          max = Math.max(max, objects.get(clip).duration);\n        }\n      }\n\n      if (camera !== null) {\n        var mixer = this.objects.get(camera).mixer;\n\n        if (mixer !== undefined) {\n          for (var _i2 = 0, _il2 = mixer._actions.length; _i2 < _il2; _i2++) {\n            var clip = mixer._actions[_i2]._clip;\n\n            if (!objects.has(clip)) {\n              objects.set(clip, {\n                duration: clip.duration\n              });\n            }\n\n            max = Math.max(max, objects.get(clip).duration);\n          }\n        }\n      }\n\n      if (audioManager !== null) {\n        max = Math.max(max, objects.get(audioManager).duration);\n      }\n\n      max += this.configuration.afterglow; // update the duration\n\n      for (var _i3 = 0, _il3 = this.meshes.length; _i3 < _il3; _i3++) {\n        var mixer = this.objects.get(this.meshes[_i3]).mixer;\n        if (mixer === undefined) continue;\n\n        for (var _j = 0, jl = mixer._actions.length; _j < jl; _j++) {\n          mixer._actions[_j]._clip.duration = max;\n        }\n      }\n\n      if (camera !== null) {\n        var mixer = this.objects.get(camera).mixer;\n\n        if (mixer !== undefined) {\n          for (var _i4 = 0, _il4 = mixer._actions.length; _i4 < _il4; _i4++) {\n            mixer._actions[_i4]._clip.duration = max;\n          }\n        }\n      }\n\n      if (audioManager !== null) {\n        audioManager.duration = max;\n      }\n    },\n    // workaround\n    _updatePropertyMixersBuffer: function _updatePropertyMixersBuffer(mesh) {\n      var mixer = this.objects.get(mesh).mixer;\n      var propertyMixers = mixer._bindings;\n      var accuIndex = mixer._accuIndex;\n\n      for (var i = 0, il = propertyMixers.length; i < il; i++) {\n        var propertyMixer = propertyMixers[i];\n        var buffer = propertyMixer.buffer;\n        var stride = propertyMixer.valueSize;\n        var offset = (accuIndex + 1) * stride;\n        propertyMixer.binding.getValue(buffer, offset);\n      }\n    },\n\n    /*\n     * Avoiding these two issues by restore/save bones before/after mixer animation.\n     *\n     * 1. PropertyMixer used by AnimationMixer holds cache value in .buffer.\n     *    Calculating IK, Grant, and Physics after mixer animation can break\n     *    the cache coherency.\n     *\n     * 2. Applying Grant two or more times without reset the posing breaks model.\n     */\n    _saveBones: function _saveBones(mesh) {\n      var objects = this.objects.get(mesh);\n      var bones = mesh.skeleton.bones;\n      var backupBones = objects.backupBones;\n\n      if (backupBones === undefined) {\n        backupBones = new Float32Array(bones.length * 7);\n        objects.backupBones = backupBones;\n      }\n\n      for (var i = 0, il = bones.length; i < il; i++) {\n        var bone = bones[i];\n        bone.position.toArray(backupBones, i * 7);\n        bone.quaternion.toArray(backupBones, i * 7 + 3);\n      }\n    },\n    _restoreBones: function _restoreBones(mesh) {\n      var objects = this.objects.get(mesh);\n      var backupBones = objects.backupBones;\n      if (backupBones === undefined) return;\n      var bones = mesh.skeleton.bones;\n\n      for (var i = 0, il = bones.length; i < il; i++) {\n        var bone = bones[i];\n        bone.position.fromArray(backupBones, i * 7);\n        bone.quaternion.fromArray(backupBones, i * 7 + 3);\n      }\n    },\n    // experimental\n    _getMasterPhysics: function _getMasterPhysics() {\n      if (this.masterPhysics !== null) return this.masterPhysics;\n\n      for (var i = 0, il = this.meshes.length; i < il; i++) {\n        var physics = this.meshes[i].physics;\n\n        if (physics !== undefined && physics !== null) {\n          this.masterPhysics = physics;\n          return this.masterPhysics;\n        }\n      }\n\n      return null;\n    },\n    _updateSharedPhysics: function _updateSharedPhysics(delta) {\n      if (this.meshes.length === 0 || !this.enabled.physics || !this.sharedPhysics) return;\n\n      var physics = this._getMasterPhysics();\n\n      if (physics === null) return;\n\n      for (var i = 0, il = this.meshes.length; i < il; i++) {\n        var p = this.meshes[i].physics;\n\n        if (p !== null && p !== undefined) {\n          p.updateRigidBodies();\n        }\n      }\n\n      physics.stepSimulation(delta);\n\n      for (var _i5 = 0, _il5 = this.meshes.length; _i5 < _il5; _i5++) {\n        var p = this.meshes[_i5].physics;\n\n        if (p !== null && p !== undefined) {\n          p.updateBones();\n        }\n      }\n    }\n  }; //\n\n  /**\n   * @param {THREE.Audio} audio\n   * @param {Object} params - (optional)\n   * @param {Nuumber} params.delayTime\n   */\n\n  function AudioManager(audio, params) {\n    params = params || {};\n    this.audio = audio;\n    this.elapsedTime = 0.0;\n    this.currentTime = 0.0;\n    this.delayTime = params.delayTime !== undefined ? params.delayTime : 0.0;\n    this.audioDuration = this.audio.buffer.duration;\n    this.duration = this.audioDuration + this.delayTime;\n  }\n\n  AudioManager.prototype = {\n    constructor: AudioManager,\n\n    /**\n     * @param {Number} delta\n     * @return {AudioManager}\n     */\n    control: function control(delta) {\n      this.elapsed += delta;\n      this.currentTime += delta;\n      if (this._shouldStopAudio()) this.audio.stop();\n      if (this._shouldStartAudio()) this.audio.play();\n      return this;\n    },\n    // private methods\n    _shouldStartAudio: function _shouldStartAudio() {\n      if (this.audio.isPlaying) return false;\n\n      while (this.currentTime >= this.duration) {\n        this.currentTime -= this.duration;\n      }\n\n      if (this.currentTime < this.delayTime) return false; // 'duration' can be bigger than 'audioDuration + delayTime' because of sync configuration\n\n      if (this.currentTime - this.delayTime > this.audioDuration) return false;\n      return true;\n    },\n    _shouldStopAudio: function _shouldStopAudio() {\n      return this.audio.isPlaying && this.currentTime >= this.duration;\n    }\n  };\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} grants\n   */\n\n  function GrantSolver(mesh, grants) {\n    this.mesh = mesh;\n    this.grants = grants || [];\n  }\n\n  GrantSolver.prototype = {\n    constructor: GrantSolver,\n\n    /**\n     * @return {GrantSolver}\n     */\n    update: function () {\n      var quaternion = new _three.Quaternion();\n      return function () {\n        var bones = this.mesh.skeleton.bones;\n        var grants = this.grants;\n\n        for (var i = 0, il = grants.length; i < il; i++) {\n          var grant = grants[i];\n          var bone = bones[grant.index];\n          var parentBone = bones[grant.parentIndex];\n\n          if (grant.isLocal) {\n            // TODO: implement\n            if (grant.affectPosition) ; // TODO: implement\n\n            if (grant.affectRotation) ;\n          } else {\n            // TODO: implement\n            if (grant.affectPosition) ;\n\n            if (grant.affectRotation) {\n              quaternion.set(0, 0, 0, 1);\n              quaternion.slerp(parentBone.quaternion, grant.ratio);\n              bone.quaternion.multiply(quaternion);\n            }\n          }\n        }\n\n        return this;\n      };\n    }()\n  };\n  return MMDAnimationHelper;\n}();\n\nexports.MMDAnimationHelper = MMDAnimationHelper;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_stdlib$animation$CCDIKSolver","~$shadow.js","~$module$node_modules$three_stdlib$animation$MMDPhysics"]],"~:properties",["^5",["_shouldStartAudio","ikSolver","audioDuration","_updateSharedPhysics","_getMasterPhysics","_setupCamera","_updatePropertyMixersBuffer","prototype","elapsed","_saveBones","currentTime","_optimizeIK","delayTime","_setupCameraAnimation","grantSolver","_createCCDIKSolver","__esModule","_clearCamera","MMDAnimationHelper","grant","physics","enable","enabled","configuration","camera","audioManager","objects","_clearAudio","update","onBeforePhysics","backupBones","_syncDuration","cameraAnimation","elapsedTime","name","sharedPhysics","animation","value","_animateCamera","sync","_createMMDPhysics","_setupMeshAnimation","pose","remove","_removeMesh","control","length","grants","resetPhysicsOnLoop","cameraTarget","ik","afterglow","duration","mesh","audio","_setupAudio","looped","_shouldStopAudio","add","_addMesh","meshes","createGrantSolver","masterPhysics","_animateMesh","_setupMeshPhysics","constructor","_restoreBones","mixer"]],"~:compiled-at",1630917515360,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$animation$MMDAnimationHelper.js\",\n\"lineCount\":25,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/animation/MMDAnimationHelper.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$animation$MMDAnimationHelper\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.MMDAnimationHelper = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _CCDIKSolver = require(\\\"./CCDIKSolver.js\\\");\\n\\nvar _MMDPhysics = require(\\\"./MMDPhysics.js\\\");\\n\\n/**\\n * MMDAnimationHelper handles animation of MMD assets loaded by MMDLoader\\n * with MMD special features as IK, Grant, and Physics.\\n *\\n * Dependencies\\n *  - ammo.js https://github.com/kripken/ammo.js\\n *  - MMDPhysics\\n *  - CCDIKSolver\\n *\\n * TODO\\n *  - more precise grant skinning support.\\n */\\nvar MMDAnimationHelper = function () {\\n  /**\\n   * @param {Object} params - (optional)\\n   * @param {boolean} params.sync - Whether animation durations of added objects are synched. Default is true.\\n   * @param {Number} params.afterglow - Default is 0.0.\\n   * @param {boolean} params.resetPhysicsOnLoop - Default is true.\\n   */\\n  function MMDAnimationHelper(params) {\\n    params = params || {};\\n    this.meshes = [];\\n    this.camera = null;\\n    this.cameraTarget = new _three.Object3D();\\n    this.cameraTarget.name = 'target';\\n    this.audio = null;\\n    this.audioManager = null;\\n    this.objects = new WeakMap();\\n    this.configuration = {\\n      sync: params.sync !== undefined ? params.sync : true,\\n      afterglow: params.afterglow !== undefined ? params.afterglow : 0.0,\\n      resetPhysicsOnLoop: params.resetPhysicsOnLoop !== undefined ? params.resetPhysicsOnLoop : true\\n    };\\n    this.enabled = {\\n      animation: true,\\n      ik: true,\\n      grant: true,\\n      physics: true,\\n      cameraAnimation: true\\n    };\\n\\n    this.onBeforePhysics = function ()\\n    /* mesh */\\n    {}; // experimental\\n\\n\\n    this.sharedPhysics = false;\\n    this.masterPhysics = null;\\n  }\\n\\n  MMDAnimationHelper.prototype = {\\n    constructor: MMDAnimationHelper,\\n\\n    /**\\n     * Adds an Three.js Object to helper and setups animation.\\n     * The anmation durations of added objects are synched\\n     * if this.configuration.sync is true.\\n     *\\n     * @param {THREE.SkinnedMesh|THREE.Camera|THREE.Audio} object\\n     * @param {Object} params - (optional)\\n     * @param {THREE.AnimationClip|Array<THREE.AnimationClip>} params.animation - Only for THREE.SkinnedMesh and THREE.Camera. Default is undefined.\\n     * @param {boolean} params.physics - Only for THREE.SkinnedMesh. Default is true.\\n     * @param {Integer} params.warmup - Only for THREE.SkinnedMesh and physics is true. Default is 60.\\n     * @param {Number} params.unitStep - Only for THREE.SkinnedMesh and physics is true. Default is 1 / 65.\\n     * @param {Integer} params.maxStepNum - Only for THREE.SkinnedMesh and physics is true. Default is 3.\\n     * @param {Vector3} params.gravity - Only for THREE.SkinnedMesh and physics is true. Default ( 0, - 9.8 * 10, 0 ).\\n     * @param {Number} params.delayTime - Only for THREE.Audio. Default is 0.0.\\n     * @return {MMDAnimationHelper}\\n     */\\n    add: function add(object, params) {\\n      params = params || {};\\n\\n      if (object.isSkinnedMesh) {\\n        this._addMesh(object, params);\\n      } else if (object.isCamera) {\\n        this._setupCamera(object, params);\\n      } else if (object.type === 'Audio') {\\n        this._setupAudio(object, params);\\n      } else {\\n        throw new Error('THREE.MMDAnimationHelper.add: ' + 'accepts only ' + 'THREE.SkinnedMesh or ' + 'THREE.Camera or ' + 'THREE.Audio instance.');\\n      }\\n\\n      if (this.configuration.sync) this._syncDuration();\\n      return this;\\n    },\\n\\n    /**\\n     * Removes an Three.js Object from helper.\\n     *\\n     * @param {THREE.SkinnedMesh|THREE.Camera|THREE.Audio} object\\n     * @return {MMDAnimationHelper}\\n     */\\n    remove: function remove(object) {\\n      if (object.isSkinnedMesh) {\\n        this._removeMesh(object);\\n      } else if (object.isCamera) {\\n        this._clearCamera(object);\\n      } else if (object.type === 'Audio') {\\n        this._clearAudio(object);\\n      } else {\\n        throw new Error('THREE.MMDAnimationHelper.remove: ' + 'accepts only ' + 'THREE.SkinnedMesh or ' + 'THREE.Camera or ' + 'THREE.Audio instance.');\\n      }\\n\\n      if (this.configuration.sync) this._syncDuration();\\n      return this;\\n    },\\n\\n    /**\\n     * Updates the animation.\\n     *\\n     * @param {Number} delta\\n     * @return {MMDAnimationHelper}\\n     */\\n    update: function update(delta) {\\n      if (this.audioManager !== null) this.audioManager.control(delta);\\n\\n      for (var i = 0; i < this.meshes.length; i++) {\\n        this._animateMesh(this.meshes[i], delta);\\n      }\\n\\n      if (this.sharedPhysics) this._updateSharedPhysics(delta);\\n      if (this.camera !== null) this._animateCamera(this.camera, delta);\\n      return this;\\n    },\\n\\n    /**\\n     * Changes the pose of SkinnedMesh as VPD specifies.\\n     *\\n     * @param {THREE.SkinnedMesh} mesh\\n     * @param {Object} vpd - VPD content parsed MMDParser\\n     * @param {Object} params - (optional)\\n     * @param {boolean} params.resetPose - Default is true.\\n     * @param {boolean} params.ik - Default is true.\\n     * @param {boolean} params.grant - Default is true.\\n     * @return {MMDAnimationHelper}\\n     */\\n    pose: function pose(mesh, vpd, params) {\\n      params = params || {};\\n      if (params.resetPose !== false) mesh.pose();\\n      var bones = mesh.skeleton.bones;\\n      var boneParams = vpd.bones;\\n      var boneNameDictionary = {};\\n\\n      for (var i = 0, il = bones.length; i < il; i++) {\\n        boneNameDictionary[bones[i].name] = i;\\n      }\\n\\n      var vector = new _three.Vector3();\\n      var quaternion = new _three.Quaternion();\\n\\n      for (var _i = 0, _il = boneParams.length; _i < _il; _i++) {\\n        var boneParam = boneParams[_i];\\n        var boneIndex = boneNameDictionary[boneParam.name];\\n        if (boneIndex === undefined) continue;\\n        var bone = bones[boneIndex];\\n        bone.position.add(vector.fromArray(boneParam.translation));\\n        bone.quaternion.multiply(quaternion.fromArray(boneParam.quaternion));\\n      }\\n\\n      mesh.updateMatrixWorld(true);\\n\\n      if (params.ik !== false) {\\n        this._createCCDIKSolver(mesh).update(params.saveOriginalBonesBeforeIK); // this param is experimental\\n\\n      }\\n\\n      if (params.grant !== false) {\\n        this.createGrantSolver(mesh).update();\\n      }\\n\\n      return this;\\n    },\\n\\n    /**\\n     * Enabes/Disables an animation feature.\\n     *\\n     * @param {string} key\\n     * @param {boolean} enabled\\n     * @return {MMDAnimationHelper}\\n     */\\n    enable: function enable(key, enabled) {\\n      if (this.enabled[key] === undefined) {\\n        throw new Error(\\\"THREE.MMDAnimationHelper.enable: unknown key \\\".concat(key));\\n      }\\n\\n      this.enabled[key] = enabled;\\n\\n      if (key === 'physics') {\\n        for (var i = 0, il = this.meshes.length; i < il; i++) {\\n          this._optimizeIK(this.meshes[i], enabled);\\n        }\\n      }\\n\\n      return this;\\n    },\\n\\n    /**\\n     * Creates an GrantSolver instance.\\n     *\\n     * @param {THREE.SkinnedMesh} mesh\\n     * @return {GrantSolver}\\n     */\\n    createGrantSolver: function createGrantSolver(mesh) {\\n      return new GrantSolver(mesh, mesh.geometry.userData.MMD.grants);\\n    },\\n    // private methods\\n    _addMesh: function _addMesh(mesh, params) {\\n      if (this.meshes.indexOf(mesh) >= 0) {\\n        throw new Error(\\\"THREE.MMDAnimationHelper._addMesh: SkinnedMesh '\\\".concat(mesh.name, \\\"' has already been added.\\\"));\\n      }\\n\\n      this.meshes.push(mesh);\\n      this.objects.set(mesh, {\\n        looped: false\\n      });\\n\\n      this._setupMeshAnimation(mesh, params.animation);\\n\\n      if (params.physics !== false) {\\n        this._setupMeshPhysics(mesh, params);\\n      }\\n\\n      return this;\\n    },\\n    _setupCamera: function _setupCamera(camera, params) {\\n      if (this.camera === camera) {\\n        throw new Error(\\\"THREE.MMDAnimationHelper._setupCamera: Camera '\\\".concat(camera.name, \\\"' has already been set.\\\"));\\n      }\\n\\n      if (this.camera) this.clearCamera(this.camera);\\n      this.camera = camera;\\n      camera.add(this.cameraTarget);\\n      this.objects.set(camera, {});\\n\\n      if (params.animation !== undefined) {\\n        this._setupCameraAnimation(camera, params.animation);\\n      }\\n\\n      return this;\\n    },\\n    _setupAudio: function _setupAudio(audio, params) {\\n      if (this.audio === audio) {\\n        throw new Error(\\\"THREE.MMDAnimationHelper._setupAudio: Audio '\\\".concat(audio.name, \\\"' has already been set.\\\"));\\n      }\\n\\n      if (this.audio) this.clearAudio(this.audio);\\n      this.audio = audio;\\n      this.audioManager = new AudioManager(audio, params);\\n      this.objects.set(this.audioManager, {\\n        duration: this.audioManager.duration\\n      });\\n      return this;\\n    },\\n    _removeMesh: function _removeMesh(mesh) {\\n      var found = false;\\n      var writeIndex = 0;\\n\\n      for (var i = 0, il = this.meshes.length; i < il; i++) {\\n        if (this.meshes[i] === mesh) {\\n          this.objects[\\\"delete\\\"](mesh);\\n          found = true;\\n          continue;\\n        }\\n\\n        this.meshes[writeIndex++] = this.meshes[i];\\n      }\\n\\n      if (!found) {\\n        throw new Error(\\\"THREE.MMDAnimationHelper._removeMesh: SkinnedMesh '\\\".concat(mesh.name, \\\"' has not been added yet.\\\"));\\n      }\\n\\n      this.meshes.length = writeIndex;\\n      return this;\\n    },\\n    _clearCamera: function _clearCamera(camera) {\\n      if (camera !== this.camera) {\\n        throw new Error(\\\"THREE.MMDAnimationHelper._clearCamera: Camera '\\\".concat(camera.name, \\\"' has not been set yet.\\\"));\\n      }\\n\\n      this.camera.remove(this.cameraTarget);\\n      this.objects[\\\"delete\\\"](this.camera);\\n      this.camera = null;\\n      return this;\\n    },\\n    _clearAudio: function _clearAudio(audio) {\\n      if (audio !== this.audio) {\\n        throw new Error(\\\"THREE.MMDAnimationHelper._clearAudio: Audio '\\\".concat(audio.name, \\\"' has not been set yet.\\\"));\\n      }\\n\\n      this.objects[\\\"delete\\\"](this.audioManager);\\n      this.audio = null;\\n      this.audioManager = null;\\n      return this;\\n    },\\n    _setupMeshAnimation: function _setupMeshAnimation(mesh, animation) {\\n      var objects = this.objects.get(mesh);\\n\\n      if (animation !== undefined) {\\n        var animations = Array.isArray(animation) ? animation : [animation];\\n        objects.mixer = new _three.AnimationMixer(mesh);\\n\\n        for (var i = 0, il = animations.length; i < il; i++) {\\n          objects.mixer.clipAction(animations[i]).play();\\n        } // TODO: find a workaround not to access ._clip looking like a private property\\n\\n\\n        objects.mixer.addEventListener('loop', function (event) {\\n          var tracks = event.action._clip.tracks;\\n          if (tracks.length > 0 && tracks[0].name.slice(0, 6) !== '.bones') return;\\n          objects.looped = true;\\n        });\\n      }\\n\\n      objects.ikSolver = this._createCCDIKSolver(mesh);\\n      objects.grantSolver = this.createGrantSolver(mesh);\\n      return this;\\n    },\\n    _setupCameraAnimation: function _setupCameraAnimation(camera, animation) {\\n      var animations = Array.isArray(animation) ? animation : [animation];\\n      var objects = this.objects.get(camera);\\n      objects.mixer = new _three.AnimationMixer(camera);\\n\\n      for (var i = 0, il = animations.length; i < il; i++) {\\n        objects.mixer.clipAction(animations[i]).play();\\n      }\\n    },\\n    _setupMeshPhysics: function _setupMeshPhysics(mesh, params) {\\n      var objects = this.objects.get(mesh); // shared physics is experimental\\n\\n      if (params.world === undefined && this.sharedPhysics) {\\n        var masterPhysics = this._getMasterPhysics();\\n\\n        if (masterPhysics !== null) world = masterPhysics.world; // eslint-disable-line no-undef\\n      }\\n\\n      objects.physics = this._createMMDPhysics(mesh, params);\\n\\n      if (objects.mixer && params.animationWarmup !== false) {\\n        this._animateMesh(mesh, 0);\\n\\n        objects.physics.reset();\\n      }\\n\\n      objects.physics.warmup(params.warmup !== undefined ? params.warmup : 60);\\n\\n      this._optimizeIK(mesh, true);\\n    },\\n    _animateMesh: function _animateMesh(mesh, delta) {\\n      var objects = this.objects.get(mesh);\\n      var mixer = objects.mixer;\\n      var ikSolver = objects.ikSolver;\\n      var grantSolver = objects.grantSolver;\\n      var physics = objects.physics;\\n      var looped = objects.looped; // alternate solution to save/restore bones but less performant?\\n      //mesh.pose();\\n      //this._updatePropertyMixersBuffer( mesh );\\n\\n      if (mixer && this.enabled.animation) {\\n        this._restoreBones(mesh);\\n\\n        mixer.update(delta);\\n\\n        this._saveBones(mesh);\\n\\n        if (ikSolver && this.enabled.ik) {\\n          mesh.updateMatrixWorld(true);\\n          ikSolver.update();\\n        }\\n\\n        if (grantSolver && this.enabled.grant) {\\n          grantSolver.update();\\n        }\\n      }\\n\\n      if (looped === true && this.enabled.physics) {\\n        if (physics && this.configuration.resetPhysicsOnLoop) physics.reset();\\n        objects.looped = false;\\n      }\\n\\n      if (physics && this.enabled.physics && !this.sharedPhysics) {\\n        this.onBeforePhysics(mesh);\\n        physics.update(delta);\\n      }\\n    },\\n    _animateCamera: function _animateCamera(camera, delta) {\\n      var mixer = this.objects.get(camera).mixer;\\n\\n      if (mixer && this.enabled.cameraAnimation) {\\n        mixer.update(delta);\\n        camera.updateProjectionMatrix();\\n        camera.up.set(0, 1, 0);\\n        camera.up.applyQuaternion(camera.quaternion);\\n        camera.lookAt(this.cameraTarget.position);\\n      }\\n    },\\n    _optimizeIK: function _optimizeIK(mesh, physicsEnabled) {\\n      var iks = mesh.geometry.userData.MMD.iks;\\n      var bones = mesh.geometry.userData.MMD.bones;\\n\\n      for (var i = 0, il = iks.length; i < il; i++) {\\n        var ik = iks[i];\\n        var links = ik.links;\\n\\n        for (var j = 0, jl = links.length; j < jl; j++) {\\n          var link = links[j];\\n\\n          if (physicsEnabled === true) {\\n            // disable IK of the bone the corresponding rigidBody type of which is 1 or 2\\n            // because its rotation will be overriden by physics\\n            link.enabled = bones[link.index].rigidBodyType > 0 ? false : true;\\n          } else {\\n            link.enabled = true;\\n          }\\n        }\\n      }\\n    },\\n    _createCCDIKSolver: function _createCCDIKSolver(mesh) {\\n      if (_CCDIKSolver.CCDIKSolver === undefined) {\\n        throw new Error('THREE.MMDAnimationHelper: Import CCDIKSolver.');\\n      }\\n\\n      return new _CCDIKSolver.CCDIKSolver(mesh, mesh.geometry.userData.MMD.iks);\\n    },\\n    _createMMDPhysics: function _createMMDPhysics(mesh, params) {\\n      if (_MMDPhysics.MMDPhysics === undefined) {\\n        throw new Error('THREE.MMDPhysics: Import MMDPhysics.');\\n      }\\n\\n      return new _MMDPhysics.MMDPhysics(mesh, mesh.geometry.userData.MMD.rigidBodies, mesh.geometry.userData.MMD.constraints, params);\\n    },\\n\\n    /*\\n     * Detects the longest duration and then sets it to them to sync.\\n     * TODO: Not to access private properties ( ._actions and ._clip )\\n     */\\n    _syncDuration: function _syncDuration() {\\n      var max = 0.0;\\n      var objects = this.objects;\\n      var meshes = this.meshes;\\n      var camera = this.camera;\\n      var audioManager = this.audioManager; // get the longest duration\\n\\n      for (var i = 0, il = meshes.length; i < il; i++) {\\n        var mixer = this.objects.get(meshes[i]).mixer;\\n        if (mixer === undefined) continue;\\n\\n        for (var j = 0; j < mixer._actions.length; j++) {\\n          var clip = mixer._actions[j]._clip;\\n\\n          if (!objects.has(clip)) {\\n            objects.set(clip, {\\n              duration: clip.duration\\n            });\\n          }\\n\\n          max = Math.max(max, objects.get(clip).duration);\\n        }\\n      }\\n\\n      if (camera !== null) {\\n        var mixer = this.objects.get(camera).mixer;\\n\\n        if (mixer !== undefined) {\\n          for (var _i2 = 0, _il2 = mixer._actions.length; _i2 < _il2; _i2++) {\\n            var clip = mixer._actions[_i2]._clip;\\n\\n            if (!objects.has(clip)) {\\n              objects.set(clip, {\\n                duration: clip.duration\\n              });\\n            }\\n\\n            max = Math.max(max, objects.get(clip).duration);\\n          }\\n        }\\n      }\\n\\n      if (audioManager !== null) {\\n        max = Math.max(max, objects.get(audioManager).duration);\\n      }\\n\\n      max += this.configuration.afterglow; // update the duration\\n\\n      for (var _i3 = 0, _il3 = this.meshes.length; _i3 < _il3; _i3++) {\\n        var mixer = this.objects.get(this.meshes[_i3]).mixer;\\n        if (mixer === undefined) continue;\\n\\n        for (var _j = 0, jl = mixer._actions.length; _j < jl; _j++) {\\n          mixer._actions[_j]._clip.duration = max;\\n        }\\n      }\\n\\n      if (camera !== null) {\\n        var mixer = this.objects.get(camera).mixer;\\n\\n        if (mixer !== undefined) {\\n          for (var _i4 = 0, _il4 = mixer._actions.length; _i4 < _il4; _i4++) {\\n            mixer._actions[_i4]._clip.duration = max;\\n          }\\n        }\\n      }\\n\\n      if (audioManager !== null) {\\n        audioManager.duration = max;\\n      }\\n    },\\n    // workaround\\n    _updatePropertyMixersBuffer: function _updatePropertyMixersBuffer(mesh) {\\n      var mixer = this.objects.get(mesh).mixer;\\n      var propertyMixers = mixer._bindings;\\n      var accuIndex = mixer._accuIndex;\\n\\n      for (var i = 0, il = propertyMixers.length; i < il; i++) {\\n        var propertyMixer = propertyMixers[i];\\n        var buffer = propertyMixer.buffer;\\n        var stride = propertyMixer.valueSize;\\n        var offset = (accuIndex + 1) * stride;\\n        propertyMixer.binding.getValue(buffer, offset);\\n      }\\n    },\\n\\n    /*\\n     * Avoiding these two issues by restore/save bones before/after mixer animation.\\n     *\\n     * 1. PropertyMixer used by AnimationMixer holds cache value in .buffer.\\n     *    Calculating IK, Grant, and Physics after mixer animation can break\\n     *    the cache coherency.\\n     *\\n     * 2. Applying Grant two or more times without reset the posing breaks model.\\n     */\\n    _saveBones: function _saveBones(mesh) {\\n      var objects = this.objects.get(mesh);\\n      var bones = mesh.skeleton.bones;\\n      var backupBones = objects.backupBones;\\n\\n      if (backupBones === undefined) {\\n        backupBones = new Float32Array(bones.length * 7);\\n        objects.backupBones = backupBones;\\n      }\\n\\n      for (var i = 0, il = bones.length; i < il; i++) {\\n        var bone = bones[i];\\n        bone.position.toArray(backupBones, i * 7);\\n        bone.quaternion.toArray(backupBones, i * 7 + 3);\\n      }\\n    },\\n    _restoreBones: function _restoreBones(mesh) {\\n      var objects = this.objects.get(mesh);\\n      var backupBones = objects.backupBones;\\n      if (backupBones === undefined) return;\\n      var bones = mesh.skeleton.bones;\\n\\n      for (var i = 0, il = bones.length; i < il; i++) {\\n        var bone = bones[i];\\n        bone.position.fromArray(backupBones, i * 7);\\n        bone.quaternion.fromArray(backupBones, i * 7 + 3);\\n      }\\n    },\\n    // experimental\\n    _getMasterPhysics: function _getMasterPhysics() {\\n      if (this.masterPhysics !== null) return this.masterPhysics;\\n\\n      for (var i = 0, il = this.meshes.length; i < il; i++) {\\n        var physics = this.meshes[i].physics;\\n\\n        if (physics !== undefined && physics !== null) {\\n          this.masterPhysics = physics;\\n          return this.masterPhysics;\\n        }\\n      }\\n\\n      return null;\\n    },\\n    _updateSharedPhysics: function _updateSharedPhysics(delta) {\\n      if (this.meshes.length === 0 || !this.enabled.physics || !this.sharedPhysics) return;\\n\\n      var physics = this._getMasterPhysics();\\n\\n      if (physics === null) return;\\n\\n      for (var i = 0, il = this.meshes.length; i < il; i++) {\\n        var p = this.meshes[i].physics;\\n\\n        if (p !== null && p !== undefined) {\\n          p.updateRigidBodies();\\n        }\\n      }\\n\\n      physics.stepSimulation(delta);\\n\\n      for (var _i5 = 0, _il5 = this.meshes.length; _i5 < _il5; _i5++) {\\n        var p = this.meshes[_i5].physics;\\n\\n        if (p !== null && p !== undefined) {\\n          p.updateBones();\\n        }\\n      }\\n    }\\n  }; //\\n\\n  /**\\n   * @param {THREE.Audio} audio\\n   * @param {Object} params - (optional)\\n   * @param {Nuumber} params.delayTime\\n   */\\n\\n  function AudioManager(audio, params) {\\n    params = params || {};\\n    this.audio = audio;\\n    this.elapsedTime = 0.0;\\n    this.currentTime = 0.0;\\n    this.delayTime = params.delayTime !== undefined ? params.delayTime : 0.0;\\n    this.audioDuration = this.audio.buffer.duration;\\n    this.duration = this.audioDuration + this.delayTime;\\n  }\\n\\n  AudioManager.prototype = {\\n    constructor: AudioManager,\\n\\n    /**\\n     * @param {Number} delta\\n     * @return {AudioManager}\\n     */\\n    control: function control(delta) {\\n      this.elapsed += delta;\\n      this.currentTime += delta;\\n      if (this._shouldStopAudio()) this.audio.stop();\\n      if (this._shouldStartAudio()) this.audio.play();\\n      return this;\\n    },\\n    // private methods\\n    _shouldStartAudio: function _shouldStartAudio() {\\n      if (this.audio.isPlaying) return false;\\n\\n      while (this.currentTime >= this.duration) {\\n        this.currentTime -= this.duration;\\n      }\\n\\n      if (this.currentTime < this.delayTime) return false; // 'duration' can be bigger than 'audioDuration + delayTime' because of sync configuration\\n\\n      if (this.currentTime - this.delayTime > this.audioDuration) return false;\\n      return true;\\n    },\\n    _shouldStopAudio: function _shouldStopAudio() {\\n      return this.audio.isPlaying && this.currentTime >= this.duration;\\n    }\\n  };\\n  /**\\n   * @param {THREE.SkinnedMesh} mesh\\n   * @param {Array<Object>} grants\\n   */\\n\\n  function GrantSolver(mesh, grants) {\\n    this.mesh = mesh;\\n    this.grants = grants || [];\\n  }\\n\\n  GrantSolver.prototype = {\\n    constructor: GrantSolver,\\n\\n    /**\\n     * @return {GrantSolver}\\n     */\\n    update: function () {\\n      var quaternion = new _three.Quaternion();\\n      return function () {\\n        var bones = this.mesh.skeleton.bones;\\n        var grants = this.grants;\\n\\n        for (var i = 0, il = grants.length; i < il; i++) {\\n          var grant = grants[i];\\n          var bone = bones[grant.index];\\n          var parentBone = bones[grant.parentIndex];\\n\\n          if (grant.isLocal) {\\n            // TODO: implement\\n            if (grant.affectPosition) ; // TODO: implement\\n\\n            if (grant.affectRotation) ;\\n          } else {\\n            // TODO: implement\\n            if (grant.affectPosition) ;\\n\\n            if (grant.affectRotation) {\\n              quaternion.set(0, 0, 0, 1);\\n              quaternion.slerp(parentBone.quaternion, grant.ratio);\\n              bone.quaternion.multiply(quaternion);\\n            }\\n          }\\n        }\\n\\n        return this;\\n      };\\n    }()\\n  };\\n  return MMDAnimationHelper;\\n}();\\n\\nexports.MMDAnimationHelper = MMDAnimationHelper;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"MMDAnimationHelper\",\"_three\",\"_CCDIKSolver\",\"_MMDPhysics\",\"params\",\"meshes\",\"camera\",\"cameraTarget\",\"Object3D\",\"name\",\"audioManager\",\"audio\",\"objects\",\"WeakMap\",\"configuration\",\"sync\",\"undefined\",\"afterglow\",\"resetPhysicsOnLoop\",\"enabled\",\"animation\",\"ik\",\"grant\",\"physics\",\"cameraAnimation\",\"onBeforePhysics\",\"this.onBeforePhysics\",\"sharedPhysics\",\"masterPhysics\",\"AudioManager\",\"currentTime\",\"elapsedTime\",\"delayTime\",\"audioDuration\",\"buffer\",\"duration\",\"GrantSolver\",\"mesh\",\"grants\",\"prototype\",\"constructor\",\"add\",\"object\",\"isSkinnedMesh\",\"_addMesh\",\"isCamera\",\"_setupCamera\",\"type\",\"_setupAudio\",\"Error\",\"_syncDuration\",\"remove\",\"_removeMesh\",\"_clearCamera\",\"_clearAudio\",\"update\",\"delta\",\"control\",\"i\",\"length\",\"_animateMesh\",\"_updateSharedPhysics\",\"_animateCamera\",\"pose\",\"vpd\",\"resetPose\",\"bones\",\"skeleton\",\"boneParams\",\"boneNameDictionary\",\"il\",\"vector\",\"Vector3\",\"quaternion\",\"Quaternion\",\"_i\",\"_il\",\"boneParam\",\"boneIndex\",\"bone\",\"position\",\"fromArray\",\"translation\",\"multiply\",\"updateMatrixWorld\",\"_createCCDIKSolver\",\"saveOriginalBonesBeforeIK\",\"createGrantSolver\",\"enable\",\"key\",\"concat\",\"_optimizeIK\",\"geometry\",\"userData\",\"MMD\",\"indexOf\",\"push\",\"set\",\"looped\",\"_setupMeshAnimation\",\"_setupMeshPhysics\",\"clearCamera\",\"_setupCameraAnimation\",\"clearAudio\",\"found\",\"writeIndex\",\"get\",\"animations\",\"Array\",\"isArray\",\"mixer\",\"AnimationMixer\",\"clipAction\",\"play\",\"addEventListener\",\"event\",\"tracks\",\"action\",\"_clip\",\"slice\",\"ikSolver\",\"grantSolver\",\"world\",\"_getMasterPhysics\",\"_createMMDPhysics\",\"animationWarmup\",\"reset\",\"warmup\",\"_restoreBones\",\"_saveBones\",\"updateProjectionMatrix\",\"up\",\"applyQuaternion\",\"lookAt\",\"physicsEnabled\",\"iks\",\"links\",\"j\",\"jl\",\"link\",\"index\",\"rigidBodyType\",\"CCDIKSolver\",\"MMDPhysics\",\"rigidBodies\",\"constraints\",\"max\",\"_actions\",\"clip\",\"has\",\"Math\",\"_i2\",\"_il2\",\"_i3\",\"_il3\",\"_j\",\"_i4\",\"_il4\",\"_updatePropertyMixersBuffer\",\"propertyMixers\",\"_bindings\",\"accuIndex\",\"_accuIndex\",\"propertyMixer\",\"binding\",\"getValue\",\"valueSize\",\"backupBones\",\"Float32Array\",\"toArray\",\"p\",\"updateRigidBodies\",\"stepSimulation\",\"_i5\",\"_il5\",\"updateBones\",\"elapsed\",\"_shouldStopAudio\",\"stop\",\"_shouldStartAudio\",\"isPlaying\",\"parentBone\",\"parentIndex\",\"isLocal\",\"affectRotation\",\"slerp\",\"ratio\"]\n}\n"]