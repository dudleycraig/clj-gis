["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/webxr/XRHandModelFactory.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$webxr$XRHandModelFactory=function(global,require,module,exports){function XRHandModel(controller){_three.Object3D.call(this);this.controller=controller;this.mesh=this.envMap=this.motionController=null}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.XRHandModelFactory=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_XRHandPrimitiveModel=require(\"module$node_modules$three_stdlib$webxr$XRHandPrimitiveModel\"),_XRHandOculusMeshModel=\nrequire(\"module$node_modules$three_stdlib$webxr$XRHandOculusMeshModel\");XRHandModel.prototype=Object.assign(Object.create(_three.Object3D.prototype),{constructor:XRHandModel,updateMatrixWorld:function(force){_three.Object3D.prototype.updateMatrixWorld.call(this,force);this.motionController&&this.motionController.updateMesh()}});global=function(){function XRHandModelFactory(){this.path=\"\"}XRHandModelFactory.prototype={constructor:XRHandModelFactory,setPath:function(path){this.path=path;return this},\ncreateHandModel:function(controller,profile,options){var _this=this,handModel=new XRHandModel(controller);controller.addEventListener(\"connected\",function(event){event=event.data;event.hand&&!handModel.motionController&&(handModel.visible=!0,handModel.xrInputSource=event,void 0===profile||\"spheres\"===profile?handModel.motionController=new _XRHandPrimitiveModel.XRHandPrimitiveModel(handModel,controller,_this.path,event.handedness,{primitive:\"sphere\"}):\"boxes\"===profile?handModel.motionController=new _XRHandPrimitiveModel.XRHandPrimitiveModel(handModel,\ncontroller,_this.path,event.handedness,{primitive:\"box\"}):\"oculus\"===profile&&(handModel.motionController=new _XRHandOculusMeshModel.XRHandOculusMeshModel(handModel,controller,_this.path,event.handedness,options)))});controller.addEventListener(\"disconnected\",function(){});return handModel}};return XRHandModelFactory}();exports.XRHandModelFactory=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$webxr$XRHandModelFactory\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XRHandModelFactory = void 0;\n\nvar _three = require(\"three\");\n\nvar _XRHandPrimitiveModel = require(\"./XRHandPrimitiveModel.js\");\n\nvar _XRHandOculusMeshModel = require(\"./XRHandOculusMeshModel.js\");\n\nfunction XRHandModel(controller) {\n  _three.Object3D.call(this);\n\n  this.controller = controller;\n  this.motionController = null;\n  this.envMap = null;\n  this.mesh = null;\n}\n\nXRHandModel.prototype = Object.assign(Object.create(_three.Object3D.prototype), {\n  constructor: XRHandModel,\n  updateMatrixWorld: function updateMatrixWorld(force) {\n    _three.Object3D.prototype.updateMatrixWorld.call(this, force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n});\n\nvar XRHandModelFactory = function () {\n  function XRHandModelFactory() {\n    this.path = '';\n  }\n\n  XRHandModelFactory.prototype = {\n    constructor: XRHandModelFactory,\n    setPath: function setPath(path) {\n      this.path = path;\n      return this;\n    },\n    createHandModel: function createHandModel(controller, profile, options) {\n      var _this = this;\n\n      var handModel = new XRHandModel(controller);\n      controller.addEventListener('connected', function (event) {\n        var xrInputSource = event.data;\n\n        if (xrInputSource.hand && !handModel.motionController) {\n          handModel.visible = true;\n          handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n          if (profile === undefined || profile === 'spheres') {\n            handModel.motionController = new _XRHandPrimitiveModel.XRHandPrimitiveModel(handModel, controller, _this.path, xrInputSource.handedness, {\n              primitive: 'sphere'\n            });\n          } else if (profile === 'boxes') {\n            handModel.motionController = new _XRHandPrimitiveModel.XRHandPrimitiveModel(handModel, controller, _this.path, xrInputSource.handedness, {\n              primitive: 'box'\n            });\n          } else if (profile === 'oculus') {\n            handModel.motionController = new _XRHandOculusMeshModel.XRHandOculusMeshModel(handModel, controller, _this.path, xrInputSource.handedness, options);\n          }\n        }\n      });\n      controller.addEventListener('disconnected', function () {// handModel.motionController = null;\n        // handModel.remove( scene );\n        // scene = null;\n      });\n      return handModel;\n    }\n  };\n  return XRHandModelFactory;\n}();\n\nexports.XRHandModelFactory = XRHandModelFactory;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_stdlib$webxr$XRHandOculusMeshModel","~$shadow.js","~$module$node_modules$three_stdlib$webxr$XRHandPrimitiveModel"]],"~:properties",["^5",["createHandModel","prototype","setPath","__esModule","path","primitive","value","visible","xrInputSource","XRHandModelFactory","mesh","updateMatrixWorld","envMap","motionController","controller","constructor"]],"~:compiled-at",1630917515559,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$webxr$XRHandModelFactory.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/webxr/XRHandModelFactory.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$webxr$XRHandModelFactory\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.XRHandModelFactory = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _XRHandPrimitiveModel = require(\\\"./XRHandPrimitiveModel.js\\\");\\n\\nvar _XRHandOculusMeshModel = require(\\\"./XRHandOculusMeshModel.js\\\");\\n\\nfunction XRHandModel(controller) {\\n  _three.Object3D.call(this);\\n\\n  this.controller = controller;\\n  this.motionController = null;\\n  this.envMap = null;\\n  this.mesh = null;\\n}\\n\\nXRHandModel.prototype = Object.assign(Object.create(_three.Object3D.prototype), {\\n  constructor: XRHandModel,\\n  updateMatrixWorld: function updateMatrixWorld(force) {\\n    _three.Object3D.prototype.updateMatrixWorld.call(this, force);\\n\\n    if (this.motionController) {\\n      this.motionController.updateMesh();\\n    }\\n  }\\n});\\n\\nvar XRHandModelFactory = function () {\\n  function XRHandModelFactory() {\\n    this.path = '';\\n  }\\n\\n  XRHandModelFactory.prototype = {\\n    constructor: XRHandModelFactory,\\n    setPath: function setPath(path) {\\n      this.path = path;\\n      return this;\\n    },\\n    createHandModel: function createHandModel(controller, profile, options) {\\n      var _this = this;\\n\\n      var handModel = new XRHandModel(controller);\\n      controller.addEventListener('connected', function (event) {\\n        var xrInputSource = event.data;\\n\\n        if (xrInputSource.hand && !handModel.motionController) {\\n          handModel.visible = true;\\n          handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\\n\\n          if (profile === undefined || profile === 'spheres') {\\n            handModel.motionController = new _XRHandPrimitiveModel.XRHandPrimitiveModel(handModel, controller, _this.path, xrInputSource.handedness, {\\n              primitive: 'sphere'\\n            });\\n          } else if (profile === 'boxes') {\\n            handModel.motionController = new _XRHandPrimitiveModel.XRHandPrimitiveModel(handModel, controller, _this.path, xrInputSource.handedness, {\\n              primitive: 'box'\\n            });\\n          } else if (profile === 'oculus') {\\n            handModel.motionController = new _XRHandOculusMeshModel.XRHandOculusMeshModel(handModel, controller, _this.path, xrInputSource.handedness, options);\\n          }\\n        }\\n      });\\n      controller.addEventListener('disconnected', function () {// handModel.motionController = null;\\n        // handModel.remove( scene );\\n        // scene = null;\\n      });\\n      return handModel;\\n    }\\n  };\\n  return XRHandModelFactory;\\n}();\\n\\nexports.XRHandModelFactory = XRHandModelFactory;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"XRHandModel\",\"controller\",\"_three\",\"Object3D\",\"call\",\"mesh\",\"envMap\",\"motionController\",\"Object\",\"defineProperty\",\"value\",\"XRHandModelFactory\",\"_XRHandPrimitiveModel\",\"_XRHandOculusMeshModel\",\"prototype\",\"assign\",\"create\",\"constructor\",\"updateMatrixWorld\",\"force\",\"updateMesh\",\"path\",\"setPath\",\"createHandModel\",\"profile\",\"options\",\"_this\",\"handModel\",\"addEventListener\",\"event\",\"xrInputSource\",\"data\",\"hand\",\"visible\",\"undefined\",\"XRHandPrimitiveModel\",\"handedness\",\"primitive\",\"XRHandOculusMeshModel\"]\n}\n"]