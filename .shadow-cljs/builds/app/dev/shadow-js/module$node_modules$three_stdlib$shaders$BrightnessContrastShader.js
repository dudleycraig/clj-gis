["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/BrightnessContrastShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$BrightnessContrastShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.BrightnessContrastShader=void 0;exports.BrightnessContrastShader={uniforms:{tDiffuse:{value:null},brightness:{value:0},contrast:{value:0}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform sampler2D tDiffuse;\\nuniform float brightness;\\nuniform float contrast;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tgl_FragColor \\x3d texture2D( tDiffuse, vUv );\\n\\tgl_FragColor.rgb +\\x3d brightness;\\n\\tif (contrast \\x3e 0.0) {\\n\\t\\tgl_FragColor.rgb \\x3d (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\\n\\t} else {\\n\\t\\tgl_FragColor.rgb \\x3d (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\\n\\t}\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$BrightnessContrastShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrightnessContrastShader = void 0;\n\n/**\n * Brightness and contrast adjustment\n * https://github.com/evanw/glfx.js\n * brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\n * contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n */\nvar BrightnessContrastShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    brightness: {\n      value: 0\n    },\n    contrast: {\n      value: 0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float brightness;', 'uniform float contrast;', 'varying vec2 vUv;', 'void main() {', '\tgl_FragColor = texture2D( tDiffuse, vUv );', '\tgl_FragColor.rgb += brightness;', '\tif (contrast > 0.0) {', '\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;', '\t} else {', '\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;', '\t}', '}'].join('\\n')\n};\nexports.BrightnessContrastShader = BrightnessContrastShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","brightness","__esModule","tDiffuse","vertexShader","BrightnessContrastShader","value","contrast","uniforms"]],"~:compiled-at",1630917515590,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$BrightnessContrastShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,iEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,wBAAR,CAAmC,IAAK,EAuBxCJ,QAAQI,CAAAA,wBAAR,CAf+BA,CAC7BC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,WAAY,CACVJ,MAAO,CADG,CAJJ,CAORK,SAAU,CACRL,MAAO,CADC,CAPF,CADmBC,CAY7BK,aAAiJ,qIAZpHL,CAa7BM,eAAoa,sZAbvYN,CAd+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/BrightnessContrastShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$BrightnessContrastShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.BrightnessContrastShader = void 0;\\n\\n/**\\n * Brightness and contrast adjustment\\n * https://github.com/evanw/glfx.js\\n * brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\\n * contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\\n */\\nvar BrightnessContrastShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    brightness: {\\n      value: 0\\n    },\\n    contrast: {\\n      value: 0\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float brightness;', 'uniform float contrast;', 'varying vec2 vUv;', 'void main() {', '\\tgl_FragColor = texture2D( tDiffuse, vUv );', '\\tgl_FragColor.rgb += brightness;', '\\tif (contrast > 0.0) {', '\\t\\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;', '\\t} else {', '\\t\\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;', '\\t}', '}'].join('\\\\n')\\n};\\nexports.BrightnessContrastShader = BrightnessContrastShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"BrightnessContrastShader\",\"uniforms\",\"tDiffuse\",\"brightness\",\"contrast\",\"vertexShader\",\"fragmentShader\"]\n}\n"]