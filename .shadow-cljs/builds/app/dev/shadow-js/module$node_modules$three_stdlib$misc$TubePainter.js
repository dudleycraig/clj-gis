["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/misc/TubePainter.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$misc$TubePainter=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.TubePainter=function(){var positions=new _three.BufferAttribute(new Float32Array(3E6),3);positions.usage=_three.DynamicDrawUsage;var normals=new _three.BufferAttribute(new Float32Array(3E6),3);normals.usage=_three.DynamicDrawUsage;var colors=new _three.BufferAttribute(new Float32Array(3E6),3);colors.usage=_three.DynamicDrawUsage;var geometry=\nnew _three.BufferGeometry;geometry.setAttribute(\"position\",positions);geometry.setAttribute(\"normal\",normals);geometry.setAttribute(\"color\",colors);geometry.drawRange.count=0;var material=new _three.MeshStandardMaterial({vertexColors:!0});material=new _three.Mesh(geometry,material);material.frustumCulled=!1;var vector1=new _three.Vector3,vector2=new _three.Vector3,vector3=new _three.Vector3,vector4=new _three.Vector3,color=new _three.Color(16777215),size=1,up=new _three.Vector3(0,1,0),point1=new _three.Vector3,\npoint2=new _three.Vector3,matrix1=new _three.Matrix4,matrix2=new _three.Matrix4,count=0;return{mesh:material,moveTo:function(position){point1.copy(position);matrix1.lookAt(point2,point1,up);point2.copy(position);matrix2.copy(matrix1)},lineTo:function(position){point1.copy(position);matrix1.lookAt(point2,point1,up);if(0!==point1.distanceToSquared(point2)){position=geometry.drawRange.count;for(var PI2=2*Math.PI,array=[],radius=.01*size,i=0;10>i;i++){var angle=i/10*PI2;array.push(new _three.Vector3(Math.sin(angle)*\nradius,Math.cos(angle)*radius,0))}PI2=0;for(radius=array.length;PI2<radius;PI2++)i=array[PI2],angle=array[(PI2+1)%radius],vector1.copy(i).applyMatrix4(matrix2).add(point2),vector2.copy(angle).applyMatrix4(matrix2).add(point2),vector3.copy(angle).applyMatrix4(matrix1).add(point1),vector4.copy(i).applyMatrix4(matrix1).add(point1),vector1.toArray(positions.array,3*(position+0)),vector2.toArray(positions.array,3*(position+1)),vector4.toArray(positions.array,3*(position+2)),vector2.toArray(positions.array,\n3*(position+3)),vector3.toArray(positions.array,3*(position+4)),vector4.toArray(positions.array,3*(position+5)),vector1.copy(i).applyMatrix4(matrix2).normalize(),vector2.copy(angle).applyMatrix4(matrix2).normalize(),vector3.copy(angle).applyMatrix4(matrix1).normalize(),vector4.copy(i).applyMatrix4(matrix1).normalize(),vector1.toArray(normals.array,3*(position+0)),vector2.toArray(normals.array,3*(position+1)),vector4.toArray(normals.array,3*(position+2)),vector2.toArray(normals.array,3*(position+3)),\nvector3.toArray(normals.array,3*(position+4)),vector4.toArray(normals.array,3*(position+5)),color.toArray(colors.array,3*(position+0)),color.toArray(colors.array,3*(position+1)),color.toArray(colors.array,3*(position+2)),color.toArray(colors.array,3*(position+3)),color.toArray(colors.array,3*(position+4)),color.toArray(colors.array,3*(position+5)),position+=6;geometry.drawRange.count=position}point2.copy(point1);matrix2.copy(matrix1)},setSize:function(value){size=value},update:function(){var start=\ncount,end=geometry.drawRange.count;start!==end&&(positions.updateRange.offset=3*start,positions.updateRange.count=3*(end-start),positions.needsUpdate=!0,normals.updateRange.offset=3*start,normals.updateRange.count=3*(end-start),normals.needsUpdate=!0,colors.updateRange.offset=3*start,colors.updateRange.count=3*(end-start),colors.needsUpdate=!0,count=geometry.drawRange.count)}}};var _three=require(\"module$node_modules$three$build$three_module\")}","~:source","shadow$provide[\"module$node_modules$three_stdlib$misc$TubePainter\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TubePainter = TubePainter;\n\nvar _three = require(\"three\");\n\nfunction TubePainter() {\n  var BUFFER_SIZE = 1000000 * 3;\n  var positions = new _three.BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  positions.usage = _three.DynamicDrawUsage;\n  var normals = new _three.BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  normals.usage = _three.DynamicDrawUsage;\n  var colors = new _three.BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  colors.usage = _three.DynamicDrawUsage;\n  var geometry = new _three.BufferGeometry();\n  geometry.setAttribute('position', positions);\n  geometry.setAttribute('normal', normals);\n  geometry.setAttribute('color', colors);\n  geometry.drawRange.count = 0;\n  var material = new _three.MeshStandardMaterial({\n    vertexColors: true\n  });\n  var mesh = new _three.Mesh(geometry, material);\n  mesh.frustumCulled = false; //\n\n  function getPoints(size) {\n    var PI2 = Math.PI * 2;\n    var sides = 10;\n    var array = [];\n    var radius = 0.01 * size;\n\n    for (var i = 0; i < sides; i++) {\n      var angle = i / sides * PI2;\n      array.push(new _three.Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0));\n    }\n\n    return array;\n  } //\n\n\n  var vector1 = new _three.Vector3();\n  var vector2 = new _three.Vector3();\n  var vector3 = new _three.Vector3();\n  var vector4 = new _three.Vector3();\n  var color = new _three.Color(0xffffff);\n  var size = 1;\n\n  function stroke(position1, position2, matrix1, matrix2) {\n    if (position1.distanceToSquared(position2) === 0) return;\n    var count = geometry.drawRange.count;\n    var points = getPoints(size);\n\n    for (var i = 0, il = points.length; i < il; i++) {\n      var vertex1 = points[i];\n      var vertex2 = points[(i + 1) % il]; // positions\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).add(position2);\n      vector2.copy(vertex2).applyMatrix4(matrix2).add(position2);\n      vector3.copy(vertex2).applyMatrix4(matrix1).add(position1);\n      vector4.copy(vertex1).applyMatrix4(matrix1).add(position1);\n      vector1.toArray(positions.array, (count + 0) * 3);\n      vector2.toArray(positions.array, (count + 1) * 3);\n      vector4.toArray(positions.array, (count + 2) * 3);\n      vector2.toArray(positions.array, (count + 3) * 3);\n      vector3.toArray(positions.array, (count + 4) * 3);\n      vector4.toArray(positions.array, (count + 5) * 3); // normals\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).normalize();\n      vector2.copy(vertex2).applyMatrix4(matrix2).normalize();\n      vector3.copy(vertex2).applyMatrix4(matrix1).normalize();\n      vector4.copy(vertex1).applyMatrix4(matrix1).normalize();\n      vector1.toArray(normals.array, (count + 0) * 3);\n      vector2.toArray(normals.array, (count + 1) * 3);\n      vector4.toArray(normals.array, (count + 2) * 3);\n      vector2.toArray(normals.array, (count + 3) * 3);\n      vector3.toArray(normals.array, (count + 4) * 3);\n      vector4.toArray(normals.array, (count + 5) * 3); // colors\n\n      color.toArray(colors.array, (count + 0) * 3);\n      color.toArray(colors.array, (count + 1) * 3);\n      color.toArray(colors.array, (count + 2) * 3);\n      color.toArray(colors.array, (count + 3) * 3);\n      color.toArray(colors.array, (count + 4) * 3);\n      color.toArray(colors.array, (count + 5) * 3);\n      count += 6;\n    }\n\n    geometry.drawRange.count = count;\n  } //\n\n\n  var up = new _three.Vector3(0, 1, 0);\n  var point1 = new _three.Vector3();\n  var point2 = new _three.Vector3();\n  var matrix1 = new _three.Matrix4();\n  var matrix2 = new _three.Matrix4();\n\n  function moveTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    point2.copy(position);\n    matrix2.copy(matrix1);\n  }\n\n  function lineTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    stroke(point1, point2, matrix1, matrix2);\n    point2.copy(point1);\n    matrix2.copy(matrix1);\n  }\n\n  function setSize(value) {\n    size = value;\n  } //\n\n\n  var count = 0;\n\n  function update() {\n    var start = count;\n    var end = geometry.drawRange.count;\n    if (start === end) return;\n    positions.updateRange.offset = start * 3;\n    positions.updateRange.count = (end - start) * 3;\n    positions.needsUpdate = true;\n    normals.updateRange.offset = start * 3;\n    normals.updateRange.count = (end - start) * 3;\n    normals.needsUpdate = true;\n    colors.updateRange.offset = start * 3;\n    colors.updateRange.count = (end - start) * 3;\n    colors.needsUpdate = true;\n    count = geometry.drawRange.count;\n  }\n\n  return {\n    mesh: mesh,\n    moveTo: moveTo,\n    lineTo: lineTo,\n    setSize: setSize,\n    update: update\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["usage","frustumCulled","lineTo","needsUpdate","offset","TubePainter","__esModule","count","update","value","vertexColors","mesh","moveTo","setSize"]],"~:compiled-at",1630917515124,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$misc$TubePainter.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/misc/TubePainter.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$misc$TubePainter\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.TubePainter = TubePainter;\\n\\nvar _three = require(\\\"three\\\");\\n\\nfunction TubePainter() {\\n  var BUFFER_SIZE = 1000000 * 3;\\n  var positions = new _three.BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\\n  positions.usage = _three.DynamicDrawUsage;\\n  var normals = new _three.BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\\n  normals.usage = _three.DynamicDrawUsage;\\n  var colors = new _three.BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\\n  colors.usage = _three.DynamicDrawUsage;\\n  var geometry = new _three.BufferGeometry();\\n  geometry.setAttribute('position', positions);\\n  geometry.setAttribute('normal', normals);\\n  geometry.setAttribute('color', colors);\\n  geometry.drawRange.count = 0;\\n  var material = new _three.MeshStandardMaterial({\\n    vertexColors: true\\n  });\\n  var mesh = new _three.Mesh(geometry, material);\\n  mesh.frustumCulled = false; //\\n\\n  function getPoints(size) {\\n    var PI2 = Math.PI * 2;\\n    var sides = 10;\\n    var array = [];\\n    var radius = 0.01 * size;\\n\\n    for (var i = 0; i < sides; i++) {\\n      var angle = i / sides * PI2;\\n      array.push(new _three.Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0));\\n    }\\n\\n    return array;\\n  } //\\n\\n\\n  var vector1 = new _three.Vector3();\\n  var vector2 = new _three.Vector3();\\n  var vector3 = new _three.Vector3();\\n  var vector4 = new _three.Vector3();\\n  var color = new _three.Color(0xffffff);\\n  var size = 1;\\n\\n  function stroke(position1, position2, matrix1, matrix2) {\\n    if (position1.distanceToSquared(position2) === 0) return;\\n    var count = geometry.drawRange.count;\\n    var points = getPoints(size);\\n\\n    for (var i = 0, il = points.length; i < il; i++) {\\n      var vertex1 = points[i];\\n      var vertex2 = points[(i + 1) % il]; // positions\\n\\n      vector1.copy(vertex1).applyMatrix4(matrix2).add(position2);\\n      vector2.copy(vertex2).applyMatrix4(matrix2).add(position2);\\n      vector3.copy(vertex2).applyMatrix4(matrix1).add(position1);\\n      vector4.copy(vertex1).applyMatrix4(matrix1).add(position1);\\n      vector1.toArray(positions.array, (count + 0) * 3);\\n      vector2.toArray(positions.array, (count + 1) * 3);\\n      vector4.toArray(positions.array, (count + 2) * 3);\\n      vector2.toArray(positions.array, (count + 3) * 3);\\n      vector3.toArray(positions.array, (count + 4) * 3);\\n      vector4.toArray(positions.array, (count + 5) * 3); // normals\\n\\n      vector1.copy(vertex1).applyMatrix4(matrix2).normalize();\\n      vector2.copy(vertex2).applyMatrix4(matrix2).normalize();\\n      vector3.copy(vertex2).applyMatrix4(matrix1).normalize();\\n      vector4.copy(vertex1).applyMatrix4(matrix1).normalize();\\n      vector1.toArray(normals.array, (count + 0) * 3);\\n      vector2.toArray(normals.array, (count + 1) * 3);\\n      vector4.toArray(normals.array, (count + 2) * 3);\\n      vector2.toArray(normals.array, (count + 3) * 3);\\n      vector3.toArray(normals.array, (count + 4) * 3);\\n      vector4.toArray(normals.array, (count + 5) * 3); // colors\\n\\n      color.toArray(colors.array, (count + 0) * 3);\\n      color.toArray(colors.array, (count + 1) * 3);\\n      color.toArray(colors.array, (count + 2) * 3);\\n      color.toArray(colors.array, (count + 3) * 3);\\n      color.toArray(colors.array, (count + 4) * 3);\\n      color.toArray(colors.array, (count + 5) * 3);\\n      count += 6;\\n    }\\n\\n    geometry.drawRange.count = count;\\n  } //\\n\\n\\n  var up = new _three.Vector3(0, 1, 0);\\n  var point1 = new _three.Vector3();\\n  var point2 = new _three.Vector3();\\n  var matrix1 = new _three.Matrix4();\\n  var matrix2 = new _three.Matrix4();\\n\\n  function moveTo(position) {\\n    point1.copy(position);\\n    matrix1.lookAt(point2, point1, up);\\n    point2.copy(position);\\n    matrix2.copy(matrix1);\\n  }\\n\\n  function lineTo(position) {\\n    point1.copy(position);\\n    matrix1.lookAt(point2, point1, up);\\n    stroke(point1, point2, matrix1, matrix2);\\n    point2.copy(point1);\\n    matrix2.copy(matrix1);\\n  }\\n\\n  function setSize(value) {\\n    size = value;\\n  } //\\n\\n\\n  var count = 0;\\n\\n  function update() {\\n    var start = count;\\n    var end = geometry.drawRange.count;\\n    if (start === end) return;\\n    positions.updateRange.offset = start * 3;\\n    positions.updateRange.count = (end - start) * 3;\\n    positions.needsUpdate = true;\\n    normals.updateRange.offset = start * 3;\\n    normals.updateRange.count = (end - start) * 3;\\n    normals.needsUpdate = true;\\n    colors.updateRange.offset = start * 3;\\n    colors.updateRange.count = (end - start) * 3;\\n    colors.needsUpdate = true;\\n    count = geometry.drawRange.count;\\n  }\\n\\n  return {\\n    mesh: mesh,\\n    moveTo: moveTo,\\n    lineTo: lineTo,\\n    setSize: setSize,\\n    update: update\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"TubePainter\",\"positions\",\"_three\",\"BufferAttribute\",\"Float32Array\",\"BUFFER_SIZE\",\"usage\",\"DynamicDrawUsage\",\"normals\",\"colors\",\"geometry\",\"BufferGeometry\",\"setAttribute\",\"drawRange\",\"count\",\"material\",\"MeshStandardMaterial\",\"vertexColors\",\"mesh\",\"Mesh\",\"frustumCulled\",\"vector1\",\"Vector3\",\"vector2\",\"vector3\",\"vector4\",\"color\",\"Color\",\"size\",\"up\",\"point1\",\"point2\",\"matrix1\",\"Matrix4\",\"matrix2\",\"moveTo\",\"position\",\"copy\",\"lookAt\",\"lineTo\",\"distanceToSquared\",\"PI2\",\"Math\",\"PI\",\"array\",\"radius\",\"i\",\"sides\",\"angle\",\"push\",\"sin\",\"cos\",\"il\",\"length\",\"vertex1\",\"vertex2\",\"applyMatrix4\",\"add\",\"toArray\",\"normalize\",\"setSize\",\"update\",\"start\",\"end\",\"updateRange\",\"offset\",\"needsUpdate\"]\n}\n"]