["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/math/Octree.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$math$Octree=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.Octree=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_Capsule=require(\"module$node_modules$three_stdlib$math$Capsule\");global=function(){function Octree(box){this.triangles=[];this.box=box;this.subTrees=[]}var _v1=new _three.Vector3,_v2=new _three.Vector3,_plane=new _three.Plane,_line1=new _three.Line3,_line2=\nnew _three.Line3,_sphere=new _three.Sphere,_capsule=new _Capsule.Capsule;Object.assign(Octree.prototype,{addTriangle:function(triangle){this.bounds||(this.bounds=new _three.Box3);this.bounds.min.x=Math.min(this.bounds.min.x,triangle.a.x,triangle.b.x,triangle.c.x);this.bounds.min.y=Math.min(this.bounds.min.y,triangle.a.y,triangle.b.y,triangle.c.y);this.bounds.min.z=Math.min(this.bounds.min.z,triangle.a.z,triangle.b.z,triangle.c.z);this.bounds.max.x=Math.max(this.bounds.max.x,triangle.a.x,triangle.b.x,\ntriangle.c.x);this.bounds.max.y=Math.max(this.bounds.max.y,triangle.a.y,triangle.b.y,triangle.c.y);this.bounds.max.z=Math.max(this.bounds.max.z,triangle.a.z,triangle.b.z,triangle.c.z);this.triangles.push(triangle);return this},calcBox:function(){this.box=this.bounds.clone();this.box.min.x-=.01;this.box.min.y-=.01;this.box.min.z-=.01;return this},split:function(level){if(this.box){for(var subTrees=[],halfsize=_v2.copy(this.box.max).sub(this.box.min).multiplyScalar(.5),box,v,x=0;2>x;x++)for(var y=0;2>\ny;y++)for(var z=0;2>z;z++)box=new _three.Box3,v=_v1.set(x,y,z),box.min.copy(this.box.min).add(v.multiply(halfsize)),box.max.copy(box.min).add(halfsize),subTrees.push(new Octree(box));for(;halfsize=this.triangles.pop();)for(box=0;box<subTrees.length;box++)subTrees[box].box.intersectsTriangle(halfsize)&&subTrees[box].triangles.push(halfsize);for(halfsize=0;halfsize<subTrees.length;halfsize++)box=subTrees[halfsize].triangles.length,8<box&&16>level&&subTrees[halfsize].split(level+1),0!=box&&this.subTrees.push(subTrees[halfsize]);\nreturn this}},build:function(){this.calcBox();this.split(0);return this},getRayTriangles:function(ray,triangles){for(var i=0;i<this.subTrees.length;i++){var subTree=this.subTrees[i];if(ray.intersectsBox(subTree.box))if(0<subTree.triangles.length)for(var j=0;j<subTree.triangles.length;j++)-1===triangles.indexOf(subTree.triangles[j])&&triangles.push(subTree.triangles[j]);else subTree.getRayTriangles(ray,triangles)}return triangles},triangleCapsuleIntersect:function(capsule,triangle){triangle.getPlane(_plane);\nvar line1=_plane.distanceToPoint(capsule.start)-capsule.radius;var d2=_plane.distanceToPoint(capsule.end)-capsule.radius;if(0<line1&&0<d2||line1<-capsule.radius&&d2<-capsule.radius)return!1;var delta=Math.abs(line1/(Math.abs(line1)+Math.abs(d2)));delta=_v1.copy(capsule.start).lerp(capsule.end,delta);if(triangle.containsPoint(delta))return{normal:_plane.normal.clone(),point:delta.clone(),depth:Math.abs(Math.min(line1,d2))};d2=capsule.radius*capsule.radius;line1=_line1.set(capsule.start,capsule.end);\ntriangle=[[triangle.a,triangle.b],[triangle.b,triangle.c],[triangle.c,triangle.a]];for(delta=0;delta<triangle.length;delta++){var point1=_line2.set(triangle[delta][0],triangle[delta][1]);var point2=capsule.lineLineMinimumPoints(line1,point1);point1=point2;point1=Array.isArray(point1)?point1:void 0;if(!point1)if(point1=void 0,Symbol.iterator in Object(point2)||\"[object Arguments]\"===Object.prototype.toString.call(point2)){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _i=point2[Symbol.iterator]();!(_n=\n(point1=_i.next()).done)&&(_arr.push(point1.value),2!==_arr.length);_n=!0);}catch(err){_d=!0,_e=err}finally{try{if(!_n&&null!=_i[\"return\"])_i[\"return\"]()}finally{if(_d)throw _e;}}point1=_arr}else point1=void 0;if(!point1)throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");point2=point1;point1=point2[0];point2=point2[1];if(point1.distanceToSquared(point2)<d2)return{normal:point1.clone().sub(point2).normalize(),point:point2.clone(),depth:capsule.radius-point1.distanceTo(point2)}}return!1},\ntriangleSphereIntersect:function(sphere,triangle){triangle.getPlane(_plane);if(!sphere.intersectsPlane(_plane))return!1;var depth=Math.abs(_plane.distanceToSphere(sphere));depth=sphere.radius*sphere.radius-depth*depth;var plainPoint=_plane.projectPoint(sphere.center,_v1);if(triangle.containsPoint(sphere.center))return{normal:_plane.normal.clone(),point:plainPoint.clone(),depth:Math.abs(_plane.distanceToSphere(sphere))};triangle=[[triangle.a,triangle.b],[triangle.b,triangle.c],[triangle.c,triangle.a]];\nfor(var i=0;i<triangle.length;i++){_line1.set(triangle[i][0],triangle[i][1]);_line1.closestPointToPoint(plainPoint,!0,_v2);var d=_v2.distanceToSquared(sphere.center);if(d<depth)return{normal:sphere.center.clone().sub(_v2).normalize(),point:_v2.clone(),depth:sphere.radius-Math.sqrt(d)}}return!1},getSphereTriangles:function(sphere,triangles){for(var i=0;i<this.subTrees.length;i++){var subTree=this.subTrees[i];if(sphere.intersectsBox(subTree.box))if(0<subTree.triangles.length)for(var j=0;j<subTree.triangles.length;j++)-1===\ntriangles.indexOf(subTree.triangles[j])&&triangles.push(subTree.triangles[j]);else subTree.getSphereTriangles(sphere,triangles)}},getCapsuleTriangles:function(capsule,triangles){for(var i=0;i<this.subTrees.length;i++){var subTree=this.subTrees[i];if(capsule.intersectsBox(subTree.box))if(0<subTree.triangles.length)for(var j=0;j<subTree.triangles.length;j++)-1===triangles.indexOf(subTree.triangles[j])&&triangles.push(subTree.triangles[j]);else subTree.getCapsuleTriangles(capsule,triangles)}},sphereIntersect:function(sphere){_sphere.copy(sphere);\nvar triangles=[],result,hit=!1;this.getSphereTriangles(sphere,triangles);for(var i=0;i<triangles.length;i++)if(result=this.triangleSphereIntersect(_sphere,triangles[i]))hit=!0,_sphere.center.add(result.normal.multiplyScalar(result.depth));return hit?(sphere=_sphere.center.clone().sub(sphere.center),triangles=sphere.length(),{normal:sphere.normalize(),depth:triangles}):!1},capsuleIntersect:function(capsule){_capsule.copy(capsule);var triangles=[],result,hit=!1;this.getCapsuleTriangles(_capsule,triangles);\nfor(var i=0;i<triangles.length;i++)if(result=this.triangleCapsuleIntersect(_capsule,triangles[i]))hit=!0,_capsule.translate(result.normal.multiplyScalar(result.depth));return hit?(capsule=_capsule.getCenter(new _three.Vector3).sub(capsule.getCenter(_v1)),triangles=capsule.length(),{normal:capsule.normalize(),depth:triangles}):!1},rayIntersect:function(ray){if(0!==ray.direction.length()){var triangles=[],distance=1E100,result;this.getRayTriangles(ray,triangles);for(var i=0;i<triangles.length;i++)if(result=\nray.intersectTriangle(triangles[i].a,triangles[i].b,triangles[i].c,!0,_v1)){var newdistance=result.sub(ray.origin).length();if(distance>newdistance){var position=result.clone().add(ray.origin);distance=newdistance;var triangle=triangles[i]}}return 1E100>distance?{distance,triangle,position}:!1}},fromGraphNode:function(group){var _this=this;group.traverse(function(obj){if(\"Mesh\"===obj.type){obj.updateMatrix();obj.updateWorldMatrix();var isTemp=!1;if(obj.geometry.index){isTemp=!0;var geometry=obj.geometry.clone().toNonIndexed()}else geometry=\nobj.geometry;var positions=geometry.attributes.position.array;obj=obj.matrixWorld;for(var i=0;i<positions.length;i+=9){var v1=new _three.Vector3(positions[i],positions[i+1],positions[i+2]),v2=new _three.Vector3(positions[i+3],positions[i+4],positions[i+5]),v3=new _three.Vector3(positions[i+6],positions[i+7],positions[i+8]);v1.applyMatrix4(obj);v2.applyMatrix4(obj);v3.applyMatrix4(obj);_this.addTriangle(new _three.Triangle(v1,v2,v3))}isTemp&&geometry.dispose()}});this.build();return this}});return Octree}();\nexports.Octree=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$math$Octree\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Octree = void 0;\n\nvar _three = require(\"three\");\n\nvar _Capsule = require(\"./Capsule.js\");\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar Octree = function () {\n  var _v1 = new _three.Vector3();\n\n  var _v2 = new _three.Vector3();\n\n  var _plane = new _three.Plane();\n\n  var _line1 = new _three.Line3();\n\n  var _line2 = new _three.Line3();\n\n  var _sphere = new _three.Sphere();\n\n  var _capsule = new _Capsule.Capsule();\n\n  function Octree(box) {\n    this.triangles = [];\n    this.box = box;\n    this.subTrees = [];\n  }\n\n  Object.assign(Octree.prototype, {\n    addTriangle: function addTriangle(triangle) {\n      if (!this.bounds) this.bounds = new _three.Box3();\n      this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.triangles.push(triangle);\n      return this;\n    },\n    calcBox: function calcBox() {\n      this.box = this.bounds.clone(); // offset small ammount to account for regular grid\n\n      this.box.min.x -= 0.01;\n      this.box.min.y -= 0.01;\n      this.box.min.z -= 0.01;\n      return this;\n    },\n    split: function split(level) {\n      if (!this.box) return;\n\n      var subTrees = [],\n          halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5),\n          box,\n          v,\n          triangle;\n\n      for (var x = 0; x < 2; x++) {\n        for (var y = 0; y < 2; y++) {\n          for (var z = 0; z < 2; z++) {\n            box = new _three.Box3();\n            v = _v1.set(x, y, z);\n            box.min.copy(this.box.min).add(v.multiply(halfsize));\n            box.max.copy(box.min).add(halfsize);\n            subTrees.push(new Octree(box));\n          }\n        }\n      }\n\n      while (triangle = this.triangles.pop()) {\n        for (var i = 0; i < subTrees.length; i++) {\n          if (subTrees[i].box.intersectsTriangle(triangle)) {\n            subTrees[i].triangles.push(triangle);\n          }\n        }\n      }\n\n      for (var _i = 0; _i < subTrees.length; _i++) {\n        var len = subTrees[_i].triangles.length;\n\n        if (len > 8 && level < 16) {\n          subTrees[_i].split(level + 1);\n        }\n\n        if (len != 0) {\n          this.subTrees.push(subTrees[_i]);\n        }\n      }\n\n      return this;\n    },\n    build: function build() {\n      this.calcBox();\n      this.split(0);\n      return this;\n    },\n    getRayTriangles: function getRayTriangles(ray, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!ray.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getRayTriangles(ray, triangles);\n        }\n      }\n\n      return triangles;\n    },\n    triangleCapsuleIntersect: function triangleCapsuleIntersect(capsule, triangle) {\n      var point1, point2, line1, line2;\n      triangle.getPlane(_plane);\n      var d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\n      var d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\n\n      if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\n        return false;\n      }\n\n      var delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\n\n      var intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\n\n      if (triangle.containsPoint(intersectPoint)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: intersectPoint.clone(),\n          depth: Math.abs(Math.min(d1, d2))\n        };\n      }\n\n      var r2 = capsule.radius * capsule.radius;\n      line1 = _line1.set(capsule.start, capsule.end);\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n\n      for (var i = 0; i < lines.length; i++) {\n        line2 = _line2.set(lines[i][0], lines[i][1]);\n\n        var _capsule$lineLineMini = capsule.lineLineMinimumPoints(line1, line2);\n\n        var _capsule$lineLineMini2 = _slicedToArray(_capsule$lineLineMini, 2);\n\n        point1 = _capsule$lineLineMini2[0];\n        point2 = _capsule$lineLineMini2[1];\n\n        if (point1.distanceToSquared(point2) < r2) {\n          return {\n            normal: point1.clone().sub(point2).normalize(),\n            point: point2.clone(),\n            depth: capsule.radius - point1.distanceTo(point2)\n          };\n        }\n      }\n\n      return false;\n    },\n    triangleSphereIntersect: function triangleSphereIntersect(sphere, triangle) {\n      triangle.getPlane(_plane);\n      if (!sphere.intersectsPlane(_plane)) return false;\n      var depth = Math.abs(_plane.distanceToSphere(sphere));\n      var r2 = sphere.radius * sphere.radius - depth * depth;\n\n      var plainPoint = _plane.projectPoint(sphere.center, _v1);\n\n      if (triangle.containsPoint(sphere.center)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: plainPoint.clone(),\n          depth: Math.abs(_plane.distanceToSphere(sphere))\n        };\n      }\n\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n\n      for (var i = 0; i < lines.length; i++) {\n        _line1.set(lines[i][0], lines[i][1]);\n\n        _line1.closestPointToPoint(plainPoint, true, _v2);\n\n        var d = _v2.distanceToSquared(sphere.center);\n\n        if (d < r2) {\n          return {\n            normal: sphere.center.clone().sub(_v2).normalize(),\n            point: _v2.clone(),\n            depth: sphere.radius - Math.sqrt(d)\n          };\n        }\n      }\n\n      return false;\n    },\n    getSphereTriangles: function getSphereTriangles(sphere, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!sphere.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getSphereTriangles(sphere, triangles);\n        }\n      }\n    },\n    getCapsuleTriangles: function getCapsuleTriangles(capsule, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!capsule.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getCapsuleTriangles(capsule, triangles);\n        }\n      }\n    },\n    sphereIntersect: function sphereIntersect(sphere) {\n      _sphere.copy(sphere);\n\n      var triangles = [],\n          result,\n          hit = false;\n      this.getSphereTriangles(sphere, triangles);\n\n      for (var i = 0; i < triangles.length; i++) {\n        if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\n          hit = true;\n\n          _sphere.center.add(result.normal.multiplyScalar(result.depth));\n        }\n      }\n\n      if (hit) {\n        var collisionVector = _sphere.center.clone().sub(sphere.center);\n\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n\n      return false;\n    },\n    capsuleIntersect: function capsuleIntersect(capsule) {\n      _capsule.copy(capsule);\n\n      var triangles = [],\n          result,\n          hit = false;\n      this.getCapsuleTriangles(_capsule, triangles);\n\n      for (var i = 0; i < triangles.length; i++) {\n        if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\n          hit = true;\n\n          _capsule.translate(result.normal.multiplyScalar(result.depth));\n        }\n      }\n\n      if (hit) {\n        var collisionVector = _capsule.getCenter(new _three.Vector3()).sub(capsule.getCenter(_v1));\n\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n\n      return false;\n    },\n    rayIntersect: function rayIntersect(ray) {\n      if (ray.direction.length() === 0) return;\n      var triangles = [],\n          triangle,\n          position,\n          distance = 1e100,\n          result;\n      this.getRayTriangles(ray, triangles);\n\n      for (var i = 0; i < triangles.length; i++) {\n        result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\n\n        if (result) {\n          var newdistance = result.sub(ray.origin).length();\n\n          if (distance > newdistance) {\n            position = result.clone().add(ray.origin);\n            distance = newdistance;\n            triangle = triangles[i];\n          }\n        }\n      }\n\n      return distance < 1e100 ? {\n        distance: distance,\n        triangle: triangle,\n        position: position\n      } : false;\n    },\n    fromGraphNode: function fromGraphNode(group) {\n      var _this = this;\n\n      group.traverse(function (obj) {\n        if (obj.type === 'Mesh') {\n          obj.updateMatrix();\n          obj.updateWorldMatrix();\n          var geometry,\n              isTemp = false;\n\n          if (obj.geometry.index) {\n            isTemp = true;\n            geometry = obj.geometry.clone().toNonIndexed();\n          } else {\n            geometry = obj.geometry;\n          }\n\n          var positions = geometry.attributes.position.array;\n          var transform = obj.matrixWorld;\n\n          for (var i = 0; i < positions.length; i += 9) {\n            var v1 = new _three.Vector3(positions[i], positions[i + 1], positions[i + 2]);\n            var v2 = new _three.Vector3(positions[i + 3], positions[i + 4], positions[i + 5]);\n            var v3 = new _three.Vector3(positions[i + 6], positions[i + 7], positions[i + 8]);\n            v1.applyMatrix4(transform);\n            v2.applyMatrix4(transform);\n            v3.applyMatrix4(transform);\n\n            _this.addTriangle(new _three.Triangle(v1, v2, v3));\n          }\n\n          if (isTemp) {\n            geometry.dispose();\n          }\n        }\n      });\n      this.build();\n      return this;\n    }\n  });\n  return Octree;\n}();\n\nexports.Octree = Octree;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js","~$module$node_modules$three_stdlib$math$Capsule"]],"~:properties",["^5",["z","sphereIntersect","capsuleIntersect","x","__esModule","calcBox","triangleCapsuleIntersect","box","Octree","normal","position","getSphereTriangles","value","build","split","distance","triangle","y","triangles","depth","bounds","triangleSphereIntersect","subTrees","addTriangle","rayIntersect","getCapsuleTriangles","getRayTriangles","point","fromGraphNode"]],"~:compiled-at",1630917515424,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$math$Octree.js\",\n\"lineCount\":16,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/math/Octree.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$math$Octree\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.Octree = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _Capsule = require(\\\"./Capsule.js\\\");\\n\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance\\\"); }\\n\\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \\\"[object Arguments]\\\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nvar Octree = function () {\\n  var _v1 = new _three.Vector3();\\n\\n  var _v2 = new _three.Vector3();\\n\\n  var _plane = new _three.Plane();\\n\\n  var _line1 = new _three.Line3();\\n\\n  var _line2 = new _three.Line3();\\n\\n  var _sphere = new _three.Sphere();\\n\\n  var _capsule = new _Capsule.Capsule();\\n\\n  function Octree(box) {\\n    this.triangles = [];\\n    this.box = box;\\n    this.subTrees = [];\\n  }\\n\\n  Object.assign(Octree.prototype, {\\n    addTriangle: function addTriangle(triangle) {\\n      if (!this.bounds) this.bounds = new _three.Box3();\\n      this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\\n      this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\\n      this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\\n      this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\\n      this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\\n      this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\\n      this.triangles.push(triangle);\\n      return this;\\n    },\\n    calcBox: function calcBox() {\\n      this.box = this.bounds.clone(); // offset small ammount to account for regular grid\\n\\n      this.box.min.x -= 0.01;\\n      this.box.min.y -= 0.01;\\n      this.box.min.z -= 0.01;\\n      return this;\\n    },\\n    split: function split(level) {\\n      if (!this.box) return;\\n\\n      var subTrees = [],\\n          halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5),\\n          box,\\n          v,\\n          triangle;\\n\\n      for (var x = 0; x < 2; x++) {\\n        for (var y = 0; y < 2; y++) {\\n          for (var z = 0; z < 2; z++) {\\n            box = new _three.Box3();\\n            v = _v1.set(x, y, z);\\n            box.min.copy(this.box.min).add(v.multiply(halfsize));\\n            box.max.copy(box.min).add(halfsize);\\n            subTrees.push(new Octree(box));\\n          }\\n        }\\n      }\\n\\n      while (triangle = this.triangles.pop()) {\\n        for (var i = 0; i < subTrees.length; i++) {\\n          if (subTrees[i].box.intersectsTriangle(triangle)) {\\n            subTrees[i].triangles.push(triangle);\\n          }\\n        }\\n      }\\n\\n      for (var _i = 0; _i < subTrees.length; _i++) {\\n        var len = subTrees[_i].triangles.length;\\n\\n        if (len > 8 && level < 16) {\\n          subTrees[_i].split(level + 1);\\n        }\\n\\n        if (len != 0) {\\n          this.subTrees.push(subTrees[_i]);\\n        }\\n      }\\n\\n      return this;\\n    },\\n    build: function build() {\\n      this.calcBox();\\n      this.split(0);\\n      return this;\\n    },\\n    getRayTriangles: function getRayTriangles(ray, triangles) {\\n      for (var i = 0; i < this.subTrees.length; i++) {\\n        var subTree = this.subTrees[i];\\n        if (!ray.intersectsBox(subTree.box)) continue;\\n\\n        if (subTree.triangles.length > 0) {\\n          for (var j = 0; j < subTree.triangles.length; j++) {\\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\\n          }\\n        } else {\\n          subTree.getRayTriangles(ray, triangles);\\n        }\\n      }\\n\\n      return triangles;\\n    },\\n    triangleCapsuleIntersect: function triangleCapsuleIntersect(capsule, triangle) {\\n      var point1, point2, line1, line2;\\n      triangle.getPlane(_plane);\\n      var d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\\n      var d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\\n\\n      if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\\n        return false;\\n      }\\n\\n      var delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\\n\\n      var intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\\n\\n      if (triangle.containsPoint(intersectPoint)) {\\n        return {\\n          normal: _plane.normal.clone(),\\n          point: intersectPoint.clone(),\\n          depth: Math.abs(Math.min(d1, d2))\\n        };\\n      }\\n\\n      var r2 = capsule.radius * capsule.radius;\\n      line1 = _line1.set(capsule.start, capsule.end);\\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\\n\\n      for (var i = 0; i < lines.length; i++) {\\n        line2 = _line2.set(lines[i][0], lines[i][1]);\\n\\n        var _capsule$lineLineMini = capsule.lineLineMinimumPoints(line1, line2);\\n\\n        var _capsule$lineLineMini2 = _slicedToArray(_capsule$lineLineMini, 2);\\n\\n        point1 = _capsule$lineLineMini2[0];\\n        point2 = _capsule$lineLineMini2[1];\\n\\n        if (point1.distanceToSquared(point2) < r2) {\\n          return {\\n            normal: point1.clone().sub(point2).normalize(),\\n            point: point2.clone(),\\n            depth: capsule.radius - point1.distanceTo(point2)\\n          };\\n        }\\n      }\\n\\n      return false;\\n    },\\n    triangleSphereIntersect: function triangleSphereIntersect(sphere, triangle) {\\n      triangle.getPlane(_plane);\\n      if (!sphere.intersectsPlane(_plane)) return false;\\n      var depth = Math.abs(_plane.distanceToSphere(sphere));\\n      var r2 = sphere.radius * sphere.radius - depth * depth;\\n\\n      var plainPoint = _plane.projectPoint(sphere.center, _v1);\\n\\n      if (triangle.containsPoint(sphere.center)) {\\n        return {\\n          normal: _plane.normal.clone(),\\n          point: plainPoint.clone(),\\n          depth: Math.abs(_plane.distanceToSphere(sphere))\\n        };\\n      }\\n\\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\\n\\n      for (var i = 0; i < lines.length; i++) {\\n        _line1.set(lines[i][0], lines[i][1]);\\n\\n        _line1.closestPointToPoint(plainPoint, true, _v2);\\n\\n        var d = _v2.distanceToSquared(sphere.center);\\n\\n        if (d < r2) {\\n          return {\\n            normal: sphere.center.clone().sub(_v2).normalize(),\\n            point: _v2.clone(),\\n            depth: sphere.radius - Math.sqrt(d)\\n          };\\n        }\\n      }\\n\\n      return false;\\n    },\\n    getSphereTriangles: function getSphereTriangles(sphere, triangles) {\\n      for (var i = 0; i < this.subTrees.length; i++) {\\n        var subTree = this.subTrees[i];\\n        if (!sphere.intersectsBox(subTree.box)) continue;\\n\\n        if (subTree.triangles.length > 0) {\\n          for (var j = 0; j < subTree.triangles.length; j++) {\\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\\n          }\\n        } else {\\n          subTree.getSphereTriangles(sphere, triangles);\\n        }\\n      }\\n    },\\n    getCapsuleTriangles: function getCapsuleTriangles(capsule, triangles) {\\n      for (var i = 0; i < this.subTrees.length; i++) {\\n        var subTree = this.subTrees[i];\\n        if (!capsule.intersectsBox(subTree.box)) continue;\\n\\n        if (subTree.triangles.length > 0) {\\n          for (var j = 0; j < subTree.triangles.length; j++) {\\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\\n          }\\n        } else {\\n          subTree.getCapsuleTriangles(capsule, triangles);\\n        }\\n      }\\n    },\\n    sphereIntersect: function sphereIntersect(sphere) {\\n      _sphere.copy(sphere);\\n\\n      var triangles = [],\\n          result,\\n          hit = false;\\n      this.getSphereTriangles(sphere, triangles);\\n\\n      for (var i = 0; i < triangles.length; i++) {\\n        if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\\n          hit = true;\\n\\n          _sphere.center.add(result.normal.multiplyScalar(result.depth));\\n        }\\n      }\\n\\n      if (hit) {\\n        var collisionVector = _sphere.center.clone().sub(sphere.center);\\n\\n        var depth = collisionVector.length();\\n        return {\\n          normal: collisionVector.normalize(),\\n          depth: depth\\n        };\\n      }\\n\\n      return false;\\n    },\\n    capsuleIntersect: function capsuleIntersect(capsule) {\\n      _capsule.copy(capsule);\\n\\n      var triangles = [],\\n          result,\\n          hit = false;\\n      this.getCapsuleTriangles(_capsule, triangles);\\n\\n      for (var i = 0; i < triangles.length; i++) {\\n        if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\\n          hit = true;\\n\\n          _capsule.translate(result.normal.multiplyScalar(result.depth));\\n        }\\n      }\\n\\n      if (hit) {\\n        var collisionVector = _capsule.getCenter(new _three.Vector3()).sub(capsule.getCenter(_v1));\\n\\n        var depth = collisionVector.length();\\n        return {\\n          normal: collisionVector.normalize(),\\n          depth: depth\\n        };\\n      }\\n\\n      return false;\\n    },\\n    rayIntersect: function rayIntersect(ray) {\\n      if (ray.direction.length() === 0) return;\\n      var triangles = [],\\n          triangle,\\n          position,\\n          distance = 1e100,\\n          result;\\n      this.getRayTriangles(ray, triangles);\\n\\n      for (var i = 0; i < triangles.length; i++) {\\n        result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\\n\\n        if (result) {\\n          var newdistance = result.sub(ray.origin).length();\\n\\n          if (distance > newdistance) {\\n            position = result.clone().add(ray.origin);\\n            distance = newdistance;\\n            triangle = triangles[i];\\n          }\\n        }\\n      }\\n\\n      return distance < 1e100 ? {\\n        distance: distance,\\n        triangle: triangle,\\n        position: position\\n      } : false;\\n    },\\n    fromGraphNode: function fromGraphNode(group) {\\n      var _this = this;\\n\\n      group.traverse(function (obj) {\\n        if (obj.type === 'Mesh') {\\n          obj.updateMatrix();\\n          obj.updateWorldMatrix();\\n          var geometry,\\n              isTemp = false;\\n\\n          if (obj.geometry.index) {\\n            isTemp = true;\\n            geometry = obj.geometry.clone().toNonIndexed();\\n          } else {\\n            geometry = obj.geometry;\\n          }\\n\\n          var positions = geometry.attributes.position.array;\\n          var transform = obj.matrixWorld;\\n\\n          for (var i = 0; i < positions.length; i += 9) {\\n            var v1 = new _three.Vector3(positions[i], positions[i + 1], positions[i + 2]);\\n            var v2 = new _three.Vector3(positions[i + 3], positions[i + 4], positions[i + 5]);\\n            var v3 = new _three.Vector3(positions[i + 6], positions[i + 7], positions[i + 8]);\\n            v1.applyMatrix4(transform);\\n            v2.applyMatrix4(transform);\\n            v3.applyMatrix4(transform);\\n\\n            _this.addTriangle(new _three.Triangle(v1, v2, v3));\\n          }\\n\\n          if (isTemp) {\\n            geometry.dispose();\\n          }\\n        }\\n      });\\n      this.build();\\n      return this;\\n    }\\n  });\\n  return Octree;\\n}();\\n\\nexports.Octree = Octree;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"Octree\",\"_three\",\"_Capsule\",\"box\",\"triangles\",\"subTrees\",\"_v1\",\"Vector3\",\"_v2\",\"_plane\",\"Plane\",\"_line1\",\"Line3\",\"_line2\",\"_sphere\",\"Sphere\",\"_capsule\",\"Capsule\",\"assign\",\"prototype\",\"addTriangle\",\"triangle\",\"bounds\",\"Box3\",\"min\",\"x\",\"Math\",\"a\",\"b\",\"c\",\"y\",\"z\",\"max\",\"push\",\"calcBox\",\"clone\",\"split\",\"level\",\"halfsize\",\"copy\",\"sub\",\"multiplyScalar\",\"v\",\"set\",\"add\",\"multiply\",\"pop\",\"i\",\"length\",\"intersectsTriangle\",\"_i\",\"len\",\"build\",\"getRayTriangles\",\"ray\",\"subTree\",\"intersectsBox\",\"j\",\"indexOf\",\"triangleCapsuleIntersect\",\"capsule\",\"getPlane\",\"d1\",\"distanceToPoint\",\"start\",\"radius\",\"d2\",\"end\",\"delta\",\"abs\",\"intersectPoint\",\"lerp\",\"containsPoint\",\"normal\",\"point\",\"depth\",\"r2\",\"line1\",\"lines\",\"line2\",\"_capsule$lineLineMini\",\"lineLineMinimumPoints\",\"Array\",\"isArray\",\"arr\",\"_s\",\"Symbol\",\"iterator\",\"toString\",\"call\",\"_arr\",\"_n\",\"_d\",\"_e\",\"undefined\",\"done\",\"next\",\"err\",\"TypeError\",\"point1\",\"_capsule$lineLineMini2\",\"point2\",\"distanceToSquared\",\"normalize\",\"distanceTo\",\"triangleSphereIntersect\",\"sphere\",\"intersectsPlane\",\"distanceToSphere\",\"plainPoint\",\"projectPoint\",\"center\",\"closestPointToPoint\",\"d\",\"sqrt\",\"getSphereTriangles\",\"getCapsuleTriangles\",\"sphereIntersect\",\"result\",\"hit\",\"collisionVector\",\"capsuleIntersect\",\"translate\",\"getCenter\",\"rayIntersect\",\"direction\",\"distance\",\"intersectTriangle\",\"newdistance\",\"origin\",\"position\",\"fromGraphNode\",\"group\",\"_this\",\"traverse\",\"obj\",\"type\",\"updateMatrix\",\"updateWorldMatrix\",\"isTemp\",\"geometry\",\"index\",\"toNonIndexed\",\"positions\",\"attributes\",\"array\",\"transform\",\"matrixWorld\",\"v1\",\"v2\",\"v3\",\"applyMatrix4\",\"Triangle\",\"dispose\"]\n}\n"]