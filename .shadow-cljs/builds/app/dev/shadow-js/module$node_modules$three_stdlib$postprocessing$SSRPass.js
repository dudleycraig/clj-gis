["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/postprocessing/SSRPass.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$postprocessing$SSRPass=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.SSRPass=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_Pass=require(\"module$node_modules$three_stdlib$postprocessing$Pass\"),_SSRShader=require(\"module$node_modules$three_stdlib$shaders$SSRShader\"),_CopyShader=require(\"module$node_modules$three_stdlib$shaders$CopyShader\"),SSRPass=function(_ref){var renderer=\n_ref.renderer,scene=_ref.scene,camera=_ref.camera,width=_ref.width,height=_ref.height,selects=_ref.selects,encoding=_ref.encoding,_ref$isPerspectiveCam=_ref.isPerspectiveCamera;_ref$isPerspectiveCam=void 0===_ref$isPerspectiveCam?!0:_ref$isPerspectiveCam;var _ref$isBouncing=_ref.isBouncing;_ref$isBouncing=void 0===_ref$isBouncing?!1:_ref$isBouncing;var _ref$morphTargets=_ref.morphTargets;_ref$morphTargets=void 0===_ref$morphTargets?!1:_ref$morphTargets;_ref=_ref.groundReflector;this.width=void 0!==\nwidth?width:512;this.height=void 0!==height?height:512;this.clear=!0;this.renderer=renderer;this.scene=scene;this.camera=camera;this.groundReflector=_ref;this.opacity=_SSRShader.SSRShader.uniforms.opacity.value;this.output=0;this.maxDistance=_SSRShader.SSRShader.uniforms.maxDistance.value;this.surfDist=_SSRShader.SSRShader.uniforms.surfDist.value;this.encoding=encoding;this.tempColor=new _three.Color;this._selects=selects;this.isSelective=Array.isArray(this._selects);Object.defineProperty(this,\"selects\",\n{get:function(){return this._selects},set:function(val){this._selects!==val&&(this._selects=val,Array.isArray(val)?(this.isSelective=!0,this.ssrMaterial.defines.isSelective=!0):(this.isSelective=!1,this.ssrMaterial.defines.isSelective=!1),this.ssrMaterial.needsUpdate=!0)}});this._isBouncing=_ref$isBouncing;Object.defineProperty(this,\"isBouncing\",{get:function(){return this._isBouncing},set:function(val){this._isBouncing!==val&&(this._isBouncing=val,this.ssrMaterial.uniforms.tDiffuse.value=val?this.prevRenderTarget.texture:\nthis.beautyRenderTarget.texture)}});this.isBlur=!0;this._isDistanceAttenuation=_SSRShader.SSRShader.defines.isDistanceAttenuation;Object.defineProperty(this,\"isDistanceAttenuation\",{get:function(){return this._isDistanceAttenuation},set:function(val){this._isDistanceAttenuation!==val&&(this._isDistanceAttenuation=val,this.ssrMaterial.defines.isDistanceAttenuation=val,this.ssrMaterial.needsUpdate=!0)}});this._isFresnel=_SSRShader.SSRShader.defines.isFresnel;Object.defineProperty(this,\"isFresnel\",{get:function(){return this._isFresnel},\nset:function(val){this._isFresnel!==val&&(this._isFresnel=val,this.ssrMaterial.defines.isFresnel=val,this.ssrMaterial.needsUpdate=!0)}});this._isInfiniteThick=_SSRShader.SSRShader.defines.isInfiniteThick;Object.defineProperty(this,\"isInfiniteThick\",{get:function(){return this._isInfiniteThick},set:function(val){this._isInfiniteThick!==val&&(this._isInfiniteThick=val,this.ssrMaterial.defines.isInfiniteThick=val,this.ssrMaterial.needsUpdate=!0)}});this.thickTolerance=_SSRShader.SSRShader.uniforms.thickTolerance.value;\nrenderer=new _three.DepthTexture;renderer.type=_three.UnsignedShortType;renderer.minFilter=_three.NearestFilter;renderer.maxFilter=_three.NearestFilter;this.beautyRenderTarget=new _three.WebGLRenderTarget(this.width,this.height,{minFilter:_three.LinearFilter,magFilter:_three.LinearFilter,format:_three.RGBAFormat,depthTexture:renderer,depthBuffer:!0});this.prevRenderTarget=new _three.WebGLRenderTarget(this.width,this.height,{minFilter:_three.LinearFilter,magFilter:_three.LinearFilter,format:_three.RGBAFormat});\nthis.normalRenderTarget=new _three.WebGLRenderTarget(this.width,this.height,{minFilter:_three.NearestFilter,magFilter:_three.NearestFilter,format:_three.RGBAFormat,type:_three.HalfFloatType});this.metalnessRenderTarget=new _three.WebGLRenderTarget(this.width,this.height,{minFilter:_three.NearestFilter,magFilter:_three.NearestFilter,format:_three.RGBAFormat});this.ssrRenderTarget=new _three.WebGLRenderTarget(this.width,this.height,{minFilter:_three.LinearFilter,magFilter:_three.LinearFilter,format:_three.RGBAFormat});\nthis.blurRenderTarget=this.ssrRenderTarget.clone();this.blurRenderTarget2=this.ssrRenderTarget.clone();void 0===_SSRShader.SSRShader&&console.error(\"THREE.SSRPass: The pass relies on SSRShader.\");this.ssrMaterial=new _three.ShaderMaterial({defines:Object.assign({MAX_STEP:Math.sqrt(window.innerWidth*window.innerWidth+window.innerHeight*window.innerHeight)},_SSRShader.SSRShader.defines),uniforms:_three.UniformsUtils.clone(_SSRShader.SSRShader.uniforms),vertexShader:_SSRShader.SSRShader.vertexShader,\nfragmentShader:_SSRShader.SSRShader.fragmentShader,blending:_three.NoBlending});_ref$isPerspectiveCam||(this.ssrMaterial.defines.isPerspectiveCamera=_ref$isPerspectiveCam,this.ssrMaterial.needsUpdate=!0);this.ssrMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture;this.ssrMaterial.uniforms.tNormal.value=this.normalRenderTarget.texture;this.ssrMaterial.defines.isSelective=this.isSelective;this.ssrMaterial.needsUpdate=!0;this.ssrMaterial.uniforms.tMetalness.value=this.metalnessRenderTarget.texture;\nthis.ssrMaterial.uniforms.tDepth.value=this.beautyRenderTarget.depthTexture;this.ssrMaterial.uniforms.cameraNear.value=this.camera.near;this.ssrMaterial.uniforms.cameraFar.value=this.camera.far;this.ssrMaterial.uniforms.surfDist.value=this.surfDist;this.ssrMaterial.uniforms.resolution.value.set(this.width,this.height);this.ssrMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix);this.ssrMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse);\nthis.normalMaterial=new _three.MeshNormalMaterial({morphTargets:_ref$morphTargets});this.normalMaterial.blending=_three.NoBlending;this.metalnessOnMaterial=new _three.MeshBasicMaterial({color:\"white\"});this.metalnessOffMaterial=new _three.MeshBasicMaterial({color:\"black\"});this.blurMaterial=new _three.ShaderMaterial({defines:Object.assign({},_SSRShader.SSRBlurShader.defines),uniforms:_three.UniformsUtils.clone(_SSRShader.SSRBlurShader.uniforms),vertexShader:_SSRShader.SSRBlurShader.vertexShader,fragmentShader:_SSRShader.SSRBlurShader.fragmentShader});\nthis.blurMaterial.uniforms.tDiffuse.value=this.ssrRenderTarget.texture;this.blurMaterial.uniforms.resolution.value.set(this.width,this.height);this.blurMaterial2=new _three.ShaderMaterial({defines:Object.assign({},_SSRShader.SSRBlurShader.defines),uniforms:_three.UniformsUtils.clone(_SSRShader.SSRBlurShader.uniforms),vertexShader:_SSRShader.SSRBlurShader.vertexShader,fragmentShader:_SSRShader.SSRBlurShader.fragmentShader});this.blurMaterial2.uniforms.tDiffuse.value=this.blurRenderTarget.texture;this.blurMaterial2.uniforms.resolution.value.set(this.width,\nthis.height);this.depthRenderMaterial=new _three.ShaderMaterial({defines:Object.assign({},_SSRShader.SSRDepthShader.defines),uniforms:_three.UniformsUtils.clone(_SSRShader.SSRDepthShader.uniforms),vertexShader:_SSRShader.SSRDepthShader.vertexShader,fragmentShader:_SSRShader.SSRDepthShader.fragmentShader,blending:_three.NoBlending});this.depthRenderMaterial.uniforms.tDepth.value=this.beautyRenderTarget.depthTexture;this.depthRenderMaterial.uniforms.cameraNear.value=this.camera.near;this.depthRenderMaterial.uniforms.cameraFar.value=\nthis.camera.far;this.copyMaterial=new _three.ShaderMaterial({uniforms:_three.UniformsUtils.clone(_CopyShader.CopyShader.uniforms),vertexShader:_CopyShader.CopyShader.vertexShader,fragmentShader:_CopyShader.CopyShader.fragmentShader,transparent:!0,depthTest:!1,depthWrite:!1,blendSrc:_three.SrcAlphaFactor,blendDst:_three.OneMinusSrcAlphaFactor,blendEquation:_three.AddEquation,blendSrcAlpha:_three.SrcAlphaFactor,blendDstAlpha:_three.OneMinusSrcAlphaFactor,blendEquationAlpha:_three.AddEquation});this.fsQuad=\nnew _Pass.FullScreenQuad(null);this.originalClearColor=new _three.Color};exports.SSRPass=SSRPass;SSRPass.prototype=Object.assign(Object.create(_Pass.Pass.prototype),{constructor:SSRPass,dispose:function(){this.beautyRenderTarget.dispose();this.prevRenderTarget.dispose();this.normalRenderTarget.dispose();this.metalnessRenderTarget.dispose();this.ssrRenderTarget.dispose();this.blurRenderTarget.dispose();this.blurRenderTarget2.dispose();this.normalMaterial.dispose();this.metalnessOnMaterial.dispose();\nthis.metalnessOffMaterial.dispose();this.blurMaterial.dispose();this.blurMaterial2.dispose();this.copyMaterial.dispose();this.depthRenderMaterial.dispose();this.fsQuad.dispose()},render:function(renderer,writeBuffer){this.encoding&&(this.beautyRenderTarget.texture.encoding=this.encoding);renderer.setRenderTarget(this.beautyRenderTarget);renderer.clear();this.groundReflector&&(this.groundReflector.doRender(this.renderer,this.scene,this.camera),this.groundReflector.visible=!0);renderer.render(this.scene,\nthis.camera);this.groundReflector&&(this.groundReflector.visible=!1);this.renderOverride(renderer,this.normalMaterial,this.normalRenderTarget,0,0);this.isSelective&&this.renderMetalness(renderer,this.metalnessOnMaterial,this.metalnessRenderTarget,0,0);this.ssrMaterial.uniforms.opacity.value=this.opacity;this.ssrMaterial.uniforms.maxDistance.value=this.maxDistance;this.ssrMaterial.uniforms.surfDist.value=this.surfDist;this.ssrMaterial.uniforms.thickTolerance.value=this.thickTolerance;this.renderPass(renderer,\nthis.ssrMaterial,this.ssrRenderTarget);this.isBlur&&(this.renderPass(renderer,this.blurMaterial,this.blurRenderTarget),this.renderPass(renderer,this.blurMaterial2,this.blurRenderTarget2));switch(this.output){case SSRPass.OUTPUT.Default:this.isBouncing?(this.copyMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture,this.copyMaterial.blending=_three.NoBlending,this.renderPass(renderer,this.copyMaterial,this.prevRenderTarget),this.copyMaterial.uniforms.tDiffuse.value=this.isBlur?this.blurRenderTarget2.texture:\nthis.ssrRenderTarget.texture,this.copyMaterial.blending=_three.NormalBlending,this.renderPass(renderer,this.copyMaterial,this.prevRenderTarget),this.copyMaterial.uniforms.tDiffuse.value=this.prevRenderTarget.texture,this.copyMaterial.blending=_three.NoBlending):(this.copyMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture,this.copyMaterial.blending=_three.NoBlending,this.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer),this.copyMaterial.uniforms.tDiffuse.value=\nthis.isBlur?this.blurRenderTarget2.texture:this.ssrRenderTarget.texture,this.copyMaterial.blending=_three.NormalBlending);this.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer);break;case SSRPass.OUTPUT.SSR:this.copyMaterial.uniforms.tDiffuse.value=this.isBlur?this.blurRenderTarget2.texture:this.ssrRenderTarget.texture;this.copyMaterial.blending=_three.NoBlending;this.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer);this.isBouncing&&(this.copyMaterial.uniforms.tDiffuse.value=\nthis.isBlur?this.blurRenderTarget2.texture:this.beautyRenderTarget.texture,this.copyMaterial.blending=_three.NoBlending,this.renderPass(renderer,this.copyMaterial,this.prevRenderTarget),this.copyMaterial.uniforms.tDiffuse.value=this.ssrRenderTarget.texture,this.copyMaterial.blending=_three.NormalBlending,this.renderPass(renderer,this.copyMaterial,this.prevRenderTarget));break;case SSRPass.OUTPUT.Beauty:this.copyMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture;this.copyMaterial.blending=\n_three.NoBlending;this.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer);break;case SSRPass.OUTPUT.Depth:this.renderPass(renderer,this.depthRenderMaterial,this.renderToScreen?null:writeBuffer);break;case SSRPass.OUTPUT.Normal:this.copyMaterial.uniforms.tDiffuse.value=this.normalRenderTarget.texture;this.copyMaterial.blending=_three.NoBlending;this.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer);break;case SSRPass.OUTPUT.Metalness:this.copyMaterial.uniforms.tDiffuse.value=\nthis.metalnessRenderTarget.texture;this.copyMaterial.blending=_three.NoBlending;this.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer);break;default:console.warn(\"THREE.SSRPass: Unknown output type.\")}},renderPass:function(renderer,passMaterial,renderTarget,clearColor,clearAlpha){this.originalClearColor.copy(renderer.getClearColor(this.tempColor));var originalClearAlpha=renderer.getClearAlpha(this.tempColor),originalAutoClear=renderer.autoClear;renderer.setRenderTarget(renderTarget);\nrenderer.autoClear=!1;void 0!==clearColor&&null!==clearColor&&(renderer.setClearColor(clearColor),renderer.setClearAlpha(clearAlpha||0),renderer.clear());this.fsQuad.material=passMaterial;this.fsQuad.render(renderer);renderer.autoClear=originalAutoClear;renderer.setClearColor(this.originalClearColor);renderer.setClearAlpha(originalClearAlpha)},renderOverride:function(renderer,overrideMaterial,renderTarget,clearColor,clearAlpha){this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\nvar originalClearAlpha=renderer.getClearAlpha(this.tempColor),originalAutoClear=renderer.autoClear;renderer.setRenderTarget(renderTarget);renderer.autoClear=!1;clearColor=overrideMaterial.clearColor||clearColor;clearAlpha=overrideMaterial.clearAlpha||clearAlpha;void 0!==clearColor&&null!==clearColor&&(renderer.setClearColor(clearColor),renderer.setClearAlpha(clearAlpha||0),renderer.clear());this.scene.overrideMaterial=overrideMaterial;renderer.render(this.scene,this.camera);this.scene.overrideMaterial=\nnull;renderer.autoClear=originalAutoClear;renderer.setClearColor(this.originalClearColor);renderer.setClearAlpha(originalClearAlpha)},renderMetalness:function(renderer,overrideMaterial,renderTarget,clearColor,clearAlpha){var _this=this;this.originalClearColor.copy(renderer.getClearColor(this.tempColor));var originalClearAlpha=renderer.getClearAlpha(this.tempColor),originalAutoClear=renderer.autoClear;renderer.setRenderTarget(renderTarget);renderer.autoClear=!1;clearColor=overrideMaterial.clearColor||\nclearColor;clearAlpha=overrideMaterial.clearAlpha||clearAlpha;void 0!==clearColor&&null!==clearColor&&(renderer.setClearColor(clearColor),renderer.setClearAlpha(clearAlpha||0),renderer.clear());this.scene.traverseVisible(function(child){child._SSRPassMaterialBack=child.material;_this._selects.includes(child)?child.material=_this.metalnessOnMaterial:child.material=_this.metalnessOffMaterial});renderer.render(this.scene,this.camera);this.scene.traverseVisible(function(child){child.material=child._SSRPassMaterialBack});\nrenderer.autoClear=originalAutoClear;renderer.setClearColor(this.originalClearColor);renderer.setClearAlpha(originalClearAlpha)},setSize:function(width,height){this.width=width;this.height=height;this.ssrMaterial.defines.MAX_STEP=Math.sqrt(width*width+height*height);this.ssrMaterial.needsUpdate=!0;this.beautyRenderTarget.setSize(width,height);this.prevRenderTarget.setSize(width,height);this.ssrRenderTarget.setSize(width,height);this.normalRenderTarget.setSize(width,height);this.metalnessRenderTarget.setSize(width,\nheight);this.blurRenderTarget.setSize(width,height);this.blurRenderTarget2.setSize(width,height);this.ssrMaterial.uniforms.resolution.value.set(width,height);this.ssrMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix);this.ssrMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse);this.blurMaterial.uniforms.resolution.value.set(width,height);this.blurMaterial2.uniforms.resolution.value.set(width,height)}});SSRPass.OUTPUT={Default:0,\nSSR:1,Beauty:3,Depth:4,Normal:5,Metalness:7}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$postprocessing$SSRPass\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SSRPass = void 0;\n\nvar _three = require(\"three\");\n\nvar _Pass = require(\"./Pass.js\");\n\nvar _SSRShader = require(\"../shaders/SSRShader.js\");\n\nvar _CopyShader = require(\"../shaders/CopyShader.js\");\n\nvar SSRPass = function SSRPass(_ref) {\n  var renderer = _ref.renderer,\n      scene = _ref.scene,\n      camera = _ref.camera,\n      width = _ref.width,\n      height = _ref.height,\n      selects = _ref.selects,\n      encoding = _ref.encoding,\n      _ref$isPerspectiveCam = _ref.isPerspectiveCamera,\n      isPerspectiveCamera = _ref$isPerspectiveCam === void 0 ? true : _ref$isPerspectiveCam,\n      _ref$isBouncing = _ref.isBouncing,\n      isBouncing = _ref$isBouncing === void 0 ? false : _ref$isBouncing,\n      _ref$morphTargets = _ref.morphTargets,\n      morphTargets = _ref$morphTargets === void 0 ? false : _ref$morphTargets,\n      groundReflector = _ref.groundReflector;\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.renderer = renderer;\n  this.scene = scene;\n  this.camera = camera;\n  this.groundReflector = groundReflector;\n  this.opacity = _SSRShader.SSRShader.uniforms.opacity.value;\n  this.output = 0;\n  this.maxDistance = _SSRShader.SSRShader.uniforms.maxDistance.value;\n  this.surfDist = _SSRShader.SSRShader.uniforms.surfDist.value;\n  this.encoding = encoding;\n  this.tempColor = new _three.Color();\n  this._selects = selects;\n  this.isSelective = Array.isArray(this._selects);\n  Object.defineProperty(this, 'selects', {\n    get: function get() {\n      return this._selects;\n    },\n    set: function set(val) {\n      if (this._selects === val) return;\n      this._selects = val;\n\n      if (Array.isArray(val)) {\n        this.isSelective = true;\n        this.ssrMaterial.defines.isSelective = true;\n        this.ssrMaterial.needsUpdate = true;\n      } else {\n        this.isSelective = false;\n        this.ssrMaterial.defines.isSelective = false;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    }\n  });\n  this._isBouncing = isBouncing; ///todo: don't need defineProperty\n\n  Object.defineProperty(this, 'isBouncing', {\n    get: function get() {\n      return this._isBouncing;\n    },\n    set: function set(val) {\n      if (this._isBouncing === val) return;\n      this._isBouncing = val;\n\n      if (val) {\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n      } else {\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n      }\n    }\n  });\n  this.isBlur = true;\n  this._isDistanceAttenuation = _SSRShader.SSRShader.defines.isDistanceAttenuation;\n  Object.defineProperty(this, 'isDistanceAttenuation', {\n    get: function get() {\n      return this._isDistanceAttenuation;\n    },\n    set: function set(val) {\n      if (this._isDistanceAttenuation === val) return;\n      this._isDistanceAttenuation = val;\n      this.ssrMaterial.defines.isDistanceAttenuation = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n  });\n  this._isFresnel = _SSRShader.SSRShader.defines.isFresnel;\n  Object.defineProperty(this, 'isFresnel', {\n    get: function get() {\n      return this._isFresnel;\n    },\n    set: function set(val) {\n      if (this._isFresnel === val) return;\n      this._isFresnel = val;\n      this.ssrMaterial.defines.isFresnel = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n  });\n  this._isInfiniteThick = _SSRShader.SSRShader.defines.isInfiniteThick;\n  Object.defineProperty(this, 'isInfiniteThick', {\n    get: function get() {\n      return this._isInfiniteThick;\n    },\n    set: function set(val) {\n      if (this._isInfiniteThick === val) return;\n      this._isInfiniteThick = val;\n      this.ssrMaterial.defines.isInfiniteThick = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n  });\n  this.thickTolerance = _SSRShader.SSRShader.uniforms.thickTolerance.value; // beauty render target with depth buffer\n\n  var depthTexture = new _three.DepthTexture();\n  depthTexture.type = _three.UnsignedShortType;\n  depthTexture.minFilter = _three.NearestFilter;\n  depthTexture.maxFilter = _three.NearestFilter;\n  this.beautyRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\n    minFilter: _three.LinearFilter,\n    magFilter: _three.LinearFilter,\n    format: _three.RGBAFormat,\n    depthTexture: depthTexture,\n    depthBuffer: true\n  }); //for bouncing\n\n  this.prevRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\n    minFilter: _three.LinearFilter,\n    magFilter: _three.LinearFilter,\n    format: _three.RGBAFormat\n  }); // normal render target\n\n  this.normalRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\n    minFilter: _three.NearestFilter,\n    magFilter: _three.NearestFilter,\n    format: _three.RGBAFormat,\n    type: _three.HalfFloatType\n  }); // metalness render target\n  // if (this.isSelective) {\n\n  this.metalnessRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\n    minFilter: _three.NearestFilter,\n    magFilter: _three.NearestFilter,\n    format: _three.RGBAFormat\n  }); // }\n  // ssr render target\n\n  this.ssrRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\n    minFilter: _three.LinearFilter,\n    magFilter: _three.LinearFilter,\n    format: _three.RGBAFormat\n  });\n  this.blurRenderTarget = this.ssrRenderTarget.clone();\n  this.blurRenderTarget2 = this.ssrRenderTarget.clone(); // this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n  // ssr material\n\n  if (_SSRShader.SSRShader === undefined) {\n    console.error('THREE.SSRPass: The pass relies on SSRShader.');\n  }\n\n  this.ssrMaterial = new _three.ShaderMaterial({\n    defines: Object.assign({\n      MAX_STEP: Math.sqrt(window.innerWidth * window.innerWidth + window.innerHeight * window.innerHeight)\n    }, _SSRShader.SSRShader.defines),\n    uniforms: _three.UniformsUtils.clone(_SSRShader.SSRShader.uniforms),\n    vertexShader: _SSRShader.SSRShader.vertexShader,\n    fragmentShader: _SSRShader.SSRShader.fragmentShader,\n    blending: _three.NoBlending\n  });\n\n  if (!isPerspectiveCamera) {\n    this.ssrMaterial.defines.isPerspectiveCamera = isPerspectiveCamera;\n    this.ssrMaterial.needsUpdate = true;\n  }\n\n  this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssrMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture; // if (this.isSelective) {\n\n  this.ssrMaterial.defines.isSelective = this.isSelective;\n  this.ssrMaterial.needsUpdate = true;\n  this.ssrMaterial.uniforms['tMetalness'].value = this.metalnessRenderTarget.texture; // }\n\n  this.ssrMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.ssrMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssrMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\n  this.ssrMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new _three.MeshNormalMaterial({\n    morphTargets: morphTargets\n  });\n  this.normalMaterial.blending = _three.NoBlending; // if (this.isSelective) {\n  // metalnessOn material\n\n  this.metalnessOnMaterial = new _three.MeshBasicMaterial({\n    color: 'white'\n  }); // metalnessOff material\n\n  this.metalnessOffMaterial = new _three.MeshBasicMaterial({\n    color: 'black'\n  }); // }\n  // blur material\n\n  this.blurMaterial = new _three.ShaderMaterial({\n    defines: Object.assign({}, _SSRShader.SSRBlurShader.defines),\n    uniforms: _three.UniformsUtils.clone(_SSRShader.SSRBlurShader.uniforms),\n    vertexShader: _SSRShader.SSRBlurShader.vertexShader,\n    fragmentShader: _SSRShader.SSRBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // blur material 2\n\n  this.blurMaterial2 = new _three.ShaderMaterial({\n    defines: Object.assign({}, _SSRShader.SSRBlurShader.defines),\n    uniforms: _three.UniformsUtils.clone(_SSRShader.SSRBlurShader.uniforms),\n    vertexShader: _SSRShader.SSRBlurShader.vertexShader,\n    fragmentShader: _SSRShader.SSRBlurShader.fragmentShader\n  });\n  this.blurMaterial2.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n  this.blurMaterial2.uniforms['resolution'].value.set(this.width, this.height); // // blur material 3\n  // this.blurMaterial3 = new ShaderMaterial({\n  //   defines: Object.assign({}, SSRBlurShader.defines),\n  //   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n  //   vertexShader: SSRBlurShader.vertexShader,\n  //   fragmentShader: SSRBlurShader.fragmentShader\n  // });\n  // this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n  // this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n  // material for rendering the depth\n\n  this.depthRenderMaterial = new _three.ShaderMaterial({\n    defines: Object.assign({}, _SSRShader.SSRDepthShader.defines),\n    uniforms: _three.UniformsUtils.clone(_SSRShader.SSRDepthShader.uniforms),\n    vertexShader: _SSRShader.SSRDepthShader.vertexShader,\n    fragmentShader: _SSRShader.SSRDepthShader.fragmentShader,\n    blending: _three.NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new _three.ShaderMaterial({\n    uniforms: _three.UniformsUtils.clone(_CopyShader.CopyShader.uniforms),\n    vertexShader: _CopyShader.CopyShader.vertexShader,\n    fragmentShader: _CopyShader.CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: _three.SrcAlphaFactor,\n    blendDst: _three.OneMinusSrcAlphaFactor,\n    blendEquation: _three.AddEquation,\n    blendSrcAlpha: _three.SrcAlphaFactor,\n    blendDstAlpha: _three.OneMinusSrcAlphaFactor,\n    blendEquationAlpha: _three.AddEquation // premultipliedAlpha:true,\n\n  });\n  this.fsQuad = new _Pass.FullScreenQuad(null);\n  this.originalClearColor = new _three.Color();\n};\n\nexports.SSRPass = SSRPass;\nSSRPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\n  constructor: SSRPass,\n  dispose: function dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose(); // if (this.isSelective)\n\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose(); // this.blurRenderTarget3.dispose();\n    // dispose materials\n\n    this.normalMaterial.dispose(); // if (this.isSelective) {\n\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose(); // }\n\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty and depth\n    if (this.encoding) this.beautyRenderTarget.texture.encoding = this.encoding;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n\n    if (this.groundReflector) {\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector) this.groundReflector.visible = false; // render normals\n\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0); // render metalnesses\n\n    if (this.isSelective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    } // render SSR\n\n\n    this.ssrMaterial.uniforms['opacity'].value = this.opacity;\n    this.ssrMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\n    this.ssrMaterial.uniforms['thickTolerance'].value = this.thickTolerance;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget); // render blur\n\n    if (this.isBlur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2); // this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n    } // output result to screen\n\n\n    switch (this.output) {\n      case SSRPass.OUTPUT.Default:\n        if (this.isBouncing) {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = _three.NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = _three.NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = _three.NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = _three.NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = _three.NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n\n        break;\n\n      case SSRPass.OUTPUT.SSR:\n        if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = _three.NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n\n        if (this.isBouncing) {\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = _three.NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = _three.NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n\n        break;\n\n      case SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = _three.NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = _three.NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = _three.NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSRPass: Unknown output type.');\n    }\n  },\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderMetalness: function renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    var _this = this;\n\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.traverseVisible(function (child) {\n      child._SSRPassMaterialBack = child.material;\n\n      if (_this._selects.includes(child)) {\n        child.material = _this.metalnessOnMaterial;\n      } else {\n        child.material = _this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible(function (child) {\n      child.material = child._SSRPassMaterialBack;\n    }); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height); // if (this.isSelective)\n\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height); // this.blurRenderTarget3.setSize(width, height);\n\n    this.ssrMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n    this.blurMaterial2.uniforms['resolution'].value.set(width, height);\n  }\n});\nSSRPass.OUTPUT = {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_stdlib$shaders$CopyShader","~$shadow.js","~$module$node_modules$three_stdlib$postprocessing$Pass","~$module$node_modules$three_stdlib$shaders$SSRShader"]],"~:properties",["^5",["fragmentShader","metalnessOnMaterial","copyMaterial","width","renderer","depthTest","Default","output","isDistanceAttenuation","blending","selects","needsUpdate","prevRenderTarget","prototype","height","metalnessOffMaterial","blendEquation","depthBuffer","transparent","SSR","tempColor","ssrRenderTarget","groundReflector","blurRenderTarget2","__esModule","_isBouncing","overrideMaterial","blendDstAlpha","dispose","_isDistanceAttenuation","OUTPUT","encoding","camera","defines","maxDistance","_isInfiniteThick","blurMaterial2","isInfiniteThick","renderPass","vertexShader","_isFresnel","isFresnel","value","blurMaterial","blendSrcAlpha","visible","renderOverride","thickTolerance","fsQuad","beautyRenderTarget","isSelective","magFilter","blendDst","autoClear","depthRenderMaterial","type","render","blendSrc","setSize","metalnessRenderTarget","MAX_STEP","Normal","depthWrite","isPerspectiveCamera","maxFilter","originalClearColor","isBouncing","set","blurRenderTarget","normalRenderTarget","morphTargets","surfDist","clear","uniforms","renderMetalness","_selects","normalMaterial","minFilter","Depth","Metalness","_SSRPassMaterialBack","Beauty","get","color","ssrMaterial","opacity","SSRPass","isBlur","blendEquationAlpha","format","constructor","scene","depthTexture","material"]],"~:compiled-at",1630917515535,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$postprocessing$SSRPass.js\",\n\"lineCount\":31,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/postprocessing/SSRPass.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$postprocessing$SSRPass\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.SSRPass = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _Pass = require(\\\"./Pass.js\\\");\\n\\nvar _SSRShader = require(\\\"../shaders/SSRShader.js\\\");\\n\\nvar _CopyShader = require(\\\"../shaders/CopyShader.js\\\");\\n\\nvar SSRPass = function SSRPass(_ref) {\\n  var renderer = _ref.renderer,\\n      scene = _ref.scene,\\n      camera = _ref.camera,\\n      width = _ref.width,\\n      height = _ref.height,\\n      selects = _ref.selects,\\n      encoding = _ref.encoding,\\n      _ref$isPerspectiveCam = _ref.isPerspectiveCamera,\\n      isPerspectiveCamera = _ref$isPerspectiveCam === void 0 ? true : _ref$isPerspectiveCam,\\n      _ref$isBouncing = _ref.isBouncing,\\n      isBouncing = _ref$isBouncing === void 0 ? false : _ref$isBouncing,\\n      _ref$morphTargets = _ref.morphTargets,\\n      morphTargets = _ref$morphTargets === void 0 ? false : _ref$morphTargets,\\n      groundReflector = _ref.groundReflector;\\n  this.width = width !== undefined ? width : 512;\\n  this.height = height !== undefined ? height : 512;\\n  this.clear = true;\\n  this.renderer = renderer;\\n  this.scene = scene;\\n  this.camera = camera;\\n  this.groundReflector = groundReflector;\\n  this.opacity = _SSRShader.SSRShader.uniforms.opacity.value;\\n  this.output = 0;\\n  this.maxDistance = _SSRShader.SSRShader.uniforms.maxDistance.value;\\n  this.surfDist = _SSRShader.SSRShader.uniforms.surfDist.value;\\n  this.encoding = encoding;\\n  this.tempColor = new _three.Color();\\n  this._selects = selects;\\n  this.isSelective = Array.isArray(this._selects);\\n  Object.defineProperty(this, 'selects', {\\n    get: function get() {\\n      return this._selects;\\n    },\\n    set: function set(val) {\\n      if (this._selects === val) return;\\n      this._selects = val;\\n\\n      if (Array.isArray(val)) {\\n        this.isSelective = true;\\n        this.ssrMaterial.defines.isSelective = true;\\n        this.ssrMaterial.needsUpdate = true;\\n      } else {\\n        this.isSelective = false;\\n        this.ssrMaterial.defines.isSelective = false;\\n        this.ssrMaterial.needsUpdate = true;\\n      }\\n    }\\n  });\\n  this._isBouncing = isBouncing; ///todo: don't need defineProperty\\n\\n  Object.defineProperty(this, 'isBouncing', {\\n    get: function get() {\\n      return this._isBouncing;\\n    },\\n    set: function set(val) {\\n      if (this._isBouncing === val) return;\\n      this._isBouncing = val;\\n\\n      if (val) {\\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\\n      } else {\\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\\n      }\\n    }\\n  });\\n  this.isBlur = true;\\n  this._isDistanceAttenuation = _SSRShader.SSRShader.defines.isDistanceAttenuation;\\n  Object.defineProperty(this, 'isDistanceAttenuation', {\\n    get: function get() {\\n      return this._isDistanceAttenuation;\\n    },\\n    set: function set(val) {\\n      if (this._isDistanceAttenuation === val) return;\\n      this._isDistanceAttenuation = val;\\n      this.ssrMaterial.defines.isDistanceAttenuation = val;\\n      this.ssrMaterial.needsUpdate = true;\\n    }\\n  });\\n  this._isFresnel = _SSRShader.SSRShader.defines.isFresnel;\\n  Object.defineProperty(this, 'isFresnel', {\\n    get: function get() {\\n      return this._isFresnel;\\n    },\\n    set: function set(val) {\\n      if (this._isFresnel === val) return;\\n      this._isFresnel = val;\\n      this.ssrMaterial.defines.isFresnel = val;\\n      this.ssrMaterial.needsUpdate = true;\\n    }\\n  });\\n  this._isInfiniteThick = _SSRShader.SSRShader.defines.isInfiniteThick;\\n  Object.defineProperty(this, 'isInfiniteThick', {\\n    get: function get() {\\n      return this._isInfiniteThick;\\n    },\\n    set: function set(val) {\\n      if (this._isInfiniteThick === val) return;\\n      this._isInfiniteThick = val;\\n      this.ssrMaterial.defines.isInfiniteThick = val;\\n      this.ssrMaterial.needsUpdate = true;\\n    }\\n  });\\n  this.thickTolerance = _SSRShader.SSRShader.uniforms.thickTolerance.value; // beauty render target with depth buffer\\n\\n  var depthTexture = new _three.DepthTexture();\\n  depthTexture.type = _three.UnsignedShortType;\\n  depthTexture.minFilter = _three.NearestFilter;\\n  depthTexture.maxFilter = _three.NearestFilter;\\n  this.beautyRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\\n    minFilter: _three.LinearFilter,\\n    magFilter: _three.LinearFilter,\\n    format: _three.RGBAFormat,\\n    depthTexture: depthTexture,\\n    depthBuffer: true\\n  }); //for bouncing\\n\\n  this.prevRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\\n    minFilter: _three.LinearFilter,\\n    magFilter: _three.LinearFilter,\\n    format: _three.RGBAFormat\\n  }); // normal render target\\n\\n  this.normalRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\\n    minFilter: _three.NearestFilter,\\n    magFilter: _three.NearestFilter,\\n    format: _three.RGBAFormat,\\n    type: _three.HalfFloatType\\n  }); // metalness render target\\n  // if (this.isSelective) {\\n\\n  this.metalnessRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\\n    minFilter: _three.NearestFilter,\\n    magFilter: _three.NearestFilter,\\n    format: _three.RGBAFormat\\n  }); // }\\n  // ssr render target\\n\\n  this.ssrRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\\n    minFilter: _three.LinearFilter,\\n    magFilter: _three.LinearFilter,\\n    format: _three.RGBAFormat\\n  });\\n  this.blurRenderTarget = this.ssrRenderTarget.clone();\\n  this.blurRenderTarget2 = this.ssrRenderTarget.clone(); // this.blurRenderTarget3 = this.ssrRenderTarget.clone();\\n  // ssr material\\n\\n  if (_SSRShader.SSRShader === undefined) {\\n    console.error('THREE.SSRPass: The pass relies on SSRShader.');\\n  }\\n\\n  this.ssrMaterial = new _three.ShaderMaterial({\\n    defines: Object.assign({\\n      MAX_STEP: Math.sqrt(window.innerWidth * window.innerWidth + window.innerHeight * window.innerHeight)\\n    }, _SSRShader.SSRShader.defines),\\n    uniforms: _three.UniformsUtils.clone(_SSRShader.SSRShader.uniforms),\\n    vertexShader: _SSRShader.SSRShader.vertexShader,\\n    fragmentShader: _SSRShader.SSRShader.fragmentShader,\\n    blending: _three.NoBlending\\n  });\\n\\n  if (!isPerspectiveCamera) {\\n    this.ssrMaterial.defines.isPerspectiveCamera = isPerspectiveCamera;\\n    this.ssrMaterial.needsUpdate = true;\\n  }\\n\\n  this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\\n  this.ssrMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture; // if (this.isSelective) {\\n\\n  this.ssrMaterial.defines.isSelective = this.isSelective;\\n  this.ssrMaterial.needsUpdate = true;\\n  this.ssrMaterial.uniforms['tMetalness'].value = this.metalnessRenderTarget.texture; // }\\n\\n  this.ssrMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\\n  this.ssrMaterial.uniforms['cameraNear'].value = this.camera.near;\\n  this.ssrMaterial.uniforms['cameraFar'].value = this.camera.far;\\n  this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\\n  this.ssrMaterial.uniforms['resolution'].value.set(this.width, this.height);\\n  this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\\n  this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\\n\\n  this.normalMaterial = new _three.MeshNormalMaterial({\\n    morphTargets: morphTargets\\n  });\\n  this.normalMaterial.blending = _three.NoBlending; // if (this.isSelective) {\\n  // metalnessOn material\\n\\n  this.metalnessOnMaterial = new _three.MeshBasicMaterial({\\n    color: 'white'\\n  }); // metalnessOff material\\n\\n  this.metalnessOffMaterial = new _three.MeshBasicMaterial({\\n    color: 'black'\\n  }); // }\\n  // blur material\\n\\n  this.blurMaterial = new _three.ShaderMaterial({\\n    defines: Object.assign({}, _SSRShader.SSRBlurShader.defines),\\n    uniforms: _three.UniformsUtils.clone(_SSRShader.SSRBlurShader.uniforms),\\n    vertexShader: _SSRShader.SSRBlurShader.vertexShader,\\n    fragmentShader: _SSRShader.SSRBlurShader.fragmentShader\\n  });\\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // blur material 2\\n\\n  this.blurMaterial2 = new _three.ShaderMaterial({\\n    defines: Object.assign({}, _SSRShader.SSRBlurShader.defines),\\n    uniforms: _three.UniformsUtils.clone(_SSRShader.SSRBlurShader.uniforms),\\n    vertexShader: _SSRShader.SSRBlurShader.vertexShader,\\n    fragmentShader: _SSRShader.SSRBlurShader.fragmentShader\\n  });\\n  this.blurMaterial2.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\\n  this.blurMaterial2.uniforms['resolution'].value.set(this.width, this.height); // // blur material 3\\n  // this.blurMaterial3 = new ShaderMaterial({\\n  //   defines: Object.assign({}, SSRBlurShader.defines),\\n  //   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\\n  //   vertexShader: SSRBlurShader.vertexShader,\\n  //   fragmentShader: SSRBlurShader.fragmentShader\\n  // });\\n  // this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\\n  // this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\\n  // material for rendering the depth\\n\\n  this.depthRenderMaterial = new _three.ShaderMaterial({\\n    defines: Object.assign({}, _SSRShader.SSRDepthShader.defines),\\n    uniforms: _three.UniformsUtils.clone(_SSRShader.SSRDepthShader.uniforms),\\n    vertexShader: _SSRShader.SSRDepthShader.vertexShader,\\n    fragmentShader: _SSRShader.SSRDepthShader.fragmentShader,\\n    blending: _three.NoBlending\\n  });\\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\\n\\n  this.copyMaterial = new _three.ShaderMaterial({\\n    uniforms: _three.UniformsUtils.clone(_CopyShader.CopyShader.uniforms),\\n    vertexShader: _CopyShader.CopyShader.vertexShader,\\n    fragmentShader: _CopyShader.CopyShader.fragmentShader,\\n    transparent: true,\\n    depthTest: false,\\n    depthWrite: false,\\n    blendSrc: _three.SrcAlphaFactor,\\n    blendDst: _three.OneMinusSrcAlphaFactor,\\n    blendEquation: _three.AddEquation,\\n    blendSrcAlpha: _three.SrcAlphaFactor,\\n    blendDstAlpha: _three.OneMinusSrcAlphaFactor,\\n    blendEquationAlpha: _three.AddEquation // premultipliedAlpha:true,\\n\\n  });\\n  this.fsQuad = new _Pass.FullScreenQuad(null);\\n  this.originalClearColor = new _three.Color();\\n};\\n\\nexports.SSRPass = SSRPass;\\nSSRPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\\n  constructor: SSRPass,\\n  dispose: function dispose() {\\n    // dispose render targets\\n    this.beautyRenderTarget.dispose();\\n    this.prevRenderTarget.dispose();\\n    this.normalRenderTarget.dispose(); // if (this.isSelective)\\n\\n    this.metalnessRenderTarget.dispose();\\n    this.ssrRenderTarget.dispose();\\n    this.blurRenderTarget.dispose();\\n    this.blurRenderTarget2.dispose(); // this.blurRenderTarget3.dispose();\\n    // dispose materials\\n\\n    this.normalMaterial.dispose(); // if (this.isSelective) {\\n\\n    this.metalnessOnMaterial.dispose();\\n    this.metalnessOffMaterial.dispose(); // }\\n\\n    this.blurMaterial.dispose();\\n    this.blurMaterial2.dispose();\\n    this.copyMaterial.dispose();\\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\\n\\n    this.fsQuad.dispose();\\n  },\\n  render: function render(renderer, writeBuffer\\n  /*, readBuffer, deltaTime, maskActive */\\n  ) {\\n    // render beauty and depth\\n    if (this.encoding) this.beautyRenderTarget.texture.encoding = this.encoding;\\n    renderer.setRenderTarget(this.beautyRenderTarget);\\n    renderer.clear();\\n\\n    if (this.groundReflector) {\\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\\n      this.groundReflector.visible = true;\\n    }\\n\\n    renderer.render(this.scene, this.camera);\\n    if (this.groundReflector) this.groundReflector.visible = false; // render normals\\n\\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0); // render metalnesses\\n\\n    if (this.isSelective) {\\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\\n    } // render SSR\\n\\n\\n    this.ssrMaterial.uniforms['opacity'].value = this.opacity;\\n    this.ssrMaterial.uniforms['maxDistance'].value = this.maxDistance;\\n    this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\\n    this.ssrMaterial.uniforms['thickTolerance'].value = this.thickTolerance;\\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget); // render blur\\n\\n    if (this.isBlur) {\\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2); // this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\\n    } // output result to screen\\n\\n\\n    switch (this.output) {\\n      case SSRPass.OUTPUT.Default:\\n        if (this.isBouncing) {\\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\\n          this.copyMaterial.blending = _three.NoBlending;\\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\\n          this.copyMaterial.blending = _three.NormalBlending;\\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\\n          this.copyMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\\n          this.copyMaterial.blending = _three.NoBlending;\\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n        } else {\\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\\n          this.copyMaterial.blending = _three.NoBlending;\\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\\n          this.copyMaterial.blending = _three.NormalBlending;\\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n        }\\n\\n        break;\\n\\n      case SSRPass.OUTPUT.SSR:\\n        if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\\n        this.copyMaterial.blending = _three.NoBlending;\\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n\\n        if (this.isBouncing) {\\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\\n          this.copyMaterial.blending = _three.NoBlending;\\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\\n          this.copyMaterial.blending = _three.NormalBlending;\\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\\n        }\\n\\n        break;\\n\\n      case SSRPass.OUTPUT.Beauty:\\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\\n        this.copyMaterial.blending = _three.NoBlending;\\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n        break;\\n\\n      case SSRPass.OUTPUT.Depth:\\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\\n        break;\\n\\n      case SSRPass.OUTPUT.Normal:\\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\\n        this.copyMaterial.blending = _three.NoBlending;\\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n        break;\\n\\n      case SSRPass.OUTPUT.Metalness:\\n        this.copyMaterial.uniforms['tDiffuse'].value = this.metalnessRenderTarget.texture;\\n        this.copyMaterial.blending = _three.NoBlending;\\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n        break;\\n\\n      default:\\n        console.warn('THREE.SSRPass: Unknown output type.');\\n    }\\n  },\\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\\n    // save original state\\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\\n    var originalAutoClear = renderer.autoClear;\\n    renderer.setRenderTarget(renderTarget); // setup pass state\\n\\n    renderer.autoClear = false;\\n\\n    if (clearColor !== undefined && clearColor !== null) {\\n      renderer.setClearColor(clearColor);\\n      renderer.setClearAlpha(clearAlpha || 0.0);\\n      renderer.clear();\\n    }\\n\\n    this.fsQuad.material = passMaterial;\\n    this.fsQuad.render(renderer); // restore original state\\n\\n    renderer.autoClear = originalAutoClear;\\n    renderer.setClearColor(this.originalClearColor);\\n    renderer.setClearAlpha(originalClearAlpha);\\n  },\\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\\n    var originalAutoClear = renderer.autoClear;\\n    renderer.setRenderTarget(renderTarget);\\n    renderer.autoClear = false;\\n    clearColor = overrideMaterial.clearColor || clearColor;\\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\\n\\n    if (clearColor !== undefined && clearColor !== null) {\\n      renderer.setClearColor(clearColor);\\n      renderer.setClearAlpha(clearAlpha || 0.0);\\n      renderer.clear();\\n    }\\n\\n    this.scene.overrideMaterial = overrideMaterial;\\n    renderer.render(this.scene, this.camera);\\n    this.scene.overrideMaterial = null; // restore original state\\n\\n    renderer.autoClear = originalAutoClear;\\n    renderer.setClearColor(this.originalClearColor);\\n    renderer.setClearAlpha(originalClearAlpha);\\n  },\\n  renderMetalness: function renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\\n    var _this = this;\\n\\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\\n    var originalAutoClear = renderer.autoClear;\\n    renderer.setRenderTarget(renderTarget);\\n    renderer.autoClear = false;\\n    clearColor = overrideMaterial.clearColor || clearColor;\\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\\n\\n    if (clearColor !== undefined && clearColor !== null) {\\n      renderer.setClearColor(clearColor);\\n      renderer.setClearAlpha(clearAlpha || 0.0);\\n      renderer.clear();\\n    }\\n\\n    this.scene.traverseVisible(function (child) {\\n      child._SSRPassMaterialBack = child.material;\\n\\n      if (_this._selects.includes(child)) {\\n        child.material = _this.metalnessOnMaterial;\\n      } else {\\n        child.material = _this.metalnessOffMaterial;\\n      }\\n    });\\n    renderer.render(this.scene, this.camera);\\n    this.scene.traverseVisible(function (child) {\\n      child.material = child._SSRPassMaterialBack;\\n    }); // restore original state\\n\\n    renderer.autoClear = originalAutoClear;\\n    renderer.setClearColor(this.originalClearColor);\\n    renderer.setClearAlpha(originalClearAlpha);\\n  },\\n  setSize: function setSize(width, height) {\\n    this.width = width;\\n    this.height = height;\\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\\n    this.ssrMaterial.needsUpdate = true;\\n    this.beautyRenderTarget.setSize(width, height);\\n    this.prevRenderTarget.setSize(width, height);\\n    this.ssrRenderTarget.setSize(width, height);\\n    this.normalRenderTarget.setSize(width, height); // if (this.isSelective)\\n\\n    this.metalnessRenderTarget.setSize(width, height);\\n    this.blurRenderTarget.setSize(width, height);\\n    this.blurRenderTarget2.setSize(width, height); // this.blurRenderTarget3.setSize(width, height);\\n\\n    this.ssrMaterial.uniforms['resolution'].value.set(width, height);\\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\\n    this.blurMaterial2.uniforms['resolution'].value.set(width, height);\\n  }\\n});\\nSSRPass.OUTPUT = {\\n  Default: 0,\\n  SSR: 1,\\n  Beauty: 3,\\n  Depth: 4,\\n  Normal: 5,\\n  Metalness: 7\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"SSRPass\",\"_three\",\"_Pass\",\"_SSRShader\",\"_CopyShader\",\"_ref\",\"renderer\",\"scene\",\"camera\",\"width\",\"height\",\"selects\",\"encoding\",\"_ref$isPerspectiveCam\",\"isPerspectiveCamera\",\"_ref$isBouncing\",\"isBouncing\",\"_ref$morphTargets\",\"morphTargets\",\"groundReflector\",\"undefined\",\"clear\",\"opacity\",\"SSRShader\",\"uniforms\",\"output\",\"maxDistance\",\"surfDist\",\"tempColor\",\"Color\",\"_selects\",\"isSelective\",\"Array\",\"isArray\",\"get\",\"set\",\"val\",\"ssrMaterial\",\"defines\",\"needsUpdate\",\"_isBouncing\",\"prevRenderTarget\",\"texture\",\"beautyRenderTarget\",\"isBlur\",\"_isDistanceAttenuation\",\"isDistanceAttenuation\",\"_isFresnel\",\"isFresnel\",\"_isInfiniteThick\",\"isInfiniteThick\",\"thickTolerance\",\"depthTexture\",\"DepthTexture\",\"type\",\"UnsignedShortType\",\"minFilter\",\"NearestFilter\",\"maxFilter\",\"WebGLRenderTarget\",\"LinearFilter\",\"magFilter\",\"format\",\"RGBAFormat\",\"depthBuffer\",\"normalRenderTarget\",\"HalfFloatType\",\"metalnessRenderTarget\",\"ssrRenderTarget\",\"blurRenderTarget\",\"clone\",\"blurRenderTarget2\",\"console\",\"error\",\"ShaderMaterial\",\"assign\",\"MAX_STEP\",\"Math\",\"sqrt\",\"window\",\"innerWidth\",\"innerHeight\",\"UniformsUtils\",\"vertexShader\",\"fragmentShader\",\"blending\",\"NoBlending\",\"near\",\"far\",\"copy\",\"projectionMatrix\",\"projectionMatrixInverse\",\"normalMaterial\",\"MeshNormalMaterial\",\"metalnessOnMaterial\",\"MeshBasicMaterial\",\"color\",\"metalnessOffMaterial\",\"blurMaterial\",\"SSRBlurShader\",\"blurMaterial2\",\"depthRenderMaterial\",\"SSRDepthShader\",\"copyMaterial\",\"CopyShader\",\"transparent\",\"depthTest\",\"depthWrite\",\"blendSrc\",\"SrcAlphaFactor\",\"blendDst\",\"OneMinusSrcAlphaFactor\",\"blendEquation\",\"AddEquation\",\"blendSrcAlpha\",\"blendDstAlpha\",\"blendEquationAlpha\",\"fsQuad\",\"FullScreenQuad\",\"originalClearColor\",\"prototype\",\"create\",\"Pass\",\"constructor\",\"dispose\",\"render\",\"writeBuffer\",\"setRenderTarget\",\"doRender\",\"visible\",\"renderOverride\",\"renderMetalness\",\"renderPass\",\"OUTPUT\",\"Default\",\"NormalBlending\",\"renderToScreen\",\"SSR\",\"Beauty\",\"Depth\",\"Normal\",\"Metalness\",\"warn\",\"passMaterial\",\"renderTarget\",\"clearColor\",\"clearAlpha\",\"getClearColor\",\"originalClearAlpha\",\"getClearAlpha\",\"originalAutoClear\",\"autoClear\",\"setClearColor\",\"setClearAlpha\",\"material\",\"overrideMaterial\",\"_this\",\"traverseVisible\",\"child\",\"_SSRPassMaterialBack\",\"includes\",\"setSize\"]\n}\n"]