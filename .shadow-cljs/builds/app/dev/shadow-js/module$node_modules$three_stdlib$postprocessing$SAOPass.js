["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/postprocessing/SAOPass.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$postprocessing$SAOPass=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.SAOPass=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_Pass=require(\"module$node_modules$three_stdlib$postprocessing$Pass\"),_SAOShader=require(\"module$node_modules$three_stdlib$shaders$SAOShader\"),_DepthLimitedBlurShader=require(\"module$node_modules$three_stdlib$shaders$DepthLimitedBlurShader\"),_CopyShader=\nrequire(\"module$node_modules$three_stdlib$shaders$CopyShader\"),_UnpackDepthRGBAShader=require(\"module$node_modules$three_stdlib$shaders$UnpackDepthRGBAShader\");global=function(scene,camera,depthTexture,useNormals,resolution){this.scene=scene;this.camera=camera;this.clear=!0;this.needsSwap=!1;this.supportsDepthTextureExtension=void 0!==depthTexture?depthTexture:!1;this.supportsNormalTexture=void 0!==useNormals?useNormals:!1;this.originalClearColor=new _three.Color;this._oldClearColor=new _three.Color;\nthis.oldClearAlpha=1;this.params={output:0,saoBias:.5,saoIntensity:.18,saoScale:1,saoKernelRadius:100,saoMinResolution:0,saoBlur:!0,saoBlurRadius:8,saoBlurStdDev:4,saoBlurDepthCutoff:.01};this.resolution=void 0!==resolution?new _three.Vector2(resolution.x,resolution.y):new _three.Vector2(256,256);this.saoRenderTarget=new _three.WebGLRenderTarget(this.resolution.x,this.resolution.y,{minFilter:_three.LinearFilter,magFilter:_three.LinearFilter,format:_three.RGBAFormat});this.blurIntermediateRenderTarget=\nthis.saoRenderTarget.clone();this.beautyRenderTarget=this.saoRenderTarget.clone();this.normalRenderTarget=new _three.WebGLRenderTarget(this.resolution.x,this.resolution.y,{minFilter:_three.NearestFilter,magFilter:_three.NearestFilter,format:_three.RGBAFormat});this.depthRenderTarget=this.normalRenderTarget.clone();this.supportsDepthTextureExtension&&(depthTexture=new _three.DepthTexture,depthTexture.type=_three.UnsignedShortType,this.beautyRenderTarget.depthTexture=depthTexture,this.beautyRenderTarget.depthBuffer=\n!0);this.depthMaterial=new _three.MeshDepthMaterial;this.depthMaterial.depthPacking=_three.RGBADepthPacking;this.depthMaterial.blending=_three.NoBlending;this.normalMaterial=new _three.MeshNormalMaterial;this.normalMaterial.blending=_three.NoBlending;void 0===_SAOShader.SAOShader&&console.error(\"THREE.SAOPass relies on SAOShader\");this.saoMaterial=new _three.ShaderMaterial({defines:Object.assign({},_SAOShader.SAOShader.defines),fragmentShader:_SAOShader.SAOShader.fragmentShader,vertexShader:_SAOShader.SAOShader.vertexShader,\nuniforms:_three.UniformsUtils.clone(_SAOShader.SAOShader.uniforms)});this.saoMaterial.extensions.derivatives=!0;this.saoMaterial.defines.DEPTH_PACKING=this.supportsDepthTextureExtension?0:1;this.saoMaterial.defines.NORMAL_TEXTURE=this.supportsNormalTexture?1:0;this.saoMaterial.defines.PERSPECTIVE_CAMERA=this.camera.isPerspectiveCamera?1:0;this.saoMaterial.uniforms.tDepth.value=this.supportsDepthTextureExtension?depthTexture:this.depthRenderTarget.texture;this.saoMaterial.uniforms.tNormal.value=this.normalRenderTarget.texture;\nthis.saoMaterial.uniforms.size.value.set(this.resolution.x,this.resolution.y);this.saoMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse);this.saoMaterial.uniforms.cameraProjectionMatrix.value=this.camera.projectionMatrix;this.saoMaterial.blending=_three.NoBlending;void 0===_DepthLimitedBlurShader.DepthLimitedBlurShader&&console.error(\"THREE.SAOPass relies on DepthLimitedBlurShader\");this.vBlurMaterial=new _three.ShaderMaterial({uniforms:_three.UniformsUtils.clone(_DepthLimitedBlurShader.DepthLimitedBlurShader.uniforms),\ndefines:Object.assign({},_DepthLimitedBlurShader.DepthLimitedBlurShader.defines),vertexShader:_DepthLimitedBlurShader.DepthLimitedBlurShader.vertexShader,fragmentShader:_DepthLimitedBlurShader.DepthLimitedBlurShader.fragmentShader});this.vBlurMaterial.defines.DEPTH_PACKING=this.supportsDepthTextureExtension?0:1;this.vBlurMaterial.defines.PERSPECTIVE_CAMERA=this.camera.isPerspectiveCamera?1:0;this.vBlurMaterial.uniforms.tDiffuse.value=this.saoRenderTarget.texture;this.vBlurMaterial.uniforms.tDepth.value=\nthis.supportsDepthTextureExtension?depthTexture:this.depthRenderTarget.texture;this.vBlurMaterial.uniforms.size.value.set(this.resolution.x,this.resolution.y);this.vBlurMaterial.blending=_three.NoBlending;this.hBlurMaterial=new _three.ShaderMaterial({uniforms:_three.UniformsUtils.clone(_DepthLimitedBlurShader.DepthLimitedBlurShader.uniforms),defines:Object.assign({},_DepthLimitedBlurShader.DepthLimitedBlurShader.defines),vertexShader:_DepthLimitedBlurShader.DepthLimitedBlurShader.vertexShader,fragmentShader:_DepthLimitedBlurShader.DepthLimitedBlurShader.fragmentShader});\nthis.hBlurMaterial.defines.DEPTH_PACKING=this.supportsDepthTextureExtension?0:1;this.hBlurMaterial.defines.PERSPECTIVE_CAMERA=this.camera.isPerspectiveCamera?1:0;this.hBlurMaterial.uniforms.tDiffuse.value=this.blurIntermediateRenderTarget.texture;this.hBlurMaterial.uniforms.tDepth.value=this.supportsDepthTextureExtension?depthTexture:this.depthRenderTarget.texture;this.hBlurMaterial.uniforms.size.value.set(this.resolution.x,this.resolution.y);this.hBlurMaterial.blending=_three.NoBlending;void 0===\n_CopyShader.CopyShader&&console.error(\"THREE.SAOPass relies on CopyShader\");this.materialCopy=new _three.ShaderMaterial({uniforms:_three.UniformsUtils.clone(_CopyShader.CopyShader.uniforms),vertexShader:_CopyShader.CopyShader.vertexShader,fragmentShader:_CopyShader.CopyShader.fragmentShader,blending:_three.NoBlending});this.materialCopy.transparent=!0;this.materialCopy.depthTest=!1;this.materialCopy.depthWrite=!1;this.materialCopy.blending=_three.CustomBlending;this.materialCopy.blendSrc=_three.DstColorFactor;\nthis.materialCopy.blendDst=_three.ZeroFactor;this.materialCopy.blendEquation=_three.AddEquation;this.materialCopy.blendSrcAlpha=_three.DstAlphaFactor;this.materialCopy.blendDstAlpha=_three.ZeroFactor;this.materialCopy.blendEquationAlpha=_three.AddEquation;void 0===_UnpackDepthRGBAShader.UnpackDepthRGBAShader&&console.error(\"THREE.SAOPass relies on UnpackDepthRGBAShader\");this.depthCopy=new _three.ShaderMaterial({uniforms:_three.UniformsUtils.clone(_UnpackDepthRGBAShader.UnpackDepthRGBAShader.uniforms),\nvertexShader:_UnpackDepthRGBAShader.UnpackDepthRGBAShader.vertexShader,fragmentShader:_UnpackDepthRGBAShader.UnpackDepthRGBAShader.fragmentShader,blending:_three.NoBlending});this.fsQuad=new _Pass.FullScreenQuad(null)};exports.SAOPass=global;global.OUTPUT={Beauty:1,Default:0,SAO:2,Depth:3,Normal:4};global.prototype=Object.assign(Object.create(_Pass.Pass.prototype),{constructor:global,render:function(renderer,writeBuffer,readBuffer){this.renderToScreen&&(this.materialCopy.blending=_three.NoBlending,\nthis.materialCopy.uniforms.tDiffuse.value=readBuffer.texture,this.materialCopy.needsUpdate=!0,this.renderPass(renderer,this.materialCopy,null));if(1!==this.params.output){renderer.getClearColor(this._oldClearColor);this.oldClearAlpha=renderer.getClearAlpha();writeBuffer=renderer.autoClear;renderer.autoClear=!1;renderer.setRenderTarget(this.depthRenderTarget);renderer.clear();this.saoMaterial.uniforms.bias.value=this.params.saoBias;this.saoMaterial.uniforms.intensity.value=this.params.saoIntensity;\nthis.saoMaterial.uniforms.scale.value=this.params.saoScale;this.saoMaterial.uniforms.kernelRadius.value=this.params.saoKernelRadius;this.saoMaterial.uniforms.minResolution.value=this.params.saoMinResolution;this.saoMaterial.uniforms.cameraNear.value=this.camera.near;this.saoMaterial.uniforms.cameraFar.value=this.camera.far;var depthCutoff=this.params.saoBlurDepthCutoff*(this.camera.far-this.camera.near);this.vBlurMaterial.uniforms.depthCutoff.value=depthCutoff;this.hBlurMaterial.uniforms.depthCutoff.value=\ndepthCutoff;this.vBlurMaterial.uniforms.cameraNear.value=this.camera.near;this.vBlurMaterial.uniforms.cameraFar.value=this.camera.far;this.hBlurMaterial.uniforms.cameraNear.value=this.camera.near;this.hBlurMaterial.uniforms.cameraFar.value=this.camera.far;this.params.saoBlurRadius=Math.floor(this.params.saoBlurRadius);if(this.prevStdDev!==this.params.saoBlurStdDev||this.prevNumSamples!==this.params.saoBlurRadius)_DepthLimitedBlurShader.BlurShaderUtils.configure(this.vBlurMaterial,this.params.saoBlurRadius,\nthis.params.saoBlurStdDev,new _three.Vector2(0,1)),_DepthLimitedBlurShader.BlurShaderUtils.configure(this.hBlurMaterial,this.params.saoBlurRadius,this.params.saoBlurStdDev,new _three.Vector2(1,0)),this.prevStdDev=this.params.saoBlurStdDev,this.prevNumSamples=this.params.saoBlurRadius;renderer.setClearColor(0);renderer.setRenderTarget(this.beautyRenderTarget);renderer.clear();renderer.render(this.scene,this.camera);this.supportsDepthTextureExtension||this.renderOverride(renderer,this.depthMaterial,\nthis.depthRenderTarget,0,1);this.supportsNormalTexture&&this.renderOverride(renderer,this.normalMaterial,this.normalRenderTarget,7829503,1);this.renderPass(renderer,this.saoMaterial,this.saoRenderTarget,16777215,1);this.params.saoBlur&&(this.renderPass(renderer,this.vBlurMaterial,this.blurIntermediateRenderTarget,16777215,1),this.renderPass(renderer,this.hBlurMaterial,this.saoRenderTarget,16777215,1));depthCutoff=this.materialCopy;3===this.params.output?this.supportsDepthTextureExtension?(this.materialCopy.uniforms.tDiffuse.value=\nthis.beautyRenderTarget.depthTexture,this.materialCopy.needsUpdate=!0):(this.depthCopy.uniforms.tDiffuse.value=this.depthRenderTarget.texture,this.depthCopy.needsUpdate=!0,depthCutoff=this.depthCopy):(this.materialCopy.uniforms.tDiffuse.value=4===this.params.output?this.normalRenderTarget.texture:this.saoRenderTarget.texture,this.materialCopy.needsUpdate=!0);depthCutoff.blending=0===this.params.output?_three.CustomBlending:_three.NoBlending;this.renderPass(renderer,depthCutoff,this.renderToScreen?\nnull:readBuffer);renderer.setClearColor(this._oldClearColor,this.oldClearAlpha);renderer.autoClear=writeBuffer}},renderPass:function(renderer,passMaterial,renderTarget,clearColor,clearAlpha){renderer.getClearColor(this.originalClearColor);var originalClearAlpha=renderer.getClearAlpha(),originalAutoClear=renderer.autoClear;renderer.setRenderTarget(renderTarget);renderer.autoClear=!1;void 0!==clearColor&&null!==clearColor&&(renderer.setClearColor(clearColor),renderer.setClearAlpha(clearAlpha||0),renderer.clear());\nthis.fsQuad.material=passMaterial;this.fsQuad.render(renderer);renderer.autoClear=originalAutoClear;renderer.setClearColor(this.originalClearColor);renderer.setClearAlpha(originalClearAlpha)},renderOverride:function(renderer,overrideMaterial,renderTarget,clearColor,clearAlpha){renderer.getClearColor(this.originalClearColor);var originalClearAlpha=renderer.getClearAlpha(),originalAutoClear=renderer.autoClear;renderer.setRenderTarget(renderTarget);renderer.autoClear=!1;clearColor=overrideMaterial.clearColor||\nclearColor;clearAlpha=overrideMaterial.clearAlpha||clearAlpha;void 0!==clearColor&&null!==clearColor&&(renderer.setClearColor(clearColor),renderer.setClearAlpha(clearAlpha||0),renderer.clear());this.scene.overrideMaterial=overrideMaterial;renderer.render(this.scene,this.camera);this.scene.overrideMaterial=null;renderer.autoClear=originalAutoClear;renderer.setClearColor(this.originalClearColor);renderer.setClearAlpha(originalClearAlpha)},setSize:function(width,height){this.beautyRenderTarget.setSize(width,\nheight);this.saoRenderTarget.setSize(width,height);this.blurIntermediateRenderTarget.setSize(width,height);this.normalRenderTarget.setSize(width,height);this.depthRenderTarget.setSize(width,height);this.saoMaterial.uniforms.size.value.set(width,height);this.saoMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse);this.saoMaterial.uniforms.cameraProjectionMatrix.value=this.camera.projectionMatrix;this.saoMaterial.needsUpdate=!0;this.vBlurMaterial.uniforms.size.value.set(width,\nheight);this.vBlurMaterial.needsUpdate=!0;this.hBlurMaterial.uniforms.size.value.set(width,height);this.hBlurMaterial.needsUpdate=!0}})}","~:source","shadow$provide[\"module$node_modules$three_stdlib$postprocessing$SAOPass\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SAOPass = void 0;\n\nvar _three = require(\"three\");\n\nvar _Pass = require(\"./Pass.js\");\n\nvar _SAOShader = require(\"../shaders/SAOShader.js\");\n\nvar _DepthLimitedBlurShader = require(\"../shaders/DepthLimitedBlurShader.js\");\n\nvar _CopyShader = require(\"../shaders/CopyShader.js\");\n\nvar _UnpackDepthRGBAShader = require(\"../shaders/UnpackDepthRGBAShader.js\");\n\n/**\n * SAO implementation inspired from bhouston previous SAO work\n */\nvar SAOPass = function SAOPass(scene, camera, depthTexture, useNormals, resolution) {\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.supportsDepthTextureExtension = depthTexture !== undefined ? depthTexture : false;\n  this.supportsNormalTexture = useNormals !== undefined ? useNormals : false;\n  this.originalClearColor = new _three.Color();\n  this._oldClearColor = new _three.Color();\n  this.oldClearAlpha = 1;\n  this.params = {\n    output: 0,\n    saoBias: 0.5,\n    saoIntensity: 0.18,\n    saoScale: 1,\n    saoKernelRadius: 100,\n    saoMinResolution: 0,\n    saoBlur: true,\n    saoBlurRadius: 8,\n    saoBlurStdDev: 4,\n    saoBlurDepthCutoff: 0.01\n  };\n  this.resolution = resolution !== undefined ? new _three.Vector2(resolution.x, resolution.y) : new _three.Vector2(256, 256);\n  this.saoRenderTarget = new _three.WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: _three.LinearFilter,\n    magFilter: _three.LinearFilter,\n    format: _three.RGBAFormat\n  });\n  this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n  this.beautyRenderTarget = this.saoRenderTarget.clone();\n  this.normalRenderTarget = new _three.WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: _three.NearestFilter,\n    magFilter: _three.NearestFilter,\n    format: _three.RGBAFormat\n  });\n  this.depthRenderTarget = this.normalRenderTarget.clone();\n\n  if (this.supportsDepthTextureExtension) {\n    var depthTexture = new _three.DepthTexture();\n    depthTexture.type = _three.UnsignedShortType;\n    this.beautyRenderTarget.depthTexture = depthTexture;\n    this.beautyRenderTarget.depthBuffer = true;\n  }\n\n  this.depthMaterial = new _three.MeshDepthMaterial();\n  this.depthMaterial.depthPacking = _three.RGBADepthPacking;\n  this.depthMaterial.blending = _three.NoBlending;\n  this.normalMaterial = new _three.MeshNormalMaterial();\n  this.normalMaterial.blending = _three.NoBlending;\n\n  if (_SAOShader.SAOShader === undefined) {\n    console.error('THREE.SAOPass relies on SAOShader');\n  }\n\n  this.saoMaterial = new _three.ShaderMaterial({\n    defines: Object.assign({}, _SAOShader.SAOShader.defines),\n    fragmentShader: _SAOShader.SAOShader.fragmentShader,\n    vertexShader: _SAOShader.SAOShader.vertexShader,\n    uniforms: _three.UniformsUtils.clone(_SAOShader.SAOShader.uniforms)\n  });\n  this.saoMaterial.extensions.derivatives = true;\n  this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0;\n  this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n  this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n  this.saoMaterial.blending = _three.NoBlending;\n\n  if (_DepthLimitedBlurShader.DepthLimitedBlurShader === undefined) {\n    console.error('THREE.SAOPass relies on DepthLimitedBlurShader');\n  }\n\n  this.vBlurMaterial = new _three.ShaderMaterial({\n    uniforms: _three.UniformsUtils.clone(_DepthLimitedBlurShader.DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, _DepthLimitedBlurShader.DepthLimitedBlurShader.defines),\n    vertexShader: _DepthLimitedBlurShader.DepthLimitedBlurShader.vertexShader,\n    fragmentShader: _DepthLimitedBlurShader.DepthLimitedBlurShader.fragmentShader\n  });\n  this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n  this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.vBlurMaterial.blending = _three.NoBlending;\n  this.hBlurMaterial = new _three.ShaderMaterial({\n    uniforms: _three.UniformsUtils.clone(_DepthLimitedBlurShader.DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, _DepthLimitedBlurShader.DepthLimitedBlurShader.defines),\n    vertexShader: _DepthLimitedBlurShader.DepthLimitedBlurShader.vertexShader,\n    fragmentShader: _DepthLimitedBlurShader.DepthLimitedBlurShader.fragmentShader\n  });\n  this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\n  this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.hBlurMaterial.blending = _three.NoBlending;\n\n  if (_CopyShader.CopyShader === undefined) {\n    console.error('THREE.SAOPass relies on CopyShader');\n  }\n\n  this.materialCopy = new _three.ShaderMaterial({\n    uniforms: _three.UniformsUtils.clone(_CopyShader.CopyShader.uniforms),\n    vertexShader: _CopyShader.CopyShader.vertexShader,\n    fragmentShader: _CopyShader.CopyShader.fragmentShader,\n    blending: _three.NoBlending\n  });\n  this.materialCopy.transparent = true;\n  this.materialCopy.depthTest = false;\n  this.materialCopy.depthWrite = false;\n  this.materialCopy.blending = _three.CustomBlending;\n  this.materialCopy.blendSrc = _three.DstColorFactor;\n  this.materialCopy.blendDst = _three.ZeroFactor;\n  this.materialCopy.blendEquation = _three.AddEquation;\n  this.materialCopy.blendSrcAlpha = _three.DstAlphaFactor;\n  this.materialCopy.blendDstAlpha = _three.ZeroFactor;\n  this.materialCopy.blendEquationAlpha = _three.AddEquation;\n\n  if (_UnpackDepthRGBAShader.UnpackDepthRGBAShader === undefined) {\n    console.error('THREE.SAOPass relies on UnpackDepthRGBAShader');\n  }\n\n  this.depthCopy = new _three.ShaderMaterial({\n    uniforms: _three.UniformsUtils.clone(_UnpackDepthRGBAShader.UnpackDepthRGBAShader.uniforms),\n    vertexShader: _UnpackDepthRGBAShader.UnpackDepthRGBAShader.vertexShader,\n    fragmentShader: _UnpackDepthRGBAShader.UnpackDepthRGBAShader.fragmentShader,\n    blending: _three.NoBlending\n  });\n  this.fsQuad = new _Pass.FullScreenQuad(null);\n};\n\nexports.SAOPass = SAOPass;\nSAOPass.OUTPUT = {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n};\nSAOPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\n  constructor: SAOPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/\n  ) {\n    // Rendering readBuffer first when rendering to screen\n    if (this.renderToScreen) {\n      this.materialCopy.blending = _three.NoBlending;\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n\n    if (this.params.output === 1) {\n      return;\n    }\n\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias;\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far; // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n    var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      _DepthLimitedBlurShader.BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new _three.Vector2(0, 1));\n\n      _DepthLimitedBlurShader.BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new _three.Vector2(1, 0));\n\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    } // Rendering scene to depth texture\n\n\n    renderer.setClearColor(0x000000);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // Re-render scene if depth texture extension is not supported\n\n    if (!this.supportsDepthTextureExtension) {\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0);\n    }\n\n    if (this.supportsNormalTexture) {\n      // Clear rule : default normal is facing the camera\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    } // Rendering SAO texture\n\n\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0); // Blurring SAO texture\n\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0);\n    }\n\n    var outputMaterial = this.materialCopy; // Setting up SAO rendering\n\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } // Blending depends on output, only want a CustomBlending when showing SAO\n\n\n    if (this.params.output === 0) {\n      outputMaterial.blending = _three.CustomBlending;\n    } else {\n      outputMaterial.blending = _three.NoBlending;\n    } // Rendering SAOPass result on top of previous pass\n\n\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  },\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms['size'].value.set(width, height);\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms['size'].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms['size'].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n});\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_stdlib$shaders$CopyShader","~$module$node_modules$three_stdlib$shaders$SAOShader","~$shadow.js","~$module$node_modules$three_stdlib$postprocessing$Pass","~$module$node_modules$three_stdlib$shaders$UnpackDepthRGBAShader","~$module$node_modules$three_stdlib$shaders$DepthLimitedBlurShader"]],"~:properties",["^5",["fragmentShader","depthTest","Default","supportsDepthTextureExtension","output","blending","saoKernelRadius","needsUpdate","params","prototype","blendEquation","depthBuffer","transparent","needsSwap","materialCopy","hBlurMaterial","__esModule","overrideMaterial","blendDstAlpha","saoBias","prevStdDev","OUTPUT","saoBlurRadius","camera","saoIntensity","defines","vBlurMaterial","derivatives","renderPass","saoBlurDepthCutoff","vertexShader","saoRenderTarget","value","blendSrcAlpha","renderOverride","fsQuad","oldClearAlpha","beautyRenderTarget","depthRenderTarget","magFilter","blendDst","blurIntermediateRenderTarget","saoMinResolution","autoClear","supportsNormalTexture","SAOPass","type","render","_oldClearColor","blendSrc","setSize","depthPacking","saoBlur","Normal","depthWrite","originalClearColor","depthMaterial","normalRenderTarget","saoScale","clear","uniforms","normalMaterial","saoBlurStdDev","minFilter","Depth","Beauty","depthCopy","SAO","prevNumSamples","saoMaterial","blendEquationAlpha","format","constructor","scene","resolution","depthTexture","material"]],"~:compiled-at",1630917515522,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$postprocessing$SAOPass.js\",\n\"lineCount\":24,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/postprocessing/SAOPass.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$postprocessing$SAOPass\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.SAOPass = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _Pass = require(\\\"./Pass.js\\\");\\n\\nvar _SAOShader = require(\\\"../shaders/SAOShader.js\\\");\\n\\nvar _DepthLimitedBlurShader = require(\\\"../shaders/DepthLimitedBlurShader.js\\\");\\n\\nvar _CopyShader = require(\\\"../shaders/CopyShader.js\\\");\\n\\nvar _UnpackDepthRGBAShader = require(\\\"../shaders/UnpackDepthRGBAShader.js\\\");\\n\\n/**\\n * SAO implementation inspired from bhouston previous SAO work\\n */\\nvar SAOPass = function SAOPass(scene, camera, depthTexture, useNormals, resolution) {\\n  this.scene = scene;\\n  this.camera = camera;\\n  this.clear = true;\\n  this.needsSwap = false;\\n  this.supportsDepthTextureExtension = depthTexture !== undefined ? depthTexture : false;\\n  this.supportsNormalTexture = useNormals !== undefined ? useNormals : false;\\n  this.originalClearColor = new _three.Color();\\n  this._oldClearColor = new _three.Color();\\n  this.oldClearAlpha = 1;\\n  this.params = {\\n    output: 0,\\n    saoBias: 0.5,\\n    saoIntensity: 0.18,\\n    saoScale: 1,\\n    saoKernelRadius: 100,\\n    saoMinResolution: 0,\\n    saoBlur: true,\\n    saoBlurRadius: 8,\\n    saoBlurStdDev: 4,\\n    saoBlurDepthCutoff: 0.01\\n  };\\n  this.resolution = resolution !== undefined ? new _three.Vector2(resolution.x, resolution.y) : new _three.Vector2(256, 256);\\n  this.saoRenderTarget = new _three.WebGLRenderTarget(this.resolution.x, this.resolution.y, {\\n    minFilter: _three.LinearFilter,\\n    magFilter: _three.LinearFilter,\\n    format: _three.RGBAFormat\\n  });\\n  this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\\n  this.beautyRenderTarget = this.saoRenderTarget.clone();\\n  this.normalRenderTarget = new _three.WebGLRenderTarget(this.resolution.x, this.resolution.y, {\\n    minFilter: _three.NearestFilter,\\n    magFilter: _three.NearestFilter,\\n    format: _three.RGBAFormat\\n  });\\n  this.depthRenderTarget = this.normalRenderTarget.clone();\\n\\n  if (this.supportsDepthTextureExtension) {\\n    var depthTexture = new _three.DepthTexture();\\n    depthTexture.type = _three.UnsignedShortType;\\n    this.beautyRenderTarget.depthTexture = depthTexture;\\n    this.beautyRenderTarget.depthBuffer = true;\\n  }\\n\\n  this.depthMaterial = new _three.MeshDepthMaterial();\\n  this.depthMaterial.depthPacking = _three.RGBADepthPacking;\\n  this.depthMaterial.blending = _three.NoBlending;\\n  this.normalMaterial = new _three.MeshNormalMaterial();\\n  this.normalMaterial.blending = _three.NoBlending;\\n\\n  if (_SAOShader.SAOShader === undefined) {\\n    console.error('THREE.SAOPass relies on SAOShader');\\n  }\\n\\n  this.saoMaterial = new _three.ShaderMaterial({\\n    defines: Object.assign({}, _SAOShader.SAOShader.defines),\\n    fragmentShader: _SAOShader.SAOShader.fragmentShader,\\n    vertexShader: _SAOShader.SAOShader.vertexShader,\\n    uniforms: _three.UniformsUtils.clone(_SAOShader.SAOShader.uniforms)\\n  });\\n  this.saoMaterial.extensions.derivatives = true;\\n  this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\\n  this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0;\\n  this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\\n  this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\\n  this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\\n  this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\\n  this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\\n  this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\\n  this.saoMaterial.blending = _three.NoBlending;\\n\\n  if (_DepthLimitedBlurShader.DepthLimitedBlurShader === undefined) {\\n    console.error('THREE.SAOPass relies on DepthLimitedBlurShader');\\n  }\\n\\n  this.vBlurMaterial = new _three.ShaderMaterial({\\n    uniforms: _three.UniformsUtils.clone(_DepthLimitedBlurShader.DepthLimitedBlurShader.uniforms),\\n    defines: Object.assign({}, _DepthLimitedBlurShader.DepthLimitedBlurShader.defines),\\n    vertexShader: _DepthLimitedBlurShader.DepthLimitedBlurShader.vertexShader,\\n    fragmentShader: _DepthLimitedBlurShader.DepthLimitedBlurShader.fragmentShader\\n  });\\n  this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\\n  this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\\n  this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\\n  this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\\n  this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\\n  this.vBlurMaterial.blending = _three.NoBlending;\\n  this.hBlurMaterial = new _three.ShaderMaterial({\\n    uniforms: _three.UniformsUtils.clone(_DepthLimitedBlurShader.DepthLimitedBlurShader.uniforms),\\n    defines: Object.assign({}, _DepthLimitedBlurShader.DepthLimitedBlurShader.defines),\\n    vertexShader: _DepthLimitedBlurShader.DepthLimitedBlurShader.vertexShader,\\n    fragmentShader: _DepthLimitedBlurShader.DepthLimitedBlurShader.fragmentShader\\n  });\\n  this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\\n  this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\\n  this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\\n  this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\\n  this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\\n  this.hBlurMaterial.blending = _three.NoBlending;\\n\\n  if (_CopyShader.CopyShader === undefined) {\\n    console.error('THREE.SAOPass relies on CopyShader');\\n  }\\n\\n  this.materialCopy = new _three.ShaderMaterial({\\n    uniforms: _three.UniformsUtils.clone(_CopyShader.CopyShader.uniforms),\\n    vertexShader: _CopyShader.CopyShader.vertexShader,\\n    fragmentShader: _CopyShader.CopyShader.fragmentShader,\\n    blending: _three.NoBlending\\n  });\\n  this.materialCopy.transparent = true;\\n  this.materialCopy.depthTest = false;\\n  this.materialCopy.depthWrite = false;\\n  this.materialCopy.blending = _three.CustomBlending;\\n  this.materialCopy.blendSrc = _three.DstColorFactor;\\n  this.materialCopy.blendDst = _three.ZeroFactor;\\n  this.materialCopy.blendEquation = _three.AddEquation;\\n  this.materialCopy.blendSrcAlpha = _three.DstAlphaFactor;\\n  this.materialCopy.blendDstAlpha = _three.ZeroFactor;\\n  this.materialCopy.blendEquationAlpha = _three.AddEquation;\\n\\n  if (_UnpackDepthRGBAShader.UnpackDepthRGBAShader === undefined) {\\n    console.error('THREE.SAOPass relies on UnpackDepthRGBAShader');\\n  }\\n\\n  this.depthCopy = new _three.ShaderMaterial({\\n    uniforms: _three.UniformsUtils.clone(_UnpackDepthRGBAShader.UnpackDepthRGBAShader.uniforms),\\n    vertexShader: _UnpackDepthRGBAShader.UnpackDepthRGBAShader.vertexShader,\\n    fragmentShader: _UnpackDepthRGBAShader.UnpackDepthRGBAShader.fragmentShader,\\n    blending: _three.NoBlending\\n  });\\n  this.fsQuad = new _Pass.FullScreenQuad(null);\\n};\\n\\nexports.SAOPass = SAOPass;\\nSAOPass.OUTPUT = {\\n  Beauty: 1,\\n  Default: 0,\\n  SAO: 2,\\n  Depth: 3,\\n  Normal: 4\\n};\\nSAOPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\\n  constructor: SAOPass,\\n  render: function render(renderer, writeBuffer, readBuffer\\n  /*, deltaTime, maskActive*/\\n  ) {\\n    // Rendering readBuffer first when rendering to screen\\n    if (this.renderToScreen) {\\n      this.materialCopy.blending = _three.NoBlending;\\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\\n      this.materialCopy.needsUpdate = true;\\n      this.renderPass(renderer, this.materialCopy, null);\\n    }\\n\\n    if (this.params.output === 1) {\\n      return;\\n    }\\n\\n    renderer.getClearColor(this._oldClearColor);\\n    this.oldClearAlpha = renderer.getClearAlpha();\\n    var oldAutoClear = renderer.autoClear;\\n    renderer.autoClear = false;\\n    renderer.setRenderTarget(this.depthRenderTarget);\\n    renderer.clear();\\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias;\\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution;\\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far; // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\\n\\n    var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\\n\\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\\n      _DepthLimitedBlurShader.BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new _three.Vector2(0, 1));\\n\\n      _DepthLimitedBlurShader.BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new _three.Vector2(1, 0));\\n\\n      this.prevStdDev = this.params.saoBlurStdDev;\\n      this.prevNumSamples = this.params.saoBlurRadius;\\n    } // Rendering scene to depth texture\\n\\n\\n    renderer.setClearColor(0x000000);\\n    renderer.setRenderTarget(this.beautyRenderTarget);\\n    renderer.clear();\\n    renderer.render(this.scene, this.camera); // Re-render scene if depth texture extension is not supported\\n\\n    if (!this.supportsDepthTextureExtension) {\\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0);\\n    }\\n\\n    if (this.supportsNormalTexture) {\\n      // Clear rule : default normal is facing the camera\\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\\n    } // Rendering SAO texture\\n\\n\\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0); // Blurring SAO texture\\n\\n    if (this.params.saoBlur) {\\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0);\\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0);\\n    }\\n\\n    var outputMaterial = this.materialCopy; // Setting up SAO rendering\\n\\n    if (this.params.output === 3) {\\n      if (this.supportsDepthTextureExtension) {\\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture;\\n        this.materialCopy.needsUpdate = true;\\n      } else {\\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture;\\n        this.depthCopy.needsUpdate = true;\\n        outputMaterial = this.depthCopy;\\n      }\\n    } else if (this.params.output === 4) {\\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\\n      this.materialCopy.needsUpdate = true;\\n    } else {\\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\\n      this.materialCopy.needsUpdate = true;\\n    } // Blending depends on output, only want a CustomBlending when showing SAO\\n\\n\\n    if (this.params.output === 0) {\\n      outputMaterial.blending = _three.CustomBlending;\\n    } else {\\n      outputMaterial.blending = _three.NoBlending;\\n    } // Rendering SAOPass result on top of previous pass\\n\\n\\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\\n    renderer.autoClear = oldAutoClear;\\n  },\\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\\n    // save original state\\n    renderer.getClearColor(this.originalClearColor);\\n    var originalClearAlpha = renderer.getClearAlpha();\\n    var originalAutoClear = renderer.autoClear;\\n    renderer.setRenderTarget(renderTarget); // setup pass state\\n\\n    renderer.autoClear = false;\\n\\n    if (clearColor !== undefined && clearColor !== null) {\\n      renderer.setClearColor(clearColor);\\n      renderer.setClearAlpha(clearAlpha || 0.0);\\n      renderer.clear();\\n    }\\n\\n    this.fsQuad.material = passMaterial;\\n    this.fsQuad.render(renderer); // restore original state\\n\\n    renderer.autoClear = originalAutoClear;\\n    renderer.setClearColor(this.originalClearColor);\\n    renderer.setClearAlpha(originalClearAlpha);\\n  },\\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\\n    renderer.getClearColor(this.originalClearColor);\\n    var originalClearAlpha = renderer.getClearAlpha();\\n    var originalAutoClear = renderer.autoClear;\\n    renderer.setRenderTarget(renderTarget);\\n    renderer.autoClear = false;\\n    clearColor = overrideMaterial.clearColor || clearColor;\\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\\n\\n    if (clearColor !== undefined && clearColor !== null) {\\n      renderer.setClearColor(clearColor);\\n      renderer.setClearAlpha(clearAlpha || 0.0);\\n      renderer.clear();\\n    }\\n\\n    this.scene.overrideMaterial = overrideMaterial;\\n    renderer.render(this.scene, this.camera);\\n    this.scene.overrideMaterial = null; // restore original state\\n\\n    renderer.autoClear = originalAutoClear;\\n    renderer.setClearColor(this.originalClearColor);\\n    renderer.setClearAlpha(originalClearAlpha);\\n  },\\n  setSize: function setSize(width, height) {\\n    this.beautyRenderTarget.setSize(width, height);\\n    this.saoRenderTarget.setSize(width, height);\\n    this.blurIntermediateRenderTarget.setSize(width, height);\\n    this.normalRenderTarget.setSize(width, height);\\n    this.depthRenderTarget.setSize(width, height);\\n    this.saoMaterial.uniforms['size'].value.set(width, height);\\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\\n    this.saoMaterial.needsUpdate = true;\\n    this.vBlurMaterial.uniforms['size'].value.set(width, height);\\n    this.vBlurMaterial.needsUpdate = true;\\n    this.hBlurMaterial.uniforms['size'].value.set(width, height);\\n    this.hBlurMaterial.needsUpdate = true;\\n  }\\n});\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"SAOPass\",\"_three\",\"_Pass\",\"_SAOShader\",\"_DepthLimitedBlurShader\",\"_CopyShader\",\"_UnpackDepthRGBAShader\",\"scene\",\"camera\",\"depthTexture\",\"useNormals\",\"resolution\",\"clear\",\"needsSwap\",\"supportsDepthTextureExtension\",\"undefined\",\"supportsNormalTexture\",\"originalClearColor\",\"Color\",\"_oldClearColor\",\"oldClearAlpha\",\"params\",\"output\",\"saoBias\",\"saoIntensity\",\"saoScale\",\"saoKernelRadius\",\"saoMinResolution\",\"saoBlur\",\"saoBlurRadius\",\"saoBlurStdDev\",\"saoBlurDepthCutoff\",\"Vector2\",\"x\",\"y\",\"saoRenderTarget\",\"WebGLRenderTarget\",\"minFilter\",\"LinearFilter\",\"magFilter\",\"format\",\"RGBAFormat\",\"blurIntermediateRenderTarget\",\"clone\",\"beautyRenderTarget\",\"normalRenderTarget\",\"NearestFilter\",\"depthRenderTarget\",\"DepthTexture\",\"type\",\"UnsignedShortType\",\"depthBuffer\",\"depthMaterial\",\"MeshDepthMaterial\",\"depthPacking\",\"RGBADepthPacking\",\"blending\",\"NoBlending\",\"normalMaterial\",\"MeshNormalMaterial\",\"SAOShader\",\"console\",\"error\",\"saoMaterial\",\"ShaderMaterial\",\"defines\",\"assign\",\"fragmentShader\",\"vertexShader\",\"uniforms\",\"UniformsUtils\",\"extensions\",\"derivatives\",\"isPerspectiveCamera\",\"texture\",\"set\",\"copy\",\"projectionMatrixInverse\",\"projectionMatrix\",\"DepthLimitedBlurShader\",\"vBlurMaterial\",\"hBlurMaterial\",\"CopyShader\",\"materialCopy\",\"transparent\",\"depthTest\",\"depthWrite\",\"CustomBlending\",\"blendSrc\",\"DstColorFactor\",\"blendDst\",\"ZeroFactor\",\"blendEquation\",\"AddEquation\",\"blendSrcAlpha\",\"DstAlphaFactor\",\"blendDstAlpha\",\"blendEquationAlpha\",\"UnpackDepthRGBAShader\",\"depthCopy\",\"fsQuad\",\"FullScreenQuad\",\"OUTPUT\",\"Beauty\",\"Default\",\"SAO\",\"Depth\",\"Normal\",\"prototype\",\"create\",\"Pass\",\"constructor\",\"render\",\"renderer\",\"writeBuffer\",\"readBuffer\",\"renderToScreen\",\"needsUpdate\",\"renderPass\",\"getClearColor\",\"getClearAlpha\",\"oldAutoClear\",\"autoClear\",\"setRenderTarget\",\"near\",\"far\",\"depthCutoff\",\"Math\",\"floor\",\"prevStdDev\",\"prevNumSamples\",\"BlurShaderUtils\",\"configure\",\"setClearColor\",\"renderOverride\",\"outputMaterial\",\"passMaterial\",\"renderTarget\",\"clearColor\",\"clearAlpha\",\"originalClearAlpha\",\"originalAutoClear\",\"setClearAlpha\",\"material\",\"overrideMaterial\",\"setSize\",\"width\",\"height\"]\n}\n"]