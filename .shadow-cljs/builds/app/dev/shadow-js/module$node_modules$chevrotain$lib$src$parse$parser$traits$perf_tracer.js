["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js"],"~:js","shadow$provide.module$node_modules$chevrotain$lib$src$parse$parser$traits$perf_tracer=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.PerformanceTracer=void 0;var utils_1=require(\"module$node_modules$$chevrotain$utils$lib$src$api\"),parser_1=require(\"module$node_modules$chevrotain$lib$src$parse$parser$parser\");global=function(){function PerformanceTracer(){}PerformanceTracer.prototype.initPerformanceTracer=function(config){if(utils_1.has(config,\n\"traceInitPerf\")){config=config.traceInitPerf;var traceIsNumber=\"number\"===typeof config;this.traceInitMaxIdent=traceIsNumber?config:Infinity;this.traceInitPerf=traceIsNumber?0<config:config}else this.traceInitMaxIdent=0,this.traceInitPerf=parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;this.traceInitIndent=-1};PerformanceTracer.prototype.TRACE_INIT=function(phaseDesc,phaseImpl){if(!0===this.traceInitPerf){this.traceInitIndent++;var indent=Array(this.traceInitIndent+1).join(\"\\t\");this.traceInitIndent<\nthis.traceInitMaxIdent&&console.log(indent+\"--\\x3e \\x3c\"+phaseDesc+\"\\x3e\");var _a=utils_1.timer(phaseImpl);phaseImpl=_a.time;_a=_a.value;var traceMethod=10<phaseImpl?console.warn:console.log;this.traceInitIndent<this.traceInitMaxIdent&&traceMethod(indent+\"\\x3c-- \\x3c\"+phaseDesc+\"\\x3e time: \"+phaseImpl+\"ms\");this.traceInitIndent--;return _a}return phaseImpl()};return PerformanceTracer}();exports.PerformanceTracer=global}","~:source","shadow$provide[\"module$node_modules$chevrotain$lib$src$parse$parser$traits$perf_tracer\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PerformanceTracer = void 0;\nvar utils_1 = require(\"@chevrotain/utils\");\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar PerformanceTracer = /** @class */ (function () {\n    function PerformanceTracer() {\n    }\n    PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n        if (utils_1.has(config, \"traceInitPerf\")) {\n            var userTraceInitPerf = config.traceInitPerf;\n            var traceIsNumber = typeof userTraceInitPerf === \"number\";\n            this.traceInitMaxIdent = traceIsNumber\n                ? userTraceInitPerf\n                : Infinity;\n            this.traceInitPerf = traceIsNumber\n                ? userTraceInitPerf > 0\n                : userTraceInitPerf;\n        }\n        else {\n            this.traceInitMaxIdent = 0;\n            this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\n        }\n        this.traceInitIndent = -1;\n    };\n    PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(indent + \"--> <\" + phaseDesc + \">\");\n            }\n            var _a = utils_1.timer(phaseImpl), time = _a.time, value = _a.value;\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            var traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    };\n    return PerformanceTracer;\n}());\nexports.PerformanceTracer = PerformanceTracer;\n//# sourceMappingURL=perf_tracer.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$chevrotain$utils$lib$src$api","~$shadow.js","~$module$node_modules$chevrotain$lib$src$parse$parser$parser"]],"~:properties",["^5",["PerformanceTracer","__esModule","traceInitIndent","value","TRACE_INIT","traceInitPerf","initPerformanceTracer","traceInitMaxIdent"]],"~:compiled-at",1630917515716,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$chevrotain$lib$src$parse$parser$traits$perf_tracer.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,sEAAA,CAA2F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEnIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,iBAAR,CAA4B,IAAK,EACjC,KAAIC,QAAUP,OAAA,CAAQ,mDAAR,CAAd,CACIQ,SAAWR,OAAA,CAAQ,4DAAR,CAIXM,OAAAA,CAAmC,QAAS,EAAG,CAC/CA,QAASA,kBAAiB,EAAG,EAE7BA,iBAAkBG,CAAAA,SAAUC,CAAAA,qBAA5B,CAAoDC,QAAS,CAACC,MAAD,CAAS,CAClE,GAAIL,OAAQM,CAAAA,GAAR,CAAYD,MAAZ;AAAoB,eAApB,CAAJ,CAA0C,CAClCE,MAAAA,CAAoBF,MAAOG,CAAAA,aAC/B,KAAIC,cAA6C,QAA7CA,GAAgB,MAAOF,OAC3B,KAAKG,CAAAA,iBAAL,CAAyBD,aAAA,CACnBF,MADmB,CAEnBI,QACN,KAAKH,CAAAA,aAAL,CAAqBC,aAAA,CACK,CADL,CACfF,MADe,CAEfA,MARgC,CAA1C,IAWI,KAAKG,CAAAA,iBACL,CADyB,CACzB,CAAA,IAAKF,CAAAA,aAAL,CAAqBP,QAASW,CAAAA,qBAAsBJ,CAAAA,aAExD,KAAKK,CAAAA,eAAL,CAAuB,EAf2C,CAiBtEd,kBAAkBG,CAAAA,SAAUY,CAAAA,UAA5B,CAAyCC,QAAS,CAACC,SAAD,CAAYC,SAAZ,CAAuB,CAGrE,GAA2B,CAAA,CAA3B,GAAI,IAAKT,CAAAA,aAAT,CAAiC,CAC7B,IAAKK,CAAAA,eAAL,EACA,KAAIK,OAAaC,KAAJ,CAAU,IAAKN,CAAAA,eAAf,CAAiC,CAAjC,CAAoCO,CAAAA,IAApC,CAAyC,IAAzC,CACT,KAAKP,CAAAA,eAAT;AAA2B,IAAKH,CAAAA,iBAAhC,EACIW,OAAQC,CAAAA,GAAR,CAAYJ,MAAZ,CAAqB,aAArB,CAA+BF,SAA/B,CAA2C,MAA3C,CAJyB,KAMzBO,GAAKvB,OAAQwB,CAAAA,KAAR,CAAcP,SAAd,CAA0BQ,UAAAA,CAAOF,EAAGE,CAAAA,IAAM3B,GAAAA,CAAQyB,EAAGzB,CAAAA,KAE9D,KAAI4B,YAAqB,EAAP,CAAAD,SAAA,CAAYJ,OAAQM,CAAAA,IAApB,CAA2BN,OAAQC,CAAAA,GACjD,KAAKT,CAAAA,eAAT,CAA2B,IAAKH,CAAAA,iBAAhC,EACIgB,WAAA,CAAYR,MAAZ,CAAqB,aAArB,CAA+BF,SAA/B,CAA2C,aAA3C,CAAwDS,SAAxD,CAA+D,IAA/D,CAEJ,KAAKZ,CAAAA,eAAL,EACA,OAAOf,GAbsB,CAgB7B,MAAOmB,UAAA,EAnB0D,CAsBzE,OAAOlB,kBA1CwC,CAAZ,EA4CvCJ,QAAQI,CAAAA,iBAAR,CAA4BA,MArDuG;\",\n\"sources\":[\"node_modules/chevrotain/lib/src/parse/parser/traits/perf_tracer.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$chevrotain$lib$src$parse$parser$traits$perf_tracer\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.PerformanceTracer = void 0;\\nvar utils_1 = require(\\\"@chevrotain/utils\\\");\\nvar parser_1 = require(\\\"../parser\\\");\\n/**\\n * Trait responsible for runtime parsing errors.\\n */\\nvar PerformanceTracer = /** @class */ (function () {\\n    function PerformanceTracer() {\\n    }\\n    PerformanceTracer.prototype.initPerformanceTracer = function (config) {\\n        if (utils_1.has(config, \\\"traceInitPerf\\\")) {\\n            var userTraceInitPerf = config.traceInitPerf;\\n            var traceIsNumber = typeof userTraceInitPerf === \\\"number\\\";\\n            this.traceInitMaxIdent = traceIsNumber\\n                ? userTraceInitPerf\\n                : Infinity;\\n            this.traceInitPerf = traceIsNumber\\n                ? userTraceInitPerf > 0\\n                : userTraceInitPerf;\\n        }\\n        else {\\n            this.traceInitMaxIdent = 0;\\n            this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\\n        }\\n        this.traceInitIndent = -1;\\n    };\\n    PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\\n        // No need to optimize this using NOOP pattern because\\n        // It is not called in a hot spot...\\n        if (this.traceInitPerf === true) {\\n            this.traceInitIndent++;\\n            var indent = new Array(this.traceInitIndent + 1).join(\\\"\\\\t\\\");\\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\\n                console.log(indent + \\\"--\\u003e <\\\" + phaseDesc + \\\">\\\");\\n            }\\n            var _a = utils_1.timer(phaseImpl), time = _a.time, value = _a.value;\\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\\n            var traceMethod = time > 10 ? console.warn : console.log;\\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\\n                traceMethod(indent + \\\"<-- <\\\" + phaseDesc + \\\"> time: \\\" + time + \\\"ms\\\");\\n            }\\n            this.traceInitIndent--;\\n            return value;\\n        }\\n        else {\\n            return phaseImpl();\\n        }\\n    };\\n    return PerformanceTracer;\\n}());\\nexports.PerformanceTracer = PerformanceTracer;\\n//# sourceMappingURL=perf_tracer.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"PerformanceTracer\",\"utils_1\",\"parser_1\",\"prototype\",\"initPerformanceTracer\",\"PerformanceTracer.prototype.initPerformanceTracer\",\"config\",\"has\",\"userTraceInitPerf\",\"traceInitPerf\",\"traceIsNumber\",\"traceInitMaxIdent\",\"Infinity\",\"DEFAULT_PARSER_CONFIG\",\"traceInitIndent\",\"TRACE_INIT\",\"PerformanceTracer.prototype.TRACE_INIT\",\"phaseDesc\",\"phaseImpl\",\"indent\",\"Array\",\"join\",\"console\",\"log\",\"_a\",\"timer\",\"time\",\"traceMethod\",\"warn\"]\n}\n"]