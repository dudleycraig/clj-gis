["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/animation/MMDPhysics.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$animation$MMDPhysics=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.MMDPhysics=void 0;var _three=require(\"module$node_modules$three$build$three_module\");global=function(){function MMDPhysics(mesh,rigidBodyParams,constraintParams,params){if(\"undefined\"===typeof Ammo)throw Error(\"THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js\");constraintParams=constraintParams||[];params=params||\n{};this.manager=new ResourceManager;this.mesh=mesh;this.unitStep=void 0!==params.unitStep?params.unitStep:1/65;this.maxStepNum=void 0!==params.maxStepNum?params.maxStepNum:3;this.gravity=new _three.Vector3(0,-98,0);void 0!==params.gravity&&this.gravity.copy(params.gravity);this.world=void 0!==params.world?params.world:null;this.bodies=[];this.constraints=[];this._init(mesh,rigidBodyParams,constraintParams)}function ResourceManager(){this.threeVector3s=[];this.threeMatrix4s=[];this.threeQuaternions=\n[];this.threeEulers=[];this.transforms=[];this.quaternions=[];this.vector3s=[]}function RigidBody(mesh,world,params,manager){this.mesh=mesh;this.world=world;this.params=params;this.manager=manager;this.boneOffsetFormInverse=this.boneOffsetForm=this.bone=this.body=null;this._init()}function Constraint(mesh,world,bodyA,bodyB,params,manager){this.mesh=mesh;this.world=world;this.bodyA=bodyA;this.bodyB=bodyB;this.params=params;this.manager=manager;this.constraint=null;this._init()}function MMDPhysicsHelper(mesh,\nphysics){_three.Object3D.call(this);this.root=mesh;this.physics=physics;this.matrix.copy(mesh.matrixWorld);this.matrixAutoUpdate=!1;this.materials=[];this.materials.push(new _three.MeshBasicMaterial({color:new _three.Color(16746632),wireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0}));this.materials.push(new _three.MeshBasicMaterial({color:new _three.Color(8978312),wireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0}));this.materials.push(new _three.MeshBasicMaterial({color:new _three.Color(8947967),\nwireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0}));this._init()}MMDPhysics.prototype={constructor:MMDPhysics,update:function(delta){var manager=this.manager,mesh=this.mesh,isNonDefaultScale=!1,position=manager.allocThreeVector3(),quaternion=manager.allocThreeQuaternion(),scale=manager.allocThreeVector3();mesh.matrixWorld.decompose(position,quaternion,scale);if(1!==scale.x||1!==scale.y||1!==scale.z)isNonDefaultScale=!0;if(isNonDefaultScale){var parent=mesh.parent;null!==parent&&\n(mesh.parent=null);scale.copy(this.mesh.scale);mesh.scale.set(1,1,1);mesh.updateMatrixWorld(!0)}this._updateRigidBodies();this._stepSimulation(delta);this._updateBones();isNonDefaultScale&&(null!==parent&&(mesh.parent=parent),mesh.scale.copy(scale));manager.freeThreeVector3(scale);manager.freeThreeQuaternion(quaternion);manager.freeThreeVector3(position);return this},reset:function(){for(var i=0,il=this.bodies.length;i<il;i++)this.bodies[i].reset();return this},warmup:function(cycles){for(var i=0;i<\ncycles;i++)this.update(1/60);return this},setGravity:function(gravity){this.world.setGravity(new Ammo.btVector3(gravity.x,gravity.y,gravity.z));this.gravity.copy(gravity);return this},createHelper:function(){return new MMDPhysicsHelper(this.mesh,this)},_init:function(mesh,rigidBodyParams,constraintParams){var manager=this.manager,parent=mesh.parent;null!==parent&&(parent=null);var currentPosition=manager.allocThreeVector3(),currentQuaternion=manager.allocThreeQuaternion(),currentScale=manager.allocThreeVector3();\ncurrentPosition.copy(mesh.position);currentQuaternion.copy(mesh.quaternion);currentScale.copy(mesh.scale);mesh.position.set(0,0,0);mesh.quaternion.set(0,0,0,1);mesh.scale.set(1,1,1);mesh.updateMatrixWorld(!0);null===this.world&&(this.world=this._createWorld(),this.setGravity(this.gravity));this._initRigidBodies(rigidBodyParams);this._initConstraints(constraintParams);null!==parent&&(mesh.parent=parent);mesh.position.copy(currentPosition);mesh.quaternion.copy(currentQuaternion);mesh.scale.copy(currentScale);\nmesh.updateMatrixWorld(!0);this.reset();manager.freeThreeVector3(currentPosition);manager.freeThreeQuaternion(currentQuaternion);manager.freeThreeVector3(currentScale)},_createWorld:function(){var config=new Ammo.btDefaultCollisionConfiguration,dispatcher=new Ammo.btCollisionDispatcher(config),cache=new Ammo.btDbvtBroadphase,solver=new Ammo.btSequentialImpulseConstraintSolver;return new Ammo.btDiscreteDynamicsWorld(dispatcher,cache,solver,config)},_initRigidBodies:function(rigidBodies){for(var i=\n0,il=rigidBodies.length;i<il;i++)this.bodies.push(new RigidBody(this.mesh,this.world,rigidBodies[i],this.manager))},_initConstraints:function(constraints){for(var i=0,il=constraints.length;i<il;i++){var params=constraints[i];this.constraints.push(new Constraint(this.mesh,this.world,this.bodies[params.rigidBodyIndex1],this.bodies[params.rigidBodyIndex2],params,this.manager))}},_stepSimulation:function(delta){var unitStep=this.unitStep,stepTime=delta;delta=(delta/unitStep|0)+1;stepTime<unitStep&&(stepTime=\nunitStep,delta=1);delta>this.maxStepNum&&(delta=this.maxStepNum);this.world.stepSimulation(stepTime,delta,unitStep)},_updateRigidBodies:function(){for(var i=0,il=this.bodies.length;i<il;i++)this.bodies[i].updateFromBone()},_updateBones:function(){for(var i=0,il=this.bodies.length;i<il;i++)this.bodies[i].updateBone()}};ResourceManager.prototype={constructor:ResourceManager,allocThreeVector3:function(){return 0<this.threeVector3s.length?this.threeVector3s.pop():new _three.Vector3},freeThreeVector3:function(v){this.threeVector3s.push(v)},\nallocThreeMatrix4:function(){return 0<this.threeMatrix4s.length?this.threeMatrix4s.pop():new _three.Matrix4},freeThreeMatrix4:function(m){this.threeMatrix4s.push(m)},allocThreeQuaternion:function(){return 0<this.threeQuaternions.length?this.threeQuaternions.pop():new _three.Quaternion},freeThreeQuaternion:function(q){this.threeQuaternions.push(q)},allocThreeEuler:function(){return 0<this.threeEulers.length?this.threeEulers.pop():new _three.Euler},freeThreeEuler:function(e){this.threeEulers.push(e)},\nallocTransform:function(){return 0<this.transforms.length?this.transforms.pop():new Ammo.btTransform},freeTransform:function(t){this.transforms.push(t)},allocQuaternion:function(){return 0<this.quaternions.length?this.quaternions.pop():new Ammo.btQuaternion},freeQuaternion:function(q){this.quaternions.push(q)},allocVector3:function(){return 0<this.vector3s.length?this.vector3s.pop():new Ammo.btVector3},freeVector3:function(v){this.vector3s.push(v)},setIdentity:function(t){t.setIdentity()},getBasis:function(t){var q=\nthis.allocQuaternion();t.getBasis().getRotation(q);return q},getBasisAsMatrix3:function(t){t=this.getBasis(t);var m=this.quaternionToMatrix3(t);this.freeQuaternion(t);return m},getOrigin:function(t){return t.getOrigin()},setOrigin:function(t,v){t.getOrigin().setValue(v.x(),v.y(),v.z())},copyOrigin:function(t1,t2){t2=t2.getOrigin();this.setOrigin(t1,t2)},setBasis:function(t,q){t.setRotation(q)},setBasisFromMatrix3:function(t,m){m=this.matrix3ToQuaternion(m);this.setBasis(t,m);this.freeQuaternion(m)},\nsetOriginFromArray3:function(t,a){t.getOrigin().setValue(a[0],a[1],a[2])},setOriginFromThreeVector3:function(t,v){t.getOrigin().setValue(v.x,v.y,v.z)},setBasisFromArray3:function(t,a){var thQ=this.allocThreeQuaternion(),thE=this.allocThreeEuler();thE.set(a[0],a[1],a[2]);this.setBasisFromThreeQuaternion(t,thQ.setFromEuler(thE));this.freeThreeEuler(thE);this.freeThreeQuaternion(thQ)},setBasisFromThreeQuaternion:function(t,a){var q=this.allocQuaternion();q.setX(a.x);q.setY(a.y);q.setZ(a.z);q.setW(a.w);\nthis.setBasis(t,q);this.freeQuaternion(q)},multiplyTransforms:function(t1,t2){var t=this.allocTransform();this.setIdentity(t);var m1=this.getBasisAsMatrix3(t1),m2=this.getBasisAsMatrix3(t2);t1=this.getOrigin(t1);t2=this.getOrigin(t2);t2=this.multiplyMatrix3ByVector3(m1,t2);t1=this.addVector3(t2,t1);this.setOrigin(t,t1);m1=this.multiplyMatrices3(m1,m2);this.setBasisFromMatrix3(t,m1);this.freeVector3(t2);this.freeVector3(t1);return t},inverseTransform:function(t){var t2=this.allocTransform(),m1=this.getBasisAsMatrix3(t);\nt=this.getOrigin(t);m1=this.transposeMatrix3(m1);t=this.negativeVector3(t);var v2=this.multiplyMatrix3ByVector3(m1,t);this.setOrigin(t2,v2);this.setBasisFromMatrix3(t2,m1);this.freeVector3(t);this.freeVector3(v2);return t2},multiplyMatrices3:function(m1,m2){var m3=[],v10=this.rowOfMatrix3(m1,0),v11=this.rowOfMatrix3(m1,1);m1=this.rowOfMatrix3(m1,2);var v20=this.columnOfMatrix3(m2,0),v21=this.columnOfMatrix3(m2,1);m2=this.columnOfMatrix3(m2,2);m3[0]=this.dotVectors3(v10,v20);m3[1]=this.dotVectors3(v10,\nv21);m3[2]=this.dotVectors3(v10,m2);m3[3]=this.dotVectors3(v11,v20);m3[4]=this.dotVectors3(v11,v21);m3[5]=this.dotVectors3(v11,m2);m3[6]=this.dotVectors3(m1,v20);m3[7]=this.dotVectors3(m1,v21);m3[8]=this.dotVectors3(m1,m2);this.freeVector3(v10);this.freeVector3(v11);this.freeVector3(m1);this.freeVector3(v20);this.freeVector3(v21);this.freeVector3(m2);return m3},addVector3:function(v1,v2){var v=this.allocVector3();v.setValue(v1.x()+v2.x(),v1.y()+v2.y(),v1.z()+v2.z());return v},dotVectors3:function(v1,\nv2){return v1.x()*v2.x()+v1.y()*v2.y()+v1.z()*v2.z()},rowOfMatrix3:function(m,i){var v=this.allocVector3();v.setValue(m[3*i],m[3*i+1],m[3*i+2]);return v},columnOfMatrix3:function(m,i){var v=this.allocVector3();v.setValue(m[i+0],m[i+3],m[i+6]);return v},negativeVector3:function(v){var v2=this.allocVector3();v2.setValue(-v.x(),-v.y(),-v.z());return v2},multiplyMatrix3ByVector3:function(m,v){var v4=this.allocVector3(),v0=this.rowOfMatrix3(m,0),v1=this.rowOfMatrix3(m,1);m=this.rowOfMatrix3(m,2);var x=\nthis.dotVectors3(v0,v),y=this.dotVectors3(v1,v);v=this.dotVectors3(m,v);v4.setValue(x,y,v);this.freeVector3(v0);this.freeVector3(v1);this.freeVector3(m);return v4},transposeMatrix3:function(m){var m2=[];m2[0]=m[0];m2[1]=m[3];m2[2]=m[6];m2[3]=m[1];m2[4]=m[4];m2[5]=m[7];m2[6]=m[2];m2[7]=m[5];m2[8]=m[8];return m2},quaternionToMatrix3:function(q){var m=[],x=q.x(),y=q.y(),z=q.z(),w=q.w();q=x*x;var yy=y*y,zz=z*z,xy=x*y,yz=y*z,zx=z*x;x*=w;y*=w;z*=w;m[0]=1-2*(yy+zz);m[1]=2*(xy-z);m[2]=2*(zx+y);m[3]=2*(xy+\nz);m[4]=1-2*(zz+q);m[5]=2*(yz-x);m[6]=2*(zx-y);m[7]=2*(yz+x);m[8]=1-2*(q+yy);return m},matrix3ToQuaternion:function(m){var t=m[0]+m[4]+m[8];if(0<t){var s=2*Math.sqrt(t+1);var w=.25*s;t=(m[7]-m[5])/s;var y=(m[2]-m[6])/s;m=(m[3]-m[1])/s}else m[0]>m[4]&&m[0]>m[8]?(s=2*Math.sqrt(1+m[0]-m[4]-m[8]),w=(m[7]-m[5])/s,t=.25*s,y=(m[1]+m[3])/s,m=(m[2]+m[6])/s):m[4]>m[8]?(s=2*Math.sqrt(1+m[4]-m[0]-m[8]),w=(m[2]-m[6])/s,t=(m[1]+m[3])/s,y=.25*s,m=(m[5]+m[7])/s):(s=2*Math.sqrt(1+m[8]-m[0]-m[4]),w=(m[3]-m[1])/s,t=\n(m[2]+m[6])/s,y=(m[5]+m[7])/s,m=.25*s);s=this.allocQuaternion();s.setX(t);s.setY(y);s.setZ(m);s.setW(w);return s}};RigidBody.prototype={constructor:MMDPhysics.RigidBody,reset:function(){this._setTransformFromBone();return this},updateFromBone:function(){-1!==this.params.boneIndex&&0===this.params.type&&this._setTransformFromBone();return this},updateBone:function(){if(0===this.params.type||-1===this.params.boneIndex)return this;this._updateBoneRotation();1===this.params.type&&this._updateBonePosition();\nthis.bone.updateMatrixWorld(!0);2===this.params.type&&this._setPositionFromBone();return this},_init:function(){var manager=this.manager,params=this.params,bones=this.mesh.skeleton.bones;bones=-1===params.boneIndex?new _three.Bone:bones[params.boneIndex];a:switch(params.shapeType){case 0:var shape=new Ammo.btSphereShape(params.width);break a;case 1:shape=new Ammo.btBoxShape(new Ammo.btVector3(params.width,params.height,params.depth));break a;case 2:shape=new Ammo.btCapsuleShape(params.width,params.height);\nbreak a;default:throw\"unknown shape type \".concat(params.shapeType);}var weight=0===params.type?0:params.weight,localInertia=manager.allocVector3();localInertia.setValue(0,0,0);0!==weight&&shape.calculateLocalInertia(weight,localInertia);var boneOffsetForm=manager.allocTransform();manager.setIdentity(boneOffsetForm);manager.setOriginFromArray3(boneOffsetForm,params.position);manager.setBasisFromArray3(boneOffsetForm,params.rotation);var vector=manager.allocThreeVector3(),boneForm=manager.allocTransform();\nmanager.setIdentity(boneForm);manager.setOriginFromThreeVector3(boneForm,bones.getWorldPosition(vector));var form=manager.multiplyTransforms(boneForm,boneOffsetForm),state=new Ammo.btDefaultMotionState(form);shape=new Ammo.btRigidBodyConstructionInfo(weight,state,shape,localInertia);shape.set_m_friction(params.friction);shape.set_m_restitution(params.restitution);shape=new Ammo.btRigidBody(shape);0===params.type&&(shape.setCollisionFlags(shape.getCollisionFlags()|2),shape.setActivationState(4));shape.setDamping(params.positionDamping,\nparams.rotationDamping);shape.setSleepingThresholds(0,0);this.world.addRigidBody(shape,1<<params.groupIndex,params.groupTarget);this.body=shape;this.bone=bones;this.boneOffsetForm=boneOffsetForm;this.boneOffsetFormInverse=manager.inverseTransform(boneOffsetForm);manager.freeVector3(localInertia);manager.freeTransform(form);manager.freeTransform(boneForm);manager.freeThreeVector3(vector)},_getBoneTransform:function(){var manager=this.manager,p=manager.allocThreeVector3(),q=manager.allocThreeQuaternion(),\ns=manager.allocThreeVector3();this.bone.matrixWorld.decompose(p,q,s);var tr=manager.allocTransform();manager.setOriginFromThreeVector3(tr,p);manager.setBasisFromThreeQuaternion(tr,q);var form=manager.multiplyTransforms(tr,this.boneOffsetForm);manager.freeTransform(tr);manager.freeThreeVector3(s);manager.freeThreeQuaternion(q);manager.freeThreeVector3(p);return form},_getWorldTransformForBone:function(){var manager=this.manager,tr=this.body.getCenterOfMassTransform();return manager.multiplyTransforms(tr,\nthis.boneOffsetFormInverse)},_setTransformFromBone:function(){var manager=this.manager,form=this._getBoneTransform();this.body.setCenterOfMassTransform(form);this.body.getMotionState().setWorldTransform(form);manager.freeTransform(form)},_setPositionFromBone:function(){var manager=this.manager,form=this._getBoneTransform(),tr=manager.allocTransform();this.body.getMotionState().getWorldTransform(tr);manager.copyOrigin(tr,form);this.body.setCenterOfMassTransform(tr);this.body.getMotionState().setWorldTransform(tr);\nmanager.freeTransform(tr);manager.freeTransform(form)},_updateBoneRotation:function(){var manager=this.manager,tr=this._getWorldTransformForBone(),q=manager.getBasis(tr),thQ=manager.allocThreeQuaternion(),thQ2=manager.allocThreeQuaternion(),thQ3=manager.allocThreeQuaternion();thQ.set(q.x(),q.y(),q.z(),q.w());thQ2.setFromRotationMatrix(this.bone.matrixWorld);thQ2.conjugate();thQ2.multiply(thQ);thQ3.setFromRotationMatrix(this.bone.matrix);this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());manager.freeThreeQuaternion(thQ);\nmanager.freeThreeQuaternion(thQ2);manager.freeThreeQuaternion(thQ3);manager.freeQuaternion(q);manager.freeTransform(tr)},_updateBonePosition:function(){var manager=this.manager,tr=this._getWorldTransformForBone(),thV=manager.allocThreeVector3(),o=manager.getOrigin(tr);thV.set(o.x(),o.y(),o.z());this.bone.parent&&this.bone.parent.worldToLocal(thV);this.bone.position.copy(thV);manager.freeThreeVector3(thV);manager.freeTransform(tr)}};Constraint.prototype={constructor:Constraint,_init:function(){var manager=\nthis.manager,params=this.params,bodyA=this.bodyA,bodyB=this.bodyB,form=manager.allocTransform();manager.setIdentity(form);manager.setOriginFromArray3(form,params.position);manager.setBasisFromArray3(form,params.rotation);var formA=manager.allocTransform(),formB=manager.allocTransform();bodyA.body.getMotionState().getWorldTransform(formA);bodyB.body.getMotionState().getWorldTransform(formB);var formInverseA=manager.inverseTransform(formA),formInverseB=manager.inverseTransform(formB),formA2=manager.multiplyTransforms(formInverseA,\nform),formB2=manager.multiplyTransforms(formInverseB,form);bodyA=new Ammo.btGeneric6DofSpringConstraint(bodyA.body,bodyB.body,formA2,formB2,!0);bodyB=manager.allocVector3();var lul=manager.allocVector3(),all=manager.allocVector3(),aul=manager.allocVector3();bodyB.setValue(params.translationLimitation1[0],params.translationLimitation1[1],params.translationLimitation1[2]);lul.setValue(params.translationLimitation2[0],params.translationLimitation2[1],params.translationLimitation2[2]);all.setValue(params.rotationLimitation1[0],\nparams.rotationLimitation1[1],params.rotationLimitation1[2]);aul.setValue(params.rotationLimitation2[0],params.rotationLimitation2[1],params.rotationLimitation2[2]);bodyA.setLinearLowerLimit(bodyB);bodyA.setLinearUpperLimit(lul);bodyA.setAngularLowerLimit(all);bodyA.setAngularUpperLimit(aul);for(var i=0;3>i;i++)0!==params.springPosition[i]&&(bodyA.enableSpring(i,!0),bodyA.setStiffness(i,params.springPosition[i]));for(i=0;3>i;i++)0!==params.springRotation[i]&&(bodyA.enableSpring(i+3,!0),bodyA.setStiffness(i+\n3,params.springRotation[i]));if(void 0!==bodyA.setParam)for(params=0;6>params;params++)bodyA.setParam(2,.475,params);this.world.addConstraint(bodyA,!0);this.constraint=bodyA;manager.freeTransform(form);manager.freeTransform(formA);manager.freeTransform(formB);manager.freeTransform(formInverseA);manager.freeTransform(formInverseB);manager.freeTransform(formA2);manager.freeTransform(formB2);manager.freeVector3(bodyB);manager.freeVector3(lul);manager.freeVector3(all);manager.freeVector3(aul)}};MMDPhysicsHelper.prototype=\nObject.assign(Object.create(_three.Object3D.prototype),{constructor:MMDPhysicsHelper,updateMatrixWorld:function(){var position=new _three.Vector3,quaternion=new _three.Quaternion,scale=new _three.Vector3,matrixWorldInv=new _three.Matrix4;return function(force){var mesh=this.root;if(this.visible){var bodies=this.physics.bodies;matrixWorldInv.copy(mesh.matrixWorld).decompose(position,quaternion,scale).compose(position,quaternion,scale.set(1,1,1)).invert();for(var i=0,il=bodies.length;i<il;i++){var child=\nthis.children[i],tr=bodies[i].body.getCenterOfMassTransform(),origin=tr.getOrigin();tr=tr.getRotation();child.position.set(origin.x(),origin.y(),origin.z()).applyMatrix4(matrixWorldInv);child.quaternion.setFromRotationMatrix(matrixWorldInv).multiply(quaternion.set(tr.x(),tr.y(),tr.z(),tr.w()))}}this.matrix.copy(mesh.matrixWorld).decompose(position,quaternion,scale).compose(position,quaternion,scale.set(1,1,1));_three.Object3D.prototype.updateMatrixWorld.call(this,force)}}(),_init:function(){function createGeometry(param){switch(param.shapeType){case 0:return new _three.SphereGeometry(param.width,\n16,8);case 1:return new _three.BoxGeometry(2*param.width,2*param.height,2*param.depth,8,8,8);case 2:return new createCapsuleGeometry(param.width,param.height,16,8);default:return null}}function createCapsuleGeometry(radius,cylinderHeight,segmentsRadius,segmentsHeight){var geometry=new _three.CylinderGeometry(radius,radius,cylinderHeight,segmentsRadius,segmentsHeight,!0),upperSphere=new _three.Mesh(new _three.SphereGeometry(radius,segmentsRadius,segmentsHeight,0,2*Math.PI,0,Math.PI/2));radius=new _three.Mesh(new _three.SphereGeometry(radius,\nsegmentsRadius,segmentsHeight,0,2*Math.PI,Math.PI/2,Math.PI/2));upperSphere.position.set(0,cylinderHeight/2,0);radius.position.set(0,-cylinderHeight/2,0);upperSphere.updateMatrix();radius.updateMatrix();geometry.merge(upperSphere.geometry,upperSphere.matrix);geometry.merge(radius.geometry,radius.matrix);return geometry}for(var bodies=this.physics.bodies,i=0,il=bodies.length;i<il;i++){var param$jscomp$0=bodies[i].params;this.add(new _three.Mesh(createGeometry(param$jscomp$0),this.materials[param$jscomp$0.type]))}}});\nreturn MMDPhysics}();exports.MMDPhysics=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$animation$MMDPhysics\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MMDPhysics = void 0;\n\nvar _three = require(\"three\");\n\n/**\n * Dependencies\n *  - Ammo.js https://github.com/kripken/ammo.js\n *\n * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\n * for MMD model loaded by MMDLoader.\n *\n * TODO\n *  - Physics in Worker\n */\n\n/* global Ammo */\nvar MMDPhysics = function () {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  function MMDPhysics(mesh, rigidBodyParams, constraintParams, params) {\n    if (typeof Ammo === 'undefined') {\n      throw new Error('THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js');\n    }\n\n    constraintParams = constraintParams || [];\n    params = params || {};\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    /*\n     * I don't know why but 1/60 unitStep easily breaks models\n     * so I set it 1/65 so far.\n     * Don't set too small unitStep because\n     * the smaller unitStep can make the performance worse.\n     */\n\n    this.unitStep = params.unitStep !== undefined ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== undefined ? params.maxStepNum : 3;\n    this.gravity = new _three.Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== undefined) this.gravity.copy(params.gravity);\n    this.world = params.world !== undefined ? params.world : null; // experimental\n\n    this.bodies = [];\n    this.constraints = [];\n\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n\n  MMDPhysics.prototype = {\n    constructor: MMDPhysics,\n\n    /**\n     * Advances Physics calculation and updates bones.\n     *\n     * @param {Number} delta - time in second\n     * @return {MMDPhysics}\n     */\n    update: function update(delta) {\n      var manager = this.manager;\n      var mesh = this.mesh; // rigid bodies and constrains are for\n      // mesh's world scale (1, 1, 1).\n      // Convert to (1, 1, 1) if it isn't.\n\n      var isNonDefaultScale = false;\n      var position = manager.allocThreeVector3();\n      var quaternion = manager.allocThreeQuaternion();\n      var scale = manager.allocThreeVector3();\n      mesh.matrixWorld.decompose(position, quaternion, scale);\n\n      if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n        isNonDefaultScale = true;\n      }\n\n      var parent;\n\n      if (isNonDefaultScale) {\n        parent = mesh.parent;\n        if (parent !== null) mesh.parent = null;\n        scale.copy(this.mesh.scale);\n        mesh.scale.set(1, 1, 1);\n        mesh.updateMatrixWorld(true);\n      } // calculate physics and update bones\n\n\n      this._updateRigidBodies();\n\n      this._stepSimulation(delta);\n\n      this._updateBones(); // restore mesh if converted above\n\n\n      if (isNonDefaultScale) {\n        if (parent !== null) mesh.parent = parent;\n        mesh.scale.copy(scale);\n      }\n\n      manager.freeThreeVector3(scale);\n      manager.freeThreeQuaternion(quaternion);\n      manager.freeThreeVector3(position);\n      return this;\n    },\n\n    /**\n     * Resets rigid bodies transorm to current bone's.\n     *\n     * @return {MMDPhysics}\n     */\n    reset: function reset() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].reset();\n      }\n\n      return this;\n    },\n\n    /**\n     * Warm ups Rigid bodies. Calculates cycles steps.\n     *\n     * @param {Integer} cycles\n     * @return {MMDPhysics}\n     */\n    warmup: function warmup(cycles) {\n      for (var i = 0; i < cycles; i++) {\n        this.update(1 / 60);\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets gravity.\n     *\n     * @param {Vector3} gravity\n     * @return {MMDPhysicsHelper}\n     */\n    setGravity: function setGravity(gravity) {\n      this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n      this.gravity.copy(gravity);\n      return this;\n    },\n\n    /**\n     * Creates MMDPhysicsHelper\n     *\n     * @return {MMDPhysicsHelper}\n     */\n    createHelper: function createHelper() {\n      return new MMDPhysicsHelper(this.mesh, this);\n    },\n    // private methods\n    _init: function _init(mesh, rigidBodyParams, constraintParams) {\n      var manager = this.manager; // rigid body/constraint parameters are for\n      // mesh's default world transform as position(0, 0, 0),\n      // quaternion(0, 0, 0, 1) and scale(0, 0, 0)\n\n      var parent = mesh.parent;\n      if (parent !== null) parent = null;\n      var currentPosition = manager.allocThreeVector3();\n      var currentQuaternion = manager.allocThreeQuaternion();\n      var currentScale = manager.allocThreeVector3();\n      currentPosition.copy(mesh.position);\n      currentQuaternion.copy(mesh.quaternion);\n      currentScale.copy(mesh.scale);\n      mesh.position.set(0, 0, 0);\n      mesh.quaternion.set(0, 0, 0, 1);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n\n      if (this.world === null) {\n        this.world = this._createWorld();\n        this.setGravity(this.gravity);\n      }\n\n      this._initRigidBodies(rigidBodyParams);\n\n      this._initConstraints(constraintParams);\n\n      if (parent !== null) mesh.parent = parent;\n      mesh.position.copy(currentPosition);\n      mesh.quaternion.copy(currentQuaternion);\n      mesh.scale.copy(currentScale);\n      mesh.updateMatrixWorld(true);\n      this.reset();\n      manager.freeThreeVector3(currentPosition);\n      manager.freeThreeQuaternion(currentQuaternion);\n      manager.freeThreeVector3(currentScale);\n    },\n    _createWorld: function _createWorld() {\n      var config = new Ammo.btDefaultCollisionConfiguration();\n      var dispatcher = new Ammo.btCollisionDispatcher(config);\n      var cache = new Ammo.btDbvtBroadphase();\n      var solver = new Ammo.btSequentialImpulseConstraintSolver();\n      var world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n      return world;\n    },\n    _initRigidBodies: function _initRigidBodies(rigidBodies) {\n      for (var i = 0, il = rigidBodies.length; i < il; i++) {\n        this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n      }\n    },\n    _initConstraints: function _initConstraints(constraints) {\n      for (var i = 0, il = constraints.length; i < il; i++) {\n        var params = constraints[i];\n        var bodyA = this.bodies[params.rigidBodyIndex1];\n        var bodyB = this.bodies[params.rigidBodyIndex2];\n        this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n      }\n    },\n    _stepSimulation: function _stepSimulation(delta) {\n      var unitStep = this.unitStep;\n      var stepTime = delta;\n      var maxStepNum = (delta / unitStep | 0) + 1;\n\n      if (stepTime < unitStep) {\n        stepTime = unitStep;\n        maxStepNum = 1;\n      }\n\n      if (maxStepNum > this.maxStepNum) {\n        maxStepNum = this.maxStepNum;\n      }\n\n      this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n    },\n    _updateRigidBodies: function _updateRigidBodies() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateFromBone();\n      }\n    },\n    _updateBones: function _updateBones() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateBone();\n      }\n    }\n  };\n  /**\n   * This manager's responsibilies are\n   *\n   * 1. manage Ammo.js and Three.js object resources and\n   *    improve the performance and the memory consumption by\n   *    reusing objects.\n   *\n   * 2. provide simple Ammo object operations.\n   */\n\n  function ResourceManager() {\n    // for Three.js\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = []; // for Ammo.js\n\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n\n  ResourceManager.prototype = {\n    constructor: ResourceManager,\n    allocThreeVector3: function allocThreeVector3() {\n      return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new _three.Vector3();\n    },\n    freeThreeVector3: function freeThreeVector3(v) {\n      this.threeVector3s.push(v);\n    },\n    allocThreeMatrix4: function allocThreeMatrix4() {\n      return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new _three.Matrix4();\n    },\n    freeThreeMatrix4: function freeThreeMatrix4(m) {\n      this.threeMatrix4s.push(m);\n    },\n    allocThreeQuaternion: function allocThreeQuaternion() {\n      return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new _three.Quaternion();\n    },\n    freeThreeQuaternion: function freeThreeQuaternion(q) {\n      this.threeQuaternions.push(q);\n    },\n    allocThreeEuler: function allocThreeEuler() {\n      return this.threeEulers.length > 0 ? this.threeEulers.pop() : new _three.Euler();\n    },\n    freeThreeEuler: function freeThreeEuler(e) {\n      this.threeEulers.push(e);\n    },\n    allocTransform: function allocTransform() {\n      return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n    },\n    freeTransform: function freeTransform(t) {\n      this.transforms.push(t);\n    },\n    allocQuaternion: function allocQuaternion() {\n      return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n    },\n    freeQuaternion: function freeQuaternion(q) {\n      this.quaternions.push(q);\n    },\n    allocVector3: function allocVector3() {\n      return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n    },\n    freeVector3: function freeVector3(v) {\n      this.vector3s.push(v);\n    },\n    setIdentity: function setIdentity(t) {\n      t.setIdentity();\n    },\n    getBasis: function getBasis(t) {\n      var q = this.allocQuaternion();\n      t.getBasis().getRotation(q);\n      return q;\n    },\n    getBasisAsMatrix3: function getBasisAsMatrix3(t) {\n      var q = this.getBasis(t);\n      var m = this.quaternionToMatrix3(q);\n      this.freeQuaternion(q);\n      return m;\n    },\n    getOrigin: function getOrigin(t) {\n      return t.getOrigin();\n    },\n    setOrigin: function setOrigin(t, v) {\n      t.getOrigin().setValue(v.x(), v.y(), v.z());\n    },\n    copyOrigin: function copyOrigin(t1, t2) {\n      var o = t2.getOrigin();\n      this.setOrigin(t1, o);\n    },\n    setBasis: function setBasis(t, q) {\n      t.setRotation(q);\n    },\n    setBasisFromMatrix3: function setBasisFromMatrix3(t, m) {\n      var q = this.matrix3ToQuaternion(m);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    },\n    setOriginFromArray3: function setOriginFromArray3(t, a) {\n      t.getOrigin().setValue(a[0], a[1], a[2]);\n    },\n    setOriginFromThreeVector3: function setOriginFromThreeVector3(t, v) {\n      t.getOrigin().setValue(v.x, v.y, v.z);\n    },\n    setBasisFromArray3: function setBasisFromArray3(t, a) {\n      var thQ = this.allocThreeQuaternion();\n      var thE = this.allocThreeEuler();\n      thE.set(a[0], a[1], a[2]);\n      this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n      this.freeThreeEuler(thE);\n      this.freeThreeQuaternion(thQ);\n    },\n    setBasisFromThreeQuaternion: function setBasisFromThreeQuaternion(t, a) {\n      var q = this.allocQuaternion();\n      q.setX(a.x);\n      q.setY(a.y);\n      q.setZ(a.z);\n      q.setW(a.w);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    },\n    multiplyTransforms: function multiplyTransforms(t1, t2) {\n      var t = this.allocTransform();\n      this.setIdentity(t);\n      var m1 = this.getBasisAsMatrix3(t1);\n      var m2 = this.getBasisAsMatrix3(t2);\n      var o1 = this.getOrigin(t1);\n      var o2 = this.getOrigin(t2);\n      var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n      var v2 = this.addVector3(v1, o1);\n      this.setOrigin(t, v2);\n      var m3 = this.multiplyMatrices3(m1, m2);\n      this.setBasisFromMatrix3(t, m3);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t;\n    },\n    inverseTransform: function inverseTransform(t) {\n      var t2 = this.allocTransform();\n      var m1 = this.getBasisAsMatrix3(t);\n      var o = this.getOrigin(t);\n      var m2 = this.transposeMatrix3(m1);\n      var v1 = this.negativeVector3(o);\n      var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n      this.setOrigin(t2, v2);\n      this.setBasisFromMatrix3(t2, m2);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t2;\n    },\n    multiplyMatrices3: function multiplyMatrices3(m1, m2) {\n      var m3 = [];\n      var v10 = this.rowOfMatrix3(m1, 0);\n      var v11 = this.rowOfMatrix3(m1, 1);\n      var v12 = this.rowOfMatrix3(m1, 2);\n      var v20 = this.columnOfMatrix3(m2, 0);\n      var v21 = this.columnOfMatrix3(m2, 1);\n      var v22 = this.columnOfMatrix3(m2, 2);\n      m3[0] = this.dotVectors3(v10, v20);\n      m3[1] = this.dotVectors3(v10, v21);\n      m3[2] = this.dotVectors3(v10, v22);\n      m3[3] = this.dotVectors3(v11, v20);\n      m3[4] = this.dotVectors3(v11, v21);\n      m3[5] = this.dotVectors3(v11, v22);\n      m3[6] = this.dotVectors3(v12, v20);\n      m3[7] = this.dotVectors3(v12, v21);\n      m3[8] = this.dotVectors3(v12, v22);\n      this.freeVector3(v10);\n      this.freeVector3(v11);\n      this.freeVector3(v12);\n      this.freeVector3(v20);\n      this.freeVector3(v21);\n      this.freeVector3(v22);\n      return m3;\n    },\n    addVector3: function addVector3(v1, v2) {\n      var v = this.allocVector3();\n      v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n      return v;\n    },\n    dotVectors3: function dotVectors3(v1, v2) {\n      return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n    },\n    rowOfMatrix3: function rowOfMatrix3(m, i) {\n      var v = this.allocVector3();\n      v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n      return v;\n    },\n    columnOfMatrix3: function columnOfMatrix3(m, i) {\n      var v = this.allocVector3();\n      v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n      return v;\n    },\n    negativeVector3: function negativeVector3(v) {\n      var v2 = this.allocVector3();\n      v2.setValue(-v.x(), -v.y(), -v.z());\n      return v2;\n    },\n    multiplyMatrix3ByVector3: function multiplyMatrix3ByVector3(m, v) {\n      var v4 = this.allocVector3();\n      var v0 = this.rowOfMatrix3(m, 0);\n      var v1 = this.rowOfMatrix3(m, 1);\n      var v2 = this.rowOfMatrix3(m, 2);\n      var x = this.dotVectors3(v0, v);\n      var y = this.dotVectors3(v1, v);\n      var z = this.dotVectors3(v2, v);\n      v4.setValue(x, y, z);\n      this.freeVector3(v0);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return v4;\n    },\n    transposeMatrix3: function transposeMatrix3(m) {\n      var m2 = [];\n      m2[0] = m[0];\n      m2[1] = m[3];\n      m2[2] = m[6];\n      m2[3] = m[1];\n      m2[4] = m[4];\n      m2[5] = m[7];\n      m2[6] = m[2];\n      m2[7] = m[5];\n      m2[8] = m[8];\n      return m2;\n    },\n    quaternionToMatrix3: function quaternionToMatrix3(q) {\n      var m = [];\n      var x = q.x();\n      var y = q.y();\n      var z = q.z();\n      var w = q.w();\n      var xx = x * x;\n      var yy = y * y;\n      var zz = z * z;\n      var xy = x * y;\n      var yz = y * z;\n      var zx = z * x;\n      var xw = x * w;\n      var yw = y * w;\n      var zw = z * w;\n      m[0] = 1 - 2 * (yy + zz);\n      m[1] = 2 * (xy - zw);\n      m[2] = 2 * (zx + yw);\n      m[3] = 2 * (xy + zw);\n      m[4] = 1 - 2 * (zz + xx);\n      m[5] = 2 * (yz - xw);\n      m[6] = 2 * (zx - yw);\n      m[7] = 2 * (yz + xw);\n      m[8] = 1 - 2 * (xx + yy);\n      return m;\n    },\n    matrix3ToQuaternion: function matrix3ToQuaternion(m) {\n      var t = m[0] + m[4] + m[8];\n      var s, x, y, z, w;\n\n      if (t > 0) {\n        s = Math.sqrt(t + 1.0) * 2;\n        w = 0.25 * s;\n        x = (m[7] - m[5]) / s;\n        y = (m[2] - m[6]) / s;\n        z = (m[3] - m[1]) / s;\n      } else if (m[0] > m[4] && m[0] > m[8]) {\n        s = Math.sqrt(1.0 + m[0] - m[4] - m[8]) * 2;\n        w = (m[7] - m[5]) / s;\n        x = 0.25 * s;\n        y = (m[1] + m[3]) / s;\n        z = (m[2] + m[6]) / s;\n      } else if (m[4] > m[8]) {\n        s = Math.sqrt(1.0 + m[4] - m[0] - m[8]) * 2;\n        w = (m[2] - m[6]) / s;\n        x = (m[1] + m[3]) / s;\n        y = 0.25 * s;\n        z = (m[5] + m[7]) / s;\n      } else {\n        s = Math.sqrt(1.0 + m[8] - m[0] - m[4]) * 2;\n        w = (m[3] - m[1]) / s;\n        x = (m[2] + m[6]) / s;\n        y = (m[5] + m[7]) / s;\n        z = 0.25 * s;\n      }\n\n      var q = this.allocQuaternion();\n      q.setX(x);\n      q.setY(y);\n      q.setZ(z);\n      q.setW(w);\n      return q;\n    }\n  };\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n\n  function RigidBody(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n\n    this._init();\n  }\n\n  RigidBody.prototype = {\n    constructor: MMDPhysics.RigidBody,\n\n    /**\n     * Resets rigid body transform to the current bone's.\n     *\n     * @return {RigidBody}\n     */\n    reset: function reset() {\n      this._setTransformFromBone();\n\n      return this;\n    },\n\n    /**\n     * Updates rigid body's transform from the current bone.\n     *\n     * @return {RidigBody}\n     */\n    updateFromBone: function updateFromBone() {\n      if (this.params.boneIndex !== -1 && this.params.type === 0) {\n        this._setTransformFromBone();\n      }\n\n      return this;\n    },\n\n    /**\n     * Updates bone from the current ridid body's transform.\n     *\n     * @return {RidigBody}\n     */\n    updateBone: function updateBone() {\n      if (this.params.type === 0 || this.params.boneIndex === -1) {\n        return this;\n      }\n\n      this._updateBoneRotation();\n\n      if (this.params.type === 1) {\n        this._updateBonePosition();\n      }\n\n      this.bone.updateMatrixWorld(true);\n\n      if (this.params.type === 2) {\n        this._setPositionFromBone();\n      }\n\n      return this;\n    },\n    // private methods\n    _init: function _init() {\n      function generateShape(p) {\n        switch (p.shapeType) {\n          case 0:\n            return new Ammo.btSphereShape(p.width);\n\n          case 1:\n            return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n\n          case 2:\n            return new Ammo.btCapsuleShape(p.width, p.height);\n\n          default:\n            throw \"unknown shape type \".concat(p.shapeType);\n        }\n      }\n\n      var manager = this.manager;\n      var params = this.params;\n      var bones = this.mesh.skeleton.bones;\n      var bone = params.boneIndex === -1 ? new _three.Bone() : bones[params.boneIndex];\n      var shape = generateShape(params);\n      var weight = params.type === 0 ? 0 : params.weight;\n      var localInertia = manager.allocVector3();\n      localInertia.setValue(0, 0, 0);\n\n      if (weight !== 0) {\n        shape.calculateLocalInertia(weight, localInertia);\n      }\n\n      var boneOffsetForm = manager.allocTransform();\n      manager.setIdentity(boneOffsetForm);\n      manager.setOriginFromArray3(boneOffsetForm, params.position);\n      manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n      var vector = manager.allocThreeVector3();\n      var boneForm = manager.allocTransform();\n      manager.setIdentity(boneForm);\n      manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n      var form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n      var state = new Ammo.btDefaultMotionState(form);\n      var info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n      info.set_m_friction(params.friction);\n      info.set_m_restitution(params.restitution);\n      var body = new Ammo.btRigidBody(info);\n\n      if (params.type === 0) {\n        body.setCollisionFlags(body.getCollisionFlags() | 2);\n        /*\n         * It'd be better to comment out this line though in general I should call this method\n         * because I'm not sure why but physics will be more like MMD's\n         * if I comment out.\n         */\n\n        body.setActivationState(4);\n      }\n\n      body.setDamping(params.positionDamping, params.rotationDamping);\n      body.setSleepingThresholds(0, 0);\n      this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n      this.body = body;\n      this.bone = bone;\n      this.boneOffsetForm = boneOffsetForm;\n      this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n      manager.freeVector3(localInertia);\n      manager.freeTransform(form);\n      manager.freeTransform(boneForm);\n      manager.freeThreeVector3(vector);\n    },\n    _getBoneTransform: function _getBoneTransform() {\n      var manager = this.manager;\n      var p = manager.allocThreeVector3();\n      var q = manager.allocThreeQuaternion();\n      var s = manager.allocThreeVector3();\n      this.bone.matrixWorld.decompose(p, q, s);\n      var tr = manager.allocTransform();\n      manager.setOriginFromThreeVector3(tr, p);\n      manager.setBasisFromThreeQuaternion(tr, q);\n      var form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n      manager.freeTransform(tr);\n      manager.freeThreeVector3(s);\n      manager.freeThreeQuaternion(q);\n      manager.freeThreeVector3(p);\n      return form;\n    },\n    _getWorldTransformForBone: function _getWorldTransformForBone() {\n      var manager = this.manager;\n      var tr = this.body.getCenterOfMassTransform();\n      return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n    },\n    _setTransformFromBone: function _setTransformFromBone() {\n      var manager = this.manager;\n\n      var form = this._getBoneTransform(); // TODO: check the most appropriate way to set\n      //this.body.setWorldTransform( form );\n\n\n      this.body.setCenterOfMassTransform(form);\n      this.body.getMotionState().setWorldTransform(form);\n      manager.freeTransform(form);\n    },\n    _setPositionFromBone: function _setPositionFromBone() {\n      var manager = this.manager;\n\n      var form = this._getBoneTransform();\n\n      var tr = manager.allocTransform();\n      this.body.getMotionState().getWorldTransform(tr);\n      manager.copyOrigin(tr, form); // TODO: check the most appropriate way to set\n      //this.body.setWorldTransform( tr );\n\n      this.body.setCenterOfMassTransform(tr);\n      this.body.getMotionState().setWorldTransform(tr);\n      manager.freeTransform(tr);\n      manager.freeTransform(form);\n    },\n    _updateBoneRotation: function _updateBoneRotation() {\n      var manager = this.manager;\n\n      var tr = this._getWorldTransformForBone();\n\n      var q = manager.getBasis(tr);\n      var thQ = manager.allocThreeQuaternion();\n      var thQ2 = manager.allocThreeQuaternion();\n      var thQ3 = manager.allocThreeQuaternion();\n      thQ.set(q.x(), q.y(), q.z(), q.w());\n      thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n      thQ2.conjugate();\n      thQ2.multiply(thQ); //this.bone.quaternion.multiply( thQ2 );\n\n      thQ3.setFromRotationMatrix(this.bone.matrix); // Renormalizing quaternion here because repeatedly transforming\n      // quaternion continuously accumulates floating point error and\n      // can end up being overflow. See #15335\n\n      this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n      manager.freeThreeQuaternion(thQ);\n      manager.freeThreeQuaternion(thQ2);\n      manager.freeThreeQuaternion(thQ3);\n      manager.freeQuaternion(q);\n      manager.freeTransform(tr);\n    },\n    _updateBonePosition: function _updateBonePosition() {\n      var manager = this.manager;\n\n      var tr = this._getWorldTransformForBone();\n\n      var thV = manager.allocThreeVector3();\n      var o = manager.getOrigin(tr);\n      thV.set(o.x(), o.y(), o.z());\n\n      if (this.bone.parent) {\n        this.bone.parent.worldToLocal(thV);\n      }\n\n      this.bone.position.copy(thV);\n      manager.freeThreeVector3(thV);\n      manager.freeTransform(tr);\n    }\n  };\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n\n  function Constraint(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n\n    this._init();\n  }\n\n  Constraint.prototype = {\n    constructor: Constraint,\n    // private method\n    _init: function _init() {\n      var manager = this.manager;\n      var params = this.params;\n      var bodyA = this.bodyA;\n      var bodyB = this.bodyB;\n      var form = manager.allocTransform();\n      manager.setIdentity(form);\n      manager.setOriginFromArray3(form, params.position);\n      manager.setBasisFromArray3(form, params.rotation);\n      var formA = manager.allocTransform();\n      var formB = manager.allocTransform();\n      bodyA.body.getMotionState().getWorldTransform(formA);\n      bodyB.body.getMotionState().getWorldTransform(formB);\n      var formInverseA = manager.inverseTransform(formA);\n      var formInverseB = manager.inverseTransform(formB);\n      var formA2 = manager.multiplyTransforms(formInverseA, form);\n      var formB2 = manager.multiplyTransforms(formInverseB, form);\n      var constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n      var lll = manager.allocVector3();\n      var lul = manager.allocVector3();\n      var all = manager.allocVector3();\n      var aul = manager.allocVector3();\n      lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n      lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n      all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n      aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n      constraint.setLinearLowerLimit(lll);\n      constraint.setLinearUpperLimit(lul);\n      constraint.setAngularLowerLimit(all);\n      constraint.setAngularUpperLimit(aul);\n\n      for (var i = 0; i < 3; i++) {\n        if (params.springPosition[i] !== 0) {\n          constraint.enableSpring(i, true);\n          constraint.setStiffness(i, params.springPosition[i]);\n        }\n      }\n\n      for (var _i = 0; _i < 3; _i++) {\n        if (params.springRotation[_i] !== 0) {\n          constraint.enableSpring(_i + 3, true);\n          constraint.setStiffness(_i + 3, params.springRotation[_i]);\n        }\n      }\n      /*\n       * Currently(10/31/2016) official ammo.js doesn't support\n       * btGeneric6DofSpringConstraint.setParam method.\n       * You need custom ammo.js (add the method into idl) if you wanna use.\n       * By setting this parameter, physics will be more like MMD's\n       */\n\n\n      if (constraint.setParam !== undefined) {\n        for (var _i2 = 0; _i2 < 6; _i2++) {\n          // this parameter is from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n          constraint.setParam(2, 0.475, _i2);\n        }\n      }\n\n      this.world.addConstraint(constraint, true);\n      this.constraint = constraint;\n      manager.freeTransform(form);\n      manager.freeTransform(formA);\n      manager.freeTransform(formB);\n      manager.freeTransform(formInverseA);\n      manager.freeTransform(formInverseB);\n      manager.freeTransform(formA2);\n      manager.freeTransform(formB2);\n      manager.freeVector3(lll);\n      manager.freeVector3(lul);\n      manager.freeVector3(all);\n      manager.freeVector3(aul);\n    }\n  };\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n\n  function MMDPhysicsHelper(mesh, physics) {\n    _three.Object3D.call(this);\n\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(new _three.MeshBasicMaterial({\n      color: new _three.Color(0xff8888),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new _three.MeshBasicMaterial({\n      color: new _three.Color(0x88ff88),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new _three.MeshBasicMaterial({\n      color: new _three.Color(0x8888ff),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n\n    this._init();\n  }\n\n  MMDPhysicsHelper.prototype = Object.assign(Object.create(_three.Object3D.prototype), {\n    constructor: MMDPhysicsHelper,\n\n    /**\n     * Updates Rigid Bodies visualization.\n     */\n    updateMatrixWorld: function () {\n      var position = new _three.Vector3();\n      var quaternion = new _three.Quaternion();\n      var scale = new _three.Vector3();\n      var matrixWorldInv = new _three.Matrix4();\n      return function updateMatrixWorld(force) {\n        var mesh = this.root;\n\n        if (this.visible) {\n          var bodies = this.physics.bodies;\n          matrixWorldInv.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1)).invert();\n\n          for (var i = 0, il = bodies.length; i < il; i++) {\n            var body = bodies[i].body;\n            var child = this.children[i];\n            var tr = body.getCenterOfMassTransform();\n            var origin = tr.getOrigin();\n            var rotation = tr.getRotation();\n            child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(matrixWorldInv);\n            child.quaternion.setFromRotationMatrix(matrixWorldInv).multiply(quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n          }\n        }\n\n        this.matrix.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1));\n\n        _three.Object3D.prototype.updateMatrixWorld.call(this, force);\n      };\n    }(),\n    // private method\n    _init: function _init() {\n      var bodies = this.physics.bodies;\n\n      function createGeometry(param) {\n        switch (param.shapeType) {\n          case 0:\n            return new _three.SphereGeometry(param.width, 16, 8);\n\n          case 1:\n            return new _three.BoxGeometry(param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8);\n\n          case 2:\n            return new createCapsuleGeometry(param.width, param.height, 16, 8);\n\n          default:\n            return null;\n        }\n      } // copy from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mytest37.js?ver=20160815\n\n\n      function createCapsuleGeometry(radius, cylinderHeight, segmentsRadius, segmentsHeight) {\n        var geometry = new _three.CylinderGeometry(radius, radius, cylinderHeight, segmentsRadius, segmentsHeight, true);\n        var upperSphere = new _three.Mesh(new _three.SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, 0, Math.PI / 2));\n        var lowerSphere = new _three.Mesh(new _three.SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2));\n        upperSphere.position.set(0, cylinderHeight / 2, 0);\n        lowerSphere.position.set(0, -cylinderHeight / 2, 0);\n        upperSphere.updateMatrix();\n        lowerSphere.updateMatrix();\n        geometry.merge(upperSphere.geometry, upperSphere.matrix);\n        geometry.merge(lowerSphere.geometry, lowerSphere.matrix);\n        return geometry;\n      }\n\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var param = bodies[i].params;\n        this.add(new _three.Mesh(createGeometry(param), this.materials[param.type]));\n      }\n    }\n  });\n  return MMDPhysics;\n}();\n\nexports.MMDPhysics = MMDPhysics;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["_getBoneTransform","boneOffsetFormInverse","threeVector3s","_updateBonePosition","setOriginFromThreeVector3","setBasisFromArray3","freeThreeQuaternion","depthTest","setOrigin","body","freeVector3","setIdentity","allocThreeEuler","params","prototype","bone","transparent","constraints","freeTransform","_createWorld","freeThreeEuler","parent","__esModule","multiplyMatrix3ByVector3","matrix3ToQuaternion","updateBone","allocQuaternion","negativeVector3","matrixAutoUpdate","physics","_updateBoneRotation","allocVector3","_getWorldTransformForBone","reset","root","update","materials","rowOfMatrix3","multiplyTransforms","maxStepNum","quaternionToMatrix3","getOrigin","addVector3","unitStep","bodyB","vector3s","transposeMatrix3","value","gravity","wireframe","setBasis","setBasisFromThreeQuaternion","_updateBones","bodyA","allocTransform","_init","_setPositionFromBone","_updateRigidBodies","columnOfMatrix3","mesh","updateMatrixWorld","setOriginFromArray3","createHelper","quaternions","transforms","freeThreeMatrix4","depthWrite","threeQuaternions","freeQuaternion","_stepSimulation","setGravity","getBasis","manager","allocThreeMatrix4","inverseTransform","_initConstraints","copyOrigin","threeEulers","MMDPhysics","_initRigidBodies","warmup","threeMatrix4s","dotVectors3","allocThreeVector3","updateFromBone","setBasisFromMatrix3","color","allocThreeQuaternion","getBasisAsMatrix3","opacity","_setTransformFromBone","boneOffsetForm","bodies","world","constructor","freeThreeVector3","constraint","multiplyMatrices3"]],"~:compiled-at",1630917515356,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$animation$MMDPhysics.js\",\n\"lineCount\":39,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/animation/MMDPhysics.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$animation$MMDPhysics\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.MMDPhysics = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\n/**\\n * Dependencies\\n *  - Ammo.js https://github.com/kripken/ammo.js\\n *\\n * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\\n * for MMD model loaded by MMDLoader.\\n *\\n * TODO\\n *  - Physics in Worker\\n */\\n\\n/* global Ammo */\\nvar MMDPhysics = function () {\\n  /**\\n   * @param {THREE.SkinnedMesh} mesh\\n   * @param {Array<Object>} rigidBodyParams\\n   * @param {Array<Object>} (optional) constraintParams\\n   * @param {Object} params - (optional)\\n   * @param {Number} params.unitStep - Default is 1 / 65.\\n   * @param {Integer} params.maxStepNum - Default is 3.\\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\\n   */\\n  function MMDPhysics(mesh, rigidBodyParams, constraintParams, params) {\\n    if (typeof Ammo === 'undefined') {\\n      throw new Error('THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js');\\n    }\\n\\n    constraintParams = constraintParams || [];\\n    params = params || {};\\n    this.manager = new ResourceManager();\\n    this.mesh = mesh;\\n    /*\\n     * I don't know why but 1/60 unitStep easily breaks models\\n     * so I set it 1/65 so far.\\n     * Don't set too small unitStep because\\n     * the smaller unitStep can make the performance worse.\\n     */\\n\\n    this.unitStep = params.unitStep !== undefined ? params.unitStep : 1 / 65;\\n    this.maxStepNum = params.maxStepNum !== undefined ? params.maxStepNum : 3;\\n    this.gravity = new _three.Vector3(0, -9.8 * 10, 0);\\n    if (params.gravity !== undefined) this.gravity.copy(params.gravity);\\n    this.world = params.world !== undefined ? params.world : null; // experimental\\n\\n    this.bodies = [];\\n    this.constraints = [];\\n\\n    this._init(mesh, rigidBodyParams, constraintParams);\\n  }\\n\\n  MMDPhysics.prototype = {\\n    constructor: MMDPhysics,\\n\\n    /**\\n     * Advances Physics calculation and updates bones.\\n     *\\n     * @param {Number} delta - time in second\\n     * @return {MMDPhysics}\\n     */\\n    update: function update(delta) {\\n      var manager = this.manager;\\n      var mesh = this.mesh; // rigid bodies and constrains are for\\n      // mesh's world scale (1, 1, 1).\\n      // Convert to (1, 1, 1) if it isn't.\\n\\n      var isNonDefaultScale = false;\\n      var position = manager.allocThreeVector3();\\n      var quaternion = manager.allocThreeQuaternion();\\n      var scale = manager.allocThreeVector3();\\n      mesh.matrixWorld.decompose(position, quaternion, scale);\\n\\n      if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\\n        isNonDefaultScale = true;\\n      }\\n\\n      var parent;\\n\\n      if (isNonDefaultScale) {\\n        parent = mesh.parent;\\n        if (parent !== null) mesh.parent = null;\\n        scale.copy(this.mesh.scale);\\n        mesh.scale.set(1, 1, 1);\\n        mesh.updateMatrixWorld(true);\\n      } // calculate physics and update bones\\n\\n\\n      this._updateRigidBodies();\\n\\n      this._stepSimulation(delta);\\n\\n      this._updateBones(); // restore mesh if converted above\\n\\n\\n      if (isNonDefaultScale) {\\n        if (parent !== null) mesh.parent = parent;\\n        mesh.scale.copy(scale);\\n      }\\n\\n      manager.freeThreeVector3(scale);\\n      manager.freeThreeQuaternion(quaternion);\\n      manager.freeThreeVector3(position);\\n      return this;\\n    },\\n\\n    /**\\n     * Resets rigid bodies transorm to current bone's.\\n     *\\n     * @return {MMDPhysics}\\n     */\\n    reset: function reset() {\\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\\n        this.bodies[i].reset();\\n      }\\n\\n      return this;\\n    },\\n\\n    /**\\n     * Warm ups Rigid bodies. Calculates cycles steps.\\n     *\\n     * @param {Integer} cycles\\n     * @return {MMDPhysics}\\n     */\\n    warmup: function warmup(cycles) {\\n      for (var i = 0; i < cycles; i++) {\\n        this.update(1 / 60);\\n      }\\n\\n      return this;\\n    },\\n\\n    /**\\n     * Sets gravity.\\n     *\\n     * @param {Vector3} gravity\\n     * @return {MMDPhysicsHelper}\\n     */\\n    setGravity: function setGravity(gravity) {\\n      this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\\n      this.gravity.copy(gravity);\\n      return this;\\n    },\\n\\n    /**\\n     * Creates MMDPhysicsHelper\\n     *\\n     * @return {MMDPhysicsHelper}\\n     */\\n    createHelper: function createHelper() {\\n      return new MMDPhysicsHelper(this.mesh, this);\\n    },\\n    // private methods\\n    _init: function _init(mesh, rigidBodyParams, constraintParams) {\\n      var manager = this.manager; // rigid body/constraint parameters are for\\n      // mesh's default world transform as position(0, 0, 0),\\n      // quaternion(0, 0, 0, 1) and scale(0, 0, 0)\\n\\n      var parent = mesh.parent;\\n      if (parent !== null) parent = null;\\n      var currentPosition = manager.allocThreeVector3();\\n      var currentQuaternion = manager.allocThreeQuaternion();\\n      var currentScale = manager.allocThreeVector3();\\n      currentPosition.copy(mesh.position);\\n      currentQuaternion.copy(mesh.quaternion);\\n      currentScale.copy(mesh.scale);\\n      mesh.position.set(0, 0, 0);\\n      mesh.quaternion.set(0, 0, 0, 1);\\n      mesh.scale.set(1, 1, 1);\\n      mesh.updateMatrixWorld(true);\\n\\n      if (this.world === null) {\\n        this.world = this._createWorld();\\n        this.setGravity(this.gravity);\\n      }\\n\\n      this._initRigidBodies(rigidBodyParams);\\n\\n      this._initConstraints(constraintParams);\\n\\n      if (parent !== null) mesh.parent = parent;\\n      mesh.position.copy(currentPosition);\\n      mesh.quaternion.copy(currentQuaternion);\\n      mesh.scale.copy(currentScale);\\n      mesh.updateMatrixWorld(true);\\n      this.reset();\\n      manager.freeThreeVector3(currentPosition);\\n      manager.freeThreeQuaternion(currentQuaternion);\\n      manager.freeThreeVector3(currentScale);\\n    },\\n    _createWorld: function _createWorld() {\\n      var config = new Ammo.btDefaultCollisionConfiguration();\\n      var dispatcher = new Ammo.btCollisionDispatcher(config);\\n      var cache = new Ammo.btDbvtBroadphase();\\n      var solver = new Ammo.btSequentialImpulseConstraintSolver();\\n      var world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\\n      return world;\\n    },\\n    _initRigidBodies: function _initRigidBodies(rigidBodies) {\\n      for (var i = 0, il = rigidBodies.length; i < il; i++) {\\n        this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\\n      }\\n    },\\n    _initConstraints: function _initConstraints(constraints) {\\n      for (var i = 0, il = constraints.length; i < il; i++) {\\n        var params = constraints[i];\\n        var bodyA = this.bodies[params.rigidBodyIndex1];\\n        var bodyB = this.bodies[params.rigidBodyIndex2];\\n        this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\\n      }\\n    },\\n    _stepSimulation: function _stepSimulation(delta) {\\n      var unitStep = this.unitStep;\\n      var stepTime = delta;\\n      var maxStepNum = (delta / unitStep | 0) + 1;\\n\\n      if (stepTime < unitStep) {\\n        stepTime = unitStep;\\n        maxStepNum = 1;\\n      }\\n\\n      if (maxStepNum > this.maxStepNum) {\\n        maxStepNum = this.maxStepNum;\\n      }\\n\\n      this.world.stepSimulation(stepTime, maxStepNum, unitStep);\\n    },\\n    _updateRigidBodies: function _updateRigidBodies() {\\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\\n        this.bodies[i].updateFromBone();\\n      }\\n    },\\n    _updateBones: function _updateBones() {\\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\\n        this.bodies[i].updateBone();\\n      }\\n    }\\n  };\\n  /**\\n   * This manager's responsibilies are\\n   *\\n   * 1. manage Ammo.js and Three.js object resources and\\n   *    improve the performance and the memory consumption by\\n   *    reusing objects.\\n   *\\n   * 2. provide simple Ammo object operations.\\n   */\\n\\n  function ResourceManager() {\\n    // for Three.js\\n    this.threeVector3s = [];\\n    this.threeMatrix4s = [];\\n    this.threeQuaternions = [];\\n    this.threeEulers = []; // for Ammo.js\\n\\n    this.transforms = [];\\n    this.quaternions = [];\\n    this.vector3s = [];\\n  }\\n\\n  ResourceManager.prototype = {\\n    constructor: ResourceManager,\\n    allocThreeVector3: function allocThreeVector3() {\\n      return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new _three.Vector3();\\n    },\\n    freeThreeVector3: function freeThreeVector3(v) {\\n      this.threeVector3s.push(v);\\n    },\\n    allocThreeMatrix4: function allocThreeMatrix4() {\\n      return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new _three.Matrix4();\\n    },\\n    freeThreeMatrix4: function freeThreeMatrix4(m) {\\n      this.threeMatrix4s.push(m);\\n    },\\n    allocThreeQuaternion: function allocThreeQuaternion() {\\n      return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new _three.Quaternion();\\n    },\\n    freeThreeQuaternion: function freeThreeQuaternion(q) {\\n      this.threeQuaternions.push(q);\\n    },\\n    allocThreeEuler: function allocThreeEuler() {\\n      return this.threeEulers.length > 0 ? this.threeEulers.pop() : new _three.Euler();\\n    },\\n    freeThreeEuler: function freeThreeEuler(e) {\\n      this.threeEulers.push(e);\\n    },\\n    allocTransform: function allocTransform() {\\n      return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\\n    },\\n    freeTransform: function freeTransform(t) {\\n      this.transforms.push(t);\\n    },\\n    allocQuaternion: function allocQuaternion() {\\n      return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\\n    },\\n    freeQuaternion: function freeQuaternion(q) {\\n      this.quaternions.push(q);\\n    },\\n    allocVector3: function allocVector3() {\\n      return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\\n    },\\n    freeVector3: function freeVector3(v) {\\n      this.vector3s.push(v);\\n    },\\n    setIdentity: function setIdentity(t) {\\n      t.setIdentity();\\n    },\\n    getBasis: function getBasis(t) {\\n      var q = this.allocQuaternion();\\n      t.getBasis().getRotation(q);\\n      return q;\\n    },\\n    getBasisAsMatrix3: function getBasisAsMatrix3(t) {\\n      var q = this.getBasis(t);\\n      var m = this.quaternionToMatrix3(q);\\n      this.freeQuaternion(q);\\n      return m;\\n    },\\n    getOrigin: function getOrigin(t) {\\n      return t.getOrigin();\\n    },\\n    setOrigin: function setOrigin(t, v) {\\n      t.getOrigin().setValue(v.x(), v.y(), v.z());\\n    },\\n    copyOrigin: function copyOrigin(t1, t2) {\\n      var o = t2.getOrigin();\\n      this.setOrigin(t1, o);\\n    },\\n    setBasis: function setBasis(t, q) {\\n      t.setRotation(q);\\n    },\\n    setBasisFromMatrix3: function setBasisFromMatrix3(t, m) {\\n      var q = this.matrix3ToQuaternion(m);\\n      this.setBasis(t, q);\\n      this.freeQuaternion(q);\\n    },\\n    setOriginFromArray3: function setOriginFromArray3(t, a) {\\n      t.getOrigin().setValue(a[0], a[1], a[2]);\\n    },\\n    setOriginFromThreeVector3: function setOriginFromThreeVector3(t, v) {\\n      t.getOrigin().setValue(v.x, v.y, v.z);\\n    },\\n    setBasisFromArray3: function setBasisFromArray3(t, a) {\\n      var thQ = this.allocThreeQuaternion();\\n      var thE = this.allocThreeEuler();\\n      thE.set(a[0], a[1], a[2]);\\n      this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\\n      this.freeThreeEuler(thE);\\n      this.freeThreeQuaternion(thQ);\\n    },\\n    setBasisFromThreeQuaternion: function setBasisFromThreeQuaternion(t, a) {\\n      var q = this.allocQuaternion();\\n      q.setX(a.x);\\n      q.setY(a.y);\\n      q.setZ(a.z);\\n      q.setW(a.w);\\n      this.setBasis(t, q);\\n      this.freeQuaternion(q);\\n    },\\n    multiplyTransforms: function multiplyTransforms(t1, t2) {\\n      var t = this.allocTransform();\\n      this.setIdentity(t);\\n      var m1 = this.getBasisAsMatrix3(t1);\\n      var m2 = this.getBasisAsMatrix3(t2);\\n      var o1 = this.getOrigin(t1);\\n      var o2 = this.getOrigin(t2);\\n      var v1 = this.multiplyMatrix3ByVector3(m1, o2);\\n      var v2 = this.addVector3(v1, o1);\\n      this.setOrigin(t, v2);\\n      var m3 = this.multiplyMatrices3(m1, m2);\\n      this.setBasisFromMatrix3(t, m3);\\n      this.freeVector3(v1);\\n      this.freeVector3(v2);\\n      return t;\\n    },\\n    inverseTransform: function inverseTransform(t) {\\n      var t2 = this.allocTransform();\\n      var m1 = this.getBasisAsMatrix3(t);\\n      var o = this.getOrigin(t);\\n      var m2 = this.transposeMatrix3(m1);\\n      var v1 = this.negativeVector3(o);\\n      var v2 = this.multiplyMatrix3ByVector3(m2, v1);\\n      this.setOrigin(t2, v2);\\n      this.setBasisFromMatrix3(t2, m2);\\n      this.freeVector3(v1);\\n      this.freeVector3(v2);\\n      return t2;\\n    },\\n    multiplyMatrices3: function multiplyMatrices3(m1, m2) {\\n      var m3 = [];\\n      var v10 = this.rowOfMatrix3(m1, 0);\\n      var v11 = this.rowOfMatrix3(m1, 1);\\n      var v12 = this.rowOfMatrix3(m1, 2);\\n      var v20 = this.columnOfMatrix3(m2, 0);\\n      var v21 = this.columnOfMatrix3(m2, 1);\\n      var v22 = this.columnOfMatrix3(m2, 2);\\n      m3[0] = this.dotVectors3(v10, v20);\\n      m3[1] = this.dotVectors3(v10, v21);\\n      m3[2] = this.dotVectors3(v10, v22);\\n      m3[3] = this.dotVectors3(v11, v20);\\n      m3[4] = this.dotVectors3(v11, v21);\\n      m3[5] = this.dotVectors3(v11, v22);\\n      m3[6] = this.dotVectors3(v12, v20);\\n      m3[7] = this.dotVectors3(v12, v21);\\n      m3[8] = this.dotVectors3(v12, v22);\\n      this.freeVector3(v10);\\n      this.freeVector3(v11);\\n      this.freeVector3(v12);\\n      this.freeVector3(v20);\\n      this.freeVector3(v21);\\n      this.freeVector3(v22);\\n      return m3;\\n    },\\n    addVector3: function addVector3(v1, v2) {\\n      var v = this.allocVector3();\\n      v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\\n      return v;\\n    },\\n    dotVectors3: function dotVectors3(v1, v2) {\\n      return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\\n    },\\n    rowOfMatrix3: function rowOfMatrix3(m, i) {\\n      var v = this.allocVector3();\\n      v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\\n      return v;\\n    },\\n    columnOfMatrix3: function columnOfMatrix3(m, i) {\\n      var v = this.allocVector3();\\n      v.setValue(m[i + 0], m[i + 3], m[i + 6]);\\n      return v;\\n    },\\n    negativeVector3: function negativeVector3(v) {\\n      var v2 = this.allocVector3();\\n      v2.setValue(-v.x(), -v.y(), -v.z());\\n      return v2;\\n    },\\n    multiplyMatrix3ByVector3: function multiplyMatrix3ByVector3(m, v) {\\n      var v4 = this.allocVector3();\\n      var v0 = this.rowOfMatrix3(m, 0);\\n      var v1 = this.rowOfMatrix3(m, 1);\\n      var v2 = this.rowOfMatrix3(m, 2);\\n      var x = this.dotVectors3(v0, v);\\n      var y = this.dotVectors3(v1, v);\\n      var z = this.dotVectors3(v2, v);\\n      v4.setValue(x, y, z);\\n      this.freeVector3(v0);\\n      this.freeVector3(v1);\\n      this.freeVector3(v2);\\n      return v4;\\n    },\\n    transposeMatrix3: function transposeMatrix3(m) {\\n      var m2 = [];\\n      m2[0] = m[0];\\n      m2[1] = m[3];\\n      m2[2] = m[6];\\n      m2[3] = m[1];\\n      m2[4] = m[4];\\n      m2[5] = m[7];\\n      m2[6] = m[2];\\n      m2[7] = m[5];\\n      m2[8] = m[8];\\n      return m2;\\n    },\\n    quaternionToMatrix3: function quaternionToMatrix3(q) {\\n      var m = [];\\n      var x = q.x();\\n      var y = q.y();\\n      var z = q.z();\\n      var w = q.w();\\n      var xx = x * x;\\n      var yy = y * y;\\n      var zz = z * z;\\n      var xy = x * y;\\n      var yz = y * z;\\n      var zx = z * x;\\n      var xw = x * w;\\n      var yw = y * w;\\n      var zw = z * w;\\n      m[0] = 1 - 2 * (yy + zz);\\n      m[1] = 2 * (xy - zw);\\n      m[2] = 2 * (zx + yw);\\n      m[3] = 2 * (xy + zw);\\n      m[4] = 1 - 2 * (zz + xx);\\n      m[5] = 2 * (yz - xw);\\n      m[6] = 2 * (zx - yw);\\n      m[7] = 2 * (yz + xw);\\n      m[8] = 1 - 2 * (xx + yy);\\n      return m;\\n    },\\n    matrix3ToQuaternion: function matrix3ToQuaternion(m) {\\n      var t = m[0] + m[4] + m[8];\\n      var s, x, y, z, w;\\n\\n      if (t > 0) {\\n        s = Math.sqrt(t + 1.0) * 2;\\n        w = 0.25 * s;\\n        x = (m[7] - m[5]) / s;\\n        y = (m[2] - m[6]) / s;\\n        z = (m[3] - m[1]) / s;\\n      } else if (m[0] > m[4] && m[0] > m[8]) {\\n        s = Math.sqrt(1.0 + m[0] - m[4] - m[8]) * 2;\\n        w = (m[7] - m[5]) / s;\\n        x = 0.25 * s;\\n        y = (m[1] + m[3]) / s;\\n        z = (m[2] + m[6]) / s;\\n      } else if (m[4] > m[8]) {\\n        s = Math.sqrt(1.0 + m[4] - m[0] - m[8]) * 2;\\n        w = (m[2] - m[6]) / s;\\n        x = (m[1] + m[3]) / s;\\n        y = 0.25 * s;\\n        z = (m[5] + m[7]) / s;\\n      } else {\\n        s = Math.sqrt(1.0 + m[8] - m[0] - m[4]) * 2;\\n        w = (m[3] - m[1]) / s;\\n        x = (m[2] + m[6]) / s;\\n        y = (m[5] + m[7]) / s;\\n        z = 0.25 * s;\\n      }\\n\\n      var q = this.allocQuaternion();\\n      q.setX(x);\\n      q.setY(y);\\n      q.setZ(z);\\n      q.setW(w);\\n      return q;\\n    }\\n  };\\n  /**\\n   * @param {THREE.SkinnedMesh} mesh\\n   * @param {Ammo.btDiscreteDynamicsWorld} world\\n   * @param {Object} params\\n   * @param {ResourceManager} manager\\n   */\\n\\n  function RigidBody(mesh, world, params, manager) {\\n    this.mesh = mesh;\\n    this.world = world;\\n    this.params = params;\\n    this.manager = manager;\\n    this.body = null;\\n    this.bone = null;\\n    this.boneOffsetForm = null;\\n    this.boneOffsetFormInverse = null;\\n\\n    this._init();\\n  }\\n\\n  RigidBody.prototype = {\\n    constructor: MMDPhysics.RigidBody,\\n\\n    /**\\n     * Resets rigid body transform to the current bone's.\\n     *\\n     * @return {RigidBody}\\n     */\\n    reset: function reset() {\\n      this._setTransformFromBone();\\n\\n      return this;\\n    },\\n\\n    /**\\n     * Updates rigid body's transform from the current bone.\\n     *\\n     * @return {RidigBody}\\n     */\\n    updateFromBone: function updateFromBone() {\\n      if (this.params.boneIndex !== -1 && this.params.type === 0) {\\n        this._setTransformFromBone();\\n      }\\n\\n      return this;\\n    },\\n\\n    /**\\n     * Updates bone from the current ridid body's transform.\\n     *\\n     * @return {RidigBody}\\n     */\\n    updateBone: function updateBone() {\\n      if (this.params.type === 0 || this.params.boneIndex === -1) {\\n        return this;\\n      }\\n\\n      this._updateBoneRotation();\\n\\n      if (this.params.type === 1) {\\n        this._updateBonePosition();\\n      }\\n\\n      this.bone.updateMatrixWorld(true);\\n\\n      if (this.params.type === 2) {\\n        this._setPositionFromBone();\\n      }\\n\\n      return this;\\n    },\\n    // private methods\\n    _init: function _init() {\\n      function generateShape(p) {\\n        switch (p.shapeType) {\\n          case 0:\\n            return new Ammo.btSphereShape(p.width);\\n\\n          case 1:\\n            return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\\n\\n          case 2:\\n            return new Ammo.btCapsuleShape(p.width, p.height);\\n\\n          default:\\n            throw \\\"unknown shape type \\\".concat(p.shapeType);\\n        }\\n      }\\n\\n      var manager = this.manager;\\n      var params = this.params;\\n      var bones = this.mesh.skeleton.bones;\\n      var bone = params.boneIndex === -1 ? new _three.Bone() : bones[params.boneIndex];\\n      var shape = generateShape(params);\\n      var weight = params.type === 0 ? 0 : params.weight;\\n      var localInertia = manager.allocVector3();\\n      localInertia.setValue(0, 0, 0);\\n\\n      if (weight !== 0) {\\n        shape.calculateLocalInertia(weight, localInertia);\\n      }\\n\\n      var boneOffsetForm = manager.allocTransform();\\n      manager.setIdentity(boneOffsetForm);\\n      manager.setOriginFromArray3(boneOffsetForm, params.position);\\n      manager.setBasisFromArray3(boneOffsetForm, params.rotation);\\n      var vector = manager.allocThreeVector3();\\n      var boneForm = manager.allocTransform();\\n      manager.setIdentity(boneForm);\\n      manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\\n      var form = manager.multiplyTransforms(boneForm, boneOffsetForm);\\n      var state = new Ammo.btDefaultMotionState(form);\\n      var info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\\n      info.set_m_friction(params.friction);\\n      info.set_m_restitution(params.restitution);\\n      var body = new Ammo.btRigidBody(info);\\n\\n      if (params.type === 0) {\\n        body.setCollisionFlags(body.getCollisionFlags() | 2);\\n        /*\\n         * It'd be better to comment out this line though in general I should call this method\\n         * because I'm not sure why but physics will be more like MMD's\\n         * if I comment out.\\n         */\\n\\n        body.setActivationState(4);\\n      }\\n\\n      body.setDamping(params.positionDamping, params.rotationDamping);\\n      body.setSleepingThresholds(0, 0);\\n      this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\\n      this.body = body;\\n      this.bone = bone;\\n      this.boneOffsetForm = boneOffsetForm;\\n      this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\\n      manager.freeVector3(localInertia);\\n      manager.freeTransform(form);\\n      manager.freeTransform(boneForm);\\n      manager.freeThreeVector3(vector);\\n    },\\n    _getBoneTransform: function _getBoneTransform() {\\n      var manager = this.manager;\\n      var p = manager.allocThreeVector3();\\n      var q = manager.allocThreeQuaternion();\\n      var s = manager.allocThreeVector3();\\n      this.bone.matrixWorld.decompose(p, q, s);\\n      var tr = manager.allocTransform();\\n      manager.setOriginFromThreeVector3(tr, p);\\n      manager.setBasisFromThreeQuaternion(tr, q);\\n      var form = manager.multiplyTransforms(tr, this.boneOffsetForm);\\n      manager.freeTransform(tr);\\n      manager.freeThreeVector3(s);\\n      manager.freeThreeQuaternion(q);\\n      manager.freeThreeVector3(p);\\n      return form;\\n    },\\n    _getWorldTransformForBone: function _getWorldTransformForBone() {\\n      var manager = this.manager;\\n      var tr = this.body.getCenterOfMassTransform();\\n      return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\\n    },\\n    _setTransformFromBone: function _setTransformFromBone() {\\n      var manager = this.manager;\\n\\n      var form = this._getBoneTransform(); // TODO: check the most appropriate way to set\\n      //this.body.setWorldTransform( form );\\n\\n\\n      this.body.setCenterOfMassTransform(form);\\n      this.body.getMotionState().setWorldTransform(form);\\n      manager.freeTransform(form);\\n    },\\n    _setPositionFromBone: function _setPositionFromBone() {\\n      var manager = this.manager;\\n\\n      var form = this._getBoneTransform();\\n\\n      var tr = manager.allocTransform();\\n      this.body.getMotionState().getWorldTransform(tr);\\n      manager.copyOrigin(tr, form); // TODO: check the most appropriate way to set\\n      //this.body.setWorldTransform( tr );\\n\\n      this.body.setCenterOfMassTransform(tr);\\n      this.body.getMotionState().setWorldTransform(tr);\\n      manager.freeTransform(tr);\\n      manager.freeTransform(form);\\n    },\\n    _updateBoneRotation: function _updateBoneRotation() {\\n      var manager = this.manager;\\n\\n      var tr = this._getWorldTransformForBone();\\n\\n      var q = manager.getBasis(tr);\\n      var thQ = manager.allocThreeQuaternion();\\n      var thQ2 = manager.allocThreeQuaternion();\\n      var thQ3 = manager.allocThreeQuaternion();\\n      thQ.set(q.x(), q.y(), q.z(), q.w());\\n      thQ2.setFromRotationMatrix(this.bone.matrixWorld);\\n      thQ2.conjugate();\\n      thQ2.multiply(thQ); //this.bone.quaternion.multiply( thQ2 );\\n\\n      thQ3.setFromRotationMatrix(this.bone.matrix); // Renormalizing quaternion here because repeatedly transforming\\n      // quaternion continuously accumulates floating point error and\\n      // can end up being overflow. See #15335\\n\\n      this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\\n      manager.freeThreeQuaternion(thQ);\\n      manager.freeThreeQuaternion(thQ2);\\n      manager.freeThreeQuaternion(thQ3);\\n      manager.freeQuaternion(q);\\n      manager.freeTransform(tr);\\n    },\\n    _updateBonePosition: function _updateBonePosition() {\\n      var manager = this.manager;\\n\\n      var tr = this._getWorldTransformForBone();\\n\\n      var thV = manager.allocThreeVector3();\\n      var o = manager.getOrigin(tr);\\n      thV.set(o.x(), o.y(), o.z());\\n\\n      if (this.bone.parent) {\\n        this.bone.parent.worldToLocal(thV);\\n      }\\n\\n      this.bone.position.copy(thV);\\n      manager.freeThreeVector3(thV);\\n      manager.freeTransform(tr);\\n    }\\n  };\\n  /**\\n   * @param {THREE.SkinnedMesh} mesh\\n   * @param {Ammo.btDiscreteDynamicsWorld} world\\n   * @param {RigidBody} bodyA\\n   * @param {RigidBody} bodyB\\n   * @param {Object} params\\n   * @param {ResourceManager} manager\\n   */\\n\\n  function Constraint(mesh, world, bodyA, bodyB, params, manager) {\\n    this.mesh = mesh;\\n    this.world = world;\\n    this.bodyA = bodyA;\\n    this.bodyB = bodyB;\\n    this.params = params;\\n    this.manager = manager;\\n    this.constraint = null;\\n\\n    this._init();\\n  }\\n\\n  Constraint.prototype = {\\n    constructor: Constraint,\\n    // private method\\n    _init: function _init() {\\n      var manager = this.manager;\\n      var params = this.params;\\n      var bodyA = this.bodyA;\\n      var bodyB = this.bodyB;\\n      var form = manager.allocTransform();\\n      manager.setIdentity(form);\\n      manager.setOriginFromArray3(form, params.position);\\n      manager.setBasisFromArray3(form, params.rotation);\\n      var formA = manager.allocTransform();\\n      var formB = manager.allocTransform();\\n      bodyA.body.getMotionState().getWorldTransform(formA);\\n      bodyB.body.getMotionState().getWorldTransform(formB);\\n      var formInverseA = manager.inverseTransform(formA);\\n      var formInverseB = manager.inverseTransform(formB);\\n      var formA2 = manager.multiplyTransforms(formInverseA, form);\\n      var formB2 = manager.multiplyTransforms(formInverseB, form);\\n      var constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\\n      var lll = manager.allocVector3();\\n      var lul = manager.allocVector3();\\n      var all = manager.allocVector3();\\n      var aul = manager.allocVector3();\\n      lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\\n      lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\\n      all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\\n      aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\\n      constraint.setLinearLowerLimit(lll);\\n      constraint.setLinearUpperLimit(lul);\\n      constraint.setAngularLowerLimit(all);\\n      constraint.setAngularUpperLimit(aul);\\n\\n      for (var i = 0; i < 3; i++) {\\n        if (params.springPosition[i] !== 0) {\\n          constraint.enableSpring(i, true);\\n          constraint.setStiffness(i, params.springPosition[i]);\\n        }\\n      }\\n\\n      for (var _i = 0; _i < 3; _i++) {\\n        if (params.springRotation[_i] !== 0) {\\n          constraint.enableSpring(_i + 3, true);\\n          constraint.setStiffness(_i + 3, params.springRotation[_i]);\\n        }\\n      }\\n      /*\\n       * Currently(10/31/2016) official ammo.js doesn't support\\n       * btGeneric6DofSpringConstraint.setParam method.\\n       * You need custom ammo.js (add the method into idl) if you wanna use.\\n       * By setting this parameter, physics will be more like MMD's\\n       */\\n\\n\\n      if (constraint.setParam !== undefined) {\\n        for (var _i2 = 0; _i2 < 6; _i2++) {\\n          // this parameter is from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\\n          constraint.setParam(2, 0.475, _i2);\\n        }\\n      }\\n\\n      this.world.addConstraint(constraint, true);\\n      this.constraint = constraint;\\n      manager.freeTransform(form);\\n      manager.freeTransform(formA);\\n      manager.freeTransform(formB);\\n      manager.freeTransform(formInverseA);\\n      manager.freeTransform(formInverseB);\\n      manager.freeTransform(formA2);\\n      manager.freeTransform(formB2);\\n      manager.freeVector3(lll);\\n      manager.freeVector3(lul);\\n      manager.freeVector3(all);\\n      manager.freeVector3(aul);\\n    }\\n  };\\n  /**\\n   * Visualize Rigid bodies\\n   *\\n   * @param {THREE.SkinnedMesh} mesh\\n   * @param {Physics} physics\\n   */\\n\\n  function MMDPhysicsHelper(mesh, physics) {\\n    _three.Object3D.call(this);\\n\\n    this.root = mesh;\\n    this.physics = physics;\\n    this.matrix.copy(mesh.matrixWorld);\\n    this.matrixAutoUpdate = false;\\n    this.materials = [];\\n    this.materials.push(new _three.MeshBasicMaterial({\\n      color: new _three.Color(0xff8888),\\n      wireframe: true,\\n      depthTest: false,\\n      depthWrite: false,\\n      opacity: 0.25,\\n      transparent: true\\n    }));\\n    this.materials.push(new _three.MeshBasicMaterial({\\n      color: new _three.Color(0x88ff88),\\n      wireframe: true,\\n      depthTest: false,\\n      depthWrite: false,\\n      opacity: 0.25,\\n      transparent: true\\n    }));\\n    this.materials.push(new _three.MeshBasicMaterial({\\n      color: new _three.Color(0x8888ff),\\n      wireframe: true,\\n      depthTest: false,\\n      depthWrite: false,\\n      opacity: 0.25,\\n      transparent: true\\n    }));\\n\\n    this._init();\\n  }\\n\\n  MMDPhysicsHelper.prototype = Object.assign(Object.create(_three.Object3D.prototype), {\\n    constructor: MMDPhysicsHelper,\\n\\n    /**\\n     * Updates Rigid Bodies visualization.\\n     */\\n    updateMatrixWorld: function () {\\n      var position = new _three.Vector3();\\n      var quaternion = new _three.Quaternion();\\n      var scale = new _three.Vector3();\\n      var matrixWorldInv = new _three.Matrix4();\\n      return function updateMatrixWorld(force) {\\n        var mesh = this.root;\\n\\n        if (this.visible) {\\n          var bodies = this.physics.bodies;\\n          matrixWorldInv.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1)).invert();\\n\\n          for (var i = 0, il = bodies.length; i < il; i++) {\\n            var body = bodies[i].body;\\n            var child = this.children[i];\\n            var tr = body.getCenterOfMassTransform();\\n            var origin = tr.getOrigin();\\n            var rotation = tr.getRotation();\\n            child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(matrixWorldInv);\\n            child.quaternion.setFromRotationMatrix(matrixWorldInv).multiply(quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\\n          }\\n        }\\n\\n        this.matrix.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1));\\n\\n        _three.Object3D.prototype.updateMatrixWorld.call(this, force);\\n      };\\n    }(),\\n    // private method\\n    _init: function _init() {\\n      var bodies = this.physics.bodies;\\n\\n      function createGeometry(param) {\\n        switch (param.shapeType) {\\n          case 0:\\n            return new _three.SphereGeometry(param.width, 16, 8);\\n\\n          case 1:\\n            return new _three.BoxGeometry(param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8);\\n\\n          case 2:\\n            return new createCapsuleGeometry(param.width, param.height, 16, 8);\\n\\n          default:\\n            return null;\\n        }\\n      } // copy from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mytest37.js?ver=20160815\\n\\n\\n      function createCapsuleGeometry(radius, cylinderHeight, segmentsRadius, segmentsHeight) {\\n        var geometry = new _three.CylinderGeometry(radius, radius, cylinderHeight, segmentsRadius, segmentsHeight, true);\\n        var upperSphere = new _three.Mesh(new _three.SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, 0, Math.PI / 2));\\n        var lowerSphere = new _three.Mesh(new _three.SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2));\\n        upperSphere.position.set(0, cylinderHeight / 2, 0);\\n        lowerSphere.position.set(0, -cylinderHeight / 2, 0);\\n        upperSphere.updateMatrix();\\n        lowerSphere.updateMatrix();\\n        geometry.merge(upperSphere.geometry, upperSphere.matrix);\\n        geometry.merge(lowerSphere.geometry, lowerSphere.matrix);\\n        return geometry;\\n      }\\n\\n      for (var i = 0, il = bodies.length; i < il; i++) {\\n        var param = bodies[i].params;\\n        this.add(new _three.Mesh(createGeometry(param), this.materials[param.type]));\\n      }\\n    }\\n  });\\n  return MMDPhysics;\\n}();\\n\\nexports.MMDPhysics = MMDPhysics;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"MMDPhysics\",\"_three\",\"mesh\",\"rigidBodyParams\",\"constraintParams\",\"params\",\"Ammo\",\"Error\",\"manager\",\"ResourceManager\",\"unitStep\",\"undefined\",\"maxStepNum\",\"gravity\",\"Vector3\",\"copy\",\"world\",\"bodies\",\"constraints\",\"_init\",\"threeVector3s\",\"threeMatrix4s\",\"threeQuaternions\",\"threeEulers\",\"transforms\",\"quaternions\",\"vector3s\",\"RigidBody\",\"boneOffsetFormInverse\",\"boneOffsetForm\",\"bone\",\"body\",\"Constraint\",\"bodyA\",\"bodyB\",\"constraint\",\"MMDPhysicsHelper\",\"physics\",\"Object3D\",\"call\",\"root\",\"matrix\",\"matrixWorld\",\"matrixAutoUpdate\",\"materials\",\"push\",\"MeshBasicMaterial\",\"color\",\"Color\",\"wireframe\",\"depthTest\",\"depthWrite\",\"opacity\",\"transparent\",\"prototype\",\"constructor\",\"update\",\"delta\",\"isNonDefaultScale\",\"position\",\"allocThreeVector3\",\"quaternion\",\"allocThreeQuaternion\",\"scale\",\"decompose\",\"x\",\"y\",\"z\",\"parent\",\"set\",\"updateMatrixWorld\",\"_updateRigidBodies\",\"_stepSimulation\",\"_updateBones\",\"freeThreeVector3\",\"freeThreeQuaternion\",\"reset\",\"i\",\"il\",\"length\",\"warmup\",\"cycles\",\"setGravity\",\"btVector3\",\"createHelper\",\"currentPosition\",\"currentQuaternion\",\"currentScale\",\"_createWorld\",\"_initRigidBodies\",\"_initConstraints\",\"config\",\"btDefaultCollisionConfiguration\",\"dispatcher\",\"btCollisionDispatcher\",\"cache\",\"btDbvtBroadphase\",\"solver\",\"btSequentialImpulseConstraintSolver\",\"btDiscreteDynamicsWorld\",\"rigidBodies\",\"rigidBodyIndex1\",\"rigidBodyIndex2\",\"stepTime\",\"stepSimulation\",\"updateFromBone\",\"updateBone\",\"pop\",\"v\",\"allocThreeMatrix4\",\"Matrix4\",\"freeThreeMatrix4\",\"m\",\"Quaternion\",\"q\",\"allocThreeEuler\",\"Euler\",\"freeThreeEuler\",\"e\",\"allocTransform\",\"btTransform\",\"freeTransform\",\"t\",\"allocQuaternion\",\"btQuaternion\",\"freeQuaternion\",\"allocVector3\",\"freeVector3\",\"setIdentity\",\"getBasis\",\"getRotation\",\"getBasisAsMatrix3\",\"quaternionToMatrix3\",\"getOrigin\",\"setOrigin\",\"setValue\",\"copyOrigin\",\"t1\",\"t2\",\"o\",\"setBasis\",\"setRotation\",\"setBasisFromMatrix3\",\"matrix3ToQuaternion\",\"setOriginFromArray3\",\"a\",\"setOriginFromThreeVector3\",\"setBasisFromArray3\",\"thQ\",\"thE\",\"setBasisFromThreeQuaternion\",\"setFromEuler\",\"setX\",\"setY\",\"setZ\",\"setW\",\"w\",\"multiplyTransforms\",\"m1\",\"m2\",\"o1\",\"o2\",\"v1\",\"multiplyMatrix3ByVector3\",\"v2\",\"addVector3\",\"m3\",\"multiplyMatrices3\",\"inverseTransform\",\"transposeMatrix3\",\"negativeVector3\",\"v10\",\"rowOfMatrix3\",\"v11\",\"v12\",\"v20\",\"columnOfMatrix3\",\"v21\",\"v22\",\"dotVectors3\",\"v4\",\"v0\",\"xx\",\"yy\",\"zz\",\"xy\",\"yz\",\"zx\",\"xw\",\"yw\",\"zw\",\"s\",\"Math\",\"sqrt\",\"_setTransformFromBone\",\"boneIndex\",\"type\",\"_updateBoneRotation\",\"_updateBonePosition\",\"_setPositionFromBone\",\"bones\",\"skeleton\",\"Bone\",\"shapeType\",\"btSphereShape\",\"width\",\"btBoxShape\",\"height\",\"depth\",\"btCapsuleShape\",\"concat\",\"weight\",\"localInertia\",\"shape\",\"calculateLocalInertia\",\"rotation\",\"vector\",\"boneForm\",\"getWorldPosition\",\"form\",\"state\",\"btDefaultMotionState\",\"info\",\"btRigidBodyConstructionInfo\",\"set_m_friction\",\"friction\",\"set_m_restitution\",\"restitution\",\"btRigidBody\",\"setCollisionFlags\",\"getCollisionFlags\",\"setActivationState\",\"setDamping\",\"positionDamping\",\"rotationDamping\",\"setSleepingThresholds\",\"addRigidBody\",\"groupIndex\",\"groupTarget\",\"_getBoneTransform\",\"p\",\"tr\",\"_getWorldTransformForBone\",\"getCenterOfMassTransform\",\"setCenterOfMassTransform\",\"getMotionState\",\"setWorldTransform\",\"getWorldTransform\",\"thQ2\",\"thQ3\",\"setFromRotationMatrix\",\"conjugate\",\"multiply\",\"normalize\",\"thV\",\"worldToLocal\",\"formA\",\"formB\",\"formInverseA\",\"formInverseB\",\"formA2\",\"formB2\",\"btGeneric6DofSpringConstraint\",\"lll\",\"lul\",\"all\",\"aul\",\"translationLimitation1\",\"translationLimitation2\",\"rotationLimitation1\",\"rotationLimitation2\",\"setLinearLowerLimit\",\"setLinearUpperLimit\",\"setAngularLowerLimit\",\"setAngularUpperLimit\",\"springPosition\",\"enableSpring\",\"setStiffness\",\"_i\",\"springRotation\",\"setParam\",\"_i2\",\"addConstraint\",\"assign\",\"create\",\"matrixWorldInv\",\"force\",\"visible\",\"compose\",\"invert\",\"child\",\"children\",\"origin\",\"applyMatrix4\",\"createGeometry\",\"param\",\"SphereGeometry\",\"BoxGeometry\",\"createCapsuleGeometry\",\"radius\",\"cylinderHeight\",\"segmentsRadius\",\"segmentsHeight\",\"geometry\",\"CylinderGeometry\",\"upperSphere\",\"Mesh\",\"PI\",\"lowerSphere\",\"updateMatrix\",\"merge\",\"add\"]\n}\n"]