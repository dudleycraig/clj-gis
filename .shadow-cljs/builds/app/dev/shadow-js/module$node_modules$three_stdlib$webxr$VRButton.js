["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/webxr/VRButton.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$webxr$VRButton=function(global,require,module,exports){function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);\nstaticProps&&_defineProperties(Constructor,staticProps);return Constructor}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.VRButton=void 0;global=function(){function VRButton(){if(!(this instanceof VRButton))throw new TypeError(\"Cannot call a class as a function\");}_createClass(VRButton,null,[{key:\"createButton\",value:function(renderer,options){function showEnterVR(){function onSessionStarted(session){return regeneratorRuntime.async(function(_context){for(;;)switch(_context.prev=_context.next){case 0:return session.addEventListener(\"end\",\nonSessionEnded),_context.next=3,regeneratorRuntime.awrap(renderer.xr.setSession(session));case 3:button.textContent=\"EXIT VR\",currentSession=session;case 5:case \"end\":return _context.stop()}})}function onSessionEnded(){currentSession.removeEventListener(\"end\",onSessionEnded);button.textContent=\"ENTER VR\";currentSession=null}var currentSession=null;button.style.display=\"\";button.style.cursor=\"pointer\";button.style.left=\"calc(50% - 50px)\";button.style.width=\"100px\";button.textContent=\"ENTER VR\";button.onmouseenter=\nfunction(){button.style.opacity=\"1.0\"};button.onmouseleave=function(){button.style.opacity=\"0.5\"};button.onclick=function(){null===currentSession?navigator.xr.requestSession(\"immersive-vr\",{optionalFeatures:[\"local-floor\",\"bounded-floor\",\"hand-tracking\"]}).then(onSessionStarted):currentSession.end()}}function stylizeElement(element){element.style.position=\"absolute\";element.style.bottom=\"20px\";element.style.padding=\"12px 6px\";element.style.border=\"1px solid #fff\";element.style.borderRadius=\"4px\";\nelement.style.background=\"rgba(0,0,0,0.1)\";element.style.color=\"#fff\";element.style.font=\"normal 13px sans-serif\";element.style.textAlign=\"center\";element.style.opacity=\"0.5\";element.style.outline=\"none\";element.style.zIndex=\"999\"}options&&console.error('THREE.VRButton: The \"options\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.');var button=document.createElement(\"button\");if(\"xr\"in navigator)return button.id=\"VRButton\",button.style.display=\n\"none\",stylizeElement(button),navigator.xr.isSessionSupported(\"immersive-vr\").then(function(supported){supported?showEnterVR():(button.style.display=\"\",button.style.cursor=\"auto\",button.style.left=\"calc(50% - 75px)\",button.style.width=\"150px\",button.onmouseenter=null,button.onmouseleave=null,button.onclick=null,button.textContent=\"VR NOT SUPPORTED\")}),button;options=document.createElement(\"a\");!1===window.isSecureContext?(options.href=document.location.href.replace(/^http:/,\"https:\"),options.innerHTML=\n\"WEBXR NEEDS HTTPS\"):(options.href=\"https://immersiveweb.dev/\",options.innerHTML=\"WEBXR NOT AVAILABLE\");options.style.left=\"calc(50% - 90px)\";options.style.width=\"180px\";options.style.textDecoration=\"none\";stylizeElement(options);return options}}]);return VRButton}();exports.VRButton=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$webxr$VRButton\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VRButton = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar VRButton =\n/*#__PURE__*/\nfunction () {\n  function VRButton() {\n    _classCallCheck(this, VRButton);\n  }\n\n  _createClass(VRButton, null, [{\n    key: \"createButton\",\n    value: function createButton(renderer, options) {\n      if (options) {\n        console.error('THREE.VRButton: The \"options\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.');\n      }\n\n      var button = document.createElement('button');\n\n      function showEnterVR()\n      /*device*/\n      {\n        var currentSession = null;\n\n        function onSessionStarted(session) {\n          return regeneratorRuntime.async(function onSessionStarted$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  session.addEventListener('end', onSessionEnded);\n                  _context.next = 3;\n                  return regeneratorRuntime.awrap(renderer.xr.setSession(session));\n\n                case 3:\n                  button.textContent = 'EXIT VR';\n                  currentSession = session;\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          });\n        }\n\n        function onSessionEnded()\n        /*event*/\n        {\n          currentSession.removeEventListener('end', onSessionEnded);\n          button.textContent = 'ENTER VR';\n          currentSession = null;\n        } //\n\n\n        button.style.display = '';\n        button.style.cursor = 'pointer';\n        button.style.left = 'calc(50% - 50px)';\n        button.style.width = '100px';\n        button.textContent = 'ENTER VR';\n\n        button.onmouseenter = function () {\n          button.style.opacity = '1.0';\n        };\n\n        button.onmouseleave = function () {\n          button.style.opacity = '0.5';\n        };\n\n        button.onclick = function () {\n          if (currentSession === null) {\n            // WebXR's requestReferenceSpace only works if the corresponding feature\n            // was requested at session creation time. For simplicity, just ask for\n            // the interesting ones as optional features, but be aware that the\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\n            // ('local' is always available for immersive sessions and doesn't need to\n            // be requested separately.)\n            var sessionInit = {\n              optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\n            };\n            navigator.xr.requestSession('immersive-vr', sessionInit).then(onSessionStarted);\n          } else {\n            currentSession.end();\n          }\n        };\n      }\n\n      function disableButton() {\n        button.style.display = '';\n        button.style.cursor = 'auto';\n        button.style.left = 'calc(50% - 75px)';\n        button.style.width = '150px';\n        button.onmouseenter = null;\n        button.onmouseleave = null;\n        button.onclick = null;\n      }\n\n      function showWebXRNotFound() {\n        disableButton();\n        button.textContent = 'VR NOT SUPPORTED';\n      }\n\n      function stylizeElement(element) {\n        element.style.position = 'absolute';\n        element.style.bottom = '20px';\n        element.style.padding = '12px 6px';\n        element.style.border = '1px solid #fff';\n        element.style.borderRadius = '4px';\n        element.style.background = 'rgba(0,0,0,0.1)';\n        element.style.color = '#fff';\n        element.style.font = 'normal 13px sans-serif';\n        element.style.textAlign = 'center';\n        element.style.opacity = '0.5';\n        element.style.outline = 'none';\n        element.style.zIndex = '999';\n      }\n\n      if ('xr' in navigator) {\n        button.id = 'VRButton';\n        button.style.display = 'none';\n        stylizeElement(button);\n        navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n          supported ? showEnterVR() : showWebXRNotFound();\n        });\n        return button;\n      } else {\n        var message = document.createElement('a');\n\n        if (window.isSecureContext === false) {\n          message.href = document.location.href.replace(/^http:/, 'https:');\n          message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n        } else {\n          message.href = 'https://immersiveweb.dev/';\n          message.innerHTML = 'WEBXR NOT AVAILABLE';\n        }\n\n        message.style.left = 'calc(50% - 90px)';\n        message.style.width = '180px';\n        message.style.textDecoration = 'none';\n        stylizeElement(message);\n        return message;\n      }\n    }\n  }]);\n\n  return VRButton;\n}();\n\nexports.VRButton = VRButton;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["onmouseenter","VRButton","width","textDecoration","next","innerHTML","key","textContent","border","__esModule","padding","id","outline","position","href","configurable","value","onclick","enumerable","prev","cursor","writable","borderRadius","font","optionalFeatures","zIndex","onmouseleave","display","bottom","background","color","opacity","textAlign","left"]],"~:compiled-at",1630917515560,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$webxr$VRButton.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/webxr/VRButton.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$webxr$VRButton\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.VRButton = void 0;\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nvar VRButton =\\n/*#__PURE__*/\\nfunction () {\\n  function VRButton() {\\n    _classCallCheck(this, VRButton);\\n  }\\n\\n  _createClass(VRButton, null, [{\\n    key: \\\"createButton\\\",\\n    value: function createButton(renderer, options) {\\n      if (options) {\\n        console.error('THREE.VRButton: The \\\"options\\\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.');\\n      }\\n\\n      var button = document.createElement('button');\\n\\n      function showEnterVR()\\n      /*device*/\\n      {\\n        var currentSession = null;\\n\\n        function onSessionStarted(session) {\\n          return regeneratorRuntime.async(function onSessionStarted$(_context) {\\n            while (1) {\\n              switch (_context.prev = _context.next) {\\n                case 0:\\n                  session.addEventListener('end', onSessionEnded);\\n                  _context.next = 3;\\n                  return regeneratorRuntime.awrap(renderer.xr.setSession(session));\\n\\n                case 3:\\n                  button.textContent = 'EXIT VR';\\n                  currentSession = session;\\n\\n                case 5:\\n                case \\\"end\\\":\\n                  return _context.stop();\\n              }\\n            }\\n          });\\n        }\\n\\n        function onSessionEnded()\\n        /*event*/\\n        {\\n          currentSession.removeEventListener('end', onSessionEnded);\\n          button.textContent = 'ENTER VR';\\n          currentSession = null;\\n        } //\\n\\n\\n        button.style.display = '';\\n        button.style.cursor = 'pointer';\\n        button.style.left = 'calc(50% - 50px)';\\n        button.style.width = '100px';\\n        button.textContent = 'ENTER VR';\\n\\n        button.onmouseenter = function () {\\n          button.style.opacity = '1.0';\\n        };\\n\\n        button.onmouseleave = function () {\\n          button.style.opacity = '0.5';\\n        };\\n\\n        button.onclick = function () {\\n          if (currentSession === null) {\\n            // WebXR's requestReferenceSpace only works if the corresponding feature\\n            // was requested at session creation time. For simplicity, just ask for\\n            // the interesting ones as optional features, but be aware that the\\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\\n            // ('local' is always available for immersive sessions and doesn't need to\\n            // be requested separately.)\\n            var sessionInit = {\\n              optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\\n            };\\n            navigator.xr.requestSession('immersive-vr', sessionInit).then(onSessionStarted);\\n          } else {\\n            currentSession.end();\\n          }\\n        };\\n      }\\n\\n      function disableButton() {\\n        button.style.display = '';\\n        button.style.cursor = 'auto';\\n        button.style.left = 'calc(50% - 75px)';\\n        button.style.width = '150px';\\n        button.onmouseenter = null;\\n        button.onmouseleave = null;\\n        button.onclick = null;\\n      }\\n\\n      function showWebXRNotFound() {\\n        disableButton();\\n        button.textContent = 'VR NOT SUPPORTED';\\n      }\\n\\n      function stylizeElement(element) {\\n        element.style.position = 'absolute';\\n        element.style.bottom = '20px';\\n        element.style.padding = '12px 6px';\\n        element.style.border = '1px solid #fff';\\n        element.style.borderRadius = '4px';\\n        element.style.background = 'rgba(0,0,0,0.1)';\\n        element.style.color = '#fff';\\n        element.style.font = 'normal 13px sans-serif';\\n        element.style.textAlign = 'center';\\n        element.style.opacity = '0.5';\\n        element.style.outline = 'none';\\n        element.style.zIndex = '999';\\n      }\\n\\n      if ('xr' in navigator) {\\n        button.id = 'VRButton';\\n        button.style.display = 'none';\\n        stylizeElement(button);\\n        navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\\n          supported ? showEnterVR() : showWebXRNotFound();\\n        });\\n        return button;\\n      } else {\\n        var message = document.createElement('a');\\n\\n        if (window.isSecureContext === false) {\\n          message.href = document.location.href.replace(/^http:/, 'https:');\\n          message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\\n        } else {\\n          message.href = 'https://immersiveweb.dev/';\\n          message.innerHTML = 'WEBXR NOT AVAILABLE';\\n        }\\n\\n        message.style.left = 'calc(50% - 90px)';\\n        message.style.width = '180px';\\n        message.style.textDecoration = 'none';\\n        stylizeElement(message);\\n        return message;\\n      }\\n    }\\n  }]);\\n\\n  return VRButton;\\n}();\\n\\nexports.VRButton = VRButton;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"prototype\",\"value\",\"VRButton\",\"instance\",\"TypeError\",\"createButton\",\"renderer\",\"options\",\"showEnterVR\",\"onSessionStarted\",\"session\",\"regeneratorRuntime\",\"async\",\"onSessionStarted$\",\"_context\",\"prev\",\"next\",\"addEventListener\",\"onSessionEnded\",\"awrap\",\"xr\",\"setSession\",\"button\",\"textContent\",\"currentSession\",\"stop\",\"removeEventListener\",\"style\",\"display\",\"cursor\",\"left\",\"width\",\"onmouseenter\",\"button.onmouseenter\",\"opacity\",\"onmouseleave\",\"button.onmouseleave\",\"onclick\",\"button.onclick\",\"navigator\",\"requestSession\",\"sessionInit\",\"optionalFeatures\",\"then\",\"end\",\"stylizeElement\",\"element\",\"position\",\"bottom\",\"padding\",\"border\",\"borderRadius\",\"background\",\"color\",\"font\",\"textAlign\",\"outline\",\"zIndex\",\"console\",\"error\",\"document\",\"createElement\",\"id\",\"isSessionSupported\",\"supported\",\"message\",\"window\",\"isSecureContext\",\"href\",\"location\",\"replace\",\"innerHTML\",\"textDecoration\"]\n}\n"]