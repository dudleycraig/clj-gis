["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/KaleidoShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$KaleidoShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.KaleidoShader=void 0;exports.KaleidoShader={uniforms:{tDiffuse:{value:null},sides:{value:6},angle:{value:0}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform sampler2D tDiffuse;\\nuniform float sides;\\nuniform float angle;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec2 p \\x3d vUv - 0.5;\\n\\tfloat r \\x3d length(p);\\n\\tfloat a \\x3d atan(p.y, p.x) + angle;\\n\\tfloat tau \\x3d 2. * 3.1416 ;\\n\\ta \\x3d mod(a, tau/sides);\\n\\ta \\x3d abs(a - tau/sides/2.) ;\\n\\tp \\x3d r * vec2(cos(a), sin(a));\\n\\tvec4 color \\x3d texture2D(tDiffuse, p + 0.5);\\n\\tgl_FragColor \\x3d color;\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$KaleidoShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KaleidoShader = void 0;\n\n/**\n * Kaleidoscope Shader\n * Radial reflection around center point\n * Ported from: http://pixelshaders.com/editor/\n * by Toby Schachman / http://tobyschachman.com/\n *\n * sides: number of reflections\n * angle: initial angle in radians\n */\nvar KaleidoShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    sides: {\n      value: 6.0\n    },\n    angle: {\n      value: 0.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float sides;', 'uniform float angle;', 'varying vec2 vUv;', 'void main() {', '\tvec2 p = vUv - 0.5;', '\tfloat r = length(p);', '\tfloat a = atan(p.y, p.x) + angle;', '\tfloat tau = 2. * 3.1416 ;', '\ta = mod(a, tau/sides);', '\ta = abs(a - tau/sides/2.) ;', '\tp = r * vec2(cos(a), sin(a));', '\tvec4 color = texture2D(tDiffuse, p + 0.5);', '\tgl_FragColor = color;', '}'].join('\\n')\n};\nexports.KaleidoShader = KaleidoShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","sides","__esModule","tDiffuse","angle","vertexShader","value","KaleidoShader","uniforms"]],"~:compiled-at",1630917515579,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$KaleidoShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EA0B7BJ,QAAQI,CAAAA,aAAR,CAfoBA,CAClBC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,MAAO,CACLJ,MAAO,CADF,CAJC,CAORK,MAAO,CACLL,MAAO,CADF,CAPC,CADQC,CAYlBK,aAAiJ,qIAZ/HL,CAalBM,eAAia,2ZAb/YN,CAjB+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/KaleidoShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$KaleidoShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.KaleidoShader = void 0;\\n\\n/**\\n * Kaleidoscope Shader\\n * Radial reflection around center point\\n * Ported from: http://pixelshaders.com/editor/\\n * by Toby Schachman / http://tobyschachman.com/\\n *\\n * sides: number of reflections\\n * angle: initial angle in radians\\n */\\nvar KaleidoShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    sides: {\\n      value: 6.0\\n    },\\n    angle: {\\n      value: 0.0\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float sides;', 'uniform float angle;', 'varying vec2 vUv;', 'void main() {', '\\tvec2 p = vUv - 0.5;', '\\tfloat r = length(p);', '\\tfloat a = atan(p.y, p.x) + angle;', '\\tfloat tau = 2. * 3.1416 ;', '\\ta = mod(a, tau/sides);', '\\ta = abs(a - tau/sides/2.) ;', '\\tp = r * vec2(cos(a), sin(a));', '\\tvec4 color = texture2D(tDiffuse, p + 0.5);', '\\tgl_FragColor = color;', '}'].join('\\\\n')\\n};\\nexports.KaleidoShader = KaleidoShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"KaleidoShader\",\"uniforms\",\"tDiffuse\",\"sides\",\"angle\",\"vertexShader\",\"fragmentShader\"]\n}\n"]