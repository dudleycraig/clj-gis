["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/math/SimplexNoise.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$math$SimplexNoise=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.SimplexNoise=void 0;var _defineProperty2=function(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}(require(\"module$node_modules$$babel$runtime$helpers$esm$defineProperty\"));exports.SimplexNoise=function SimplexNoise(){var _this=this,r=0<arguments.length&&void 0!==arguments[0]?arguments[0]:Math;if(!(this instanceof SimplexNoise))throw new TypeError(\"Cannot call a class as a function\");\n(0,_defineProperty2[\"default\"])(this,\"grad3\",[[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]]);(0,_defineProperty2[\"default\"])(this,\"grad4\",[[0,1,1,1],[0,1,1,-1],[0,1,-1,1],[0,1,-1,-1],[0,-1,1,1],[0,-1,1,-1],[0,-1,-1,1],[0,-1,-1,-1],[1,0,1,1],[1,0,1,-1],[1,0,-1,1],[1,0,-1,-1],[-1,0,1,1],[-1,0,1,-1],[-1,0,-1,1],[-1,0,-1,-1],[1,1,0,1],[1,1,0,-1],[1,-1,0,1],[1,-1,0,-1],[-1,1,0,1],[-1,1,0,-1],[-1,-1,0,1],[-1,-1,0,-1],[1,1,1,0],[1,1,-1,0],[1,\n-1,1,0],[1,-1,-1,0],[-1,1,1,0],[-1,1,-1,0],[-1,-1,1,0],[-1,-1,-1,0]]);(0,_defineProperty2[\"default\"])(this,\"p\",[]);(0,_defineProperty2[\"default\"])(this,\"perm\",[]);(0,_defineProperty2[\"default\"])(this,\"simplex\",[[0,1,2,3],[0,1,3,2],[0,0,0,0],[0,2,3,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,2,3,0],[0,2,1,3],[0,0,0,0],[0,3,1,2],[0,3,2,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,3,2,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,2,0,3],[0,0,0,0],[1,3,0,2],[0,0,0,0],[0,0,0,0],\n[0,0,0,0],[2,3,0,1],[2,3,1,0],[1,0,2,3],[1,0,3,2],[0,0,0,0],[0,0,0,0],[0,0,0,0],[2,0,3,1],[0,0,0,0],[2,1,3,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[2,0,1,3],[0,0,0,0],[0,0,0,0],[0,0,0,0],[3,0,1,2],[3,0,2,1],[0,0,0,0],[3,1,2,0],[2,1,0,3],[0,0,0,0],[0,0,0,0],[0,0,0,0],[3,1,0,2],[0,0,0,0],[3,2,0,1],[3,2,1,0]]);(0,_defineProperty2[\"default\"])(this,\"dot\",function(g,x,y){return g[0]*x+g[1]*y});(0,_defineProperty2[\"default\"])(this,\"dot3\",function(g,x,y,z){return g[0]*\nx+g[1]*y+g[2]*z});(0,_defineProperty2[\"default\"])(this,\"dot4\",function(g,x,y,z,w){return g[0]*x+g[1]*y+g[2]*z+g[3]*w});(0,_defineProperty2[\"default\"])(this,\"noise\",function(xin,yin){var s=.5*(xin+yin)*(Math.sqrt(3)-1),i=Math.floor(xin+s),j=Math.floor(yin+s);s=(3-Math.sqrt(3))/6;var n1=(i+j)*s;xin-=i-n1;var y0=yin-(j-n1),i1=0,j1=1;xin>y0&&(i1=1,j1=0);n1=xin-i1+s;var y1=y0-j1+s;yin=xin-1+2*s;s=y0-1+2*s;var ii=i&255,jj=j&255;i=_this.perm[ii+_this.perm[jj]]%12;j=_this.perm[ii+i1+_this.perm[jj+j1]]%12;\ni1=_this.perm[ii+1+_this.perm[jj+1]]%12;j1=.5-xin*xin-y0*y0;0>j1?xin=0:(j1*=j1,xin=j1*j1*_this.dot(_this.grad3[i],xin,y0));y0=.5-n1*n1-y1*y1;0>y0?n1=0:(y0*=y0,n1=y0*y0*_this.dot(_this.grad3[j],n1,y1));y1=.5-yin*yin-s*s;0>y1?yin=0:(y1*=y1,yin=y1*y1*_this.dot(_this.grad3[i1],yin,s));return 70*(xin+n1+yin)});(0,_defineProperty2[\"default\"])(this,\"noise3d\",function(xin,yin,zin){var s=1/3*(xin+yin+zin),i=Math.floor(xin+s),j=Math.floor(yin+s),k=Math.floor(zin+s);s=1/6;var n2=(i+j+k)*s;var n0=xin-(i-n2);\nvar n1=yin-(j-n2);var z0=zin-(k-n2),j1,i2;if(n0>=n1)if(n1>=z0){var i1=1;var k1=j1=0;var j2=i2=1;var k2=0}else n0>=z0?(i1=1,k1=j1=0):(j1=i1=0,k1=1),i2=1,j2=0,k2=1;else n1<z0?(j1=i1=0,k1=1,i2=0,k2=j2=1):n0<z0?(i1=0,j1=1,i2=k1=0,k2=j2=1):(i1=0,j1=1,k1=0,j2=i2=1,k2=0);var x1=n0-i1+s,y1=n1-j1+s,z1=z0-k1+s;n2=n0-i2+2*s;xin=n1-j2+2*s;var z2=z0-k2+2*s;zin=n0-1+3*s;yin=n1-1+3*s;s=z0-1+3*s;i&=255;var jj=j&255,kk=k&255;j=_this.perm[i+_this.perm[jj+_this.perm[kk]]]%12;k=_this.perm[i+i1+_this.perm[jj+j1+_this.perm[kk+\nk1]]]%12;i2=_this.perm[i+i2+_this.perm[jj+j2+_this.perm[kk+k2]]]%12;i=_this.perm[i+1+_this.perm[jj+1+_this.perm[kk+1]]]%12;j2=.6-n0*n0-n1*n1-z0*z0;0>j2?n0=0:(j2*=j2,n0=j2*j2*_this.dot3(_this.grad3[j],n0,n1,z0));n1=.6-x1*x1-y1*y1-z1*z1;0>n1?n1=0:(n1*=n1,n1=n1*n1*_this.dot3(_this.grad3[k],x1,y1,z1));x1=.6-n2*n2-xin*xin-z2*z2;0>x1?n2=0:(x1*=x1,n2=x1*x1*_this.dot3(_this.grad3[i2],n2,xin,z2));xin=.6-zin*zin-yin*yin-s*s;0>xin?zin=0:(xin*=xin,zin=xin*xin*_this.dot3(_this.grad3[i],zin,yin,s));return 32*(n0+\nn1+n2+zin)});(0,_defineProperty2[\"default\"])(this,\"noise4d\",function(x,y,z,w){var grad4=_this.grad4,simplex=_this.simplex,perm=_this.perm,G4=(5-Math.sqrt(5))/20;var n3=(Math.sqrt(5)-1)/4*(x+y+z+w);var i=Math.floor(x+n3),j=Math.floor(y+n3),k=Math.floor(z+n3),l=Math.floor(w+n3);n3=(i+j+k+l)*G4;x-=i-n3;var n1=y-(j-n3);var n2=z-(k-n3);var w0=w-(l-n3);w=(x>n1?32:0)+(x>n2?16:0)+(n1>n2?8:0)+(x>w0?4:0)+(n1>w0?2:0)+(n2>w0?1:0);var i1=3<=simplex[w][0]?1:0;var j1=3<=simplex[w][1]?1:0;var k1=3<=simplex[w][2]?\n1:0;var l1=3<=simplex[w][3]?1:0;var i2=2<=simplex[w][0]?1:0;var j2=2<=simplex[w][1]?1:0;var k2=2<=simplex[w][2]?1:0;var l2=2<=simplex[w][3]?1:0;var i3=1<=simplex[w][0]?1:0;var j3=1<=simplex[w][1]?1:0;var k3=1<=simplex[w][2]?1:0;var l3=1<=simplex[w][3]?1:0;var x1=x-i1+G4,y1=n1-j1+G4,z1=n2-k1+G4,w1=w0-l1+G4,x2=x-i2+2*G4,y2=n1-j2+2*G4,z2=n2-k2+2*G4,w2=w0-l2+2*G4;n3=x-i3+3*G4;y=n1-j3+3*G4;var z3=n2-k3+3*G4,w3=w0-l3+3*G4;simplex=x-1+4*G4;w=n1-1+4*G4;z=n2-1+4*G4;G4=w0-1+4*G4;i&=255;j&=255;var kk=k&255;\nl&=255;k=perm[i+perm[j+perm[kk+perm[l]]]]%32;i1=perm[i+i1+perm[j+j1+perm[kk+k1+perm[l+l1]]]]%32;i2=perm[i+i2+perm[j+j2+perm[kk+k2+perm[l+l2]]]]%32;i3=perm[i+i3+perm[j+j3+perm[kk+k3+perm[l+l3]]]]%32;perm=perm[i+1+perm[j+1+perm[kk+1+perm[l+1]]]]%32;l=.6-x*x-n1*n1-n2*n2-w0*w0;0>l?x=0:(l*=l,x=l*l*_this.dot4(grad4[k],x,n1,n2,w0));n1=.6-x1*x1-y1*y1-z1*z1-w1*w1;0>n1?n1=0:(n1*=n1,n1=n1*n1*_this.dot4(grad4[i1],x1,y1,z1,w1));n2=.6-x2*x2-y2*y2-z2*z2-w2*w2;0>n2?n2=0:(n2*=n2,n2=n2*n2*_this.dot4(grad4[i2],x2,y2,\nz2,w2));x2=.6-n3*n3-y*y-z3*z3-w3*w3;0>x2?n3=0:(x2*=x2,n3=x2*x2*_this.dot4(grad4[i3],n3,y,z3,w3));y=.6-simplex*simplex-w*w-z*z-G4*G4;0>y?grad4=0:(y*=y,grad4=y*y*_this.dot4(grad4[perm],simplex,w,z,G4));return 27*(x+n1+n2+n3+grad4)});for(var i$jscomp$0=0;256>i$jscomp$0;i$jscomp$0++)this.p[i$jscomp$0]=Math.floor(256*r.random());for(r=0;512>r;r++)this.perm[r]=this.p[r&255]}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$math$SimplexNoise\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimplexNoise = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/defineProperty\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\nvar SimplexNoise = // To remove the need for index wrapping, double the permutation table length\n// A lookup table to traverse the simplex around a given point in 4D.\n// Details can be found where this table is used, in the 4D noise method.\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nfunction SimplexNoise() {\n  var _this = this;\n\n  var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Math;\n\n  _classCallCheck(this, SimplexNoise);\n\n  (0, _defineProperty2[\"default\"])(this, \"grad3\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\n  (0, _defineProperty2[\"default\"])(this, \"grad4\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\n  (0, _defineProperty2[\"default\"])(this, \"p\", []);\n  (0, _defineProperty2[\"default\"])(this, \"perm\", []);\n  (0, _defineProperty2[\"default\"])(this, \"simplex\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\n  (0, _defineProperty2[\"default\"])(this, \"dot\", function (g, x, y) {\n    return g[0] * x + g[1] * y;\n  });\n  (0, _defineProperty2[\"default\"])(this, \"dot3\", function (g, x, y, z) {\n    return g[0] * x + g[1] * y + g[2] * z;\n  });\n  (0, _defineProperty2[\"default\"])(this, \"dot4\", function (g, x, y, z, w) {\n    return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n  });\n  (0, _defineProperty2[\"default\"])(this, \"noise\", function (xin, yin) {\n    var n0;\n    var n1;\n    var n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n    var s = (xin + yin) * F2; // Hairy factor for 2D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n    var t = (i + j) * G2;\n    var X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n    var Y0 = j - t;\n    var x0 = xin - X0; // The x,y distances from the cell origin\n\n    var y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n    var i1 = 0; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n    var j1 = 1;\n\n    if (x0 > y0) {\n      i1 = 1;\n      j1 = 0;\n    } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n\n\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n    var y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255;\n    var gi0 = _this.perm[ii + _this.perm[jj]] % 12;\n    var gi1 = _this.perm[ii + i1 + _this.perm[jj + j1]] % 12;\n    var gi2 = _this.perm[ii + 1 + _this.perm[jj + 1]] % 12; // Calculate the contribution from the three corners\n\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n\n    if (t0 < 0) {\n      n0 = 0.0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot(_this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n    if (t1 < 0) {\n      n1 = 0.0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot(_this.grad3[gi1], x1, y1);\n    }\n\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n\n    if (t2 < 0) {\n      n2 = 0.0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot(_this.grad3[gi2], x2, y2);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 70.0 * (n0 + n1 + n2);\n  });\n  (0, _defineProperty2[\"default\"])(this, \"noise3d\", function (xin, yin, zin) {\n    // Noise contributions from the four corners\n    var n0;\n    var n1;\n    var n2;\n    var n3; // Skew the input space to determine which simplex cell we're in\n\n    var F3 = 1.0 / 3.0;\n    var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var k = Math.floor(zin + s);\n    var G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\n    var t = (i + j + k) * G3;\n    var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n    var Y0 = j - t;\n    var Z0 = k - t;\n    var x0 = xin - X0; // The x,y,z distances from the cell origin\n\n    var y0 = yin - Y0;\n    var z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n\n    var i1;\n    var j1;\n    var k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n    var i2;\n    var j2;\n    var k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0; // X Y Z order\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1; // X Z Y order\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } // Z X Y order\n\n    } else {\n      // x0<y0\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1; // Z Y X order\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1; // Y Z X order\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } // Y X Z order\n\n    } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n\n\n    var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n    var y2 = y0 - j2 + 2.0 * G3;\n    var z2 = z0 - k2 + 2.0 * G3;\n    var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n    var y3 = y0 - 1.0 + 3.0 * G3;\n    var z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255;\n    var kk = k & 255;\n    var gi0 = _this.perm[ii + _this.perm[jj + _this.perm[kk]]] % 12;\n    var gi1 = _this.perm[ii + i1 + _this.perm[jj + j1 + _this.perm[kk + k1]]] % 12;\n    var gi2 = _this.perm[ii + i2 + _this.perm[jj + j2 + _this.perm[kk + k2]]] % 12;\n    var gi3 = _this.perm[ii + 1 + _this.perm[jj + 1 + _this.perm[kk + 1]]] % 12; // Calculate the contribution from the four corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n    if (t0 < 0) {\n      n0 = 0.0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot3(_this.grad3[gi0], x0, y0, z0);\n    }\n\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n    if (t1 < 0) {\n      n1 = 0.0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot3(_this.grad3[gi1], x1, y1, z1);\n    }\n\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n    if (t2 < 0) {\n      n2 = 0.0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot3(_this.grad3[gi2], x2, y2, z2);\n    }\n\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n    if (t3 < 0) {\n      n3 = 0.0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * _this.dot3(_this.grad3[gi3], x3, y3, z3);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to stay just inside [-1,1]\n\n\n    return 32.0 * (n0 + n1 + n2 + n3);\n  });\n  (0, _defineProperty2[\"default\"])(this, \"noise4d\", function (x, y, z, w) {\n    // For faster and easier lookups\n    var grad4 = _this.grad4;\n    var simplex = _this.simplex;\n    var perm = _this.perm; // The skewing and unskewing factors are hairy again for the 4D case\n\n    var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n    var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n    var n0;\n    var n1;\n    var n2;\n    var n3;\n    var n4; // Noise contributions from the five corners\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n    var s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n    var i = Math.floor(x + s);\n    var j = Math.floor(y + s);\n    var k = Math.floor(z + s);\n    var l = Math.floor(w + s);\n    var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n    var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n    var Y0 = j - t;\n    var Z0 = k - t;\n    var W0 = l - t;\n    var x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n    var y0 = y - Y0;\n    var z0 = z - Z0;\n    var w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n    // To find out which of the 24 possible simplices we're in, we need to\n    // determine the magnitude ordering of x0, y0, z0 and w0.\n    // The method below is a good way of finding the ordering of x,y,z,w and\n    // then find the correct traversal order for the simplex we’re in.\n    // First, six pair-wise comparisons are performed between each possible pair\n    // of the four coordinates, and the results are used to add up binary bits\n    // for an integer index.\n\n    var c1 = x0 > y0 ? 32 : 0;\n    var c2 = x0 > z0 ? 16 : 0;\n    var c3 = y0 > z0 ? 8 : 0;\n    var c4 = x0 > w0 ? 4 : 0;\n    var c5 = y0 > w0 ? 2 : 0;\n    var c6 = z0 > w0 ? 1 : 0;\n    var c = c1 + c2 + c3 + c4 + c5 + c6; // The integer offsets for the second simplex corner\n\n    var i1;\n    var j1;\n    var k1;\n    var l1; // The integer offsets for the third simplex corner\n\n    var i2;\n    var j2;\n    var k2;\n    var l2; // The integer offsets for the fourth simplex corner\n\n    var i3;\n    var j3;\n    var k3;\n    var l3; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\n    // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\n    i1 = simplex[c][0] >= 3 ? 1 : 0;\n    j1 = simplex[c][1] >= 3 ? 1 : 0;\n    k1 = simplex[c][2] >= 3 ? 1 : 0;\n    l1 = simplex[c][3] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\n    i2 = simplex[c][0] >= 2 ? 1 : 0;\n    j2 = simplex[c][1] >= 2 ? 1 : 0;\n    k2 = simplex[c][2] >= 2 ? 1 : 0;\n    l2 = simplex[c][3] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\n    i3 = simplex[c][0] >= 1 ? 1 : 0;\n    j3 = simplex[c][1] >= 1 ? 1 : 0;\n    k3 = simplex[c][2] >= 1 ? 1 : 0;\n    l3 = simplex[c][3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\n    var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n    var y1 = y0 - j1 + G4;\n    var z1 = z0 - k1 + G4;\n    var w1 = w0 - l1 + G4;\n    var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n    var y2 = y0 - j2 + 2.0 * G4;\n    var z2 = z0 - k2 + 2.0 * G4;\n    var w2 = w0 - l2 + 2.0 * G4;\n    var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n    var y3 = y0 - j3 + 3.0 * G4;\n    var z3 = z0 - k3 + 3.0 * G4;\n    var w3 = w0 - l3 + 3.0 * G4;\n    var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n    var y4 = y0 - 1.0 + 4.0 * G4;\n    var z4 = z0 - 1.0 + 4.0 * G4;\n    var w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n    var ii = i & 255;\n    var jj = j & 255;\n    var kk = k & 255;\n    var ll = l & 255;\n    var gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n    var gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n    var gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n    var gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n    var gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32; // Calculate the contribution from the five corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\n    if (t0 < 0) {\n      n0 = 0.0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * _this.dot4(grad4[gi0], x0, y0, z0, w0);\n    }\n\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\n    if (t1 < 0) {\n      n1 = 0.0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * _this.dot4(grad4[gi1], x1, y1, z1, w1);\n    }\n\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\n    if (t2 < 0) {\n      n2 = 0.0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * _this.dot4(grad4[gi2], x2, y2, z2, w2);\n    }\n\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\n    if (t3 < 0) {\n      n3 = 0.0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * _this.dot4(grad4[gi3], x3, y3, z3, w3);\n    }\n\n    var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\n    if (t4 < 0) {\n      n4 = 0.0;\n    } else {\n      t4 *= t4;\n      n4 = t4 * t4 * _this.dot4(grad4[gi4], x4, y4, z4, w4);\n    } // Sum up and scale the result to cover the range [-1,1]\n\n\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n  });\n\n  for (var i = 0; i < 256; i++) {\n    this.p[i] = Math.floor(r.random() * 256);\n  }\n\n  for (var _i = 0; _i < 512; _i++) {\n    this.perm[_i] = this.p[_i & 255];\n  }\n};\n\nexports.SimplexNoise = SimplexNoise;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$$babel$runtime$helpers$esm$defineProperty"]],"~:properties",["^5",["SimplexNoise","__esModule","value"]],"~:compiled-at",1630917515379,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$math$SimplexNoise.js\",\n\"lineCount\":12,\n\"mappings\":\"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAE5B,KAAIC,iBAEJC,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CAFd,CAAuBT,OAAA,CAAQ,+DAAR,CAAvB,CA0bvBE,QAAQI,CAAAA,YAAR,CAraAA,QAASA,aAAY,EAAG,CACtB,IAAIK,MAAQ,IAAZ,CAEIC,EAAuB,CAAnB,CAAAC,SAAUC,CAAAA,MAAV,EAAyCC,IAAAA,EAAzC,GAAwBF,SAAA,CAAU,CAAV,CAAxB,CAAqDA,SAAA,CAAU,CAAV,CAArD,CAAoEG,IApB5B,IAAI,EAsBpCC,IAtBoC,WAsB9BX,aAtB8B,CAAJ,CAA0C,KAAM,KAAIY,SAAJ,CAAc,mCAAd,CAAN;AAwB1F,CAAC,CAAA,CAAGX,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,IAAjC,CAAuC,OAAvC,CAAgD,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAD,CAAY,CAAC,EAAD,CAAK,CAAL,CAAQ,CAAR,CAAZ,CAAwB,CAAC,CAAD,CAAI,EAAJ,CAAQ,CAAR,CAAxB,CAAoC,CAAC,EAAD,CAAK,EAAL,CAAS,CAAT,CAApC,CAAiD,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAjD,CAA4D,CAAC,EAAD,CAAK,CAAL,CAAQ,CAAR,CAA5D,CAAwE,CAAC,CAAD,CAAI,CAAJ,CAAO,EAAP,CAAxE,CAAoF,CAAC,EAAD,CAAK,CAAL,CAAQ,EAAR,CAApF,CAAiG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAjG,CAA4G,CAAC,CAAD,CAAI,EAAJ,CAAQ,CAAR,CAA5G,CAAwH,CAAC,CAAD,CAAI,CAAJ,CAAO,EAAP,CAAxH,CAAoI,CAAC,CAAD,CAAI,EAAJ,CAAQ,EAAR,CAApI,CAAhD,CACA,EAAC,CAAA,CAAGA,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,IAAjC,CAAuC,OAAvC,CAAgD,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAD,CAAe,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,EAAV,CAAf,CAA8B,CAAC,CAAD,CAAI,CAAJ,CAAO,EAAP,CAAW,CAAX,CAA9B,CAA6C,CAAC,CAAD,CAAI,CAAJ,CAAO,EAAP,CAAW,EAAX,CAA7C,CAA6D,CAAC,CAAD,CAAI,EAAJ,CAAQ,CAAR,CAAW,CAAX,CAA7D,CAA4E,CAAC,CAAD,CAAI,EAAJ,CAAQ,CAAR,CAAW,EAAX,CAA5E,CAA4F,CAAC,CAAD,CAAI,EAAJ,CAAQ,EAAR,CAAY,CAAZ,CAA5F,CAA4G,CAAC,CAAD,CAAI,EAAJ,CAAQ,EAAR,CAAY,EAAZ,CAA5G,CAA6H,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA7H,CAA2I,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,EAAV,CAA3I,CAA0J,CAAC,CAAD,CAAI,CAAJ,CAAO,EAAP,CAAW,CAAX,CAA1J,CAAyK,CAAC,CAAD,CAAI,CAAJ,CAAO,EAAP,CAAW,EAAX,CAAzK,CAAyL,CAAC,EAAD,CAAK,CAAL,CAAQ,CAAR,CAAW,CAAX,CAAzL,CAAwM,CAAC,EAAD,CAAK,CAAL,CAAQ,CAAR,CAAW,EAAX,CAAxM,CAAwN,CAAC,EAAD,CAAK,CAAL,CAAQ,EAAR,CAAY,CAAZ,CAAxN,CAAwO,CAAC,EAAD,CAAK,CAAL,CAAQ,EAAR,CAAY,EAAZ,CAAxO,CAAyP,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAzP,CAAuQ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,EAAV,CAAvQ,CAAsR,CAAC,CAAD,CAAI,EAAJ,CAAQ,CAAR,CAAW,CAAX,CAAtR,CAAqS,CAAC,CAAD,CAAI,EAAJ,CAAQ,CAAR,CAAW,EAAX,CAArS,CAAqT,CAAC,EAAD,CAAK,CAAL,CAAQ,CAAR,CAAW,CAAX,CAArT,CAAoU,CAAC,EAAD,CAAK,CAAL,CAAQ,CAAR,CAAW,EAAX,CAApU,CAAoV,CAAC,EAAD,CAAK,EAAL,CAAS,CAAT,CAAY,CAAZ,CAApV,CAAoW,CAAC,EAAD,CAAK,EAAL,CAAS,CAAT,CAAY,EAAZ,CAApW,CAAqX,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAArX,CAAmY,CAAC,CAAD,CAAI,CAAJ,CAAO,EAAP,CAAW,CAAX,CAAnY,CAAkZ,CAAC,CAAD;AAAI,EAAJ,CAAQ,CAAR,CAAW,CAAX,CAAlZ,CAAia,CAAC,CAAD,CAAI,EAAJ,CAAQ,EAAR,CAAY,CAAZ,CAAja,CAAib,CAAC,EAAD,CAAK,CAAL,CAAQ,CAAR,CAAW,CAAX,CAAjb,CAAgc,CAAC,EAAD,CAAK,CAAL,CAAQ,EAAR,CAAY,CAAZ,CAAhc,CAAgd,CAAC,EAAD,CAAK,EAAL,CAAS,CAAT,CAAY,CAAZ,CAAhd,CAAge,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAa,CAAb,CAAhe,CAAhD,CACA,EAAC,CAAA,CAAGA,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,IAAjC,CAAuC,GAAvC,CAA4C,EAA5C,CACA,EAAC,CAAA,CAAGA,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,IAAjC,CAAuC,MAAvC,CAA+C,EAA/C,CACA,EAAC,CAAA,CAAGA,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,IAAjC,CAAuC,SAAvC,CAAkD,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAD,CAAe,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAf,CAA6B,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA7B,CAA2C,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA3C,CAAyD,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAzD,CAAuE,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAvE,CAAqF,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAArF,CAAmG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAnG,CAAiH,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAjH,CAA+H,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA/H,CAA6I,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA7I,CAA2J,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA3J,CAAyK,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAzK,CAAuL,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAvL,CAAqM,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAArM,CAAmN,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAnN,CAAiO,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAjO,CAA+O,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA/O,CAA6P,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA7P,CAA2Q,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA3Q,CAAyR,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAzR,CAAuS,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAvS,CAAqT,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAArT,CAAmU,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAnU,CAAiV,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAjV,CAA+V,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA/V,CAA6W,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA7W,CAA2X,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA3X,CAAyY,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAzY;AAAuZ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAvZ,CAAqa,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAra,CAAmb,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAnb,CAAic,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAjc,CAA+c,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA/c,CAA6d,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA7d,CAA2e,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA3e,CAAyf,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAzf,CAAugB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAvgB,CAAqhB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAArhB,CAAmiB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAniB,CAAijB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAjjB,CAA+jB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA/jB,CAA6kB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA7kB,CAA2lB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA3lB,CAAymB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAzmB,CAAunB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAvnB,CAAqoB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAroB,CAAmpB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAnpB,CAAiqB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAjqB,CAA+qB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA/qB,CAA6rB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA7rB,CAA2sB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA3sB,CAAytB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAztB,CAAuuB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAvuB,CAAqvB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAArvB,CAAmwB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAnwB,CAAixB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAjxB,CAA+xB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA/xB,CAA6yB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA7yB,CAA2zB,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAA3zB,CAAy0B,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAz0B,CAAu1B,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAv1B,CAAq2B,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAr2B,CAAm3B,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAn3B,CAAlD,CACA,EAAC,CAAA,CAAGA,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,IAAjC,CAAuC,KAAvC,CAA8C,QAAS,CAACY,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAU,CAC/D,MAAOF,EAAA,CAAE,CAAF,CAAP,CAAcC,CAAd,CAAkBD,CAAA,CAAE,CAAF,CAAlB,CAAyBE,CADsC,CAAjE,CAGA,EAAC,CAAA,CAAGd,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,IAAjC,CAAuC,MAAvC,CAA+C,QAAS,CAACY,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAa,CACnE,MAAOH,EAAA,CAAE,CAAF,CAAP;AAAcC,CAAd,CAAkBD,CAAA,CAAE,CAAF,CAAlB,CAAyBE,CAAzB,CAA6BF,CAAA,CAAE,CAAF,CAA7B,CAAoCG,CAD+B,CAArE,CAGA,EAAC,CAAA,CAAGf,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,IAAjC,CAAuC,MAAvC,CAA+C,QAAS,CAACY,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,CAAb,CAAgB,CACtE,MAAOJ,EAAA,CAAE,CAAF,CAAP,CAAcC,CAAd,CAAkBD,CAAA,CAAE,CAAF,CAAlB,CAAyBE,CAAzB,CAA6BF,CAAA,CAAE,CAAF,CAA7B,CAAoCG,CAApC,CAAwCH,CAAA,CAAE,CAAF,CAAxC,CAA+CI,CADuB,CAAxE,CAGA,EAAC,CAAA,CAAGhB,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,IAAjC,CAAuC,OAAvC,CAAgD,QAAS,CAACiB,GAAD,CAAMC,GAAN,CAAW,CAElE,IAKIC,EADK,EACLA,EAAKF,GAALE,CAAWD,GAAXC,GADYV,IAAKW,CAAAA,IAAL,CAAU,CAAV,CACZD,CAD6B,CAC7BA,CALJ,CAOIE,EAAIZ,IAAKa,CAAAA,KAAL,CAAWL,GAAX,CAAiBE,CAAjB,CAPR,CAQII,EAAId,IAAKa,CAAAA,KAAL,CAAWJ,GAAX,CAAiBC,CAAjB,CACJK,EAAAA,EAAM,CAANA,CAAYf,IAAKW,CAAAA,IAAL,CAAU,CAAV,CAAZI,EAA8B,CAC9BC,KAAAA,IAAKJ,CAALI,CAASF,CAATE,EAAcD,CAITP,IAALS,EAHKL,CAGLK,CAHSD,EAKb,KAAIE,GAAKT,GAALS,EAHKJ,CAGLI,CAHSF,EAGTE,CAAJ,CAIIC,GAAK,CAJT,CAMIC,GAAK,CAELH,IAAJ,CAASC,EAAT,GACEC,EACA,CADK,CACL,CAAAC,EAAA,CAAK,CAFP,CAQIC,GAAAA,CAAKJ,GAALI,CAAUF,EAAVE,CAAeN,CAEnB,KAAIO,GAAKJ,EAALI,CAAUF,EAAVE,CAAeP,CACfQ,IAAAA,CAAKN,GAALM,CAAU,CAAVA,CAAgB,CAAhBA,CAAsBR,CAEtBS,EAAAA,CAAKN,EAALM,CAAU,CAAVA,CAAgB,CAAhBA,CAAsBT,CAE1B,KAAIU,GAAKb,CAALa,CAAS,GAAb,CACIC,GAAKZ,CAALY,CAAS,GACTC,EAAAA,CAAMhC,KAAMiC,CAAAA,IAAN,CAAWH,EAAX,CAAgB9B,KAAMiC,CAAAA,IAAN,CAAWF,EAAX,CAAhB,CAANC,CAAwC,EACxCE,EAAAA,CAAMlC,KAAMiC,CAAAA,IAAN,CAAWH,EAAX,CAAgBN,EAAhB,CAAqBxB,KAAMiC,CAAAA,IAAN,CAAWF,EAAX,CAAgBN,EAAhB,CAArB,CAANS,CAAkD,EAClDC;EAAAA,CAAMnC,KAAMiC,CAAAA,IAAN,CAAWH,EAAX,CAAgB,CAAhB,CAAoB9B,KAAMiC,CAAAA,IAAN,CAAWF,EAAX,CAAgB,CAAhB,CAApB,CAANI,CAAgD,EAEhDC,GAAAA,CAAK,EAALA,CAAWd,GAAXc,CAAgBd,GAAhBc,CAAqBb,EAArBa,CAA0Bb,EAErB,EAAT,CAAIa,EAAJ,CACEC,GADF,CACO,CADP,EAGED,EACA,EADMA,EACN,CAAAC,GAAA,CAAKD,EAAL,CAAUA,EAAV,CAAepC,KAAMsC,CAAAA,GAAN,CAAUtC,KAAMuC,CAAAA,KAAN,CAAYP,CAAZ,CAAV,CAA4BV,GAA5B,CAAgCC,EAAhC,CAJjB,CAOIiB,GAAAA,CAAK,EAALA,CAAWd,EAAXc,CAAgBd,EAAhBc,CAAqBb,EAArBa,CAA0Bb,EAErB,EAAT,CAAIa,EAAJ,CACEC,EADF,CACO,CADP,EAGED,EACA,EADMA,EACN,CAAAC,EAAA,CAAKD,EAAL,CAAUA,EAAV,CAAexC,KAAMsC,CAAAA,GAAN,CAAUtC,KAAMuC,CAAAA,KAAN,CAAYL,CAAZ,CAAV,CAA4BR,EAA5B,CAAgCC,EAAhC,CAJjB,CAOIe,GAAAA,CAAK,EAALA,CAAWd,GAAXc,CAAgBd,GAAhBc,CAAqBb,CAArBa,CAA0Bb,CAErB,EAAT,CAAIa,EAAJ,CACEC,GADF,CACO,CADP,EAGED,EACA,EADMA,EACN,CAAAC,GAAA,CAAKD,EAAL,CAAUA,EAAV,CAAe1C,KAAMsC,CAAAA,GAAN,CAAUtC,KAAMuC,CAAAA,KAAN,CAAYJ,EAAZ,CAAV,CAA4BP,GAA5B,CAAgCC,CAAhC,CAJjB,CASA,OAAO,GAAP,EAAeQ,GAAf,CAAoBI,EAApB,CAAyBE,GAAzB,CA5EkE,CAApE,CA8EA,EAAC,CAAA,CAAG/C,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,IAAjC,CAAuC,SAAvC,CAAkD,QAAS,CAACiB,GAAD,CAAMC,GAAN,CAAW8B,GAAX,CAAgB,CAEzE,IAMI7B,EADK,CACLA,CADW,CACXA,EAAKF,GAALE,CAAWD,GAAXC,CAAiB6B,GAAjB7B,CANJ,CAQIE,EAAIZ,IAAKa,CAAAA,KAAL,CAAWL,GAAX,CAAiBE,CAAjB,CARR,CASII,EAAId,IAAKa,CAAAA,KAAL,CAAWJ,GAAX,CAAiBC,CAAjB,CATR,CAUI8B,EAAIxC,IAAKa,CAAAA,KAAL,CAAW0B,GAAX,CAAiB7B,CAAjB,CACJ+B,EAAAA,CAAK,CAALA,CAAW,CAEXzB,KAAAA,IAAKJ,CAALI,CAASF,CAATE,CAAawB,CAAbxB,EAAkByB,CAKlBxB,KAAAA,GAAKT,GAALS,EAJKL,CAILK,CAJSD,EAITC,CAEAC;IAAAA,GAAKT,GAALS,EAJKJ,CAILI,CAJSF,EAITE,CACJ,KAAIwB,GAAKH,GAALG,EAJKF,CAILE,CAJS1B,EAIT0B,CAAJ,CAIItB,EAJJ,CAOIuB,EAIJ,IAAI1B,EAAJ,EAAUC,EAAV,CACE,GAAIA,EAAJ,EAAUwB,EAAV,CAAc,CACZ,IAAAvB,GAAK,CAEL,KAAAyB,GADAxB,EACAwB,CADK,CAGL,KAAAC,GADAF,EACAE,CADK,CAEL,KAAAC,GAAK,CANO,CAAd,IAOW7B,GAAJ,EAAUyB,EAAV,EACLvB,EAEA,CAFK,CAEL,CAAAyB,EAAA,CADAxB,EACA,CADK,CAFA,GASLA,EACA,CAFAD,EAEA,CAFK,CAEL,CAAAyB,EAAA,CAAK,CAVA,CAML,CAFAD,EAEA,CAFK,CAEL,CADAE,EACA,CADK,CACL,CAAAC,EAAA,CAAK,CAdT,KA0BM5B,GAAJ,CAASwB,EAAT,EAEEtB,EAIA,CALAD,EAKA,CALK,CAKL,CAHAyB,EAGA,CAHK,CAGL,CAFAD,EAEA,CAFK,CAEL,CAAAG,EAAA,CADAD,EACA,CADK,CALP,EAOW5B,EAAJ,CAASyB,EAAT,EACLvB,EAKA,CALK,CAKL,CAJAC,EAIA,CAJK,CAIL,CAFAuB,EAEA,CAHAC,EAGA,CAHK,CAGL,CAAAE,EAAA,CADAD,EACA,CADK,CALA,GAQL1B,EAKA,CALK,CAKL,CAJAC,EAIA,CAJK,CAIL,CAHAwB,EAGA,CAHK,CAGL,CADAC,EACA,CAFAF,EAEA,CAFK,CAEL,CAAAG,EAAA,CAAK,CAbA,CAsBT,KAAIzB,GAAKJ,EAALI,CAAUF,EAAVE,CAAeoB,CAAnB,CAEInB,GAAKJ,EAALI,CAAUF,EAAVE,CAAemB,CAFnB,CAGIM,GAAKL,EAALK,CAAUH,EAAVG,CAAeN,CACflB,GAAAA,CAAKN,EAALM,CAAUoB,EAAVpB,CAAe,CAAfA,CAAqBkB,CAErBjB,IAAAA,CAAKN,EAALM,CAAUqB,EAAVrB,CAAe,CAAfA,CAAqBiB,CACzB,KAAIO,GAAKN,EAALM,CAAUF,EAAVE,CAAe,CAAfA,CAAqBP,CACrBQ,IAAAA,CAAKhC,EAALgC,CAAU,CAAVA,CAAgB,CAAhBA,CAAsBR,CAEtBS,IAAAA,CAAKhC,EAALgC,CAAU,CAAVA,CAAgB,CAAhBA,CAAsBT,CACtBU,EAAAA,CAAKT,EAALS,CAAU,CAAVA,CAAgB,CAAhBA,CAAsBV,CAEjB7B,EAALa,EAAS,GACb,KAAIC,GAAKZ,CAALY,CAAS,GAAb,CACI0B,GAAKZ,CAALY,CAAS,GACTzB,EAAAA,CAAMhC,KAAMiC,CAAAA,IAAN,CAAWH,CAAX,CAAgB9B,KAAMiC,CAAAA,IAAN,CAAWF,EAAX,CAAgB/B,KAAMiC,CAAAA,IAAN,CAAWwB,EAAX,CAAhB,CAAhB,CAANzB,CAAyD,EACzDE,EAAAA,CAAMlC,KAAMiC,CAAAA,IAAN,CAAWH,CAAX,CAAgBN,EAAhB,CAAqBxB,KAAMiC,CAAAA,IAAN,CAAWF,EAAX,CAAgBN,EAAhB,CAAqBzB,KAAMiC,CAAAA,IAAN,CAAWwB,EAAX;AAAgBR,EAAhB,CAArB,CAArB,CAANf,CAAwE,EACxEC,GAAAA,CAAMnC,KAAMiC,CAAAA,IAAN,CAAWH,CAAX,CAAgBkB,EAAhB,CAAqBhD,KAAMiC,CAAAA,IAAN,CAAWF,EAAX,CAAgBmB,EAAhB,CAAqBlD,KAAMiC,CAAAA,IAAN,CAAWwB,EAAX,CAAgBN,EAAhB,CAArB,CAArB,CAANhB,CAAwE,EACxEuB,EAAAA,CAAM1D,KAAMiC,CAAAA,IAAN,CAAWH,CAAX,CAAgB,CAAhB,CAAoB9B,KAAMiC,CAAAA,IAAN,CAAWF,EAAX,CAAgB,CAAhB,CAAoB/B,KAAMiC,CAAAA,IAAN,CAAWwB,EAAX,CAAgB,CAAhB,CAApB,CAApB,CAANC,CAAqE,EAErEtB,GAAAA,CAAK,EAALA,CAAWd,EAAXc,CAAgBd,EAAhBc,CAAqBb,EAArBa,CAA0Bb,EAA1Ba,CAA+BW,EAA/BX,CAAoCW,EAE/B,EAAT,CAAIX,EAAJ,CACEC,EADF,CACO,CADP,EAGED,EACA,EADMA,EACN,CAAAC,EAAA,CAAKD,EAAL,CAAUA,EAAV,CAAepC,KAAM2D,CAAAA,IAAN,CAAW3D,KAAMuC,CAAAA,KAAN,CAAYP,CAAZ,CAAX,CAA6BV,EAA7B,CAAiCC,EAAjC,CAAqCwB,EAArC,CAJjB,CAOIP,GAAAA,CAAK,EAALA,CAAWd,EAAXc,CAAgBd,EAAhBc,CAAqBb,EAArBa,CAA0Bb,EAA1Ba,CAA+BY,EAA/BZ,CAAoCY,EAE/B,EAAT,CAAIZ,EAAJ,CACEC,EADF,CACO,CADP,EAGED,EACA,EADMA,EACN,CAAAC,EAAA,CAAKD,EAAL,CAAUA,EAAV,CAAexC,KAAM2D,CAAAA,IAAN,CAAW3D,KAAMuC,CAAAA,KAAN,CAAYL,CAAZ,CAAX,CAA6BR,EAA7B,CAAiCC,EAAjC,CAAqCyB,EAArC,CAJjB,CAOIV,GAAAA,CAAK,EAALA,CAAWd,EAAXc,CAAgBd,EAAhBc,CAAqBb,GAArBa,CAA0Bb,GAA1Ba,CAA+BW,EAA/BX,CAAoCW,EAE/B,EAAT,CAAIX,EAAJ,CACEC,EADF,CACO,CADP,EAGED,EACA,EADMA,EACN,CAAAC,EAAA,CAAKD,EAAL,CAAUA,EAAV,CAAe1C,KAAM2D,CAAAA,IAAN,CAAW3D,KAAMuC,CAAAA,KAAN,CAAYJ,EAAZ,CAAX,CAA6BP,EAA7B,CAAiCC,GAAjC,CAAqCwB,EAArC,CAJjB,CAOIO,IAAAA,CAAK,EAALA,CAAWN,GAAXM,CAAgBN,GAAhBM,CAAqBL,GAArBK,CAA0BL,GAA1BK,CAA+BJ,CAA/BI,CAAoCJ,CAE/B,EAAT,CAAII,GAAJ,CACEC,GADF,CACO,CADP,EAGED,GACA,EADMA,GACN,CAAAC,GAAA,CAAKD,GAAL,CAAUA,GAAV,CAAe5D,KAAM2D,CAAAA,IAAN,CAAW3D,KAAMuC,CAAAA,KAAN,CAAYmB,CAAZ,CAAX,CAA6BJ,GAA7B,CAAiCC,GAAjC,CAAqCC,CAArC,CAJjB,CASA,OAAO,GAAP,EAAenB,EAAf;AAAoBI,EAApB,CAAyBE,EAAzB,CAA8BkB,GAA9B,CApJyE,CAA3E,CAsJA,EAAC,CAAA,CAAGjE,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC,IAAjC,CAAuC,SAAvC,CAAkD,QAAS,CAACa,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAa,CAEtE,IAAIkD,MAAQ9D,KAAM8D,CAAAA,KAAlB,CACIC,QAAU/D,KAAM+D,CAAAA,OADpB,CAEI9B,KAAOjC,KAAMiC,CAAAA,IAFjB,CAKI+B,IAAM,CAANA,CAAY3D,IAAKW,CAAAA,IAAL,CAAU,CAAV,CAAZgD,EAA8B,EAQ9BjD,KAAAA,IATMV,IAAKW,CAAAA,IAAL,CAAU,CAAV,CASND,CATuB,CASvBA,EAT8B,CAS9BA,EAAKN,CAALM,CAASL,CAATK,CAAaJ,CAAbI,CAAiBH,CAAjBG,CAEJ,KAAIE,EAAIZ,IAAKa,CAAAA,KAAL,CAAWT,CAAX,CAAeM,EAAf,CAAR,CACII,EAAId,IAAKa,CAAAA,KAAL,CAAWR,CAAX,CAAeK,EAAf,CADR,CAEI8B,EAAIxC,IAAKa,CAAAA,KAAL,CAAWP,CAAX,CAAeI,EAAf,CAFR,CAGIkD,EAAI5D,IAAKa,CAAAA,KAAL,CAAWN,CAAX,CAAeG,EAAf,CACJM,GAAAA,EAAKJ,CAALI,CAASF,CAATE,CAAawB,CAAbxB,CAAiB4C,CAAjB5C,EAAsB2C,EAOjBvD,EAALa,EALKL,CAKLK,CALSD,EAOTE,KAAAA,GAAKb,CAALa,EALKJ,CAKLI,CALSF,EAKTE,CACAwB,KAAAA,GAAKpC,CAALoC,EALKF,CAKLE,CALS1B,EAKT0B,CACJ,KAAImB,GAAKtD,CAALsD,EALKD,CAKLC,CALS7C,EAKT6C,CAeAC,EAAAA,EANK7C,CAAA8C,CAAK7C,EAAL6C,CAAU,EAAVA,CAAe,CAMpBD,GALK7C,CAAA+C,CAAKtB,EAALsB,CAAU,EAAVA,CAAe,CAKpBF,GAJK5C,EAAA+C,CAAKvB,EAALuB,CAAU,CAAVA,CAAc,CAInBH,GAHK7C,CAAAiD,CAAKL,EAALK,CAAU,CAAVA,CAAc,CAGnBJ,GAFK5C,EAAAiD,CAAKN,EAALM,CAAU,CAAVA,CAAc,CAEnBL,GADKpB,EAAA0B,CAAKP,EAALO,CAAU,CAAVA,CAAc,CACnBN,CAqBJ,KAAA3C,GAAsB,CAAjB,EAAAuC,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA,CAAqB,CAArB,CAAyB,CAC9B,KAAA1C,GAAsB,CAAjB,EAAAsC,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA,CAAqB,CAArB,CAAyB,CAC9B,KAAAlB,GAAsB,CAAjB,EAAAc,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA;AAAqB,CAArB,CAAyB,CAC9B,KAAAO,GAAsB,CAAjB,EAAAX,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA,CAAqB,CAArB,CAAyB,CAE9B,KAAAnB,GAAsB,CAAjB,EAAAe,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA,CAAqB,CAArB,CAAyB,CAC9B,KAAAjB,GAAsB,CAAjB,EAAAa,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA,CAAqB,CAArB,CAAyB,CAC9B,KAAAhB,GAAsB,CAAjB,EAAAY,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA,CAAqB,CAArB,CAAyB,CAC9B,KAAAQ,GAAsB,CAAjB,EAAAZ,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA,CAAqB,CAArB,CAAyB,CAE9B,KAAAS,GAAsB,CAAjB,EAAAb,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA,CAAqB,CAArB,CAAyB,CAC9B,KAAAU,GAAsB,CAAjB,EAAAd,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA,CAAqB,CAArB,CAAyB,CAC9B,KAAAW,GAAsB,CAAjB,EAAAf,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA,CAAqB,CAArB,CAAyB,CAC9B,KAAAY,GAAsB,CAAjB,EAAAhB,OAAA,CAAQI,CAAR,CAAA,CAAW,CAAX,CAAA,CAAqB,CAArB,CAAyB,CAE9B,KAAIzC,GAAKJ,CAALI,CAAUF,EAAVE,CAAesC,EAAnB,CAEIrC,GAAKJ,EAALI,CAAUF,EAAVE,CAAeqC,EAFnB,CAGIZ,GAAKL,EAALK,CAAUH,EAAVG,CAAeY,EAHnB,CAIIgB,GAAKd,EAALc,CAAUN,EAAVM,CAAehB,EAJnB,CAKIpC,GAAKN,CAALM,CAAUoB,EAAVpB,CAAe,CAAfA,CAAqBoC,EALzB,CAOInC,GAAKN,EAALM,CAAUqB,EAAVrB,CAAe,CAAfA,CAAqBmC,EAPzB,CAQIX,GAAKN,EAALM,CAAUF,EAAVE,CAAe,CAAfA,CAAqBW,EARzB,CASIiB,GAAKf,EAALe,CAAUN,EAAVM,CAAe,CAAfA,CAAqBjB,EACrBV,GAAAA,CAAKhC,CAALgC,CAAUsB,EAAVtB,CAAe,CAAfA,CAAqBU,EAErBT,EAAAA,CAAKhC,EAALgC,CAAUsB,EAAVtB,CAAe,CAAfA,CAAqBS,EACzB,KAAIR,GAAKT,EAALS,CAAUsB,EAAVtB,CAAe,CAAfA,CAAqBQ,EAAzB,CACIkB,GAAKhB,EAALgB,CAAUH,EAAVG,CAAe,CAAfA,CAAqBlB,EACrBmB,QAAAA,CAAK7D,CAAL6D,CAAU,CAAVA,CAAgB,CAAhBA,CAAsBnB,EAEtBoB,EAAAA,CAAK7D,EAAL6D,CAAU,CAAVA,CAAgB,CAAhBA,CAAsBpB,EACtBqB,EAAAA,CAAKtC,EAALsC,CAAU,CAAVA,CAAgB,CAAhBA,CAAsBrB,EACtBsB,GAAAA,CAAKpB,EAALoB,CAAU,CAAVA,CAAgB,CAAhBA,CAAsBtB,EAEjB/C,EAALa,EAAS,GACJX,EAALY,EAAS,GACb,KAAI0B,GAAKZ,CAALY,CAAS,GACJQ;CAALsB,EAAS,GACTvD,EAAAA,CAAMC,IAAA,CAAKH,CAAL,CAAUG,IAAA,CAAKF,CAAL,CAAUE,IAAA,CAAKwB,EAAL,CAAUxB,IAAA,CAAKsD,CAAL,CAAV,CAAV,CAAV,CAANvD,CAAkD,EAClDE,GAAAA,CAAMD,IAAA,CAAKH,CAAL,CAAUN,EAAV,CAAeS,IAAA,CAAKF,CAAL,CAAUN,EAAV,CAAeQ,IAAA,CAAKwB,EAAL,CAAUR,EAAV,CAAehB,IAAA,CAAKsD,CAAL,CAAUb,EAAV,CAAf,CAAf,CAAf,CAANxC,CAAsE,EACtEC,GAAAA,CAAMF,IAAA,CAAKH,CAAL,CAAUkB,EAAV,CAAef,IAAA,CAAKF,CAAL,CAAUmB,EAAV,CAAejB,IAAA,CAAKwB,EAAL,CAAUN,EAAV,CAAelB,IAAA,CAAKsD,CAAL,CAAUZ,EAAV,CAAf,CAAf,CAAf,CAANxC,CAAsE,EACtEuB,GAAAA,CAAMzB,IAAA,CAAKH,CAAL,CAAU8C,EAAV,CAAe3C,IAAA,CAAKF,CAAL,CAAU8C,EAAV,CAAe5C,IAAA,CAAKwB,EAAL,CAAUqB,EAAV,CAAe7C,IAAA,CAAKsD,CAAL,CAAUR,EAAV,CAAf,CAAf,CAAf,CAANrB,CAAsE,EACtE8B,KAAAA,CAAMvD,IAAA,CAAKH,CAAL,CAAU,CAAV,CAAcG,IAAA,CAAKF,CAAL,CAAU,CAAV,CAAcE,IAAA,CAAKwB,EAAL,CAAU,CAAV,CAAcxB,IAAA,CAAKsD,CAAL,CAAU,CAAV,CAAd,CAAd,CAAd,CAANC,CAAkE,EAElEpD,EAAAA,CAAK,EAALA,CAAWd,CAAXc,CAAgBd,CAAhBc,CAAqBb,EAArBa,CAA0Bb,EAA1Ba,CAA+BW,EAA/BX,CAAoCW,EAApCX,CAAyC8B,EAAzC9B,CAA8C8B,EAEzC,EAAT,CAAI9B,CAAJ,CACEC,CADF,CACO,CADP,EAGED,CACA,EADMA,CACN,CAAAC,CAAA,CAAKD,CAAL,CAAUA,CAAV,CAAepC,KAAMyF,CAAAA,IAAN,CAAW3B,KAAA,CAAM9B,CAAN,CAAX,CAAuBV,CAAvB,CAA2BC,EAA3B,CAA+BwB,EAA/B,CAAmCmB,EAAnC,CAJjB,CAOI1B,GAAAA,CAAK,EAALA,CAAWd,EAAXc,CAAgBd,EAAhBc,CAAqBb,EAArBa,CAA0Bb,EAA1Ba,CAA+BY,EAA/BZ,CAAoCY,EAApCZ,CAAyCwC,EAAzCxC,CAA8CwC,EAEzC,EAAT,CAAIxC,EAAJ,CACEC,EADF,CACO,CADP,EAGED,EACA,EADMA,EACN,CAAAC,EAAA,CAAKD,EAAL,CAAUA,EAAV,CAAexC,KAAMyF,CAAAA,IAAN,CAAW3B,KAAA,CAAM5B,EAAN,CAAX,CAAuBR,EAAvB,CAA2BC,EAA3B,CAA+ByB,EAA/B,CAAmC4B,EAAnC,CAJjB,CAOItC,GAAAA,CAAK,EAALA,CAAWd,EAAXc,CAAgBd,EAAhBc,CAAqBb,EAArBa,CAA0Bb,EAA1Ba,CAA+BW,EAA/BX,CAAoCW,EAApCX,CAAyCuC,EAAzCvC,CAA8CuC,EAEzC,EAAT,CAAIvC,EAAJ,CACEC,EADF,CACO,CADP,EAGED,EACA,EADMA,EACN,CAAAC,EAAA,CAAKD,EAAL,CAAUA,EAAV,CAAe1C,KAAMyF,CAAAA,IAAN,CAAW3B,KAAA,CAAM3B,EAAN,CAAX,CAAuBP,EAAvB,CAA2BC,EAA3B;AAA+BwB,EAA/B,CAAmC4B,EAAnC,CAJjB,CAOIrB,GAAAA,CAAK,EAALA,CAAWN,EAAXM,CAAgBN,EAAhBM,CAAqBL,CAArBK,CAA0BL,CAA1BK,CAA+BJ,EAA/BI,CAAoCJ,EAApCI,CAAyCsB,EAAzCtB,CAA8CsB,EAEzC,EAAT,CAAItB,EAAJ,CACEC,EADF,CACO,CADP,EAGED,EACA,EADMA,EACN,CAAAC,EAAA,CAAKD,EAAL,CAAUA,EAAV,CAAe5D,KAAMyF,CAAAA,IAAN,CAAW3B,KAAA,CAAMJ,EAAN,CAAX,CAAuBJ,EAAvB,CAA2BC,CAA3B,CAA+BC,EAA/B,CAAmC0B,EAAnC,CAJjB,CAOIQ,EAAAA,CAAK,EAALA,CAAWP,OAAXO,CAAgBP,OAAhBO,CAAqBN,CAArBM,CAA0BN,CAA1BM,CAA+BL,CAA/BK,CAAoCL,CAApCK,CAAyCJ,EAAzCI,CAA8CJ,EAEzC,EAAT,CAAII,CAAJ,CACEC,KADF,CACO,CADP,EAGED,CACA,EADMA,CACN,CAAAC,KAAA,CAAKD,CAAL,CAAUA,CAAV,CAAe1F,KAAMyF,CAAAA,IAAN,CAAW3B,KAAA,CAAM0B,IAAN,CAAX,CAAuBL,OAAvB,CAA2BC,CAA3B,CAA+BC,CAA/B,CAAmCC,EAAnC,CAJjB,CAQA,OAAO,GAAP,EAAejD,CAAf,CAAoBI,EAApB,CAAyBE,EAAzB,CAA8BkB,EAA9B,CAAmC8B,KAAnC,CAhKsE,CAAxE,CAmKA,KAAK,IAAI1E,WAAI,CAAb,CAAoB,GAApB,CAAgBA,UAAhB,CAAyBA,UAAA,EAAzB,CACE,IAAK2E,CAAAA,CAAL,CAAO3E,UAAP,CAAA,CAAYZ,IAAKa,CAAAA,KAAL,CAAwB,GAAxB,CAAWjB,CAAE4F,CAAAA,MAAF,EAAX,CAGd,KAASC,CAAT,CAAc,CAAd,CAAsB,GAAtB,CAAiBA,CAAjB,CAA2BA,CAAA,EAA3B,CACE,IAAK7D,CAAAA,IAAL,CAAU6D,CAAV,CAAA,CAAgB,IAAKF,CAAAA,CAAL,CAAOE,CAAP,CAAY,GAAZ,CAjaI,CA7BuF;\",\n\"sources\":[\"node_modules/three-stdlib/math/SimplexNoise.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$math$SimplexNoise\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.SimplexNoise = void 0;\\n\\nvar _defineProperty2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/esm/defineProperty\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n// Ported from Stefan Gustavson's java implementation\\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\\n// Read Stefan's excellent paper for details on how this code works.\\n//\\n// Sean McCullough banksean@gmail.com\\n//\\n// Added 4D noise\\nvar SimplexNoise = // To remove the need for index wrapping, double the permutation table length\\n// A lookup table to traverse the simplex around a given point in 4D.\\n// Details can be found where this table is used, in the 4D noise method.\\n\\n/**\\n * You can pass in a random number generator object if you like.\\n * It is assumed to have a random() method.\\n */\\nfunction SimplexNoise() {\\n  var _this = this;\\n\\n  var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Math;\\n\\n  _classCallCheck(this, SimplexNoise);\\n\\n  (0, _defineProperty2[\\\"default\\\"])(this, \\\"grad3\\\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\\n  (0, _defineProperty2[\\\"default\\\"])(this, \\\"grad4\\\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\\n  (0, _defineProperty2[\\\"default\\\"])(this, \\\"p\\\", []);\\n  (0, _defineProperty2[\\\"default\\\"])(this, \\\"perm\\\", []);\\n  (0, _defineProperty2[\\\"default\\\"])(this, \\\"simplex\\\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\\n  (0, _defineProperty2[\\\"default\\\"])(this, \\\"dot\\\", function (g, x, y) {\\n    return g[0] * x + g[1] * y;\\n  });\\n  (0, _defineProperty2[\\\"default\\\"])(this, \\\"dot3\\\", function (g, x, y, z) {\\n    return g[0] * x + g[1] * y + g[2] * z;\\n  });\\n  (0, _defineProperty2[\\\"default\\\"])(this, \\\"dot4\\\", function (g, x, y, z, w) {\\n    return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\\n  });\\n  (0, _defineProperty2[\\\"default\\\"])(this, \\\"noise\\\", function (xin, yin) {\\n    var n0;\\n    var n1;\\n    var n2; // Noise contributions from the three corners\\n    // Skew the input space to determine which simplex cell we're in\\n\\n    var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\\n    var s = (xin + yin) * F2; // Hairy factor for 2D\\n\\n    var i = Math.floor(xin + s);\\n    var j = Math.floor(yin + s);\\n    var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\\n    var t = (i + j) * G2;\\n    var X0 = i - t; // Unskew the cell origin back to (x,y) space\\n\\n    var Y0 = j - t;\\n    var x0 = xin - X0; // The x,y distances from the cell origin\\n\\n    var y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\\n    // Determine which simplex we are in.\\n    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\\n\\n    var i1 = 0; // Offsets for second (middle) corner of simplex in (i,j) coords\\n\\n    var j1 = 1;\\n\\n    if (x0 > y0) {\\n      i1 = 1;\\n      j1 = 0;\\n    } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\\n    // c = (3-sqrt(3))/6\\n\\n\\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\\n\\n    var y1 = y0 - j1 + G2;\\n    var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\\n\\n    var y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\\n\\n    var ii = i & 255;\\n    var jj = j & 255;\\n    var gi0 = _this.perm[ii + _this.perm[jj]] % 12;\\n    var gi1 = _this.perm[ii + i1 + _this.perm[jj + j1]] % 12;\\n    var gi2 = _this.perm[ii + 1 + _this.perm[jj + 1]] % 12; // Calculate the contribution from the three corners\\n\\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\\n\\n    if (t0 < 0) {\\n      n0 = 0.0;\\n    } else {\\n      t0 *= t0;\\n      n0 = t0 * t0 * _this.dot(_this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\\n    }\\n\\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\\n\\n    if (t1 < 0) {\\n      n1 = 0.0;\\n    } else {\\n      t1 *= t1;\\n      n1 = t1 * t1 * _this.dot(_this.grad3[gi1], x1, y1);\\n    }\\n\\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\\n\\n    if (t2 < 0) {\\n      n2 = 0.0;\\n    } else {\\n      t2 *= t2;\\n      n2 = t2 * t2 * _this.dot(_this.grad3[gi2], x2, y2);\\n    } // Add contributions from each corner to get the final noise value.\\n    // The result is scaled to return values in the interval [-1,1].\\n\\n\\n    return 70.0 * (n0 + n1 + n2);\\n  });\\n  (0, _defineProperty2[\\\"default\\\"])(this, \\\"noise3d\\\", function (xin, yin, zin) {\\n    // Noise contributions from the four corners\\n    var n0;\\n    var n1;\\n    var n2;\\n    var n3; // Skew the input space to determine which simplex cell we're in\\n\\n    var F3 = 1.0 / 3.0;\\n    var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\\n\\n    var i = Math.floor(xin + s);\\n    var j = Math.floor(yin + s);\\n    var k = Math.floor(zin + s);\\n    var G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\\n\\n    var t = (i + j + k) * G3;\\n    var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\\n\\n    var Y0 = j - t;\\n    var Z0 = k - t;\\n    var x0 = xin - X0; // The x,y,z distances from the cell origin\\n\\n    var y0 = yin - Y0;\\n    var z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\\n    // Determine which simplex we are in.\\n\\n    var i1;\\n    var j1;\\n    var k1; // Offsets for second corner of simplex in (i,j,k) coords\\n\\n    var i2;\\n    var j2;\\n    var k2; // Offsets for third corner of simplex in (i,j,k) coords\\n\\n    if (x0 >= y0) {\\n      if (y0 >= z0) {\\n        i1 = 1;\\n        j1 = 0;\\n        k1 = 0;\\n        i2 = 1;\\n        j2 = 1;\\n        k2 = 0; // X Y Z order\\n      } else if (x0 >= z0) {\\n        i1 = 1;\\n        j1 = 0;\\n        k1 = 0;\\n        i2 = 1;\\n        j2 = 0;\\n        k2 = 1; // X Z Y order\\n      } else {\\n        i1 = 0;\\n        j1 = 0;\\n        k1 = 1;\\n        i2 = 1;\\n        j2 = 0;\\n        k2 = 1;\\n      } // Z X Y order\\n\\n    } else {\\n      // x0<y0\\n      if (y0 < z0) {\\n        i1 = 0;\\n        j1 = 0;\\n        k1 = 1;\\n        i2 = 0;\\n        j2 = 1;\\n        k2 = 1; // Z Y X order\\n      } else if (x0 < z0) {\\n        i1 = 0;\\n        j1 = 1;\\n        k1 = 0;\\n        i2 = 0;\\n        j2 = 1;\\n        k2 = 1; // Y Z X order\\n      } else {\\n        i1 = 0;\\n        j1 = 1;\\n        k1 = 0;\\n        i2 = 1;\\n        j2 = 1;\\n        k2 = 0;\\n      } // Y X Z order\\n\\n    } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\\n    // c = 1/6.\\n\\n\\n    var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\\n\\n    var y1 = y0 - j1 + G3;\\n    var z1 = z0 - k1 + G3;\\n    var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\\n\\n    var y2 = y0 - j2 + 2.0 * G3;\\n    var z2 = z0 - k2 + 2.0 * G3;\\n    var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\\n\\n    var y3 = y0 - 1.0 + 3.0 * G3;\\n    var z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\\n\\n    var ii = i & 255;\\n    var jj = j & 255;\\n    var kk = k & 255;\\n    var gi0 = _this.perm[ii + _this.perm[jj + _this.perm[kk]]] % 12;\\n    var gi1 = _this.perm[ii + i1 + _this.perm[jj + j1 + _this.perm[kk + k1]]] % 12;\\n    var gi2 = _this.perm[ii + i2 + _this.perm[jj + j2 + _this.perm[kk + k2]]] % 12;\\n    var gi3 = _this.perm[ii + 1 + _this.perm[jj + 1 + _this.perm[kk + 1]]] % 12; // Calculate the contribution from the four corners\\n\\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\\n\\n    if (t0 < 0) {\\n      n0 = 0.0;\\n    } else {\\n      t0 *= t0;\\n      n0 = t0 * t0 * _this.dot3(_this.grad3[gi0], x0, y0, z0);\\n    }\\n\\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\\n\\n    if (t1 < 0) {\\n      n1 = 0.0;\\n    } else {\\n      t1 *= t1;\\n      n1 = t1 * t1 * _this.dot3(_this.grad3[gi1], x1, y1, z1);\\n    }\\n\\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\\n\\n    if (t2 < 0) {\\n      n2 = 0.0;\\n    } else {\\n      t2 *= t2;\\n      n2 = t2 * t2 * _this.dot3(_this.grad3[gi2], x2, y2, z2);\\n    }\\n\\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\\n\\n    if (t3 < 0) {\\n      n3 = 0.0;\\n    } else {\\n      t3 *= t3;\\n      n3 = t3 * t3 * _this.dot3(_this.grad3[gi3], x3, y3, z3);\\n    } // Add contributions from each corner to get the final noise value.\\n    // The result is scaled to stay just inside [-1,1]\\n\\n\\n    return 32.0 * (n0 + n1 + n2 + n3);\\n  });\\n  (0, _defineProperty2[\\\"default\\\"])(this, \\\"noise4d\\\", function (x, y, z, w) {\\n    // For faster and easier lookups\\n    var grad4 = _this.grad4;\\n    var simplex = _this.simplex;\\n    var perm = _this.perm; // The skewing and unskewing factors are hairy again for the 4D case\\n\\n    var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\\n    var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\\n    var n0;\\n    var n1;\\n    var n2;\\n    var n3;\\n    var n4; // Noise contributions from the five corners\\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\\n\\n    var s = (x + y + z + w) * F4; // Factor for 4D skewing\\n\\n    var i = Math.floor(x + s);\\n    var j = Math.floor(y + s);\\n    var k = Math.floor(z + s);\\n    var l = Math.floor(w + s);\\n    var t = (i + j + k + l) * G4; // Factor for 4D unskewing\\n\\n    var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\\n\\n    var Y0 = j - t;\\n    var Z0 = k - t;\\n    var W0 = l - t;\\n    var x0 = x - X0; // The x,y,z,w distances from the cell origin\\n\\n    var y0 = y - Y0;\\n    var z0 = z - Z0;\\n    var w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\\n    // To find out which of the 24 possible simplices we're in, we need to\\n    // determine the magnitude ordering of x0, y0, z0 and w0.\\n    // The method below is a good way of finding the ordering of x,y,z,w and\\n    // then find the correct traversal order for the simplex we\\u2019re in.\\n    // First, six pair-wise comparisons are performed between each possible pair\\n    // of the four coordinates, and the results are used to add up binary bits\\n    // for an integer index.\\n\\n    var c1 = x0 > y0 ? 32 : 0;\\n    var c2 = x0 > z0 ? 16 : 0;\\n    var c3 = y0 > z0 ? 8 : 0;\\n    var c4 = x0 > w0 ? 4 : 0;\\n    var c5 = y0 > w0 ? 2 : 0;\\n    var c6 = z0 > w0 ? 1 : 0;\\n    var c = c1 + c2 + c3 + c4 + c5 + c6; // The integer offsets for the second simplex corner\\n\\n    var i1;\\n    var j1;\\n    var k1;\\n    var l1; // The integer offsets for the third simplex corner\\n\\n    var i2;\\n    var j2;\\n    var k2;\\n    var l2; // The integer offsets for the fourth simplex corner\\n\\n    var i3;\\n    var j3;\\n    var k3;\\n    var l3; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\\n    // The number 3 in the \\\"simplex\\\" array is at the position of the largest coordinate.\\n\\n    i1 = simplex[c][0] >= 3 ? 1 : 0;\\n    j1 = simplex[c][1] >= 3 ? 1 : 0;\\n    k1 = simplex[c][2] >= 3 ? 1 : 0;\\n    l1 = simplex[c][3] >= 3 ? 1 : 0; // The number 2 in the \\\"simplex\\\" array is at the second largest coordinate.\\n\\n    i2 = simplex[c][0] >= 2 ? 1 : 0;\\n    j2 = simplex[c][1] >= 2 ? 1 : 0;\\n    k2 = simplex[c][2] >= 2 ? 1 : 0;\\n    l2 = simplex[c][3] >= 2 ? 1 : 0; // The number 1 in the \\\"simplex\\\" array is at the second smallest coordinate.\\n\\n    i3 = simplex[c][0] >= 1 ? 1 : 0;\\n    j3 = simplex[c][1] >= 1 ? 1 : 0;\\n    k3 = simplex[c][2] >= 1 ? 1 : 0;\\n    l3 = simplex[c][3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\\n\\n    var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\\n\\n    var y1 = y0 - j1 + G4;\\n    var z1 = z0 - k1 + G4;\\n    var w1 = w0 - l1 + G4;\\n    var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\\n\\n    var y2 = y0 - j2 + 2.0 * G4;\\n    var z2 = z0 - k2 + 2.0 * G4;\\n    var w2 = w0 - l2 + 2.0 * G4;\\n    var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\\n\\n    var y3 = y0 - j3 + 3.0 * G4;\\n    var z3 = z0 - k3 + 3.0 * G4;\\n    var w3 = w0 - l3 + 3.0 * G4;\\n    var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\\n\\n    var y4 = y0 - 1.0 + 4.0 * G4;\\n    var z4 = z0 - 1.0 + 4.0 * G4;\\n    var w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\\n\\n    var ii = i & 255;\\n    var jj = j & 255;\\n    var kk = k & 255;\\n    var ll = l & 255;\\n    var gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\\n    var gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\\n    var gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\\n    var gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\\n    var gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32; // Calculate the contribution from the five corners\\n\\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\\n\\n    if (t0 < 0) {\\n      n0 = 0.0;\\n    } else {\\n      t0 *= t0;\\n      n0 = t0 * t0 * _this.dot4(grad4[gi0], x0, y0, z0, w0);\\n    }\\n\\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\\n\\n    if (t1 < 0) {\\n      n1 = 0.0;\\n    } else {\\n      t1 *= t1;\\n      n1 = t1 * t1 * _this.dot4(grad4[gi1], x1, y1, z1, w1);\\n    }\\n\\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\\n\\n    if (t2 < 0) {\\n      n2 = 0.0;\\n    } else {\\n      t2 *= t2;\\n      n2 = t2 * t2 * _this.dot4(grad4[gi2], x2, y2, z2, w2);\\n    }\\n\\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\\n\\n    if (t3 < 0) {\\n      n3 = 0.0;\\n    } else {\\n      t3 *= t3;\\n      n3 = t3 * t3 * _this.dot4(grad4[gi3], x3, y3, z3, w3);\\n    }\\n\\n    var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\\n\\n    if (t4 < 0) {\\n      n4 = 0.0;\\n    } else {\\n      t4 *= t4;\\n      n4 = t4 * t4 * _this.dot4(grad4[gi4], x4, y4, z4, w4);\\n    } // Sum up and scale the result to cover the range [-1,1]\\n\\n\\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\\n  });\\n\\n  for (var i = 0; i < 256; i++) {\\n    this.p[i] = Math.floor(r.random() * 256);\\n  }\\n\\n  for (var _i = 0; _i < 512; _i++) {\\n    this.perm[_i] = this.p[_i & 255];\\n  }\\n};\\n\\nexports.SimplexNoise = SimplexNoise;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"SimplexNoise\",\"_defineProperty2\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"_this\",\"r\",\"arguments\",\"length\",\"undefined\",\"Math\",\"instance\",\"TypeError\",\"g\",\"x\",\"y\",\"z\",\"w\",\"xin\",\"yin\",\"s\",\"sqrt\",\"i\",\"floor\",\"j\",\"G2\",\"t\",\"x0\",\"y0\",\"i1\",\"j1\",\"x1\",\"y1\",\"x2\",\"y2\",\"ii\",\"jj\",\"gi0\",\"perm\",\"gi1\",\"gi2\",\"t0\",\"n0\",\"dot\",\"grad3\",\"t1\",\"n1\",\"t2\",\"n2\",\"zin\",\"k\",\"G3\",\"z0\",\"i2\",\"k1\",\"j2\",\"k2\",\"z1\",\"z2\",\"x3\",\"y3\",\"z3\",\"kk\",\"gi3\",\"dot3\",\"t3\",\"n3\",\"grad4\",\"simplex\",\"G4\",\"l\",\"w0\",\"c\",\"c1\",\"c2\",\"c3\",\"c4\",\"c5\",\"c6\",\"l1\",\"l2\",\"i3\",\"j3\",\"k3\",\"l3\",\"w1\",\"w2\",\"w3\",\"x4\",\"y4\",\"z4\",\"w4\",\"ll\",\"gi4\",\"dot4\",\"t4\",\"n4\",\"p\",\"random\",\"_i\"]\n}\n"]