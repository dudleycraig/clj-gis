["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-mesh-bvh/src/Utils/MathUtilities.js"],"~:js","shadow$provide.module$node_modules$three_mesh_bvh$src$Utils$MathUtilities=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.sphereIntersectTriangle=exports.closestPointsSegmentToSegment=exports.closestPointLineToLine=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),closestPointLineToLine=function(){var dir1=new _three.Vector3,dir2=new _three.Vector3,v02=new _three.Vector3;return function(l1,l2,result){v02.subVectors(l1.start,\nl2.start);dir1.subVectors(l1.end,l2.start);dir2.subVectors(l2.end,l2.start);l1=v02.dot(dir2);l2=dir2.dot(dir1);var d3232=dir2.dot(dir2),d0210=v02.dot(dir1),denom=dir1.dot(dir1)*d3232-l2*l2;d0210=0!==denom?(l1*l2-d0210*d3232)/denom:0;result.x=d0210;result.y=(l1+d0210*l2)/d3232}}();exports.closestPointLineToLine=closestPointLineToLine;global=function(){var paramResult=new _three.Vector2,temp1=new _three.Vector3,temp2=new _three.Vector3;return function(l1,l2,target1,target2){closestPointLineToLine(l1,\nl2,paramResult);var d=paramResult.x,d2=paramResult.y;0<=d&&1>=d&&0<=d2&&1>=d2?(l1.at(d,target1),l2.at(d2,target2)):0<=d&&1>=d?(0>d2?l2.at(0,target2):l2.at(1,target2),l1.closestPointToPoint(target2,!0,target1)):0<=d2&&1>=d2?(0>d?l1.at(0,target1):l1.at(1,target1),l2.closestPointToPoint(target1,!0,target2)):(d=0>d?l1.start:l1.end,d2=0>d2?l2.start:l2.end,l1.closestPointToPoint(d2,!0,temp1),l2.closestPointToPoint(d,!0,temp2),temp1.distanceToSquared(d2)<=temp2.distanceToSquared(d)?(target1.copy(temp1),\ntarget2.copy(d2)):(target1.copy(d),target2.copy(temp2)))}}();exports.closestPointsSegmentToSegment=global;global=function(){var closestPointTemp=new _three.Vector3,projectedPointTemp=new _three.Vector3,planeTemp=new _three.Plane,lineTemp=new _three.Line3;return function(sphere,triangle){var radius=sphere.radius;sphere=sphere.center;var a=triangle.a,b=triangle.b,c=triangle.c;lineTemp.start=a;lineTemp.end=b;if(lineTemp.closestPointToPoint(sphere,!0,closestPointTemp).distanceTo(sphere)<=radius)return!0;\nlineTemp.start=a;lineTemp.end=c;if(lineTemp.closestPointToPoint(sphere,!0,closestPointTemp).distanceTo(sphere)<=radius)return!0;lineTemp.start=b;lineTemp.end=c;if(lineTemp.closestPointToPoint(sphere,!0,closestPointTemp).distanceTo(sphere)<=radius)return!0;a=triangle.getPlane(planeTemp);return Math.abs(a.distanceToPoint(sphere))<=radius&&(radius=a.projectPoint(sphere,projectedPointTemp),triangle.containsPoint(radius))?!0:!1}}();exports.sphereIntersectTriangle=global}","~:source","shadow$provide[\"module$node_modules$three_mesh_bvh$src$Utils$MathUtilities\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sphereIntersectTriangle = exports.closestPointsSegmentToSegment = exports.closestPointLineToLine = void 0;\n\nvar _three = require(\"three\");\n\nvar closestPointLineToLine = function () {\n  // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\n  var dir1 = new _three.Vector3();\n  var dir2 = new _three.Vector3();\n  var v02 = new _three.Vector3();\n  return function closestPointLineToLine(l1, l2, result) {\n    var v0 = l1.start;\n    var v10 = dir1;\n    var v2 = l2.start;\n    var v32 = dir2;\n    v02.subVectors(v0, v2);\n    dir1.subVectors(l1.end, l2.start);\n    dir2.subVectors(l2.end, l2.start); // float d0232 = v02.Dot(v32);\n\n    var d0232 = v02.dot(v32); // float d3210 = v32.Dot(v10);\n\n    var d3210 = v32.dot(v10); // float d3232 = v32.Dot(v32);\n\n    var d3232 = v32.dot(v32); // float d0210 = v02.Dot(v10);\n\n    var d0210 = v02.dot(v10); // float d1010 = v10.Dot(v10);\n\n    var d1010 = v10.dot(v10); // float denom = d1010*d3232 - d3210*d3210;\n\n    var denom = d1010 * d3232 - d3210 * d3210;\n    var d, d2;\n\n    if (denom !== 0) {\n      d = (d0232 * d3210 - d0210 * d3232) / denom;\n    } else {\n      d = 0;\n    }\n\n    d2 = (d0232 + d * d3210) / d3232;\n    result.x = d;\n    result.y = d2;\n  };\n}();\n\nexports.closestPointLineToLine = closestPointLineToLine;\n\nvar closestPointsSegmentToSegment = function () {\n  // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\n  var paramResult = new _three.Vector2();\n  var temp1 = new _three.Vector3();\n  var temp2 = new _three.Vector3();\n  return function closestPointsSegmentToSegment(l1, l2, target1, target2) {\n    closestPointLineToLine(l1, l2, paramResult);\n    var d = paramResult.x;\n    var d2 = paramResult.y;\n\n    if (d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1) {\n      l1.at(d, target1);\n      l2.at(d2, target2);\n      return;\n    } else if (d >= 0 && d <= 1) {\n      // Only d2 is out of bounds.\n      if (d2 < 0) {\n        l2.at(0, target2);\n      } else {\n        l2.at(1, target2);\n      }\n\n      l1.closestPointToPoint(target2, true, target1);\n      return;\n    } else if (d2 >= 0 && d2 <= 1) {\n      // Only d is out of bounds.\n      if (d < 0) {\n        l1.at(0, target1);\n      } else {\n        l1.at(1, target1);\n      }\n\n      l2.closestPointToPoint(target1, true, target2);\n      return;\n    } else {\n      // Both u and u2 are out of bounds.\n      var p;\n\n      if (d < 0) {\n        p = l1.start;\n      } else {\n        p = l1.end;\n      }\n\n      var p2;\n\n      if (d2 < 0) {\n        p2 = l2.start;\n      } else {\n        p2 = l2.end;\n      }\n\n      var closestPoint = temp1;\n      var closestPoint2 = temp2;\n      l1.closestPointToPoint(p2, true, temp1);\n      l2.closestPointToPoint(p, true, temp2);\n\n      if (closestPoint.distanceToSquared(p2) <= closestPoint2.distanceToSquared(p)) {\n        target1.copy(closestPoint);\n        target2.copy(p2);\n        return;\n      } else {\n        target1.copy(p);\n        target2.copy(closestPoint2);\n        return;\n      }\n    }\n  };\n}();\n\nexports.closestPointsSegmentToSegment = closestPointsSegmentToSegment;\n\nvar sphereIntersectTriangle = function () {\n  // https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\n  var closestPointTemp = new _three.Vector3();\n  var projectedPointTemp = new _three.Vector3();\n  var planeTemp = new _three.Plane();\n  var lineTemp = new _three.Line3();\n  return function sphereIntersectTriangle(sphere, triangle) {\n    var radius = sphere.radius,\n        center = sphere.center;\n    var a = triangle.a,\n        b = triangle.b,\n        c = triangle.c; // phase 1\n\n    lineTemp.start = a;\n    lineTemp.end = b;\n    var closestPoint1 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint1.distanceTo(center) <= radius) return true;\n    lineTemp.start = a;\n    lineTemp.end = c;\n    var closestPoint2 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint2.distanceTo(center) <= radius) return true;\n    lineTemp.start = b;\n    lineTemp.end = c;\n    var closestPoint3 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\n    if (closestPoint3.distanceTo(center) <= radius) return true; // phase 2\n\n    var plane = triangle.getPlane(planeTemp);\n    var dp = Math.abs(plane.distanceToPoint(center));\n\n    if (dp <= radius) {\n      var pp = plane.projectPoint(center, projectedPointTemp);\n      var cp = triangle.containsPoint(pp);\n      if (cp) return true;\n    }\n\n    return false;\n  };\n}();\n\nexports.sphereIntersectTriangle = sphereIntersectTriangle;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["x","__esModule","value","start","y","sphereIntersectTriangle","closestPointLineToLine","closestPointsSegmentToSegment","end"]],"~:compiled-at",1630917516174,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_mesh_bvh$src$Utils$MathUtilities.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-mesh-bvh/src/Utils/MathUtilities.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_mesh_bvh$src$Utils$MathUtilities\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.sphereIntersectTriangle = exports.closestPointsSegmentToSegment = exports.closestPointLineToLine = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar closestPointLineToLine = function () {\\n  // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\\n  var dir1 = new _three.Vector3();\\n  var dir2 = new _three.Vector3();\\n  var v02 = new _three.Vector3();\\n  return function closestPointLineToLine(l1, l2, result) {\\n    var v0 = l1.start;\\n    var v10 = dir1;\\n    var v2 = l2.start;\\n    var v32 = dir2;\\n    v02.subVectors(v0, v2);\\n    dir1.subVectors(l1.end, l2.start);\\n    dir2.subVectors(l2.end, l2.start); // float d0232 = v02.Dot(v32);\\n\\n    var d0232 = v02.dot(v32); // float d3210 = v32.Dot(v10);\\n\\n    var d3210 = v32.dot(v10); // float d3232 = v32.Dot(v32);\\n\\n    var d3232 = v32.dot(v32); // float d0210 = v02.Dot(v10);\\n\\n    var d0210 = v02.dot(v10); // float d1010 = v10.Dot(v10);\\n\\n    var d1010 = v10.dot(v10); // float denom = d1010*d3232 - d3210*d3210;\\n\\n    var denom = d1010 * d3232 - d3210 * d3210;\\n    var d, d2;\\n\\n    if (denom !== 0) {\\n      d = (d0232 * d3210 - d0210 * d3232) / denom;\\n    } else {\\n      d = 0;\\n    }\\n\\n    d2 = (d0232 + d * d3210) / d3232;\\n    result.x = d;\\n    result.y = d2;\\n  };\\n}();\\n\\nexports.closestPointLineToLine = closestPointLineToLine;\\n\\nvar closestPointsSegmentToSegment = function () {\\n  // https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\\n  var paramResult = new _three.Vector2();\\n  var temp1 = new _three.Vector3();\\n  var temp2 = new _three.Vector3();\\n  return function closestPointsSegmentToSegment(l1, l2, target1, target2) {\\n    closestPointLineToLine(l1, l2, paramResult);\\n    var d = paramResult.x;\\n    var d2 = paramResult.y;\\n\\n    if (d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1) {\\n      l1.at(d, target1);\\n      l2.at(d2, target2);\\n      return;\\n    } else if (d >= 0 && d <= 1) {\\n      // Only d2 is out of bounds.\\n      if (d2 < 0) {\\n        l2.at(0, target2);\\n      } else {\\n        l2.at(1, target2);\\n      }\\n\\n      l1.closestPointToPoint(target2, true, target1);\\n      return;\\n    } else if (d2 >= 0 && d2 <= 1) {\\n      // Only d is out of bounds.\\n      if (d < 0) {\\n        l1.at(0, target1);\\n      } else {\\n        l1.at(1, target1);\\n      }\\n\\n      l2.closestPointToPoint(target1, true, target2);\\n      return;\\n    } else {\\n      // Both u and u2 are out of bounds.\\n      var p;\\n\\n      if (d < 0) {\\n        p = l1.start;\\n      } else {\\n        p = l1.end;\\n      }\\n\\n      var p2;\\n\\n      if (d2 < 0) {\\n        p2 = l2.start;\\n      } else {\\n        p2 = l2.end;\\n      }\\n\\n      var closestPoint = temp1;\\n      var closestPoint2 = temp2;\\n      l1.closestPointToPoint(p2, true, temp1);\\n      l2.closestPointToPoint(p, true, temp2);\\n\\n      if (closestPoint.distanceToSquared(p2) <= closestPoint2.distanceToSquared(p)) {\\n        target1.copy(closestPoint);\\n        target2.copy(p2);\\n        return;\\n      } else {\\n        target1.copy(p);\\n        target2.copy(closestPoint2);\\n        return;\\n      }\\n    }\\n  };\\n}();\\n\\nexports.closestPointsSegmentToSegment = closestPointsSegmentToSegment;\\n\\nvar sphereIntersectTriangle = function () {\\n  // https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\\n  var closestPointTemp = new _three.Vector3();\\n  var projectedPointTemp = new _three.Vector3();\\n  var planeTemp = new _three.Plane();\\n  var lineTemp = new _three.Line3();\\n  return function sphereIntersectTriangle(sphere, triangle) {\\n    var radius = sphere.radius,\\n        center = sphere.center;\\n    var a = triangle.a,\\n        b = triangle.b,\\n        c = triangle.c; // phase 1\\n\\n    lineTemp.start = a;\\n    lineTemp.end = b;\\n    var closestPoint1 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\\n    if (closestPoint1.distanceTo(center) <= radius) return true;\\n    lineTemp.start = a;\\n    lineTemp.end = c;\\n    var closestPoint2 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\\n    if (closestPoint2.distanceTo(center) <= radius) return true;\\n    lineTemp.start = b;\\n    lineTemp.end = c;\\n    var closestPoint3 = lineTemp.closestPointToPoint(center, true, closestPointTemp);\\n    if (closestPoint3.distanceTo(center) <= radius) return true; // phase 2\\n\\n    var plane = triangle.getPlane(planeTemp);\\n    var dp = Math.abs(plane.distanceToPoint(center));\\n\\n    if (dp <= radius) {\\n      var pp = plane.projectPoint(center, projectedPointTemp);\\n      var cp = triangle.containsPoint(pp);\\n      if (cp) return true;\\n    }\\n\\n    return false;\\n  };\\n}();\\n\\nexports.sphereIntersectTriangle = sphereIntersectTriangle;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"sphereIntersectTriangle\",\"closestPointsSegmentToSegment\",\"closestPointLineToLine\",\"_three\",\"dir1\",\"Vector3\",\"dir2\",\"v02\",\"l1\",\"l2\",\"result\",\"subVectors\",\"start\",\"end\",\"d0232\",\"dot\",\"d3210\",\"d3232\",\"d0210\",\"denom\",\"d1010\",\"d\",\"x\",\"y\",\"paramResult\",\"Vector2\",\"temp1\",\"temp2\",\"target1\",\"target2\",\"d2\",\"at\",\"closestPointToPoint\",\"p\",\"p2\",\"distanceToSquared\",\"copy\",\"closestPointTemp\",\"projectedPointTemp\",\"planeTemp\",\"Plane\",\"lineTemp\",\"Line3\",\"sphere\",\"triangle\",\"radius\",\"center\",\"a\",\"b\",\"c\",\"closestPoint1\",\"distanceTo\",\"closestPoint2\",\"closestPoint3\",\"plane\",\"getPlane\",\"Math\",\"abs\",\"dp\",\"distanceToPoint\",\"pp\",\"cp\",\"projectPoint\",\"containsPoint\"]\n}\n"]