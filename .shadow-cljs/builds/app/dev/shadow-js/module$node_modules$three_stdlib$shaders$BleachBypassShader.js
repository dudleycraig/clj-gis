["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/BleachBypassShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$BleachBypassShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.BleachBypassShader=void 0;exports.BleachBypassShader={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform float opacity;\\nuniform sampler2D tDiffuse;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 base \\x3d texture2D( tDiffuse, vUv );\\n\\tvec3 lumCoeff \\x3d vec3( 0.25, 0.65, 0.1 );\\n\\tfloat lum \\x3d dot( lumCoeff, base.rgb );\\n\\tvec3 blend \\x3d vec3( lum );\\n\\tfloat L \\x3d min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\\n\\tvec3 result1 \\x3d 2.0 * base.rgb * blend;\\n\\tvec3 result2 \\x3d 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\\n\\tvec3 newColor \\x3d mix( result1, result2, L );\\n\\tfloat A2 \\x3d opacity * base.a;\\n\\tvec3 mixRGB \\x3d A2 * newColor.rgb;\\n\\tmixRGB +\\x3d ( ( 1.0 - A2 ) * base.rgb );\\n\\tgl_FragColor \\x3d vec4( mixRGB, base.a );\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$BleachBypassShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BleachBypassShader = void 0;\n\n/**\n * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\n * - based on Nvidia example\n * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\n */\nvar BleachBypassShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    opacity: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float opacity;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 base = texture2D( tDiffuse, vUv );', '\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );', '\tfloat lum = dot( lumCoeff, base.rgb );', '\tvec3 blend = vec3( lum );', '\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );', '\tvec3 result1 = 2.0 * base.rgb * blend;', '\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );', '\tvec3 newColor = mix( result1, result2, L );', '\tfloat A2 = opacity * base.a;', '\tvec3 mixRGB = A2 * newColor.rgb;', '\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );', '\tgl_FragColor = vec4( mixRGB, base.a );', '}'].join('\\n')\n};\nexports.BleachBypassShader = BleachBypassShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","__esModule","tDiffuse","vertexShader","BleachBypassShader","value","uniforms","opacity"]],"~:compiled-at",1630917515578,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$BleachBypassShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,kBAAR,CAA6B,IAAK,EAmBlCJ,QAAQI,CAAAA,kBAAR,CAZyBA,CACvBC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,QAAS,CACPJ,MAAO,CADA,CAJD,CADaC,CASvBI,aAAiJ,qIAT1HJ,CAUvBK,eAA2oB,6oBAVpnBL,CAb+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/BleachBypassShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$BleachBypassShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.BleachBypassShader = void 0;\\n\\n/**\\n * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\\n * - based on Nvidia example\\n * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\\n */\\nvar BleachBypassShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    opacity: {\\n      value: 1.0\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform float opacity;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\\tvec4 base = texture2D( tDiffuse, vUv );', '\\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );', '\\tfloat lum = dot( lumCoeff, base.rgb );', '\\tvec3 blend = vec3( lum );', '\\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );', '\\tvec3 result1 = 2.0 * base.rgb * blend;', '\\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );', '\\tvec3 newColor = mix( result1, result2, L );', '\\tfloat A2 = opacity * base.a;', '\\tvec3 mixRGB = A2 * newColor.rgb;', '\\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );', '\\tgl_FragColor = vec4( mixRGB, base.a );', '}'].join('\\\\n')\\n};\\nexports.BleachBypassShader = BleachBypassShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"BleachBypassShader\",\"uniforms\",\"tDiffuse\",\"opacity\",\"vertexShader\",\"fragmentShader\"]\n}\n"]