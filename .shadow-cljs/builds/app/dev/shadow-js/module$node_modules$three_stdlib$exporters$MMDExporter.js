["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/exporters/MMDExporter.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$exporters$MMDExporter=function(global,require,module,exports){function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);\nstaticProps&&_defineProperties(Constructor,staticProps);return Constructor}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.MMDExporter=void 0;var _defineProperty2=function(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}(require(\"module$node_modules$$babel$runtime$helpers$esm$defineProperty\")),_three=require(\"module$node_modules$three$build$three_module\"),_mmdParser=require(\"module$node_modules$mmd_parser$build$mmdparser\");global=function(){function MMDExporter(){if(!(this instanceof\nMMDExporter))throw new TypeError(\"Cannot call a class as a function\");(0,_defineProperty2[\"default\"])(this,\"u2sTable\",void 0)}_createClass(MMDExporter,[{key:\"parseVpd\",value:function(skin,outputShiftJis,useOriginalBones){function toStringsFromArray(array){for(var a=[],i=0,il=array.length;i<il;i++){var JSCompiler_temp_const=a,JSCompiler_temp_const$jscomp$0=JSCompiler_temp_const.push,num=array[i];1E-6>Math.abs(num)&&(num=0);var a$jscomp$0=num.toString();-1===a$jscomp$0.indexOf(\".\")&&(a$jscomp$0+=\".\");\na$jscomp$0+=\"000000\";var index=a$jscomp$0.indexOf(\".\");num=a$jscomp$0.slice(0,index);a$jscomp$0=a$jscomp$0.slice(index+1,index+7);JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const,num+\".\"+a$jscomp$0)}return a.join(\",\")}if(!0!==skin.isSkinnedMesh)return console.warn(\"THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.\"),null;skin.updateMatrixWorld(!0);var bones=skin.skeleton.bones,bones2=this.getBindBones(skin),position=new _three.Vector3,quaternion=new _three.Quaternion,quaternion2=\nnew _three.Quaternion,matrix=new _three.Matrix4,array$jscomp$0=[];array$jscomp$0.push(\"Vocaloid Pose Data file\");array$jscomp$0.push(\"\");array$jscomp$0.push((\"\"!==skin.name?skin.name.replace(/\\s/g,\"_\"):\"skin\")+\".osm;\");array$jscomp$0.push(bones.length+\";\");array$jscomp$0.push(\"\");skin=0;for(var il$jscomp$0=bones.length;skin<il$jscomp$0;skin++){var bone=bones[skin],bone2=bones2[skin];!0===useOriginalBones&&void 0!==bone.userData.ik&&void 0!==bone.userData.ik.originalMatrix?matrix.fromArray(bone.userData.ik.originalMatrix):\nmatrix.copy(bone.matrix);position.setFromMatrixPosition(matrix);quaternion.setFromRotationMatrix(matrix);var pArray=position.sub(bone2.position).toArray();bone2=quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();pArray[2]=-pArray[2];bone2[0]=-bone2[0];bone2[1]=-bone2[1];array$jscomp$0.push(\"Bone\"+skin+\"{\"+bone.name);array$jscomp$0.push(\"  \"+toStringsFromArray(pArray)+\";\");array$jscomp$0.push(\"  \"+toStringsFromArray(bone2)+\";\");array$jscomp$0.push(\"}\");array$jscomp$0.push(\"\")}array$jscomp$0.push(\"\");\nuseOriginalBones=array$jscomp$0.join(\"\\n\");return!0===outputShiftJis?this.unicodeToShiftjis(useOriginalBones):useOriginalBones}},{key:\"unicodeToShiftjis\",value:function(str){if(void 0===this.u2sTable){var table=(new _mmdParser.CharsetEncoder).s2uTable;this.u2sTable={};for(var keys=Object.keys(table),i=0,il=keys.length;i<il;i++){var key=keys[i];this.u2sTable[table[key]]=parseInt(key)}}table=[];keys=0;for(i=str.length;keys<i;keys++){il=str.charCodeAt(keys);key=this.u2sTable[il];if(void 0===key)throw\"cannot convert charcode 0x\"+\nil.toString(16);255<key&&table.push(key>>8&255);table.push(key&255)}return new Uint8Array(table)}},{key:\"getBindBones\",value:function(skin){skin=skin.clone();skin.pose();return skin.skeleton.bones}}]);return MMDExporter}();exports.MMDExporter=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$exporters$MMDExporter\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MMDExporter = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/defineProperty\"));\n\nvar _three = require(\"three\");\n\nvar _mmdParser = require(\"mmd-parser\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Dependencies\n *  - mmd-parser https://github.com/takahirox/mmd-parser\n */\nvar MMDExporter =\n/*#__PURE__*/\nfunction () {\n  function MMDExporter() {\n    _classCallCheck(this, MMDExporter);\n\n    (0, _defineProperty2[\"default\"])(this, \"u2sTable\", void 0);\n  }\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n\n\n  _createClass(MMDExporter, [{\n    key: \"parseVpd\",\n    value: function parseVpd(skin, outputShiftJis, useOriginalBones) {\n      if (skin.isSkinnedMesh !== true) {\n        console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\n        return null;\n      }\n\n      function toStringsFromNumber(num) {\n        if (Math.abs(num) < 1e-6) num = 0;\n        var a = num.toString();\n\n        if (a.indexOf('.') === -1) {\n          a += '.';\n        }\n\n        a += '000000';\n        var index = a.indexOf('.');\n        var d = a.slice(0, index);\n        var p = a.slice(index + 1, index + 7);\n        return d + '.' + p;\n      }\n\n      function toStringsFromArray(array) {\n        var a = [];\n\n        for (var i = 0, il = array.length; i < il; i++) {\n          a.push(toStringsFromNumber(array[i]));\n        }\n\n        return a.join(',');\n      }\n\n      skin.updateMatrixWorld(true);\n      var bones = skin.skeleton.bones;\n      var bones2 = this.getBindBones(skin);\n      var position = new _three.Vector3();\n      var quaternion = new _three.Quaternion();\n      var quaternion2 = new _three.Quaternion();\n      var matrix = new _three.Matrix4();\n      var array = [];\n      array.push('Vocaloid Pose Data file');\n      array.push('');\n      array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\n      array.push(bones.length + ';');\n      array.push('');\n\n      for (var i = 0, il = bones.length; i < il; i++) {\n        var bone = bones[i];\n        var bone2 = bones2[i];\n        /*\n         * use the bone matrix saved before solving IK.\n         * see CCDIKSolver for the detail.\n         */\n\n        if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\n          matrix.fromArray(bone.userData.ik.originalMatrix);\n        } else {\n          matrix.copy(bone.matrix);\n        }\n\n        position.setFromMatrixPosition(matrix);\n        quaternion.setFromRotationMatrix(matrix);\n        var pArray = position.sub(bone2.position).toArray();\n        var qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray(); // right to left\n\n        pArray[2] = -pArray[2];\n        qArray[0] = -qArray[0];\n        qArray[1] = -qArray[1];\n        array.push('Bone' + i + '{' + bone.name);\n        array.push('  ' + toStringsFromArray(pArray) + ';');\n        array.push('  ' + toStringsFromArray(qArray) + ';');\n        array.push('}');\n        array.push('');\n      }\n\n      array.push('');\n      var lines = array.join('\\n');\n      return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n    } // Unicode to Shift_JIS table\n\n  }, {\n    key: \"unicodeToShiftjis\",\n    value: function unicodeToShiftjis(str) {\n      if (this.u2sTable === undefined) {\n        var encoder = new _mmdParser.CharsetEncoder(); // eslint-disable-line no-undef\n\n        var table = encoder.s2uTable;\n        this.u2sTable = {};\n        var keys = Object.keys(table);\n\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var key = keys[i];\n          var value = table[key];\n          this.u2sTable[value] = parseInt(key);\n        }\n      }\n\n      var array = [];\n\n      for (var _i = 0, _il = str.length; _i < _il; _i++) {\n        var code = str.charCodeAt(_i);\n        var _value = this.u2sTable[code];\n\n        if (_value === undefined) {\n          throw 'cannot convert charcode 0x' + code.toString(16);\n        } else if (_value > 0xff) {\n          array.push(_value >> 8 & 0xff);\n          array.push(_value & 0xff);\n        } else {\n          array.push(_value & 0xff);\n        }\n      }\n\n      return new Uint8Array(array);\n    }\n  }, {\n    key: \"getBindBones\",\n    value: function getBindBones(skin) {\n      // any more efficient ways?\n      var poseSkin = skin.clone();\n      poseSkin.pose();\n      return poseSkin.skeleton.bones;\n    }\n  }]);\n\n  return MMDExporter;\n}();\n\nexports.MMDExporter = MMDExporter;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js","~$module$node_modules$$babel$runtime$helpers$esm$defineProperty","~$module$node_modules$mmd_parser$build$mmdparser"]],"~:properties",["^5",["MMDExporter","key","__esModule","configurable","value","enumerable","writable","u2sTable"]],"~:compiled-at",1630917515343,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$exporters$MMDExporter.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/exporters/MMDExporter.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$exporters$MMDExporter\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.MMDExporter = void 0;\\n\\nvar _defineProperty2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/esm/defineProperty\\\"));\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _mmdParser = require(\\\"mmd-parser\\\");\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/**\\n * Dependencies\\n *  - mmd-parser https://github.com/takahirox/mmd-parser\\n */\\nvar MMDExporter =\\n/*#__PURE__*/\\nfunction () {\\n  function MMDExporter() {\\n    _classCallCheck(this, MMDExporter);\\n\\n    (0, _defineProperty2[\\\"default\\\"])(this, \\\"u2sTable\\\", void 0);\\n  }\\n  /* TODO: implement\\n  // mesh -> pmd\\n  this.parsePmd = function ( object ) {\\n  };\\n  */\\n\\n  /* TODO: implement\\n  // mesh -> pmx\\n  this.parsePmx = function ( object ) {\\n  };\\n  */\\n\\n  /* TODO: implement\\n  // animation + skeleton -> vmd\\n  this.parseVmd = function ( object ) {\\n  };\\n  */\\n\\n  /*\\n   * skeleton -> vpd\\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\\n   */\\n\\n\\n  _createClass(MMDExporter, [{\\n    key: \\\"parseVpd\\\",\\n    value: function parseVpd(skin, outputShiftJis, useOriginalBones) {\\n      if (skin.isSkinnedMesh !== true) {\\n        console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\\n        return null;\\n      }\\n\\n      function toStringsFromNumber(num) {\\n        if (Math.abs(num) < 1e-6) num = 0;\\n        var a = num.toString();\\n\\n        if (a.indexOf('.') === -1) {\\n          a += '.';\\n        }\\n\\n        a += '000000';\\n        var index = a.indexOf('.');\\n        var d = a.slice(0, index);\\n        var p = a.slice(index + 1, index + 7);\\n        return d + '.' + p;\\n      }\\n\\n      function toStringsFromArray(array) {\\n        var a = [];\\n\\n        for (var i = 0, il = array.length; i < il; i++) {\\n          a.push(toStringsFromNumber(array[i]));\\n        }\\n\\n        return a.join(',');\\n      }\\n\\n      skin.updateMatrixWorld(true);\\n      var bones = skin.skeleton.bones;\\n      var bones2 = this.getBindBones(skin);\\n      var position = new _three.Vector3();\\n      var quaternion = new _three.Quaternion();\\n      var quaternion2 = new _three.Quaternion();\\n      var matrix = new _three.Matrix4();\\n      var array = [];\\n      array.push('Vocaloid Pose Data file');\\n      array.push('');\\n      array.push((skin.name !== '' ? skin.name.replace(/\\\\s/g, '_') : 'skin') + '.osm;');\\n      array.push(bones.length + ';');\\n      array.push('');\\n\\n      for (var i = 0, il = bones.length; i < il; i++) {\\n        var bone = bones[i];\\n        var bone2 = bones2[i];\\n        /*\\n         * use the bone matrix saved before solving IK.\\n         * see CCDIKSolver for the detail.\\n         */\\n\\n        if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\\n          matrix.fromArray(bone.userData.ik.originalMatrix);\\n        } else {\\n          matrix.copy(bone.matrix);\\n        }\\n\\n        position.setFromMatrixPosition(matrix);\\n        quaternion.setFromRotationMatrix(matrix);\\n        var pArray = position.sub(bone2.position).toArray();\\n        var qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray(); // right to left\\n\\n        pArray[2] = -pArray[2];\\n        qArray[0] = -qArray[0];\\n        qArray[1] = -qArray[1];\\n        array.push('Bone' + i + '{' + bone.name);\\n        array.push('  ' + toStringsFromArray(pArray) + ';');\\n        array.push('  ' + toStringsFromArray(qArray) + ';');\\n        array.push('}');\\n        array.push('');\\n      }\\n\\n      array.push('');\\n      var lines = array.join('\\\\n');\\n      return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\\n    } // Unicode to Shift_JIS table\\n\\n  }, {\\n    key: \\\"unicodeToShiftjis\\\",\\n    value: function unicodeToShiftjis(str) {\\n      if (this.u2sTable === undefined) {\\n        var encoder = new _mmdParser.CharsetEncoder(); // eslint-disable-line no-undef\\n\\n        var table = encoder.s2uTable;\\n        this.u2sTable = {};\\n        var keys = Object.keys(table);\\n\\n        for (var i = 0, il = keys.length; i < il; i++) {\\n          var key = keys[i];\\n          var value = table[key];\\n          this.u2sTable[value] = parseInt(key);\\n        }\\n      }\\n\\n      var array = [];\\n\\n      for (var _i = 0, _il = str.length; _i < _il; _i++) {\\n        var code = str.charCodeAt(_i);\\n        var _value = this.u2sTable[code];\\n\\n        if (_value === undefined) {\\n          throw 'cannot convert charcode 0x' + code.toString(16);\\n        } else if (_value > 0xff) {\\n          array.push(_value >> 8 & 0xff);\\n          array.push(_value & 0xff);\\n        } else {\\n          array.push(_value & 0xff);\\n        }\\n      }\\n\\n      return new Uint8Array(array);\\n    }\\n  }, {\\n    key: \\\"getBindBones\\\",\\n    value: function getBindBones(skin) {\\n      // any more efficient ways?\\n      var poseSkin = skin.clone();\\n      poseSkin.pose();\\n      return poseSkin.skeleton.bones;\\n    }\\n  }]);\\n\\n  return MMDExporter;\\n}();\\n\\nexports.MMDExporter = MMDExporter;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"prototype\",\"value\",\"MMDExporter\",\"_defineProperty2\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"_three\",\"_mmdParser\",\"instance\",\"TypeError\",\"parseVpd\",\"skin\",\"outputShiftJis\",\"useOriginalBones\",\"toStringsFromArray\",\"array\",\"a\",\"il\",\"push\",\"Math\",\"abs\",\"num\",\"toString\",\"indexOf\",\"index\",\"d\",\"slice\",\"p\",\"join\",\"isSkinnedMesh\",\"console\",\"warn\",\"updateMatrixWorld\",\"bones\",\"skeleton\",\"bones2\",\"getBindBones\",\"position\",\"Vector3\",\"quaternion\",\"Quaternion\",\"quaternion2\",\"matrix\",\"Matrix4\",\"name\",\"replace\",\"bone\",\"bone2\",\"undefined\",\"userData\",\"ik\",\"originalMatrix\",\"fromArray\",\"copy\",\"setFromMatrixPosition\",\"setFromRotationMatrix\",\"pArray\",\"sub\",\"toArray\",\"qArray\",\"conjugate\",\"multiply\",\"lines\",\"unicodeToShiftjis\",\"str\",\"u2sTable\",\"table\",\"s2uTable\",\"encoder\",\"CharsetEncoder\",\"keys\",\"parseInt\",\"_i\",\"_il\",\"code\",\"charCodeAt\",\"_value\",\"Uint8Array\",\"poseSkin\",\"clone\",\"pose\"]\n}\n"]