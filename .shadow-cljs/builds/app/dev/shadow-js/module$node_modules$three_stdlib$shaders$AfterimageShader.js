["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/AfterimageShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$AfterimageShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.AfterimageShader=void 0;exports.AfterimageShader={uniforms:{damp:{value:.96},tOld:{value:null},tNew:{value:null}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform float damp;\\nuniform sampler2D tOld;\\nuniform sampler2D tNew;\\nvarying vec2 vUv;\\nvec4 when_gt( vec4 x, float y ) {\\n\\treturn max( sign( x - y ), 0.0 );\\n}\\nvoid main() {\\n\\tvec4 texelOld \\x3d texture2D( tOld, vUv );\\n\\tvec4 texelNew \\x3d texture2D( tNew, vUv );\\n\\ttexelOld *\\x3d damp * when_gt( texelOld, 0.1 );\\n\\tgl_FragColor \\x3d max(texelNew, texelOld);\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$AfterimageShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AfterimageShader = void 0;\n\n/**\n * Afterimage shader\n * I created this effect inspired by a demo on codepen:\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\n */\nvar AfterimageShader = {\n  uniforms: {\n    damp: {\n      value: 0.96\n    },\n    tOld: {\n      value: null\n    },\n    tNew: {\n      value: null\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float damp;', 'uniform sampler2D tOld;', 'uniform sampler2D tNew;', 'varying vec2 vUv;', 'vec4 when_gt( vec4 x, float y ) {', '\treturn max( sign( x - y ), 0.0 );', '}', 'void main() {', '\tvec4 texelOld = texture2D( tOld, vUv );', '\tvec4 texelNew = texture2D( tNew, vUv );', '\ttexelOld *= damp * when_gt( texelOld, 0.1 );', '\tgl_FragColor = max(texelNew, texelOld);', '}'].join('\\n')\n};\nexports.AfterimageShader = AfterimageShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","AfterimageShader","tOld","damp","__esModule","vertexShader","value","tNew","uniforms"]],"~:compiled-at",1630917515523,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$AfterimageShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,gBAAR,CAA2B,IAAK,EAsBhCJ,QAAQI,CAAAA,gBAAR,CAfuBA,CACrBC,SAAU,CACRC,KAAM,CACJH,MAAO,GADH,CADE,CAIRI,KAAM,CACJJ,MAAO,IADH,CAJE,CAORK,KAAM,CACJL,MAAO,IADH,CAPE,CADWC,CAYrBK,aAAiJ,qIAZ5HL,CAarBM,eAAyY,oXAbpXN,CAb+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/AfterimageShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$AfterimageShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.AfterimageShader = void 0;\\n\\n/**\\n * Afterimage shader\\n * I created this effect inspired by a demo on codepen:\\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\\n */\\nvar AfterimageShader = {\\n  uniforms: {\\n    damp: {\\n      value: 0.96\\n    },\\n    tOld: {\\n      value: null\\n    },\\n    tNew: {\\n      value: null\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform float damp;', 'uniform sampler2D tOld;', 'uniform sampler2D tNew;', 'varying vec2 vUv;', 'vec4 when_gt( vec4 x, float y ) {', '\\treturn max( sign( x - y ), 0.0 );', '}', 'void main() {', '\\tvec4 texelOld = texture2D( tOld, vUv );', '\\tvec4 texelNew = texture2D( tNew, vUv );', '\\ttexelOld *= damp * when_gt( texelOld, 0.1 );', '\\tgl_FragColor = max(texelNew, texelOld);', '}'].join('\\\\n')\\n};\\nexports.AfterimageShader = AfterimageShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"AfterimageShader\",\"uniforms\",\"damp\",\"tOld\",\"tNew\",\"vertexShader\",\"fragmentShader\"]\n}\n"]