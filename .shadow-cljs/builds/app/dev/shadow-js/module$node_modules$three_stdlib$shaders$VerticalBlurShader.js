["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/VerticalBlurShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$VerticalBlurShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.VerticalBlurShader=void 0;exports.VerticalBlurShader={uniforms:{tDiffuse:{value:null},v:{value:1/512}},vertexShader:\"\\n    varying vec2 vUv;\\n\\n    void main() {\\n\\n      vUv \\x3d uv;\\n      gl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n    }\\n  \",fragmentShader:\"\\n  \\n  uniform sampler2D tDiffuse;\\n  uniform float v;\\n\\n  varying vec2 vUv;\\n\\n  void main() {\\n\\n    vec4 sum \\x3d vec4( 0.0 );\\n\\n    sum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\\n    sum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\\n    sum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\\n    sum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\\n    sum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\\n    sum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\\n    sum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\\n    sum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\\n    sum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\\n\\n    gl_FragColor \\x3d sum;\\n\\n  }\\n  \"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$VerticalBlurShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VerticalBlurShader = void 0;\n\n/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nvar VerticalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n    varying vec2 vUv;\\n\\n    void main() {\\n\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n    }\\n  \",\n  fragmentShader:\n  /* glsl */\n  \"\\n  \\n  uniform sampler2D tDiffuse;\\n  uniform float v;\\n\\n  varying vec2 vUv;\\n\\n  void main() {\\n\\n    vec4 sum = vec4( 0.0 );\\n\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\\n\\n    gl_FragColor = sum;\\n\\n  }\\n  \"\n};\nexports.VerticalBlurShader = VerticalBlurShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","__esModule","v","tDiffuse","vertexShader","value","VerticalBlurShader","uniforms"]],"~:compiled-at",1630917515580,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$VerticalBlurShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,kBAAR,CAA6B,IAAK,EA2BlCJ,QAAQI,CAAAA,kBAAR,CAhByBA,CACvBC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,EAAG,CACDJ,MAAO,CAAPA,CAAa,GADZ,CAJK,CADaC,CASvBI,aAEA,qKAXuBJ,CAYvBK,eAEA,62BAduBL,CAjB+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/VerticalBlurShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$VerticalBlurShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.VerticalBlurShader = void 0;\\n\\n/**\\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\\n *\\n * - 9 samples per pass\\n * - standard deviation 2.7\\n * - \\\"h\\\" and \\\"v\\\" parameters should be set to \\\"1 / width\\\" and \\\"1 / height\\\"\\n */\\nvar VerticalBlurShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    v: {\\n      value: 1.0 / 512.0\\n    }\\n  },\\n  vertexShader:\\n  /* glsl */\\n  \\\"\\\\n    varying vec2 vUv;\\\\n\\\\n    void main() {\\\\n\\\\n      vUv = uv;\\\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\\\n\\\\n    }\\\\n  \\\",\\n  fragmentShader:\\n  /* glsl */\\n  \\\"\\\\n  \\\\n  uniform sampler2D tDiffuse;\\\\n  uniform float v;\\\\n\\\\n  varying vec2 vUv;\\\\n\\\\n  void main() {\\\\n\\\\n    vec4 sum = vec4( 0.0 );\\\\n\\\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\\\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\\\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\\\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\\\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\\\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\\\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\\\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\\\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\\\\n\\\\n    gl_FragColor = sum;\\\\n\\\\n  }\\\\n  \\\"\\n};\\nexports.VerticalBlurShader = VerticalBlurShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"VerticalBlurShader\",\"uniforms\",\"tDiffuse\",\"v\",\"vertexShader\",\"fragmentShader\"]\n}\n"]