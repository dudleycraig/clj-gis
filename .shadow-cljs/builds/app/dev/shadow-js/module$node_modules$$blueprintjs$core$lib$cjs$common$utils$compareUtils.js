["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@blueprintjs/core/lib/cjs/common/utils/compareUtils.js"],"~:js","shadow$provide.module$node_modules$$blueprintjs$core$lib$cjs$common$utils$compareUtils=function(global,require,module,exports){function arraysEqual(arrA,arrB,compare){void 0===compare&&(compare=function(a,b){return a===b});return null==arrA&&null==arrB?!0:null==arrA||null==arrB||arrA.length!==arrB.length?!1:arrA.every(function(a,i){return compare(a,arrB[i])})}function deepCompareKeys(objA,objB,keys){if(objA===objB||null==objA&&null==objB)return!0;if(null==objA||null==objB)return!1;if(Array.isArray(objA)||\nArray.isArray(objB))return arraysEqual(objA,objB,deepCompareKeys);if(isSimplePrimitiveType(objA)||isSimplePrimitiveType(objB))return objA===objB;if(null!=keys)return deepCompareKeysImpl(objA,objB,keys);if(objA.constructor!==objB.constructor)return!1;keys=Object.keys(objA);var keysB=Object.keys(objB);return null==keys||null==keysB?!1:0===keys.length&&0===keysB.length?!0:arraysEqual(keys,keysB)&&deepCompareKeysImpl(objA,objB,keys)}function shallowCompareKeysImpl(objA,objB,keys){return filterKeys(objA,\nobjB,keys).every(function(key){return objA.hasOwnProperty(key)===objB.hasOwnProperty(key)&&objA[key]===objB[key]})}function deepCompareKeysImpl(objA,objB,keys){return keys.every(function(key){return objA.hasOwnProperty(key)===objB.hasOwnProperty(key)&&deepCompareKeys(objA[key],objB[key])})}function isSimplePrimitiveType(value){return\"number\"===typeof value||\"string\"===typeof value||\"boolean\"===typeof value}function filterKeys(objA,objB,keys){if(null!=keys&&null!=keys.include)return keys.include;if(null!=\nkeys&&null!=keys.exclude){objA=Object.keys(objA);objB=Object.keys(objB);var keySet_1=arrayToObject(objA.concat(objB));keys.exclude.forEach(function(key){return delete keySet_1[key]});return Object.keys(keySet_1)}return[]}function arrayToObject(arr){return arr.reduce(function(obj,element){obj[element]=!0;return obj},{})}function getUnequalKeyValues(objA,objB,keys,compareFn){return keys.filter(function(key){return!compareFn(objA,objB,key)}).map(function(key){return{key,valueA:objA[key],valueB:objB[key]}})}\nfunction unionKeys(objA,objB){objA=Object.keys(objA);objB=Object.keys(objB);objB=objA.concat(objB);objB=arrayToObject(objB);return Object.keys(objB)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.getDeepUnequalKeyValues=exports.deepCompareKeys=exports.shallowCompareKeys=exports.arraysEqual=void 0;exports.arraysEqual=arraysEqual;exports.shallowCompareKeys=function(objA,objB,keys){if(null==objA&&null==objB)return!0;if(null==objA||null==objB||Array.isArray(objA)||Array.isArray(objB))return!1;\nif(null!=keys)return shallowCompareKeysImpl(objA,objB,keys);keys=Object.keys(objA);var keysB=Object.keys(objB);return shallowCompareKeysImpl(objA,objB,{include:keys})&&shallowCompareKeysImpl(objA,objB,{include:keysB})};exports.deepCompareKeys=deepCompareKeys;exports.getDeepUnequalKeyValues=function(objA,objB,keys){void 0===objA&&(objA={});void 0===objB&&(objB={});keys=null==keys?unionKeys(objA,objB):keys;return getUnequalKeyValues(objA,objB,keys,function(a,b,key){return deepCompareKeys(a,b,[key])})}}","~:source","shadow$provide[\"module$node_modules$$blueprintjs$core$lib$cjs$common$utils$compareUtils\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDeepUnequalKeyValues = exports.deepCompareKeys = exports.shallowCompareKeys = exports.arraysEqual = void 0;\n/* eslint-enable deprecation/deprecation */\n/**\n * Returns true if the arrays are equal. Elements will be shallowly compared by\n * default, or they will be compared using the custom `compare` function if one\n * is provided.\n */\nfunction arraysEqual(arrA, arrB, compare) {\n    if (compare === void 0) { compare = function (a, b) { return a === b; }; }\n    // treat `null` and `undefined` as the same\n    if (arrA == null && arrB == null) {\n        return true;\n    }\n    else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\n        return false;\n    }\n    else {\n        return arrA.every(function (a, i) { return compare(a, arrB[i]); });\n    }\n}\nexports.arraysEqual = arraysEqual;\n/**\n * Shallow comparison between objects. If `keys` is provided, just that subset\n * of keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\nfunction shallowCompareKeys(objA, objB, keys) {\n    // treat `null` and `undefined` as the same\n    if (objA == null && objB == null) {\n        return true;\n    }\n    else if (objA == null || objB == null) {\n        return false;\n    }\n    else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return false;\n    }\n    else if (keys != null) {\n        return shallowCompareKeysImpl(objA, objB, keys);\n    }\n    else {\n        // shallowly compare all keys from both objects\n        var keysA = Object.keys(objA);\n        var keysB = Object.keys(objB);\n        return (shallowCompareKeysImpl(objA, objB, { include: keysA }) &&\n            shallowCompareKeysImpl(objA, objB, { include: keysB }));\n    }\n}\nexports.shallowCompareKeys = shallowCompareKeys;\n/**\n * Deep comparison between objects. If `keys` is provided, just that subset of\n * keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\nfunction deepCompareKeys(objA, objB, keys) {\n    if (objA === objB) {\n        return true;\n    }\n    else if (objA == null && objB == null) {\n        // treat `null` and `undefined` as the same\n        return true;\n    }\n    else if (objA == null || objB == null) {\n        return false;\n    }\n    else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return arraysEqual(objA, objB, deepCompareKeys);\n    }\n    else if (isSimplePrimitiveType(objA) || isSimplePrimitiveType(objB)) {\n        return objA === objB;\n    }\n    else if (keys != null) {\n        return deepCompareKeysImpl(objA, objB, keys);\n    }\n    else if (objA.constructor !== objB.constructor) {\n        return false;\n    }\n    else {\n        var keysA = Object.keys(objA);\n        var keysB = Object.keys(objB);\n        if (keysA == null || keysB == null) {\n            return false;\n        }\n        if (keysA.length === 0 && keysB.length === 0) {\n            return true;\n        }\n        return arraysEqual(keysA, keysB) && deepCompareKeysImpl(objA, objB, keysA);\n    }\n}\nexports.deepCompareKeys = deepCompareKeys;\n/**\n * Returns a descriptive object for each key whose values are deeply unequal\n * between two provided objects. Useful for debugging shouldComponentUpdate.\n */\nfunction getDeepUnequalKeyValues(objA, objB, keys) {\n    if (objA === void 0) { objA = {}; }\n    if (objB === void 0) { objB = {}; }\n    var filteredKeys = keys == null ? unionKeys(objA, objB) : keys;\n    return getUnequalKeyValues(objA, objB, filteredKeys, function (a, b, key) {\n        return deepCompareKeys(a, b, [key]);\n    });\n}\nexports.getDeepUnequalKeyValues = getDeepUnequalKeyValues;\n// Private helpers\n// ===============\n/**\n * Partial shallow comparison between objects using the given list of keys.\n */\nfunction shallowCompareKeysImpl(objA, objB, keys) {\n    return filterKeys(objA, objB, keys).every(function (key) {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && objA[key] === objB[key];\n    });\n}\n/**\n * Partial deep comparison between objects using the given list of keys.\n */\nfunction deepCompareKeysImpl(objA, objB, keys) {\n    return keys.every(function (key) {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && deepCompareKeys(objA[key], objB[key]);\n    });\n}\nfunction isSimplePrimitiveType(value) {\n    return typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\";\n}\nfunction filterKeys(objA, objB, keys) {\n    if (isAllowlist(keys)) {\n        return keys.include;\n    }\n    else if (isDenylist(keys)) {\n        var keysA = Object.keys(objA);\n        var keysB = Object.keys(objB);\n        // merge keys from both objects into a big set for quick access\n        var keySet_1 = arrayToObject(keysA.concat(keysB));\n        // delete denied keys from the key set\n        keys.exclude.forEach(function (key) { return delete keySet_1[key]; });\n        // return the remaining keys as an array\n        return Object.keys(keySet_1);\n    }\n    return [];\n}\nfunction isAllowlist(keys) {\n    return keys != null && keys.include != null;\n}\nfunction isDenylist(keys) {\n    return keys != null && keys.exclude != null;\n}\nfunction arrayToObject(arr) {\n    return arr.reduce(function (obj, element) {\n        obj[element] = true;\n        return obj;\n    }, {});\n}\nfunction getUnequalKeyValues(objA, objB, keys, compareFn) {\n    var unequalKeys = keys.filter(function (key) { return !compareFn(objA, objB, key); });\n    var unequalKeyValues = unequalKeys.map(function (key) { return ({\n        key: key,\n        valueA: objA[key],\n        valueB: objB[key],\n    }); });\n    return unequalKeyValues;\n}\nfunction unionKeys(objA, objB) {\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n    var concatKeys = keysA.concat(keysB);\n    var keySet = arrayToObject(concatKeys);\n    return Object.keys(keySet);\n}\n//# sourceMappingURL=compareUtils.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["deepCompareKeys","key","__esModule","shallowCompareKeys","value","include","getDeepUnequalKeyValues","valueA","valueB","arraysEqual"]],"~:compiled-at",1630405504895,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$blueprintjs$core$lib$cjs$common$utils$compareUtils.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@blueprintjs/core/lib/cjs/common/utils/compareUtils.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$blueprintjs$core$lib$cjs$common$utils$compareUtils\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n/*\\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.getDeepUnequalKeyValues = exports.deepCompareKeys = exports.shallowCompareKeys = exports.arraysEqual = void 0;\\n/* eslint-enable deprecation/deprecation */\\n/**\\n * Returns true if the arrays are equal. Elements will be shallowly compared by\\n * default, or they will be compared using the custom `compare` function if one\\n * is provided.\\n */\\nfunction arraysEqual(arrA, arrB, compare) {\\n    if (compare === void 0) { compare = function (a, b) { return a === b; }; }\\n    // treat `null` and `undefined` as the same\\n    if (arrA == null && arrB == null) {\\n        return true;\\n    }\\n    else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\\n        return false;\\n    }\\n    else {\\n        return arrA.every(function (a, i) { return compare(a, arrB[i]); });\\n    }\\n}\\nexports.arraysEqual = arraysEqual;\\n/**\\n * Shallow comparison between objects. If `keys` is provided, just that subset\\n * of keys will be compared; otherwise, all keys will be compared.\\n *\\n * @returns true if items are equal.\\n */\\nfunction shallowCompareKeys(objA, objB, keys) {\\n    // treat `null` and `undefined` as the same\\n    if (objA == null && objB == null) {\\n        return true;\\n    }\\n    else if (objA == null || objB == null) {\\n        return false;\\n    }\\n    else if (Array.isArray(objA) || Array.isArray(objB)) {\\n        return false;\\n    }\\n    else if (keys != null) {\\n        return shallowCompareKeysImpl(objA, objB, keys);\\n    }\\n    else {\\n        // shallowly compare all keys from both objects\\n        var keysA = Object.keys(objA);\\n        var keysB = Object.keys(objB);\\n        return (shallowCompareKeysImpl(objA, objB, { include: keysA }) &&\\n            shallowCompareKeysImpl(objA, objB, { include: keysB }));\\n    }\\n}\\nexports.shallowCompareKeys = shallowCompareKeys;\\n/**\\n * Deep comparison between objects. If `keys` is provided, just that subset of\\n * keys will be compared; otherwise, all keys will be compared.\\n *\\n * @returns true if items are equal.\\n */\\nfunction deepCompareKeys(objA, objB, keys) {\\n    if (objA === objB) {\\n        return true;\\n    }\\n    else if (objA == null && objB == null) {\\n        // treat `null` and `undefined` as the same\\n        return true;\\n    }\\n    else if (objA == null || objB == null) {\\n        return false;\\n    }\\n    else if (Array.isArray(objA) || Array.isArray(objB)) {\\n        return arraysEqual(objA, objB, deepCompareKeys);\\n    }\\n    else if (isSimplePrimitiveType(objA) || isSimplePrimitiveType(objB)) {\\n        return objA === objB;\\n    }\\n    else if (keys != null) {\\n        return deepCompareKeysImpl(objA, objB, keys);\\n    }\\n    else if (objA.constructor !== objB.constructor) {\\n        return false;\\n    }\\n    else {\\n        var keysA = Object.keys(objA);\\n        var keysB = Object.keys(objB);\\n        if (keysA == null || keysB == null) {\\n            return false;\\n        }\\n        if (keysA.length === 0 && keysB.length === 0) {\\n            return true;\\n        }\\n        return arraysEqual(keysA, keysB) && deepCompareKeysImpl(objA, objB, keysA);\\n    }\\n}\\nexports.deepCompareKeys = deepCompareKeys;\\n/**\\n * Returns a descriptive object for each key whose values are deeply unequal\\n * between two provided objects. Useful for debugging shouldComponentUpdate.\\n */\\nfunction getDeepUnequalKeyValues(objA, objB, keys) {\\n    if (objA === void 0) { objA = {}; }\\n    if (objB === void 0) { objB = {}; }\\n    var filteredKeys = keys == null ? unionKeys(objA, objB) : keys;\\n    return getUnequalKeyValues(objA, objB, filteredKeys, function (a, b, key) {\\n        return deepCompareKeys(a, b, [key]);\\n    });\\n}\\nexports.getDeepUnequalKeyValues = getDeepUnequalKeyValues;\\n// Private helpers\\n// ===============\\n/**\\n * Partial shallow comparison between objects using the given list of keys.\\n */\\nfunction shallowCompareKeysImpl(objA, objB, keys) {\\n    return filterKeys(objA, objB, keys).every(function (key) {\\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && objA[key] === objB[key];\\n    });\\n}\\n/**\\n * Partial deep comparison between objects using the given list of keys.\\n */\\nfunction deepCompareKeysImpl(objA, objB, keys) {\\n    return keys.every(function (key) {\\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && deepCompareKeys(objA[key], objB[key]);\\n    });\\n}\\nfunction isSimplePrimitiveType(value) {\\n    return typeof value === \\\"number\\\" || typeof value === \\\"string\\\" || typeof value === \\\"boolean\\\";\\n}\\nfunction filterKeys(objA, objB, keys) {\\n    if (isAllowlist(keys)) {\\n        return keys.include;\\n    }\\n    else if (isDenylist(keys)) {\\n        var keysA = Object.keys(objA);\\n        var keysB = Object.keys(objB);\\n        // merge keys from both objects into a big set for quick access\\n        var keySet_1 = arrayToObject(keysA.concat(keysB));\\n        // delete denied keys from the key set\\n        keys.exclude.forEach(function (key) { return delete keySet_1[key]; });\\n        // return the remaining keys as an array\\n        return Object.keys(keySet_1);\\n    }\\n    return [];\\n}\\nfunction isAllowlist(keys) {\\n    return keys != null && keys.include != null;\\n}\\nfunction isDenylist(keys) {\\n    return keys != null && keys.exclude != null;\\n}\\nfunction arrayToObject(arr) {\\n    return arr.reduce(function (obj, element) {\\n        obj[element] = true;\\n        return obj;\\n    }, {});\\n}\\nfunction getUnequalKeyValues(objA, objB, keys, compareFn) {\\n    var unequalKeys = keys.filter(function (key) { return !compareFn(objA, objB, key); });\\n    var unequalKeyValues = unequalKeys.map(function (key) { return ({\\n        key: key,\\n        valueA: objA[key],\\n        valueB: objB[key],\\n    }); });\\n    return unequalKeyValues;\\n}\\nfunction unionKeys(objA, objB) {\\n    var keysA = Object.keys(objA);\\n    var keysB = Object.keys(objB);\\n    var concatKeys = keysA.concat(keysB);\\n    var keySet = arrayToObject(concatKeys);\\n    return Object.keys(keySet);\\n}\\n//# sourceMappingURL=compareUtils.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"arraysEqual\",\"arrA\",\"arrB\",\"compare\",\"a\",\"b\",\"length\",\"every\",\"i\",\"deepCompareKeys\",\"objA\",\"objB\",\"keys\",\"Array\",\"isArray\",\"isSimplePrimitiveType\",\"deepCompareKeysImpl\",\"constructor\",\"keysA\",\"Object\",\"keysB\",\"shallowCompareKeysImpl\",\"filterKeys\",\"key\",\"hasOwnProperty\",\"value\",\"include\",\"exclude\",\"keySet_1\",\"arrayToObject\",\"concat\",\"forEach\",\"arr\",\"reduce\",\"obj\",\"element\",\"getUnequalKeyValues\",\"compareFn\",\"filter\",\"unequalKeys\",\"map\",\"unequalKeyValues\",\"valueA\",\"valueB\",\"unionKeys\",\"concatKeys\",\"keySet\",\"defineProperty\",\"getDeepUnequalKeyValues\",\"shallowCompareKeys\",\"filteredKeys\"]\n}\n"]