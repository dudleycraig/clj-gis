["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/nodes/materials/nodes/MeshStandardNode.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$nodes$materials$nodes$MeshStandardNode=function(global,require,module,exports){function MeshStandardNode(){_StandardNode.StandardNode.call(this);this.properties={color:new _three.Color(16777215),roughness:.5,metalness:.5,normalScale:new _three.Vector2(1,1)};this.inputs={color:new _PropertyNode.PropertyNode(this.properties,\"color\",\"c\"),roughness:new _PropertyNode.PropertyNode(this.properties,\"roughness\",\"f\"),metalness:new _PropertyNode.PropertyNode(this.properties,\n\"metalness\",\"f\"),normalScale:new _PropertyNode.PropertyNode(this.properties,\"normalScale\",\"v2\")}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.MeshStandardNode=MeshStandardNode;var _three=require(\"module$node_modules$three$build$three_module\"),_StandardNode=require(\"module$node_modules$three_stdlib$nodes$materials$nodes$StandardNode\"),_PropertyNode=require(\"module$node_modules$three_stdlib$nodes$inputs$PropertyNode\"),_OperatorNode=require(\"module$node_modules$three_stdlib$nodes$math$OperatorNode\"),\n_SwitchNode=require(\"module$node_modules$three_stdlib$nodes$utils$SwitchNode\"),_NormalMapNode=require(\"module$node_modules$three_stdlib$nodes$misc$NormalMapNode\");MeshStandardNode.prototype=Object.create(_StandardNode.StandardNode.prototype);MeshStandardNode.prototype.constructor=MeshStandardNode;MeshStandardNode.prototype.nodeType=\"MeshStandard\";MeshStandardNode.prototype.build=function(builder){var props=this.properties,inputs=this.inputs;if(builder.isShader(\"fragment\")){var color=builder.findNode(props.color,\ninputs.color),map=builder.resolve(props.map);this.color=map?new _OperatorNode.OperatorNode(color,map,_OperatorNode.OperatorNode.MUL):color;color=builder.findNode(props.roughness,inputs.roughness);this.roughness=(map=builder.resolve(props.roughnessMap))?new _OperatorNode.OperatorNode(color,new _SwitchNode.SwitchNode(map,\"g\"),_OperatorNode.OperatorNode.MUL):color;color=builder.findNode(props.metalness,inputs.metalness);this.metalness=(map=builder.resolve(props.metalnessMap))?new _OperatorNode.OperatorNode(color,\nnew _SwitchNode.SwitchNode(map,\"b\"),_OperatorNode.OperatorNode.MUL):color;props.normalMap?(this.normal=new _NormalMapNode.NormalMapNode(builder.resolve(props.normalMap)),this.normal.scale=builder.findNode(props.normalScale,inputs.normalScale)):this.normal=void 0;this.environment=builder.resolve(props.envMap)}return _StandardNode.StandardNode.prototype.build.call(this,builder)};MeshStandardNode.prototype.toJSON=function(meta){var data=this.getJSONNode(meta);data||(data=this.createJSONNode(meta),console.warn(\".toJSON not implemented in\",\nthis));return data}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$nodes$materials$nodes$MeshStandardNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MeshStandardNode = MeshStandardNode;\n\nvar _three = require(\"three\");\n\nvar _StandardNode = require(\"./StandardNode.js\");\n\nvar _PropertyNode = require(\"../../inputs/PropertyNode.js\");\n\nvar _OperatorNode = require(\"../../math/OperatorNode.js\");\n\nvar _SwitchNode = require(\"../../utils/SwitchNode.js\");\n\nvar _NormalMapNode = require(\"../../misc/NormalMapNode.js\");\n\nfunction MeshStandardNode() {\n  _StandardNode.StandardNode.call(this);\n\n  this.properties = {\n    color: new _three.Color(0xffffff),\n    roughness: 0.5,\n    metalness: 0.5,\n    normalScale: new _three.Vector2(1, 1)\n  };\n  this.inputs = {\n    color: new _PropertyNode.PropertyNode(this.properties, 'color', 'c'),\n    roughness: new _PropertyNode.PropertyNode(this.properties, 'roughness', 'f'),\n    metalness: new _PropertyNode.PropertyNode(this.properties, 'metalness', 'f'),\n    normalScale: new _PropertyNode.PropertyNode(this.properties, 'normalScale', 'v2')\n  };\n}\n\nMeshStandardNode.prototype = Object.create(_StandardNode.StandardNode.prototype);\nMeshStandardNode.prototype.constructor = MeshStandardNode;\nMeshStandardNode.prototype.nodeType = 'MeshStandard';\n\nMeshStandardNode.prototype.build = function (builder) {\n  var props = this.properties,\n      inputs = this.inputs;\n\n  if (builder.isShader('fragment')) {\n    // slots\n    // * color\n    // * map\n    var color = builder.findNode(props.color, inputs.color),\n        map = builder.resolve(props.map);\n    this.color = map ? new _OperatorNode.OperatorNode(color, map, _OperatorNode.OperatorNode.MUL) : color; // slots\n    // * roughness\n    // * roughnessMap\n\n    var roughness = builder.findNode(props.roughness, inputs.roughness),\n        roughnessMap = builder.resolve(props.roughnessMap);\n    this.roughness = roughnessMap ? new _OperatorNode.OperatorNode(roughness, new _SwitchNode.SwitchNode(roughnessMap, 'g'), _OperatorNode.OperatorNode.MUL) : roughness; // slots\n    // * metalness\n    // * metalnessMap\n\n    var metalness = builder.findNode(props.metalness, inputs.metalness),\n        metalnessMap = builder.resolve(props.metalnessMap);\n    this.metalness = metalnessMap ? new _OperatorNode.OperatorNode(metalness, new _SwitchNode.SwitchNode(metalnessMap, 'b'), _OperatorNode.OperatorNode.MUL) : metalness; // slots\n    // * normalMap\n    // * normalScale\n\n    if (props.normalMap) {\n      this.normal = new _NormalMapNode.NormalMapNode(builder.resolve(props.normalMap));\n      this.normal.scale = builder.findNode(props.normalScale, inputs.normalScale);\n    } else {\n      this.normal = undefined;\n    } // slots\n    // * envMap\n\n\n    this.environment = builder.resolve(props.envMap);\n  } // build code\n\n\n  return _StandardNode.StandardNode.prototype.build.call(this, builder);\n};\n\nMeshStandardNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    console.warn('.toJSON not implemented in', this);\n  }\n\n  return data;\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js","~$module$node_modules$three_stdlib$nodes$inputs$PropertyNode","~$module$node_modules$three_stdlib$nodes$utils$SwitchNode","~$module$node_modules$three_stdlib$nodes$misc$NormalMapNode","~$module$node_modules$three_stdlib$nodes$math$OperatorNode","~$module$node_modules$three_stdlib$nodes$materials$nodes$StandardNode"]],"~:properties",["^5",["properties","prototype","scale","__esModule","normal","nodeType","value","build","environment","inputs","metalness","MeshStandardNode","roughness","color","normalScale","constructor","toJSON"]],"~:compiled-at",1630917515246,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$nodes$materials$nodes$MeshStandardNode.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/nodes/materials/nodes/MeshStandardNode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$nodes$materials$nodes$MeshStandardNode\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.MeshStandardNode = MeshStandardNode;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _StandardNode = require(\\\"./StandardNode.js\\\");\\n\\nvar _PropertyNode = require(\\\"../../inputs/PropertyNode.js\\\");\\n\\nvar _OperatorNode = require(\\\"../../math/OperatorNode.js\\\");\\n\\nvar _SwitchNode = require(\\\"../../utils/SwitchNode.js\\\");\\n\\nvar _NormalMapNode = require(\\\"../../misc/NormalMapNode.js\\\");\\n\\nfunction MeshStandardNode() {\\n  _StandardNode.StandardNode.call(this);\\n\\n  this.properties = {\\n    color: new _three.Color(0xffffff),\\n    roughness: 0.5,\\n    metalness: 0.5,\\n    normalScale: new _three.Vector2(1, 1)\\n  };\\n  this.inputs = {\\n    color: new _PropertyNode.PropertyNode(this.properties, 'color', 'c'),\\n    roughness: new _PropertyNode.PropertyNode(this.properties, 'roughness', 'f'),\\n    metalness: new _PropertyNode.PropertyNode(this.properties, 'metalness', 'f'),\\n    normalScale: new _PropertyNode.PropertyNode(this.properties, 'normalScale', 'v2')\\n  };\\n}\\n\\nMeshStandardNode.prototype = Object.create(_StandardNode.StandardNode.prototype);\\nMeshStandardNode.prototype.constructor = MeshStandardNode;\\nMeshStandardNode.prototype.nodeType = 'MeshStandard';\\n\\nMeshStandardNode.prototype.build = function (builder) {\\n  var props = this.properties,\\n      inputs = this.inputs;\\n\\n  if (builder.isShader('fragment')) {\\n    // slots\\n    // * color\\n    // * map\\n    var color = builder.findNode(props.color, inputs.color),\\n        map = builder.resolve(props.map);\\n    this.color = map ? new _OperatorNode.OperatorNode(color, map, _OperatorNode.OperatorNode.MUL) : color; // slots\\n    // * roughness\\n    // * roughnessMap\\n\\n    var roughness = builder.findNode(props.roughness, inputs.roughness),\\n        roughnessMap = builder.resolve(props.roughnessMap);\\n    this.roughness = roughnessMap ? new _OperatorNode.OperatorNode(roughness, new _SwitchNode.SwitchNode(roughnessMap, 'g'), _OperatorNode.OperatorNode.MUL) : roughness; // slots\\n    // * metalness\\n    // * metalnessMap\\n\\n    var metalness = builder.findNode(props.metalness, inputs.metalness),\\n        metalnessMap = builder.resolve(props.metalnessMap);\\n    this.metalness = metalnessMap ? new _OperatorNode.OperatorNode(metalness, new _SwitchNode.SwitchNode(metalnessMap, 'b'), _OperatorNode.OperatorNode.MUL) : metalness; // slots\\n    // * normalMap\\n    // * normalScale\\n\\n    if (props.normalMap) {\\n      this.normal = new _NormalMapNode.NormalMapNode(builder.resolve(props.normalMap));\\n      this.normal.scale = builder.findNode(props.normalScale, inputs.normalScale);\\n    } else {\\n      this.normal = undefined;\\n    } // slots\\n    // * envMap\\n\\n\\n    this.environment = builder.resolve(props.envMap);\\n  } // build code\\n\\n\\n  return _StandardNode.StandardNode.prototype.build.call(this, builder);\\n};\\n\\nMeshStandardNode.prototype.toJSON = function (meta) {\\n  var data = this.getJSONNode(meta);\\n\\n  if (!data) {\\n    data = this.createJSONNode(meta);\\n    console.warn('.toJSON not implemented in', this);\\n  }\\n\\n  return data;\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"MeshStandardNode\",\"_StandardNode\",\"StandardNode\",\"call\",\"properties\",\"color\",\"_three\",\"Color\",\"roughness\",\"metalness\",\"normalScale\",\"Vector2\",\"inputs\",\"_PropertyNode\",\"PropertyNode\",\"Object\",\"defineProperty\",\"value\",\"_OperatorNode\",\"_SwitchNode\",\"_NormalMapNode\",\"prototype\",\"create\",\"constructor\",\"nodeType\",\"build\",\"MeshStandardNode.prototype.build\",\"builder\",\"props\",\"isShader\",\"findNode\",\"map\",\"resolve\",\"OperatorNode\",\"MUL\",\"roughnessMap\",\"SwitchNode\",\"metalnessMap\",\"normalMap\",\"normal\",\"NormalMapNode\",\"scale\",\"undefined\",\"environment\",\"envMap\",\"toJSON\",\"MeshStandardNode.prototype.toJSON\",\"meta\",\"data\",\"getJSONNode\",\"createJSONNode\",\"console\",\"warn\"]\n}\n"]