["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/postprocessing/SSAOPass.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$postprocessing$SSAOPass=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.SSAOPass=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_Pass=require(\"module$node_modules$three_stdlib$postprocessing$Pass\"),_SimplexNoise=require(\"module$node_modules$three_stdlib$math$SimplexNoise\"),_SSAOShader=require(\"module$node_modules$three_stdlib$shaders$SSAOShader\"),_CopyShader=require(\"module$node_modules$three_stdlib$shaders$CopyShader\"),\nSSAOPass=function(scene,camera,width,height){this.width=void 0!==width?width:512;this.height=void 0!==height?height:512;this.clear=!0;this.camera=camera;this.scene=scene;this.kernelRadius=8;this.kernelSize=32;this.kernel=[];this.noiseTexture=null;this.output=0;this.minDistance=.005;this.maxDistance=.1;this._visibilityCache=new Map;this.generateSampleKernel();this.generateRandomKernelRotations();scene=new _three.DepthTexture;scene.type=_three.UnsignedShortType;this.beautyRenderTarget=new _three.WebGLRenderTarget(this.width,\nthis.height,{minFilter:_three.LinearFilter,magFilter:_three.LinearFilter,format:_three.RGBAFormat});this.normalRenderTarget=new _three.WebGLRenderTarget(this.width,this.height,{minFilter:_three.NearestFilter,magFilter:_three.NearestFilter,format:_three.RGBAFormat,depthTexture:scene});this.ssaoRenderTarget=new _three.WebGLRenderTarget(this.width,this.height,{minFilter:_three.LinearFilter,magFilter:_three.LinearFilter,format:_three.RGBAFormat});this.blurRenderTarget=this.ssaoRenderTarget.clone();void 0===\n_SSAOShader.SSAOShader&&console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");this.ssaoMaterial=new _three.ShaderMaterial({defines:Object.assign({},_SSAOShader.SSAOShader.defines),uniforms:_three.UniformsUtils.clone(_SSAOShader.SSAOShader.uniforms),vertexShader:_SSAOShader.SSAOShader.vertexShader,fragmentShader:_SSAOShader.SSAOShader.fragmentShader,blending:_three.NoBlending});this.ssaoMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture;this.ssaoMaterial.uniforms.tNormal.value=\nthis.normalRenderTarget.texture;this.ssaoMaterial.uniforms.tDepth.value=this.normalRenderTarget.depthTexture;this.ssaoMaterial.uniforms.tNoise.value=this.noiseTexture;this.ssaoMaterial.uniforms.kernel.value=this.kernel;this.ssaoMaterial.uniforms.cameraNear.value=this.camera.near;this.ssaoMaterial.uniforms.cameraFar.value=this.camera.far;this.ssaoMaterial.uniforms.resolution.value.set(this.width,this.height);this.ssaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix);\nthis.ssaoMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse);this.normalMaterial=new _three.MeshNormalMaterial;this.normalMaterial.blending=_three.NoBlending;this.blurMaterial=new _three.ShaderMaterial({defines:Object.assign({},_SSAOShader.SSAOBlurShader.defines),uniforms:_three.UniformsUtils.clone(_SSAOShader.SSAOBlurShader.uniforms),vertexShader:_SSAOShader.SSAOBlurShader.vertexShader,fragmentShader:_SSAOShader.SSAOBlurShader.fragmentShader});this.blurMaterial.uniforms.tDiffuse.value=\nthis.ssaoRenderTarget.texture;this.blurMaterial.uniforms.resolution.value.set(this.width,this.height);this.depthRenderMaterial=new _three.ShaderMaterial({defines:Object.assign({},_SSAOShader.SSAODepthShader.defines),uniforms:_three.UniformsUtils.clone(_SSAOShader.SSAODepthShader.uniforms),vertexShader:_SSAOShader.SSAODepthShader.vertexShader,fragmentShader:_SSAOShader.SSAODepthShader.fragmentShader,blending:_three.NoBlending});this.depthRenderMaterial.uniforms.tDepth.value=this.normalRenderTarget.depthTexture;\nthis.depthRenderMaterial.uniforms.cameraNear.value=this.camera.near;this.depthRenderMaterial.uniforms.cameraFar.value=this.camera.far;this.copyMaterial=new _three.ShaderMaterial({uniforms:_three.UniformsUtils.clone(_CopyShader.CopyShader.uniforms),vertexShader:_CopyShader.CopyShader.vertexShader,fragmentShader:_CopyShader.CopyShader.fragmentShader,transparent:!0,depthTest:!1,depthWrite:!1,blendSrc:_three.DstColorFactor,blendDst:_three.ZeroFactor,blendEquation:_three.AddEquation,blendSrcAlpha:_three.DstAlphaFactor,\nblendDstAlpha:_three.ZeroFactor,blendEquationAlpha:_three.AddEquation});this.fsQuad=new _Pass.FullScreenQuad(null);this.originalClearColor=new _three.Color};exports.SSAOPass=SSAOPass;SSAOPass.prototype=Object.assign(Object.create(_Pass.Pass.prototype),{constructor:SSAOPass,dispose:function(){this.beautyRenderTarget.dispose();this.normalRenderTarget.dispose();this.ssaoRenderTarget.dispose();this.blurRenderTarget.dispose();this.normalMaterial.dispose();this.blurMaterial.dispose();this.copyMaterial.dispose();\nthis.depthRenderMaterial.dispose();this.fsQuad.dispose()},render:function(renderer,writeBuffer){renderer.setRenderTarget(this.beautyRenderTarget);renderer.clear();renderer.render(this.scene,this.camera);this.overrideVisibility();this.renderOverride(renderer,this.normalMaterial,this.normalRenderTarget,7829503,1);this.restoreVisibility();this.ssaoMaterial.uniforms.kernelRadius.value=this.kernelRadius;this.ssaoMaterial.uniforms.minDistance.value=this.minDistance;this.ssaoMaterial.uniforms.maxDistance.value=\nthis.maxDistance;this.renderPass(renderer,this.ssaoMaterial,this.ssaoRenderTarget);this.renderPass(renderer,this.blurMaterial,this.blurRenderTarget);switch(this.output){case SSAOPass.OUTPUT.SSAO:this.copyMaterial.uniforms.tDiffuse.value=this.ssaoRenderTarget.texture;this.copyMaterial.blending=_three.NoBlending;this.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer);break;case SSAOPass.OUTPUT.Blur:this.copyMaterial.uniforms.tDiffuse.value=this.blurRenderTarget.texture;this.copyMaterial.blending=\n_three.NoBlending;this.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer);break;case SSAOPass.OUTPUT.Beauty:this.copyMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture;this.copyMaterial.blending=_three.NoBlending;this.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer);break;case SSAOPass.OUTPUT.Depth:this.renderPass(renderer,this.depthRenderMaterial,this.renderToScreen?null:writeBuffer);break;case SSAOPass.OUTPUT.Normal:this.copyMaterial.uniforms.tDiffuse.value=\nthis.normalRenderTarget.texture;this.copyMaterial.blending=_three.NoBlending;this.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer);break;case SSAOPass.OUTPUT.Default:this.copyMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture;this.copyMaterial.blending=_three.NoBlending;this.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer);this.copyMaterial.uniforms.tDiffuse.value=this.blurRenderTarget.texture;this.copyMaterial.blending=_three.CustomBlending;\nthis.renderPass(renderer,this.copyMaterial,this.renderToScreen?null:writeBuffer);break;default:console.warn(\"THREE.SSAOPass: Unknown output type.\")}},renderPass:function(renderer,passMaterial,renderTarget,clearColor,clearAlpha){renderer.getClearColor(this.originalClearColor);var originalClearAlpha=renderer.getClearAlpha(),originalAutoClear=renderer.autoClear;renderer.setRenderTarget(renderTarget);renderer.autoClear=!1;void 0!==clearColor&&null!==clearColor&&(renderer.setClearColor(clearColor),renderer.setClearAlpha(clearAlpha||\n0),renderer.clear());this.fsQuad.material=passMaterial;this.fsQuad.render(renderer);renderer.autoClear=originalAutoClear;renderer.setClearColor(this.originalClearColor);renderer.setClearAlpha(originalClearAlpha)},renderOverride:function(renderer,overrideMaterial,renderTarget,clearColor,clearAlpha){renderer.getClearColor(this.originalClearColor);var originalClearAlpha=renderer.getClearAlpha(),originalAutoClear=renderer.autoClear;renderer.setRenderTarget(renderTarget);renderer.autoClear=!1;clearColor=\noverrideMaterial.clearColor||clearColor;clearAlpha=overrideMaterial.clearAlpha||clearAlpha;void 0!==clearColor&&null!==clearColor&&(renderer.setClearColor(clearColor),renderer.setClearAlpha(clearAlpha||0),renderer.clear());this.scene.overrideMaterial=overrideMaterial;renderer.render(this.scene,this.camera);this.scene.overrideMaterial=null;renderer.autoClear=originalAutoClear;renderer.setClearColor(this.originalClearColor);renderer.setClearAlpha(originalClearAlpha)},setSize:function(width,height){this.width=\nwidth;this.height=height;this.beautyRenderTarget.setSize(width,height);this.ssaoRenderTarget.setSize(width,height);this.normalRenderTarget.setSize(width,height);this.blurRenderTarget.setSize(width,height);this.ssaoMaterial.uniforms.resolution.value.set(width,height);this.ssaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix);this.ssaoMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse);this.blurMaterial.uniforms.resolution.value.set(width,\nheight)},generateSampleKernel:function(){for(var kernelSize=this.kernelSize,kernel=this.kernel,i=0;i<kernelSize;i++){var sample=new _three.Vector3;sample.x=2*Math.random()-1;sample.y=2*Math.random()-1;sample.z=Math.random();sample.normalize();var scale=i/kernelSize;scale=_three.MathUtils.lerp(.1,1,scale*scale);sample.multiplyScalar(scale);kernel.push(sample)}},generateRandomKernelRotations:function(){void 0===_SimplexNoise.SimplexNoise&&console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\nfor(var simplex=new _SimplexNoise.SimplexNoise,data=new Float32Array(64),i=0;16>i;i++){var stride=4*i,noise=simplex.noise3d(2*Math.random()-1,2*Math.random()-1,0);data[stride]=noise;data[stride+1]=noise;data[stride+2]=noise;data[stride+3]=1}this.noiseTexture=new _three.DataTexture(data,4,4,_three.RGBAFormat,_three.FloatType);this.noiseTexture.wrapS=_three.RepeatWrapping;this.noiseTexture.wrapT=_three.RepeatWrapping},overrideVisibility:function(){var cache=this._visibilityCache;this.scene.traverse(function(object){cache.set(object,\nobject.visible);if(object.isPoints||object.isLine)object.visible=!1})},restoreVisibility:function(){var cache=this._visibilityCache;this.scene.traverse(function(object){var visible=cache.get(object);object.visible=visible});cache.clear()}});SSAOPass.OUTPUT={Default:0,SSAO:1,Blur:2,Beauty:3,Depth:4,Normal:5}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$postprocessing$SSAOPass\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SSAOPass = void 0;\n\nvar _three = require(\"three\");\n\nvar _Pass = require(\"./Pass.js\");\n\nvar _SimplexNoise = require(\"../math/SimplexNoise.js\");\n\nvar _SSAOShader = require(\"../shaders/SSAOShader.js\");\n\nvar _CopyShader = require(\"../shaders/CopyShader.js\");\n\nvar SSAOPass = function SSAOPass(scene, camera, width, height) {\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.camera = camera;\n  this.scene = scene;\n  this.kernelRadius = 8;\n  this.kernelSize = 32;\n  this.kernel = [];\n  this.noiseTexture = null;\n  this.output = 0;\n  this.minDistance = 0.005;\n  this.maxDistance = 0.1;\n  this._visibilityCache = new Map(); //\n\n  this.generateSampleKernel();\n  this.generateRandomKernelRotations(); // beauty render target\n\n  var depthTexture = new _three.DepthTexture();\n  depthTexture.type = _three.UnsignedShortType;\n  this.beautyRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\n    minFilter: _three.LinearFilter,\n    magFilter: _three.LinearFilter,\n    format: _three.RGBAFormat\n  }); // normal render target with depth buffer\n\n  this.normalRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\n    minFilter: _three.NearestFilter,\n    magFilter: _three.NearestFilter,\n    format: _three.RGBAFormat,\n    depthTexture: depthTexture\n  }); // ssao render target\n\n  this.ssaoRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\n    minFilter: _three.LinearFilter,\n    magFilter: _three.LinearFilter,\n    format: _three.RGBAFormat\n  });\n  this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n  if (_SSAOShader.SSAOShader === undefined) {\n    console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n  }\n\n  this.ssaoMaterial = new _three.ShaderMaterial({\n    defines: Object.assign({}, _SSAOShader.SSAOShader.defines),\n    uniforms: _three.UniformsUtils.clone(_SSAOShader.SSAOShader.uniforms),\n    vertexShader: _SSAOShader.SSAOShader.vertexShader,\n    fragmentShader: _SSAOShader.SSAOShader.fragmentShader,\n    blending: _three.NoBlending\n  });\n  this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n  this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n  this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new _three.MeshNormalMaterial();\n  this.normalMaterial.blending = _three.NoBlending; // blur material\n\n  this.blurMaterial = new _three.ShaderMaterial({\n    defines: Object.assign({}, _SSAOShader.SSAOBlurShader.defines),\n    uniforms: _three.UniformsUtils.clone(_SSAOShader.SSAOBlurShader.uniforms),\n    vertexShader: _SSAOShader.SSAOBlurShader.vertexShader,\n    fragmentShader: _SSAOShader.SSAOBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n  this.depthRenderMaterial = new _three.ShaderMaterial({\n    defines: Object.assign({}, _SSAOShader.SSAODepthShader.defines),\n    uniforms: _three.UniformsUtils.clone(_SSAOShader.SSAODepthShader.uniforms),\n    vertexShader: _SSAOShader.SSAODepthShader.vertexShader,\n    fragmentShader: _SSAOShader.SSAODepthShader.fragmentShader,\n    blending: _three.NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new _three.ShaderMaterial({\n    uniforms: _three.UniformsUtils.clone(_CopyShader.CopyShader.uniforms),\n    vertexShader: _CopyShader.CopyShader.vertexShader,\n    fragmentShader: _CopyShader.CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: _three.DstColorFactor,\n    blendDst: _three.ZeroFactor,\n    blendEquation: _three.AddEquation,\n    blendSrcAlpha: _three.DstAlphaFactor,\n    blendDstAlpha: _three.ZeroFactor,\n    blendEquationAlpha: _three.AddEquation\n  });\n  this.fsQuad = new _Pass.FullScreenQuad(null);\n  this.originalClearColor = new _three.Color();\n};\n\nexports.SSAOPass = SSAOPass;\nSSAOPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\n  constructor: SSAOPass,\n  dispose: function dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = _three.NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = _three.NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = _three.NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = _three.NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = _three.NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = _three.CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  },\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  },\n  generateSampleKernel: function generateSampleKernel() {\n    var kernelSize = this.kernelSize;\n    var kernel = this.kernel;\n\n    for (var i = 0; i < kernelSize; i++) {\n      var sample = new _three.Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      var scale = i / kernelSize;\n      scale = _three.MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  },\n  generateRandomKernelRotations: function generateRandomKernelRotations() {\n    var width = 4,\n        height = 4;\n\n    if (_SimplexNoise.SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    var simplex = new _SimplexNoise.SimplexNoise();\n    var size = width * height;\n    var data = new Float32Array(size * 4);\n\n    for (var i = 0; i < size; i++) {\n      var stride = i * 4;\n      var x = Math.random() * 2 - 1;\n      var y = Math.random() * 2 - 1;\n      var z = 0;\n      var noise = simplex.noise3d(x, y, z);\n      data[stride] = noise;\n      data[stride + 1] = noise;\n      data[stride + 2] = noise;\n      data[stride + 3] = 1;\n    }\n\n    this.noiseTexture = new _three.DataTexture(data, width, height, _three.RGBAFormat, _three.FloatType);\n    this.noiseTexture.wrapS = _three.RepeatWrapping;\n    this.noiseTexture.wrapT = _three.RepeatWrapping;\n  },\n  overrideVisibility: function overrideVisibility() {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  },\n  restoreVisibility: function restoreVisibility() {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      var visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n});\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_stdlib$shaders$CopyShader","~$shadow.js","~$module$node_modules$three_stdlib$postprocessing$Pass","~$module$node_modules$three_stdlib$shaders$SSAOShader","~$module$node_modules$three_stdlib$math$SimplexNoise"]],"~:properties",["^5",["fragmentShader","SSAOPass","kernel","z","wrapS","copyMaterial","noiseTexture","width","depthTest","Default","output","blending","_visibilityCache","prototype","height","blendEquation","transparent","ssaoMaterial","generateRandomKernelRotations","SSAO","generateSampleKernel","kernelRadius","x","__esModule","overrideMaterial","blendDstAlpha","dispose","OUTPUT","camera","defines","maxDistance","renderPass","vertexShader","minDistance","value","blurMaterial","overrideVisibility","blendSrcAlpha","visible","ssaoRenderTarget","renderOverride","fsQuad","beautyRenderTarget","magFilter","blendDst","autoClear","depthRenderMaterial","type","restoreVisibility","render","y","wrapT","blendSrc","setSize","Normal","depthWrite","originalClearColor","blurRenderTarget","normalRenderTarget","clear","uniforms","Blur","normalMaterial","minFilter","Depth","Beauty","kernelSize","blendEquationAlpha","format","constructor","scene","depthTexture","material"]],"~:compiled-at",1630917515505,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$postprocessing$SSAOPass.js\",\n\"lineCount\":20,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/postprocessing/SSAOPass.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$postprocessing$SSAOPass\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.SSAOPass = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _Pass = require(\\\"./Pass.js\\\");\\n\\nvar _SimplexNoise = require(\\\"../math/SimplexNoise.js\\\");\\n\\nvar _SSAOShader = require(\\\"../shaders/SSAOShader.js\\\");\\n\\nvar _CopyShader = require(\\\"../shaders/CopyShader.js\\\");\\n\\nvar SSAOPass = function SSAOPass(scene, camera, width, height) {\\n  this.width = width !== undefined ? width : 512;\\n  this.height = height !== undefined ? height : 512;\\n  this.clear = true;\\n  this.camera = camera;\\n  this.scene = scene;\\n  this.kernelRadius = 8;\\n  this.kernelSize = 32;\\n  this.kernel = [];\\n  this.noiseTexture = null;\\n  this.output = 0;\\n  this.minDistance = 0.005;\\n  this.maxDistance = 0.1;\\n  this._visibilityCache = new Map(); //\\n\\n  this.generateSampleKernel();\\n  this.generateRandomKernelRotations(); // beauty render target\\n\\n  var depthTexture = new _three.DepthTexture();\\n  depthTexture.type = _three.UnsignedShortType;\\n  this.beautyRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\\n    minFilter: _three.LinearFilter,\\n    magFilter: _three.LinearFilter,\\n    format: _three.RGBAFormat\\n  }); // normal render target with depth buffer\\n\\n  this.normalRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\\n    minFilter: _three.NearestFilter,\\n    magFilter: _three.NearestFilter,\\n    format: _three.RGBAFormat,\\n    depthTexture: depthTexture\\n  }); // ssao render target\\n\\n  this.ssaoRenderTarget = new _three.WebGLRenderTarget(this.width, this.height, {\\n    minFilter: _three.LinearFilter,\\n    magFilter: _three.LinearFilter,\\n    format: _three.RGBAFormat\\n  });\\n  this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\\n\\n  if (_SSAOShader.SSAOShader === undefined) {\\n    console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\\n  }\\n\\n  this.ssaoMaterial = new _three.ShaderMaterial({\\n    defines: Object.assign({}, _SSAOShader.SSAOShader.defines),\\n    uniforms: _three.UniformsUtils.clone(_SSAOShader.SSAOShader.uniforms),\\n    vertexShader: _SSAOShader.SSAOShader.vertexShader,\\n    fragmentShader: _SSAOShader.SSAOShader.fragmentShader,\\n    blending: _three.NoBlending\\n  });\\n  this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\\n  this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\\n  this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\\n  this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\\n  this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\\n  this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\\n  this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\\n  this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\\n  this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\\n  this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\\n\\n  this.normalMaterial = new _three.MeshNormalMaterial();\\n  this.normalMaterial.blending = _three.NoBlending; // blur material\\n\\n  this.blurMaterial = new _three.ShaderMaterial({\\n    defines: Object.assign({}, _SSAOShader.SSAOBlurShader.defines),\\n    uniforms: _three.UniformsUtils.clone(_SSAOShader.SSAOBlurShader.uniforms),\\n    vertexShader: _SSAOShader.SSAOBlurShader.vertexShader,\\n    fragmentShader: _SSAOShader.SSAOBlurShader.fragmentShader\\n  });\\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\\n\\n  this.depthRenderMaterial = new _three.ShaderMaterial({\\n    defines: Object.assign({}, _SSAOShader.SSAODepthShader.defines),\\n    uniforms: _three.UniformsUtils.clone(_SSAOShader.SSAODepthShader.uniforms),\\n    vertexShader: _SSAOShader.SSAODepthShader.vertexShader,\\n    fragmentShader: _SSAOShader.SSAODepthShader.fragmentShader,\\n    blending: _three.NoBlending\\n  });\\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\\n\\n  this.copyMaterial = new _three.ShaderMaterial({\\n    uniforms: _three.UniformsUtils.clone(_CopyShader.CopyShader.uniforms),\\n    vertexShader: _CopyShader.CopyShader.vertexShader,\\n    fragmentShader: _CopyShader.CopyShader.fragmentShader,\\n    transparent: true,\\n    depthTest: false,\\n    depthWrite: false,\\n    blendSrc: _three.DstColorFactor,\\n    blendDst: _three.ZeroFactor,\\n    blendEquation: _three.AddEquation,\\n    blendSrcAlpha: _three.DstAlphaFactor,\\n    blendDstAlpha: _three.ZeroFactor,\\n    blendEquationAlpha: _three.AddEquation\\n  });\\n  this.fsQuad = new _Pass.FullScreenQuad(null);\\n  this.originalClearColor = new _three.Color();\\n};\\n\\nexports.SSAOPass = SSAOPass;\\nSSAOPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\\n  constructor: SSAOPass,\\n  dispose: function dispose() {\\n    // dispose render targets\\n    this.beautyRenderTarget.dispose();\\n    this.normalRenderTarget.dispose();\\n    this.ssaoRenderTarget.dispose();\\n    this.blurRenderTarget.dispose(); // dispose materials\\n\\n    this.normalMaterial.dispose();\\n    this.blurMaterial.dispose();\\n    this.copyMaterial.dispose();\\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\\n\\n    this.fsQuad.dispose();\\n  },\\n  render: function render(renderer, writeBuffer\\n  /*, readBuffer, deltaTime, maskActive */\\n  ) {\\n    // render beauty\\n    renderer.setRenderTarget(this.beautyRenderTarget);\\n    renderer.clear();\\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\\n\\n    this.overrideVisibility();\\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\\n    this.restoreVisibility(); // render SSAO\\n\\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\\n\\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\\n\\n    switch (this.output) {\\n      case SSAOPass.OUTPUT.SSAO:\\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\\n        this.copyMaterial.blending = _three.NoBlending;\\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n        break;\\n\\n      case SSAOPass.OUTPUT.Blur:\\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\\n        this.copyMaterial.blending = _three.NoBlending;\\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n        break;\\n\\n      case SSAOPass.OUTPUT.Beauty:\\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\\n        this.copyMaterial.blending = _three.NoBlending;\\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n        break;\\n\\n      case SSAOPass.OUTPUT.Depth:\\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\\n        break;\\n\\n      case SSAOPass.OUTPUT.Normal:\\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\\n        this.copyMaterial.blending = _three.NoBlending;\\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n        break;\\n\\n      case SSAOPass.OUTPUT.Default:\\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\\n        this.copyMaterial.blending = _three.NoBlending;\\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\\n        this.copyMaterial.blending = _three.CustomBlending;\\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\\n        break;\\n\\n      default:\\n        console.warn('THREE.SSAOPass: Unknown output type.');\\n    }\\n  },\\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\\n    // save original state\\n    renderer.getClearColor(this.originalClearColor);\\n    var originalClearAlpha = renderer.getClearAlpha();\\n    var originalAutoClear = renderer.autoClear;\\n    renderer.setRenderTarget(renderTarget); // setup pass state\\n\\n    renderer.autoClear = false;\\n\\n    if (clearColor !== undefined && clearColor !== null) {\\n      renderer.setClearColor(clearColor);\\n      renderer.setClearAlpha(clearAlpha || 0.0);\\n      renderer.clear();\\n    }\\n\\n    this.fsQuad.material = passMaterial;\\n    this.fsQuad.render(renderer); // restore original state\\n\\n    renderer.autoClear = originalAutoClear;\\n    renderer.setClearColor(this.originalClearColor);\\n    renderer.setClearAlpha(originalClearAlpha);\\n  },\\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\\n    renderer.getClearColor(this.originalClearColor);\\n    var originalClearAlpha = renderer.getClearAlpha();\\n    var originalAutoClear = renderer.autoClear;\\n    renderer.setRenderTarget(renderTarget);\\n    renderer.autoClear = false;\\n    clearColor = overrideMaterial.clearColor || clearColor;\\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\\n\\n    if (clearColor !== undefined && clearColor !== null) {\\n      renderer.setClearColor(clearColor);\\n      renderer.setClearAlpha(clearAlpha || 0.0);\\n      renderer.clear();\\n    }\\n\\n    this.scene.overrideMaterial = overrideMaterial;\\n    renderer.render(this.scene, this.camera);\\n    this.scene.overrideMaterial = null; // restore original state\\n\\n    renderer.autoClear = originalAutoClear;\\n    renderer.setClearColor(this.originalClearColor);\\n    renderer.setClearAlpha(originalClearAlpha);\\n  },\\n  setSize: function setSize(width, height) {\\n    this.width = width;\\n    this.height = height;\\n    this.beautyRenderTarget.setSize(width, height);\\n    this.ssaoRenderTarget.setSize(width, height);\\n    this.normalRenderTarget.setSize(width, height);\\n    this.blurRenderTarget.setSize(width, height);\\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\\n  },\\n  generateSampleKernel: function generateSampleKernel() {\\n    var kernelSize = this.kernelSize;\\n    var kernel = this.kernel;\\n\\n    for (var i = 0; i < kernelSize; i++) {\\n      var sample = new _three.Vector3();\\n      sample.x = Math.random() * 2 - 1;\\n      sample.y = Math.random() * 2 - 1;\\n      sample.z = Math.random();\\n      sample.normalize();\\n      var scale = i / kernelSize;\\n      scale = _three.MathUtils.lerp(0.1, 1, scale * scale);\\n      sample.multiplyScalar(scale);\\n      kernel.push(sample);\\n    }\\n  },\\n  generateRandomKernelRotations: function generateRandomKernelRotations() {\\n    var width = 4,\\n        height = 4;\\n\\n    if (_SimplexNoise.SimplexNoise === undefined) {\\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\\n    }\\n\\n    var simplex = new _SimplexNoise.SimplexNoise();\\n    var size = width * height;\\n    var data = new Float32Array(size * 4);\\n\\n    for (var i = 0; i < size; i++) {\\n      var stride = i * 4;\\n      var x = Math.random() * 2 - 1;\\n      var y = Math.random() * 2 - 1;\\n      var z = 0;\\n      var noise = simplex.noise3d(x, y, z);\\n      data[stride] = noise;\\n      data[stride + 1] = noise;\\n      data[stride + 2] = noise;\\n      data[stride + 3] = 1;\\n    }\\n\\n    this.noiseTexture = new _three.DataTexture(data, width, height, _three.RGBAFormat, _three.FloatType);\\n    this.noiseTexture.wrapS = _three.RepeatWrapping;\\n    this.noiseTexture.wrapT = _three.RepeatWrapping;\\n  },\\n  overrideVisibility: function overrideVisibility() {\\n    var scene = this.scene;\\n    var cache = this._visibilityCache;\\n    scene.traverse(function (object) {\\n      cache.set(object, object.visible);\\n      if (object.isPoints || object.isLine) object.visible = false;\\n    });\\n  },\\n  restoreVisibility: function restoreVisibility() {\\n    var scene = this.scene;\\n    var cache = this._visibilityCache;\\n    scene.traverse(function (object) {\\n      var visible = cache.get(object);\\n      object.visible = visible;\\n    });\\n    cache.clear();\\n  }\\n});\\nSSAOPass.OUTPUT = {\\n  Default: 0,\\n  SSAO: 1,\\n  Blur: 2,\\n  Beauty: 3,\\n  Depth: 4,\\n  Normal: 5\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"SSAOPass\",\"_three\",\"_Pass\",\"_SimplexNoise\",\"_SSAOShader\",\"_CopyShader\",\"scene\",\"camera\",\"width\",\"height\",\"undefined\",\"clear\",\"kernelRadius\",\"kernelSize\",\"kernel\",\"noiseTexture\",\"output\",\"minDistance\",\"maxDistance\",\"_visibilityCache\",\"Map\",\"generateSampleKernel\",\"generateRandomKernelRotations\",\"depthTexture\",\"DepthTexture\",\"type\",\"UnsignedShortType\",\"beautyRenderTarget\",\"WebGLRenderTarget\",\"minFilter\",\"LinearFilter\",\"magFilter\",\"format\",\"RGBAFormat\",\"normalRenderTarget\",\"NearestFilter\",\"ssaoRenderTarget\",\"blurRenderTarget\",\"clone\",\"SSAOShader\",\"console\",\"error\",\"ssaoMaterial\",\"ShaderMaterial\",\"defines\",\"assign\",\"uniforms\",\"UniformsUtils\",\"vertexShader\",\"fragmentShader\",\"blending\",\"NoBlending\",\"texture\",\"near\",\"far\",\"set\",\"copy\",\"projectionMatrix\",\"projectionMatrixInverse\",\"normalMaterial\",\"MeshNormalMaterial\",\"blurMaterial\",\"SSAOBlurShader\",\"depthRenderMaterial\",\"SSAODepthShader\",\"copyMaterial\",\"CopyShader\",\"transparent\",\"depthTest\",\"depthWrite\",\"blendSrc\",\"DstColorFactor\",\"blendDst\",\"ZeroFactor\",\"blendEquation\",\"AddEquation\",\"blendSrcAlpha\",\"DstAlphaFactor\",\"blendDstAlpha\",\"blendEquationAlpha\",\"fsQuad\",\"FullScreenQuad\",\"originalClearColor\",\"Color\",\"prototype\",\"create\",\"Pass\",\"constructor\",\"dispose\",\"render\",\"renderer\",\"writeBuffer\",\"setRenderTarget\",\"overrideVisibility\",\"renderOverride\",\"restoreVisibility\",\"renderPass\",\"OUTPUT\",\"SSAO\",\"renderToScreen\",\"Blur\",\"Beauty\",\"Depth\",\"Normal\",\"Default\",\"CustomBlending\",\"warn\",\"passMaterial\",\"renderTarget\",\"clearColor\",\"clearAlpha\",\"getClearColor\",\"originalClearAlpha\",\"getClearAlpha\",\"originalAutoClear\",\"autoClear\",\"setClearColor\",\"setClearAlpha\",\"material\",\"overrideMaterial\",\"setSize\",\"i\",\"sample\",\"Vector3\",\"x\",\"Math\",\"random\",\"y\",\"z\",\"normalize\",\"scale\",\"MathUtils\",\"lerp\",\"multiplyScalar\",\"push\",\"SimplexNoise\",\"simplex\",\"data\",\"Float32Array\",\"size\",\"stride\",\"noise\",\"noise3d\",\"DataTexture\",\"FloatType\",\"wrapS\",\"RepeatWrapping\",\"wrapT\",\"cache\",\"traverse\",\"object\",\"visible\",\"isPoints\",\"isLine\",\"get\"]\n}\n"]