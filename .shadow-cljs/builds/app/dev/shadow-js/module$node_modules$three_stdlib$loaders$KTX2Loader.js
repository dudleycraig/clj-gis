["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/loaders/KTX2Loader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$loaders$KTX2Loader=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=\ndescriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);staticProps&&_defineProperties(Constructor,staticProps);return Constructor}function _getPrototypeOf(o$jscomp$0){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)};\nreturn _getPrototypeOf(o$jscomp$0)}function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&null!==superClass)throw new TypeError(\"Super expression must either be null or a function\");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}});superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o$jscomp$0,p$jscomp$0){_setPrototypeOf=Object.setPrototypeOf||function(o,p){o.__proto__=p;return o};\nreturn _setPrototypeOf(o$jscomp$0,p$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.KTX2Loader=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_BasisTextureLoader=require(\"module$node_modules$three_stdlib$loaders$BasisTextureLoader\"),_zstddec=require(\"module$node_modules$zstddec$dist$zstddec_modern\"),_ktxParse=require(\"module$node_modules$ktx_parse$dist$ktx_parse_modern\");global=function(_CompressedTextureLoa){function KTX2Loader(manager){if(!(this instanceof\nKTX2Loader))throw new TypeError(\"Cannot call a class as a function\");var _this=_getPrototypeOf(KTX2Loader).call(this,manager);if(!_this||\"object\"!==_typeof(_this)&&\"function\"!==typeof _this){if(void 0===this)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");_this=this}_this.basisLoader=new _BasisTextureLoader.BasisTextureLoader(manager);_this.zstd=new _zstddec.ZSTDDecoder;_this.zstd.init();\"undefined\"!==typeof MSC_TRANSCODER&&console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\nreturn _this}_inherits(KTX2Loader,_CompressedTextureLoa);_createClass(KTX2Loader,[{key:\"setTranscoderPath\",value:function(path){this.basisLoader.setTranscoderPath(path);return this}},{key:\"setWorkerLimit\",value:function(path){this.basisLoader.setWorkerLimit(path);return this}},{key:\"detectSupport\",value:function(renderer){this.basisLoader.detectSupport(renderer);return this}},{key:\"dispose\",value:function(){this.basisLoader.dispose();return this}},{key:\"load\",value:function(url,onLoad,onProgress,\nonError){var scope=this,texture=new _three.CompressedTexture;(new Promise(function(resolve,reject){(new _three.FileLoader(scope.manager)).setPath(scope.path).setResponseType(\"arraybuffer\").load(url,resolve,onProgress,reject)})).then(function(buffer){scope.parse(buffer,function(_texture){texture.copy(_texture);texture.needsUpdate=!0;onLoad&&onLoad(texture)},onError)})[\"catch\"](onError);return texture}},{key:\"parse\",value:function(buffer,onLoad,onError){var scope=this,ktx=(0,_ktxParse.read)(new Uint8Array(buffer));\nif(0<ktx.pixelDepth)throw Error(\"THREE.KTX2Loader: Only 2D textures are currently supported.\");if(1<ktx.layerCount)throw Error(\"THREE.KTX2Loader: Array textures are not currently supported.\");if(1<ktx.faceCount)throw Error(\"THREE.KTX2Loader: Cube textures are not currently supported.\");var dfd=KTX2Utils.getBasicDFD(ktx);KTX2Utils.createLevels(ktx,this.zstd).then(function(levels){var basisFormat=dfd.colorModel===_ktxParse.KTX2Model.UASTC?_BasisTextureLoader.BasisTextureLoader.BasisFormat.UASTC_4x4:\n_BasisTextureLoader.BasisTextureLoader.BasisFormat.ETC1S;levels={levels,width:ktx.pixelWidth,height:ktx.pixelHeight,basisFormat,hasAlpha:KTX2Utils.getAlpha(ktx)};basisFormat===_BasisTextureLoader.BasisTextureLoader.BasisFormat.ETC1S&&(levels.globalData=ktx.globalData);return scope.basisLoader.parseInternalAsync(levels)}).then(function(texture){texture.encoding=dfd.transferFunction===_ktxParse.KTX2Transfer.SRGB?_three.sRGBEncoding:_three.LinearEncoding;texture.premultiplyAlpha=KTX2Utils.getPremultiplyAlpha(ktx);\nonLoad(texture)})[\"catch\"](onError);return this}}]);return KTX2Loader}(_three.CompressedTextureLoader);exports.KTX2Loader=global;var KTX2Utils={createLevels:function(ktx,zstd){var levels,width,height,levelIndex,levelWidth,levelHeight,levelData;return regeneratorRuntime.async(function(_context){for(;;)switch(_context.prev=_context.next){case 0:if(ktx.supercompressionScheme!==_ktxParse.KTX2SupercompressionScheme.ZSTD){_context.next=3;break}_context.next=3;return regeneratorRuntime.awrap(zstd.init());\ncase 3:levels=[];width=ktx.pixelWidth;height=ktx.pixelHeight;for(levelIndex=0;levelIndex<ktx.levels.length;levelIndex++)levelWidth=Math.max(1,Math.floor(width/Math.pow(2,levelIndex))),levelHeight=Math.max(1,Math.floor(height/Math.pow(2,levelIndex))),levelData=ktx.levels[levelIndex].levelData,ktx.supercompressionScheme===_ktxParse.KTX2SupercompressionScheme.ZSTD&&(levelData=zstd.decode(levelData,ktx.levels[levelIndex].uncompressedByteLength)),levels.push({index:levelIndex,width:levelWidth,height:levelHeight,\ndata:levelData});return _context.abrupt(\"return\",levels);case 8:case \"end\":return _context.stop()}})},getBasicDFD:function(ktx){return ktx.dataFormatDescriptor[0]},getAlpha:function(ktx){ktx=this.getBasicDFD(ktx);return ktx.colorModel===_ktxParse.KTX2Model.UASTC?(ktx.samples[0].channelID&15)===_ktxParse.KTX2ChannelUASTC.RGBA?!0:!1:2===ktx.samples.length&&(ktx.samples[1].channelID&15)===_ktxParse.KTX2ChannelETC1S.AAA?!0:!1},getPremultiplyAlpha:function(ktx){return!!(this.getBasicDFD(ktx).flags&_ktxParse.KTX2Flags.ALPHA_PREMULTIPLIED)}}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$loaders$KTX2Loader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KTX2Loader = void 0;\n\nvar _three = require(\"three\");\n\nvar _BasisTextureLoader = require(\"./BasisTextureLoader.js\");\n\nvar _zstddec = require(\"zstddec\");\n\nvar _ktxParse = require(\"ktx-parse\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats. While KTX 2.0 also allows\n * other hardware-specific formats, this loader does not yet parse them.\n *\n * This loader parses the KTX 2.0 container and then relies on\n * THREE.BasisTextureLoader to complete the transcoding process.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\nvar KTX2Loader =\n/*#__PURE__*/\nfunction (_CompressedTextureLoa) {\n  _inherits(KTX2Loader, _CompressedTextureLoa);\n\n  function KTX2Loader(manager) {\n    var _this;\n\n    _classCallCheck(this, KTX2Loader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(KTX2Loader).call(this, manager));\n    _this.basisLoader = new _BasisTextureLoader.BasisTextureLoader(manager);\n    _this.zstd = new _zstddec.ZSTDDecoder();\n\n    _this.zstd.init();\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n\n    return _this;\n  }\n\n  _createClass(KTX2Loader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.basisLoader.setTranscoderPath(path);\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(path) {\n      this.basisLoader.setWorkerLimit(path);\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.basisLoader.detectSupport(renderer);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.basisLoader.dispose();\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var texture = new _three.CompressedTexture();\n      var bufferPending = new Promise(function (resolve, reject) {\n        new _three.FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').load(url, resolve, onProgress, reject);\n      });\n      bufferPending.then(function (buffer) {\n        scope.parse(buffer, function (_texture) {\n          texture.copy(_texture);\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }, onError);\n      })[\"catch\"](onError);\n      return texture;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(buffer, onLoad, onError) {\n      var scope = this;\n      var ktx = (0, _ktxParse.read)(new Uint8Array(buffer));\n\n      if (ktx.pixelDepth > 0) {\n        throw new Error('THREE.KTX2Loader: Only 2D textures are currently supported.');\n      }\n\n      if (ktx.layerCount > 1) {\n        throw new Error('THREE.KTX2Loader: Array textures are not currently supported.');\n      }\n\n      if (ktx.faceCount > 1) {\n        throw new Error('THREE.KTX2Loader: Cube textures are not currently supported.');\n      }\n\n      var dfd = KTX2Utils.getBasicDFD(ktx);\n      KTX2Utils.createLevels(ktx, this.zstd).then(function (levels) {\n        var basisFormat = dfd.colorModel === _ktxParse.KTX2Model.UASTC ? _BasisTextureLoader.BasisTextureLoader.BasisFormat.UASTC_4x4 : _BasisTextureLoader.BasisTextureLoader.BasisFormat.ETC1S;\n        var parseConfig = {\n          levels: levels,\n          width: ktx.pixelWidth,\n          height: ktx.pixelHeight,\n          basisFormat: basisFormat,\n          hasAlpha: KTX2Utils.getAlpha(ktx)\n        };\n\n        if (basisFormat === _BasisTextureLoader.BasisTextureLoader.BasisFormat.ETC1S) {\n          parseConfig.globalData = ktx.globalData;\n        }\n\n        return scope.basisLoader.parseInternalAsync(parseConfig);\n      }).then(function (texture) {\n        texture.encoding = dfd.transferFunction === _ktxParse.KTX2Transfer.SRGB ? _three.sRGBEncoding : _three.LinearEncoding;\n        texture.premultiplyAlpha = KTX2Utils.getPremultiplyAlpha(ktx);\n        onLoad(texture);\n      })[\"catch\"](onError);\n      return this;\n    }\n  }]);\n\n  return KTX2Loader;\n}(_three.CompressedTextureLoader);\n\nexports.KTX2Loader = KTX2Loader;\nvar KTX2Utils = {\n  createLevels: function createLevels(ktx, zstd) {\n    var levels, width, height, levelIndex, levelWidth, levelHeight, levelData;\n    return regeneratorRuntime.async(function createLevels$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(ktx.supercompressionScheme === _ktxParse.KTX2SupercompressionScheme.ZSTD)) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return regeneratorRuntime.awrap(zstd.init());\n\n          case 3:\n            levels = [];\n            width = ktx.pixelWidth;\n            height = ktx.pixelHeight;\n\n            for (levelIndex = 0; levelIndex < ktx.levels.length; levelIndex++) {\n              levelWidth = Math.max(1, Math.floor(width / Math.pow(2, levelIndex)));\n              levelHeight = Math.max(1, Math.floor(height / Math.pow(2, levelIndex)));\n              levelData = ktx.levels[levelIndex].levelData;\n\n              if (ktx.supercompressionScheme === _ktxParse.KTX2SupercompressionScheme.ZSTD) {\n                levelData = zstd.decode(levelData, ktx.levels[levelIndex].uncompressedByteLength);\n              }\n\n              levels.push({\n                index: levelIndex,\n                width: levelWidth,\n                height: levelHeight,\n                data: levelData\n              });\n            }\n\n            return _context.abrupt(\"return\", levels);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  },\n  getBasicDFD: function getBasicDFD(ktx) {\n    // Basic Data Format Descriptor Block is always the first DFD.\n    return ktx.dataFormatDescriptor[0];\n  },\n  getAlpha: function getAlpha(ktx) {\n    var dfd = this.getBasicDFD(ktx); // UASTC\n\n    if (dfd.colorModel === _ktxParse.KTX2Model.UASTC) {\n      if ((dfd.samples[0].channelID & 0xf) === _ktxParse.KTX2ChannelUASTC.RGBA) {\n        return true;\n      }\n\n      return false;\n    } // ETC1S\n\n\n    if (dfd.samples.length === 2 && (dfd.samples[1].channelID & 0xf) === _ktxParse.KTX2ChannelETC1S.AAA) {\n      return true;\n    }\n\n    return false;\n  },\n  getPremultiplyAlpha: function getPremultiplyAlpha(ktx) {\n    var dfd = this.getBasicDFD(ktx);\n    return !!(dfd.flags & _ktxParse.KTX2Flags.ALPHA_PREMULTIPLIED);\n  }\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$ktx_parse$dist$ktx_parse_modern","~$module$node_modules$three$build$three_module","~$module$node_modules$zstddec$dist$zstddec_modern","~$shadow.js","~$module$node_modules$three_stdlib$loaders$BasisTextureLoader"]],"~:properties",["^5",["width","next","getBasicDFD","index","needsUpdate","basisLoader","prototype","height","globalData","basisFormat","key","__esModule","premultiplyAlpha","encoding","getPremultiplyAlpha","getAlpha","configurable","value","createLevels","enumerable","hasAlpha","prev","writable","levels","__proto__","zstd","data","KTX2Loader","constructor"]],"~:compiled-at",1630917515759,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$loaders$KTX2Loader.js\",\n\"lineCount\":12,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/loaders/KTX2Loader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$loaders$KTX2Loader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.KTX2Loader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _BasisTextureLoader = require(\\\"./BasisTextureLoader.js\\\");\\n\\nvar _zstddec = require(\\\"zstddec\\\");\\n\\nvar _ktxParse = require(\\\"ktx-parse\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/**\\n * Loader for KTX 2.0 GPU Texture containers.\\n *\\n * KTX 2.0 is a container format for various GPU texture formats. The loader\\n * supports Basis Universal GPU textures, which can be quickly transcoded to\\n * a wide variety of GPU texture compression formats. While KTX 2.0 also allows\\n * other hardware-specific formats, this loader does not yet parse them.\\n *\\n * This loader parses the KTX 2.0 container and then relies on\\n * THREE.BasisTextureLoader to complete the transcoding process.\\n *\\n * References:\\n * - KTX: http://github.khronos.org/KTX-Specification/\\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\\n */\\nvar KTX2Loader =\\n/*#__PURE__*/\\nfunction (_CompressedTextureLoa) {\\n  _inherits(KTX2Loader, _CompressedTextureLoa);\\n\\n  function KTX2Loader(manager) {\\n    var _this;\\n\\n    _classCallCheck(this, KTX2Loader);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(KTX2Loader).call(this, manager));\\n    _this.basisLoader = new _BasisTextureLoader.BasisTextureLoader(manager);\\n    _this.zstd = new _zstddec.ZSTDDecoder();\\n\\n    _this.zstd.init();\\n\\n    if (typeof MSC_TRANSCODER !== 'undefined') {\\n      console.warn('THREE.KTX2Loader: Please update to latest \\\"basis_transcoder\\\".' + ' \\\"msc_basis_transcoder\\\" is no longer supported in three.js r125+.');\\n    }\\n\\n    return _this;\\n  }\\n\\n  _createClass(KTX2Loader, [{\\n    key: \\\"setTranscoderPath\\\",\\n    value: function setTranscoderPath(path) {\\n      this.basisLoader.setTranscoderPath(path);\\n      return this;\\n    }\\n  }, {\\n    key: \\\"setWorkerLimit\\\",\\n    value: function setWorkerLimit(path) {\\n      this.basisLoader.setWorkerLimit(path);\\n      return this;\\n    }\\n  }, {\\n    key: \\\"detectSupport\\\",\\n    value: function detectSupport(renderer) {\\n      this.basisLoader.detectSupport(renderer);\\n      return this;\\n    }\\n  }, {\\n    key: \\\"dispose\\\",\\n    value: function dispose() {\\n      this.basisLoader.dispose();\\n      return this;\\n    }\\n  }, {\\n    key: \\\"load\\\",\\n    value: function load(url, onLoad, onProgress, onError) {\\n      var scope = this;\\n      var texture = new _three.CompressedTexture();\\n      var bufferPending = new Promise(function (resolve, reject) {\\n        new _three.FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').load(url, resolve, onProgress, reject);\\n      });\\n      bufferPending.then(function (buffer) {\\n        scope.parse(buffer, function (_texture) {\\n          texture.copy(_texture);\\n          texture.needsUpdate = true;\\n          if (onLoad) onLoad(texture);\\n        }, onError);\\n      })[\\\"catch\\\"](onError);\\n      return texture;\\n    }\\n  }, {\\n    key: \\\"parse\\\",\\n    value: function parse(buffer, onLoad, onError) {\\n      var scope = this;\\n      var ktx = (0, _ktxParse.read)(new Uint8Array(buffer));\\n\\n      if (ktx.pixelDepth > 0) {\\n        throw new Error('THREE.KTX2Loader: Only 2D textures are currently supported.');\\n      }\\n\\n      if (ktx.layerCount > 1) {\\n        throw new Error('THREE.KTX2Loader: Array textures are not currently supported.');\\n      }\\n\\n      if (ktx.faceCount > 1) {\\n        throw new Error('THREE.KTX2Loader: Cube textures are not currently supported.');\\n      }\\n\\n      var dfd = KTX2Utils.getBasicDFD(ktx);\\n      KTX2Utils.createLevels(ktx, this.zstd).then(function (levels) {\\n        var basisFormat = dfd.colorModel === _ktxParse.KTX2Model.UASTC ? _BasisTextureLoader.BasisTextureLoader.BasisFormat.UASTC_4x4 : _BasisTextureLoader.BasisTextureLoader.BasisFormat.ETC1S;\\n        var parseConfig = {\\n          levels: levels,\\n          width: ktx.pixelWidth,\\n          height: ktx.pixelHeight,\\n          basisFormat: basisFormat,\\n          hasAlpha: KTX2Utils.getAlpha(ktx)\\n        };\\n\\n        if (basisFormat === _BasisTextureLoader.BasisTextureLoader.BasisFormat.ETC1S) {\\n          parseConfig.globalData = ktx.globalData;\\n        }\\n\\n        return scope.basisLoader.parseInternalAsync(parseConfig);\\n      }).then(function (texture) {\\n        texture.encoding = dfd.transferFunction === _ktxParse.KTX2Transfer.SRGB ? _three.sRGBEncoding : _three.LinearEncoding;\\n        texture.premultiplyAlpha = KTX2Utils.getPremultiplyAlpha(ktx);\\n        onLoad(texture);\\n      })[\\\"catch\\\"](onError);\\n      return this;\\n    }\\n  }]);\\n\\n  return KTX2Loader;\\n}(_three.CompressedTextureLoader);\\n\\nexports.KTX2Loader = KTX2Loader;\\nvar KTX2Utils = {\\n  createLevels: function createLevels(ktx, zstd) {\\n    var levels, width, height, levelIndex, levelWidth, levelHeight, levelData;\\n    return regeneratorRuntime.async(function createLevels$(_context) {\\n      while (1) {\\n        switch (_context.prev = _context.next) {\\n          case 0:\\n            if (!(ktx.supercompressionScheme === _ktxParse.KTX2SupercompressionScheme.ZSTD)) {\\n              _context.next = 3;\\n              break;\\n            }\\n\\n            _context.next = 3;\\n            return regeneratorRuntime.awrap(zstd.init());\\n\\n          case 3:\\n            levels = [];\\n            width = ktx.pixelWidth;\\n            height = ktx.pixelHeight;\\n\\n            for (levelIndex = 0; levelIndex < ktx.levels.length; levelIndex++) {\\n              levelWidth = Math.max(1, Math.floor(width / Math.pow(2, levelIndex)));\\n              levelHeight = Math.max(1, Math.floor(height / Math.pow(2, levelIndex)));\\n              levelData = ktx.levels[levelIndex].levelData;\\n\\n              if (ktx.supercompressionScheme === _ktxParse.KTX2SupercompressionScheme.ZSTD) {\\n                levelData = zstd.decode(levelData, ktx.levels[levelIndex].uncompressedByteLength);\\n              }\\n\\n              levels.push({\\n                index: levelIndex,\\n                width: levelWidth,\\n                height: levelHeight,\\n                data: levelData\\n              });\\n            }\\n\\n            return _context.abrupt(\\\"return\\\", levels);\\n\\n          case 8:\\n          case \\\"end\\\":\\n            return _context.stop();\\n        }\\n      }\\n    });\\n  },\\n  getBasicDFD: function getBasicDFD(ktx) {\\n    // Basic Data Format Descriptor Block is always the first DFD.\\n    return ktx.dataFormatDescriptor[0];\\n  },\\n  getAlpha: function getAlpha(ktx) {\\n    var dfd = this.getBasicDFD(ktx); // UASTC\\n\\n    if (dfd.colorModel === _ktxParse.KTX2Model.UASTC) {\\n      if ((dfd.samples[0].channelID & 0xf) === _ktxParse.KTX2ChannelUASTC.RGBA) {\\n        return true;\\n      }\\n\\n      return false;\\n    } // ETC1S\\n\\n\\n    if (dfd.samples.length === 2 && (dfd.samples[1].channelID & 0xf) === _ktxParse.KTX2ChannelETC1S.AAA) {\\n      return true;\\n    }\\n\\n    return false;\\n  },\\n  getPremultiplyAlpha: function getPremultiplyAlpha(ktx) {\\n    var dfd = this.getBasicDFD(ktx);\\n    return !!(dfd.flags & _ktxParse.KTX2Flags.ALPHA_PREMULTIPLIED);\\n  }\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"_getPrototypeOf\",\"o\",\"setPrototypeOf\",\"getPrototypeOf\",\"__proto__\",\"_inherits\",\"subClass\",\"superClass\",\"TypeError\",\"create\",\"value\",\"_setPrototypeOf\",\"p\",\"KTX2Loader\",\"_three\",\"_BasisTextureLoader\",\"_zstddec\",\"_ktxParse\",\"_CompressedTextureLoa\",\"manager\",\"instance\",\"call\",\"self\",\"ReferenceError\",\"_this\",\"basisLoader\",\"BasisTextureLoader\",\"zstd\",\"ZSTDDecoder\",\"init\",\"MSC_TRANSCODER\",\"console\",\"warn\",\"setTranscoderPath\",\"path\",\"setWorkerLimit\",\"detectSupport\",\"renderer\",\"dispose\",\"load\",\"url\",\"onLoad\",\"onProgress\",\"onError\",\"scope\",\"texture\",\"CompressedTexture\",\"then\",\"bufferPending\",\"Promise\",\"resolve\",\"reject\",\"setPath\",\"FileLoader\",\"setResponseType\",\"buffer\",\"parse\",\"_texture\",\"copy\",\"needsUpdate\",\"ktx\",\"read\",\"Uint8Array\",\"pixelDepth\",\"Error\",\"layerCount\",\"faceCount\",\"dfd\",\"KTX2Utils\",\"getBasicDFD\",\"createLevels\",\"levels\",\"basisFormat\",\"colorModel\",\"KTX2Model\",\"UASTC\",\"BasisFormat\",\"UASTC_4x4\",\"ETC1S\",\"parseConfig\",\"width\",\"pixelWidth\",\"height\",\"pixelHeight\",\"hasAlpha\",\"getAlpha\",\"globalData\",\"parseInternalAsync\",\"encoding\",\"transferFunction\",\"KTX2Transfer\",\"SRGB\",\"sRGBEncoding\",\"LinearEncoding\",\"premultiplyAlpha\",\"getPremultiplyAlpha\",\"CompressedTextureLoader\",\"levelIndex\",\"levelWidth\",\"levelHeight\",\"levelData\",\"regeneratorRuntime\",\"async\",\"createLevels$\",\"_context\",\"prev\",\"next\",\"supercompressionScheme\",\"KTX2SupercompressionScheme\",\"ZSTD\",\"awrap\",\"Math\",\"max\",\"floor\",\"pow\",\"decode\",\"uncompressedByteLength\",\"push\",\"index\",\"data\",\"abrupt\",\"stop\",\"dataFormatDescriptor\",\"samples\",\"channelID\",\"KTX2ChannelUASTC\",\"RGBA\",\"KTX2ChannelETC1S\",\"AAA\",\"flags\",\"KTX2Flags\",\"ALPHA_PREMULTIPLIED\"]\n}\n"]