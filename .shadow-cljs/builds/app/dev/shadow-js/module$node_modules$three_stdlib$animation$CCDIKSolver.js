["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/animation/CCDIKSolver.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$animation$CCDIKSolver=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.CCDIKSolver=void 0;var _three=require(\"module$node_modules$three$build$three_module\");global=function(){function CCDIKSolver(mesh,iks){this.mesh=mesh;this.iks=iks||[];this._valid()}function CCDIKHelper(mesh,iks){_three.Object3D.call(this);this.root=mesh;this.iks=iks||[];this.matrix.copy(mesh.matrixWorld);this.matrixAutoUpdate=\n!1;this.sphereGeometry=new _three.SphereGeometry(.25,16,8);this.targetSphereMaterial=new _three.MeshBasicMaterial({color:new _three.Color(16746632),depthTest:!1,depthWrite:!1,transparent:!0});this.effectorSphereMaterial=new _three.MeshBasicMaterial({color:new _three.Color(8978312),depthTest:!1,depthWrite:!1,transparent:!0});this.linkSphereMaterial=new _three.MeshBasicMaterial({color:new _three.Color(8947967),depthTest:!1,depthWrite:!1,transparent:!0});this.lineMaterial=new _three.LineBasicMaterial({color:new _three.Color(16711680),\ndepthTest:!1,depthWrite:!1,transparent:!0});this._init()}CCDIKSolver.prototype={constructor:CCDIKSolver,update:function(){var q=new _three.Quaternion,targetPos=new _three.Vector3,targetVec=new _three.Vector3,effectorPos=new _three.Vector3,effectorVec=new _three.Vector3,linkPos=new _three.Vector3,invLinkQ=new _three.Quaternion,linkScale=new _three.Vector3,axis=new _three.Vector3,vector=new _three.Vector3;return function(){for(var bones=this.mesh.skeleton.bones,iks=this.iks,math=Math,i=0,il=iks.length;i<\nil;i++){var ik=iks[i],effector=bones[ik.effector];targetPos.setFromMatrixPosition(bones[ik.target].matrixWorld);for(var links=ik.links,iteration=void 0!==ik.iteration?ik.iteration:1,j=0;j<iteration;j++){for(var rotated=!1,k=0,kl=links.length;k<kl;k++){var link=bones[links[k].index];if(!1===links[k].enabled)break;var limitation=links[k].limitation,rotationMin=links[k].rotationMin,rotationMax=links[k].rotationMax;link.matrixWorld.decompose(linkPos,invLinkQ,linkScale);invLinkQ.invert();effectorPos.setFromMatrixPosition(effector.matrixWorld);\neffectorVec.subVectors(effectorPos,linkPos);effectorVec.applyQuaternion(invLinkQ);effectorVec.normalize();targetVec.subVectors(targetPos,linkPos);targetVec.applyQuaternion(invLinkQ);targetVec.normalize();var angle=targetVec.dot(effectorVec);1<angle?angle=1:-1>angle&&(angle=-1);angle=math.acos(angle);1E-5>angle||(void 0!==ik.minAngle&&angle<ik.minAngle&&(angle=ik.minAngle),void 0!==ik.maxAngle&&angle>ik.maxAngle&&(angle=ik.maxAngle),axis.crossVectors(effectorVec,targetVec),axis.normalize(),q.setFromAxisAngle(axis,\nangle),link.quaternion.multiply(q),void 0!==limitation&&(rotated=link.quaternion.w,1<rotated&&(rotated=1),angle=math.sqrt(1-rotated*rotated),link.quaternion.set(limitation.x*angle,limitation.y*angle,limitation.z*angle,rotated)),void 0!==rotationMin&&link.rotation.setFromVector3(link.rotation.toVector3(vector).max(rotationMin)),void 0!==rotationMax&&link.rotation.setFromVector3(link.rotation.toVector3(vector).min(rotationMax)),link.updateMatrixWorld(!0),rotated=!0)}if(!rotated)break}}return this}}(),\ncreateHelper:function(){return new CCDIKHelper(this.mesh,this.mesh.geometry.userData.MMD.iks)},_valid:function(){for(var iks=this.iks,bones=this.mesh.skeleton.bones,i=0,il=iks.length;i<il;i++){var ik=iks[i],links=ik.links;ik=bones[ik.effector];for(var j=0,jl=links.length;j<jl;j++){var link1=bones[links[j].index];ik.parent!==link1&&console.warn(\"THREE.CCDIKSolver: bone \".concat(ik.name,\" is not the child of bone \").concat(link1.name));ik=link1}}}};CCDIKHelper.prototype=Object.assign(Object.create(_three.Object3D.prototype),\n{constructor:CCDIKHelper,updateMatrixWorld:function(){function getPosition(bone,matrixWorldInv){return vector.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv)}function setPositionOfBoneToAttributeArray(array,index,bone,matrixWorldInv){bone=getPosition(bone,matrixWorldInv);array[3*index]=bone.x;array[3*index+1]=bone.y;array[3*index+2]=bone.z}var matrix=new _three.Matrix4,vector=new _three.Vector3;return function(force){var mesh=this.root;if(this.visible){var offset=0,iks=this.iks,\nbones=mesh.skeleton.bones;matrix.copy(mesh.matrixWorld).invert();for(var i=0,il=iks.length;i<il;i++){var ik=iks[i],targetBone=bones[ik.target],effectorBone=bones[ik.effector],targetMesh=this.children[offset++],effectorMesh=this.children[offset++];targetMesh.position.copy(getPosition(targetBone,matrix));effectorMesh.position.copy(getPosition(effectorBone,matrix));effectorMesh=0;for(var jl=ik.links.length;effectorMesh<jl;effectorMesh++)targetMesh=ik.links[effectorMesh],targetMesh=bones[targetMesh.index],\nthis.children[offset++].position.copy(getPosition(targetMesh,matrix));effectorMesh=this.children[offset++];jl=effectorMesh.geometry.attributes.position.array;setPositionOfBoneToAttributeArray(jl,0,targetBone,matrix);setPositionOfBoneToAttributeArray(jl,1,effectorBone,matrix);targetBone=0;for(effectorBone=ik.links.length;targetBone<effectorBone;targetBone++)targetMesh=ik.links[targetBone],targetMesh=bones[targetMesh.index],setPositionOfBoneToAttributeArray(jl,targetBone+2,targetMesh,matrix);effectorMesh.geometry.attributes.position.needsUpdate=\n!0}}this.matrix.copy(mesh.matrixWorld);_three.Object3D.prototype.updateMatrixWorld.call(this,force)}}(),_init:function(){for(var iks=this.iks,i=0,il=iks.length;i<il;i++){var ik=iks[i];this.add(new _three.Mesh(this.sphereGeometry,this.targetSphereMaterial));this.add(new _three.Mesh(this.sphereGeometry,this.effectorSphereMaterial));for(var j=0,jl=ik.links.length;j<jl;j++)this.add(new _three.Mesh(this.sphereGeometry,this.linkSphereMaterial));j=this.add;jl=_three.Line;var ik$jscomp$0=ik;ik=new _three.BufferGeometry;\nik$jscomp$0=new Float32Array(3*(2+ik$jscomp$0.links.length));ik.setAttribute(\"position\",new _three.BufferAttribute(ik$jscomp$0,3));j.call(this,new jl(ik,this.lineMaterial))}}});return CCDIKSolver}();exports.CCDIKSolver=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$animation$CCDIKSolver\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CCDIKSolver = void 0;\n\nvar _three = require(\"three\");\n\n/**\n * CCD Algorithm\n *  - https://sites.google.com/site/auraliusproject/ccd-algorithm\n *\n * // ik parameter example\n * //\n * // target, effector, index in links are bone index in skeleton.bones.\n * // the bones relation should be\n * // <-- parent                                  child -->\n * // links[ n ], links[ n - 1 ], ..., links[ 0 ], effector\n * iks = [ {\n *\ttarget: 1,\n *\teffector: 2,\n *\tlinks: [ { index: 5, limitation: new Vector3( 1, 0, 0 ) }, { index: 4, enabled: false }, { index : 3 } ],\n *\titeration: 10,\n *\tminAngle: 0.0,\n *\tmaxAngle: 1.0,\n * } ];\n */\nvar CCDIKSolver = function () {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} iks\n   */\n  function CCDIKSolver(mesh, iks) {\n    this.mesh = mesh;\n    this.iks = iks || [];\n\n    this._valid();\n  }\n\n  CCDIKSolver.prototype = {\n    constructor: CCDIKSolver,\n\n    /**\n     * Update IK bones.\n     *\n     * @return {CCDIKSolver}\n     */\n    update: function () {\n      var q = new _three.Quaternion();\n      var targetPos = new _three.Vector3();\n      var targetVec = new _three.Vector3();\n      var effectorPos = new _three.Vector3();\n      var effectorVec = new _three.Vector3();\n      var linkPos = new _three.Vector3();\n      var invLinkQ = new _three.Quaternion();\n      var linkScale = new _three.Vector3();\n      var axis = new _three.Vector3();\n      var vector = new _three.Vector3();\n      return function update() {\n        var bones = this.mesh.skeleton.bones;\n        var iks = this.iks; // for reference overhead reduction in loop\n\n        var math = Math;\n\n        for (var i = 0, il = iks.length; i < il; i++) {\n          var ik = iks[i];\n          var effector = bones[ik.effector];\n          var target = bones[ik.target]; // don't use getWorldPosition() here for the performance\n          // because it calls updateMatrixWorld( true ) inside.\n\n          targetPos.setFromMatrixPosition(target.matrixWorld);\n          var links = ik.links;\n          var iteration = ik.iteration !== undefined ? ik.iteration : 1;\n\n          for (var j = 0; j < iteration; j++) {\n            var rotated = false;\n\n            for (var k = 0, kl = links.length; k < kl; k++) {\n              var link = bones[links[k].index]; // skip this link and following links.\n              // this skip is used for MMD performance optimization.\n\n              if (links[k].enabled === false) break;\n              var limitation = links[k].limitation;\n              var rotationMin = links[k].rotationMin;\n              var rotationMax = links[k].rotationMax; // don't use getWorldPosition/Quaternion() here for the performance\n              // because they call updateMatrixWorld( true ) inside.\n\n              link.matrixWorld.decompose(linkPos, invLinkQ, linkScale);\n              invLinkQ.invert();\n              effectorPos.setFromMatrixPosition(effector.matrixWorld); // work in link world\n\n              effectorVec.subVectors(effectorPos, linkPos);\n              effectorVec.applyQuaternion(invLinkQ);\n              effectorVec.normalize();\n              targetVec.subVectors(targetPos, linkPos);\n              targetVec.applyQuaternion(invLinkQ);\n              targetVec.normalize();\n              var angle = targetVec.dot(effectorVec);\n\n              if (angle > 1.0) {\n                angle = 1.0;\n              } else if (angle < -1.0) {\n                angle = -1.0;\n              }\n\n              angle = math.acos(angle); // skip if changing angle is too small to prevent vibration of bone\n              // Refer to http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n\n              if (angle < 1e-5) continue;\n\n              if (ik.minAngle !== undefined && angle < ik.minAngle) {\n                angle = ik.minAngle;\n              }\n\n              if (ik.maxAngle !== undefined && angle > ik.maxAngle) {\n                angle = ik.maxAngle;\n              }\n\n              axis.crossVectors(effectorVec, targetVec);\n              axis.normalize();\n              q.setFromAxisAngle(axis, angle);\n              link.quaternion.multiply(q); // TODO: re-consider the limitation specification\n\n              if (limitation !== undefined) {\n                var c = link.quaternion.w;\n                if (c > 1.0) c = 1.0;\n                var c2 = math.sqrt(1 - c * c);\n                link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n              }\n\n              if (rotationMin !== undefined) {\n                link.rotation.setFromVector3(link.rotation.toVector3(vector).max(rotationMin));\n              }\n\n              if (rotationMax !== undefined) {\n                link.rotation.setFromVector3(link.rotation.toVector3(vector).min(rotationMax));\n              }\n\n              link.updateMatrixWorld(true);\n              rotated = true;\n            }\n\n            if (!rotated) break;\n          }\n        }\n\n        return this;\n      };\n    }(),\n\n    /**\n     * Creates Helper\n     *\n     * @return {CCDIKHelper}\n     */\n    createHelper: function createHelper() {\n      return new CCDIKHelper(this.mesh, this.mesh.geometry.userData.MMD.iks);\n    },\n    // private methods\n    _valid: function _valid() {\n      var iks = this.iks;\n      var bones = this.mesh.skeleton.bones;\n\n      for (var i = 0, il = iks.length; i < il; i++) {\n        var ik = iks[i];\n        var effector = bones[ik.effector];\n        var links = ik.links;\n        var link0 = void 0,\n            link1 = void 0;\n        link0 = effector;\n\n        for (var j = 0, jl = links.length; j < jl; j++) {\n          link1 = bones[links[j].index];\n\n          if (link0.parent !== link1) {\n            console.warn(\"THREE.CCDIKSolver: bone \".concat(link0.name, \" is not the child of bone \").concat(link1.name));\n          }\n\n          link0 = link1;\n        }\n      }\n    }\n  };\n  /**\n   * Visualize IK bones\n   *\n   * @param {SkinnedMesh} mesh\n   * @param {Array<Object>} iks\n   */\n\n  function CCDIKHelper(mesh, iks) {\n    _three.Object3D.call(this);\n\n    this.root = mesh;\n    this.iks = iks || [];\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.sphereGeometry = new _three.SphereGeometry(0.25, 16, 8);\n    this.targetSphereMaterial = new _three.MeshBasicMaterial({\n      color: new _three.Color(0xff8888),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.effectorSphereMaterial = new _three.MeshBasicMaterial({\n      color: new _three.Color(0x88ff88),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.linkSphereMaterial = new _three.MeshBasicMaterial({\n      color: new _three.Color(0x8888ff),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.lineMaterial = new _three.LineBasicMaterial({\n      color: new _three.Color(0xff0000),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n\n    this._init();\n  }\n\n  CCDIKHelper.prototype = Object.assign(Object.create(_three.Object3D.prototype), {\n    constructor: CCDIKHelper,\n\n    /**\n     * Updates IK bones visualization.\n     */\n    updateMatrixWorld: function () {\n      var matrix = new _three.Matrix4();\n      var vector = new _three.Vector3();\n\n      function getPosition(bone, matrixWorldInv) {\n        return vector.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n      }\n\n      function setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n        var v = getPosition(bone, matrixWorldInv);\n        array[index * 3 + 0] = v.x;\n        array[index * 3 + 1] = v.y;\n        array[index * 3 + 2] = v.z;\n      }\n\n      return function updateMatrixWorld(force) {\n        var mesh = this.root;\n\n        if (this.visible) {\n          var offset = 0;\n          var iks = this.iks;\n          var bones = mesh.skeleton.bones;\n          matrix.copy(mesh.matrixWorld).invert();\n\n          for (var i = 0, il = iks.length; i < il; i++) {\n            var ik = iks[i];\n            var targetBone = bones[ik.target];\n            var effectorBone = bones[ik.effector];\n            var targetMesh = this.children[offset++];\n            var effectorMesh = this.children[offset++];\n            targetMesh.position.copy(getPosition(targetBone, matrix));\n            effectorMesh.position.copy(getPosition(effectorBone, matrix));\n\n            for (var j = 0, jl = ik.links.length; j < jl; j++) {\n              var link = ik.links[j];\n              var linkBone = bones[link.index];\n              var linkMesh = this.children[offset++];\n              linkMesh.position.copy(getPosition(linkBone, matrix));\n            }\n\n            var line = this.children[offset++];\n            var array = line.geometry.attributes.position.array;\n            setPositionOfBoneToAttributeArray(array, 0, targetBone, matrix);\n            setPositionOfBoneToAttributeArray(array, 1, effectorBone, matrix);\n\n            for (var _j = 0, _jl = ik.links.length; _j < _jl; _j++) {\n              var link = ik.links[_j];\n              var linkBone = bones[link.index];\n              setPositionOfBoneToAttributeArray(array, _j + 2, linkBone, matrix);\n            }\n\n            line.geometry.attributes.position.needsUpdate = true;\n          }\n        }\n\n        this.matrix.copy(mesh.matrixWorld);\n\n        _three.Object3D.prototype.updateMatrixWorld.call(this, force);\n      };\n    }(),\n    // private method\n    _init: function _init() {\n      var scope = this;\n      var iks = this.iks;\n\n      function createLineGeometry(ik) {\n        var geometry = new _three.BufferGeometry();\n        var vertices = new Float32Array((2 + ik.links.length) * 3);\n        geometry.setAttribute('position', new _three.BufferAttribute(vertices, 3));\n        return geometry;\n      }\n\n      function createTargetMesh() {\n        return new _three.Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n      }\n\n      function createEffectorMesh() {\n        return new _three.Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n      }\n\n      function createLinkMesh() {\n        return new _three.Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n      }\n\n      function createLine(ik) {\n        return new _three.Line(createLineGeometry(ik), scope.lineMaterial);\n      }\n\n      for (var i = 0, il = iks.length; i < il; i++) {\n        var ik = iks[i];\n        this.add(createTargetMesh());\n        this.add(createEffectorMesh());\n\n        for (var j = 0, jl = ik.links.length; j < jl; j++) {\n          this.add(createLinkMesh());\n        }\n\n        this.add(createLine(ik));\n      }\n    }\n  });\n  return CCDIKSolver;\n}();\n\nexports.CCDIKSolver = CCDIKSolver;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["depthTest","iks","linkSphereMaterial","needsUpdate","prototype","transparent","sphereGeometry","__esModule","matrixAutoUpdate","root","update","targetSphereMaterial","lineMaterial","value","_valid","_init","mesh","updateMatrixWorld","createHelper","depthWrite","CCDIKSolver","color","constructor","effectorSphereMaterial"]],"~:compiled-at",1630917515349,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$animation$CCDIKSolver.js\",\n\"lineCount\":12,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/animation/CCDIKSolver.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$animation$CCDIKSolver\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.CCDIKSolver = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\n/**\\n * CCD Algorithm\\n *  - https://sites.google.com/site/auraliusproject/ccd-algorithm\\n *\\n * // ik parameter example\\n * //\\n * // target, effector, index in links are bone index in skeleton.bones.\\n * // the bones relation should be\\n * // <-- parent                                  child --\\u003e\\n * // links[ n ], links[ n - 1 ], ..., links[ 0 ], effector\\n * iks = [ {\\n *\\ttarget: 1,\\n *\\teffector: 2,\\n *\\tlinks: [ { index: 5, limitation: new Vector3( 1, 0, 0 ) }, { index: 4, enabled: false }, { index : 3 } ],\\n *\\titeration: 10,\\n *\\tminAngle: 0.0,\\n *\\tmaxAngle: 1.0,\\n * } ];\\n */\\nvar CCDIKSolver = function () {\\n  /**\\n   * @param {THREE.SkinnedMesh} mesh\\n   * @param {Array<Object>} iks\\n   */\\n  function CCDIKSolver(mesh, iks) {\\n    this.mesh = mesh;\\n    this.iks = iks || [];\\n\\n    this._valid();\\n  }\\n\\n  CCDIKSolver.prototype = {\\n    constructor: CCDIKSolver,\\n\\n    /**\\n     * Update IK bones.\\n     *\\n     * @return {CCDIKSolver}\\n     */\\n    update: function () {\\n      var q = new _three.Quaternion();\\n      var targetPos = new _three.Vector3();\\n      var targetVec = new _three.Vector3();\\n      var effectorPos = new _three.Vector3();\\n      var effectorVec = new _three.Vector3();\\n      var linkPos = new _three.Vector3();\\n      var invLinkQ = new _three.Quaternion();\\n      var linkScale = new _three.Vector3();\\n      var axis = new _three.Vector3();\\n      var vector = new _three.Vector3();\\n      return function update() {\\n        var bones = this.mesh.skeleton.bones;\\n        var iks = this.iks; // for reference overhead reduction in loop\\n\\n        var math = Math;\\n\\n        for (var i = 0, il = iks.length; i < il; i++) {\\n          var ik = iks[i];\\n          var effector = bones[ik.effector];\\n          var target = bones[ik.target]; // don't use getWorldPosition() here for the performance\\n          // because it calls updateMatrixWorld( true ) inside.\\n\\n          targetPos.setFromMatrixPosition(target.matrixWorld);\\n          var links = ik.links;\\n          var iteration = ik.iteration !== undefined ? ik.iteration : 1;\\n\\n          for (var j = 0; j < iteration; j++) {\\n            var rotated = false;\\n\\n            for (var k = 0, kl = links.length; k < kl; k++) {\\n              var link = bones[links[k].index]; // skip this link and following links.\\n              // this skip is used for MMD performance optimization.\\n\\n              if (links[k].enabled === false) break;\\n              var limitation = links[k].limitation;\\n              var rotationMin = links[k].rotationMin;\\n              var rotationMax = links[k].rotationMax; // don't use getWorldPosition/Quaternion() here for the performance\\n              // because they call updateMatrixWorld( true ) inside.\\n\\n              link.matrixWorld.decompose(linkPos, invLinkQ, linkScale);\\n              invLinkQ.invert();\\n              effectorPos.setFromMatrixPosition(effector.matrixWorld); // work in link world\\n\\n              effectorVec.subVectors(effectorPos, linkPos);\\n              effectorVec.applyQuaternion(invLinkQ);\\n              effectorVec.normalize();\\n              targetVec.subVectors(targetPos, linkPos);\\n              targetVec.applyQuaternion(invLinkQ);\\n              targetVec.normalize();\\n              var angle = targetVec.dot(effectorVec);\\n\\n              if (angle > 1.0) {\\n                angle = 1.0;\\n              } else if (angle < -1.0) {\\n                angle = -1.0;\\n              }\\n\\n              angle = math.acos(angle); // skip if changing angle is too small to prevent vibration of bone\\n              // Refer to http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\\n\\n              if (angle < 1e-5) continue;\\n\\n              if (ik.minAngle !== undefined && angle < ik.minAngle) {\\n                angle = ik.minAngle;\\n              }\\n\\n              if (ik.maxAngle !== undefined && angle > ik.maxAngle) {\\n                angle = ik.maxAngle;\\n              }\\n\\n              axis.crossVectors(effectorVec, targetVec);\\n              axis.normalize();\\n              q.setFromAxisAngle(axis, angle);\\n              link.quaternion.multiply(q); // TODO: re-consider the limitation specification\\n\\n              if (limitation !== undefined) {\\n                var c = link.quaternion.w;\\n                if (c > 1.0) c = 1.0;\\n                var c2 = math.sqrt(1 - c * c);\\n                link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\\n              }\\n\\n              if (rotationMin !== undefined) {\\n                link.rotation.setFromVector3(link.rotation.toVector3(vector).max(rotationMin));\\n              }\\n\\n              if (rotationMax !== undefined) {\\n                link.rotation.setFromVector3(link.rotation.toVector3(vector).min(rotationMax));\\n              }\\n\\n              link.updateMatrixWorld(true);\\n              rotated = true;\\n            }\\n\\n            if (!rotated) break;\\n          }\\n        }\\n\\n        return this;\\n      };\\n    }(),\\n\\n    /**\\n     * Creates Helper\\n     *\\n     * @return {CCDIKHelper}\\n     */\\n    createHelper: function createHelper() {\\n      return new CCDIKHelper(this.mesh, this.mesh.geometry.userData.MMD.iks);\\n    },\\n    // private methods\\n    _valid: function _valid() {\\n      var iks = this.iks;\\n      var bones = this.mesh.skeleton.bones;\\n\\n      for (var i = 0, il = iks.length; i < il; i++) {\\n        var ik = iks[i];\\n        var effector = bones[ik.effector];\\n        var links = ik.links;\\n        var link0 = void 0,\\n            link1 = void 0;\\n        link0 = effector;\\n\\n        for (var j = 0, jl = links.length; j < jl; j++) {\\n          link1 = bones[links[j].index];\\n\\n          if (link0.parent !== link1) {\\n            console.warn(\\\"THREE.CCDIKSolver: bone \\\".concat(link0.name, \\\" is not the child of bone \\\").concat(link1.name));\\n          }\\n\\n          link0 = link1;\\n        }\\n      }\\n    }\\n  };\\n  /**\\n   * Visualize IK bones\\n   *\\n   * @param {SkinnedMesh} mesh\\n   * @param {Array<Object>} iks\\n   */\\n\\n  function CCDIKHelper(mesh, iks) {\\n    _three.Object3D.call(this);\\n\\n    this.root = mesh;\\n    this.iks = iks || [];\\n    this.matrix.copy(mesh.matrixWorld);\\n    this.matrixAutoUpdate = false;\\n    this.sphereGeometry = new _three.SphereGeometry(0.25, 16, 8);\\n    this.targetSphereMaterial = new _three.MeshBasicMaterial({\\n      color: new _three.Color(0xff8888),\\n      depthTest: false,\\n      depthWrite: false,\\n      transparent: true\\n    });\\n    this.effectorSphereMaterial = new _three.MeshBasicMaterial({\\n      color: new _three.Color(0x88ff88),\\n      depthTest: false,\\n      depthWrite: false,\\n      transparent: true\\n    });\\n    this.linkSphereMaterial = new _three.MeshBasicMaterial({\\n      color: new _three.Color(0x8888ff),\\n      depthTest: false,\\n      depthWrite: false,\\n      transparent: true\\n    });\\n    this.lineMaterial = new _three.LineBasicMaterial({\\n      color: new _three.Color(0xff0000),\\n      depthTest: false,\\n      depthWrite: false,\\n      transparent: true\\n    });\\n\\n    this._init();\\n  }\\n\\n  CCDIKHelper.prototype = Object.assign(Object.create(_three.Object3D.prototype), {\\n    constructor: CCDIKHelper,\\n\\n    /**\\n     * Updates IK bones visualization.\\n     */\\n    updateMatrixWorld: function () {\\n      var matrix = new _three.Matrix4();\\n      var vector = new _three.Vector3();\\n\\n      function getPosition(bone, matrixWorldInv) {\\n        return vector.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\\n      }\\n\\n      function setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\\n        var v = getPosition(bone, matrixWorldInv);\\n        array[index * 3 + 0] = v.x;\\n        array[index * 3 + 1] = v.y;\\n        array[index * 3 + 2] = v.z;\\n      }\\n\\n      return function updateMatrixWorld(force) {\\n        var mesh = this.root;\\n\\n        if (this.visible) {\\n          var offset = 0;\\n          var iks = this.iks;\\n          var bones = mesh.skeleton.bones;\\n          matrix.copy(mesh.matrixWorld).invert();\\n\\n          for (var i = 0, il = iks.length; i < il; i++) {\\n            var ik = iks[i];\\n            var targetBone = bones[ik.target];\\n            var effectorBone = bones[ik.effector];\\n            var targetMesh = this.children[offset++];\\n            var effectorMesh = this.children[offset++];\\n            targetMesh.position.copy(getPosition(targetBone, matrix));\\n            effectorMesh.position.copy(getPosition(effectorBone, matrix));\\n\\n            for (var j = 0, jl = ik.links.length; j < jl; j++) {\\n              var link = ik.links[j];\\n              var linkBone = bones[link.index];\\n              var linkMesh = this.children[offset++];\\n              linkMesh.position.copy(getPosition(linkBone, matrix));\\n            }\\n\\n            var line = this.children[offset++];\\n            var array = line.geometry.attributes.position.array;\\n            setPositionOfBoneToAttributeArray(array, 0, targetBone, matrix);\\n            setPositionOfBoneToAttributeArray(array, 1, effectorBone, matrix);\\n\\n            for (var _j = 0, _jl = ik.links.length; _j < _jl; _j++) {\\n              var link = ik.links[_j];\\n              var linkBone = bones[link.index];\\n              setPositionOfBoneToAttributeArray(array, _j + 2, linkBone, matrix);\\n            }\\n\\n            line.geometry.attributes.position.needsUpdate = true;\\n          }\\n        }\\n\\n        this.matrix.copy(mesh.matrixWorld);\\n\\n        _three.Object3D.prototype.updateMatrixWorld.call(this, force);\\n      };\\n    }(),\\n    // private method\\n    _init: function _init() {\\n      var scope = this;\\n      var iks = this.iks;\\n\\n      function createLineGeometry(ik) {\\n        var geometry = new _three.BufferGeometry();\\n        var vertices = new Float32Array((2 + ik.links.length) * 3);\\n        geometry.setAttribute('position', new _three.BufferAttribute(vertices, 3));\\n        return geometry;\\n      }\\n\\n      function createTargetMesh() {\\n        return new _three.Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\\n      }\\n\\n      function createEffectorMesh() {\\n        return new _three.Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\\n      }\\n\\n      function createLinkMesh() {\\n        return new _three.Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\\n      }\\n\\n      function createLine(ik) {\\n        return new _three.Line(createLineGeometry(ik), scope.lineMaterial);\\n      }\\n\\n      for (var i = 0, il = iks.length; i < il; i++) {\\n        var ik = iks[i];\\n        this.add(createTargetMesh());\\n        this.add(createEffectorMesh());\\n\\n        for (var j = 0, jl = ik.links.length; j < jl; j++) {\\n          this.add(createLinkMesh());\\n        }\\n\\n        this.add(createLine(ik));\\n      }\\n    }\\n  });\\n  return CCDIKSolver;\\n}();\\n\\nexports.CCDIKSolver = CCDIKSolver;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"CCDIKSolver\",\"_three\",\"mesh\",\"iks\",\"_valid\",\"CCDIKHelper\",\"Object3D\",\"call\",\"root\",\"matrix\",\"copy\",\"matrixWorld\",\"matrixAutoUpdate\",\"sphereGeometry\",\"SphereGeometry\",\"targetSphereMaterial\",\"MeshBasicMaterial\",\"color\",\"Color\",\"depthTest\",\"depthWrite\",\"transparent\",\"effectorSphereMaterial\",\"linkSphereMaterial\",\"lineMaterial\",\"LineBasicMaterial\",\"_init\",\"prototype\",\"constructor\",\"update\",\"q\",\"Quaternion\",\"targetPos\",\"Vector3\",\"targetVec\",\"effectorPos\",\"effectorVec\",\"linkPos\",\"invLinkQ\",\"linkScale\",\"axis\",\"vector\",\"bones\",\"skeleton\",\"math\",\"Math\",\"i\",\"il\",\"length\",\"ik\",\"effector\",\"setFromMatrixPosition\",\"target\",\"links\",\"iteration\",\"undefined\",\"j\",\"rotated\",\"k\",\"kl\",\"link\",\"index\",\"enabled\",\"limitation\",\"rotationMin\",\"rotationMax\",\"decompose\",\"invert\",\"subVectors\",\"applyQuaternion\",\"normalize\",\"angle\",\"dot\",\"acos\",\"minAngle\",\"maxAngle\",\"crossVectors\",\"setFromAxisAngle\",\"quaternion\",\"multiply\",\"c\",\"w\",\"c2\",\"sqrt\",\"set\",\"x\",\"y\",\"z\",\"rotation\",\"setFromVector3\",\"toVector3\",\"max\",\"min\",\"updateMatrixWorld\",\"createHelper\",\"geometry\",\"userData\",\"MMD\",\"link0\",\"jl\",\"link1\",\"parent\",\"console\",\"warn\",\"concat\",\"name\",\"assign\",\"create\",\"getPosition\",\"bone\",\"matrixWorldInv\",\"applyMatrix4\",\"setPositionOfBoneToAttributeArray\",\"array\",\"v\",\"Matrix4\",\"force\",\"visible\",\"offset\",\"targetBone\",\"effectorBone\",\"targetMesh\",\"children\",\"effectorMesh\",\"position\",\"linkBone\",\"linkMesh\",\"line\",\"attributes\",\"_j\",\"_jl\",\"needsUpdate\",\"add\",\"Mesh\",\"scope\",\"Line\",\"BufferGeometry\",\"vertices\",\"Float32Array\",\"setAttribute\",\"BufferAttribute\"]\n}\n"]