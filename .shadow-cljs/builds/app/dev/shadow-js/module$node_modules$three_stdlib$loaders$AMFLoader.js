["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/loaders/AMFLoader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$loaders$AMFLoader=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=\ndescriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);staticProps&&_defineProperties(Constructor,staticProps);return Constructor}function _getPrototypeOf(o$jscomp$0){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)};\nreturn _getPrototypeOf(o$jscomp$0)}function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&null!==superClass)throw new TypeError(\"Super expression must either be null or a function\");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}});superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o$jscomp$0,p$jscomp$0){_setPrototypeOf=Object.setPrototypeOf||function(o,p){o.__proto__=p;return o};\nreturn _setPrototypeOf(o$jscomp$0,p$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.AMFLoader=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_fflate=require(\"module$node_modules$fflate$esm$browser\");global=function(_Loader){function AMFLoader(manager){if(!(this instanceof AMFLoader))throw new TypeError(\"Cannot call a class as a function\");manager=_getPrototypeOf(AMFLoader).call(this,manager);if(!manager||\"object\"!==_typeof(manager)&&\"function\"!==\ntypeof manager){if(void 0===this)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");manager=this}return manager}_inherits(AMFLoader,_Loader);_createClass(AMFLoader,[{key:\"load\",value:function(url,onLoad,onProgress,onError){var scope=this,loader=new _three.FileLoader(scope.manager);loader.setPath(scope.path);loader.setResponseType(\"arraybuffer\");loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(text))}catch(e){onError?\nonError(e):console.error(e),scope.manager.itemError(url)}},onProgress,onError)}},{key:\"parse\",value:function(data$jscomp$0){function loadMaterials(node){for(var matName=\"AMF Material\",matId=node.attributes.id.textContent,color={r:1,g:1,b:1,a:1},_i=0;_i<node.childNodes.length;_i++){var matChildEl=node.childNodes[_i];\"metadata\"===matChildEl.nodeName&&void 0!==matChildEl.attributes.type?\"name\"===matChildEl.attributes.type.value&&(matName=matChildEl.textContent):\"color\"===matChildEl.nodeName&&(color=\nloadColor(matChildEl))}node=new _three.MeshPhongMaterial({flatShading:!0,color:new _three.Color(color.r,color.g,color.b),name:matName});1!==color.a&&(node.transparent=!0,node.opacity=color.a);return{id:matId,material:node}}function loadColor(node){for(var color={r:1,g:1,b:1,a:1},_i2=0;_i2<node.childNodes.length;_i2++){var matColor=node.childNodes[_i2];\"r\"===matColor.nodeName?color.r=matColor.textContent:\"g\"===matColor.nodeName?color.g=matColor.textContent:\"b\"===matColor.nodeName?color.b=matColor.textContent:\n\"a\"===matColor.nodeName&&(color.a=matColor.textContent)}return color}function loadObject(node){var objId=node.attributes.id.textContent,loadedObject={name:\"amfobject\",meshes:[]},currColor=null;for(node=node.firstElementChild;node;){if(\"metadata\"===node.nodeName)void 0!==node.attributes.type&&\"name\"===node.attributes.type.value&&(loadedObject.name=node.textContent);else if(\"color\"===node.nodeName)currColor=loadColor(node);else if(\"mesh\"===node.nodeName){for(var currMeshNode=node.firstElementChild,\nmesh={vertices:[],normals:[],volumes:[],color:currColor};currMeshNode;){if(\"vertices\"===currMeshNode.nodeName){var JSCompiler_object_inline_vertices_6633=[];var JSCompiler_object_inline_normals_6634=[];for(var currVerticesNode=currMeshNode.firstElementChild;currVerticesNode;){if(\"vertex\"===currVerticesNode.nodeName)for(var vNode=currVerticesNode.firstElementChild;vNode;){if(\"coordinates\"===vNode.nodeName){var x=vNode.getElementsByTagName(\"x\")[0].textContent,y=vNode.getElementsByTagName(\"y\")[0].textContent,\nz=vNode.getElementsByTagName(\"z\")[0].textContent;JSCompiler_object_inline_vertices_6633.push(x,y,z)}else\"normal\"===vNode.nodeName&&(x=vNode.getElementsByTagName(\"nx\")[0].textContent,y=vNode.getElementsByTagName(\"ny\")[0].textContent,z=vNode.getElementsByTagName(\"nz\")[0].textContent,JSCompiler_object_inline_normals_6634.push(x,y,z));vNode=vNode.nextElementSibling}currVerticesNode=currVerticesNode.nextElementSibling}mesh.normals=mesh.normals.concat(JSCompiler_object_inline_normals_6634);mesh.vertices=\nmesh.vertices.concat(JSCompiler_object_inline_vertices_6633)}else if(\"volume\"===currMeshNode.nodeName){JSCompiler_object_inline_normals_6634=mesh.volumes;JSCompiler_object_inline_vertices_6633=JSCompiler_object_inline_normals_6634.push;currVerticesNode={name:\"\",triangles:[],materialid:null};vNode=currMeshNode.firstElementChild;void 0!==currMeshNode.attributes.materialid&&(currVerticesNode.materialId=currMeshNode.attributes.materialid.nodeValue);for(;vNode;)\"metadata\"===vNode.nodeName?void 0!==vNode.attributes.type&&\n\"name\"===vNode.attributes.type.value&&(currVerticesNode.name=vNode.textContent):\"triangle\"===vNode.nodeName&&(x=vNode.getElementsByTagName(\"v1\")[0].textContent,y=vNode.getElementsByTagName(\"v2\")[0].textContent,z=vNode.getElementsByTagName(\"v3\")[0].textContent,currVerticesNode.triangles.push(x,y,z)),vNode=vNode.nextElementSibling;JSCompiler_object_inline_vertices_6633.call(JSCompiler_object_inline_normals_6634,currVerticesNode)}currMeshNode=currMeshNode.nextElementSibling}loadedObject.meshes.push(mesh)}node=\nnode.nextElementSibling}return{id:objId,obj:loadedObject}}var xmlData=function(data){var view=new DataView(data);if(\"PK\"===String.fromCharCode(view.getUint8(0),view.getUint8(1))){var file=view=null;console.log(\"THREE.AMFLoader: Loading Zip\");try{view=(0,_fflate.unzipSync)(new Uint8Array(data))}catch(e){if(e instanceof ReferenceError)return console.log(\"THREE.AMFLoader: fflate missing and file is compressed.\"),null}for(file in view)if(\".amf\"===file.toLowerCase().substr(-4))break;console.log(\"THREE.AMFLoader: Trying to load file asset: \"+\nfile);view=new DataView(view[file].buffer)}data=_three.LoaderUtils.decodeText(view);data=(new DOMParser).parseFromString(data,\"application/xml\");return\"amf\"!==data.documentElement.nodeName.toLowerCase()?(console.log(\"THREE.AMFLoader: Error loading AMF - no AMF document found.\"),null):data}(data$jscomp$0),amfName=\"\",amfAuthor=\"\";data$jscomp$0=function(node){var scale=1,unit=\"millimeter\";void 0!==node.documentElement.attributes.unit&&(unit=node.documentElement.attributes.unit.value.toLowerCase());node=\n{millimeter:1,inch:25.4,feet:304.8,meter:1E3,micron:.001};void 0!==node[unit]&&(scale=node[unit]);console.log(\"THREE.AMFLoader: Unit scale: \"+scale);return scale}(xmlData);var amfMaterials={},amfObjects={},childNodes=xmlData.documentElement.childNodes;for(xmlData=0;xmlData<childNodes.length;xmlData++){var child=childNodes[xmlData];\"metadata\"===child.nodeName?void 0!==child.attributes.type&&(\"name\"===child.attributes.type.value?amfName=child.textContent:\"author\"===child.attributes.type.value&&(amfAuthor=\nchild.textContent)):\"material\"===child.nodeName?(child=loadMaterials(child),amfMaterials[child.id]=child.material):\"object\"===child.nodeName&&(child=loadObject(child),amfObjects[child.id]=child.obj)}childNodes=new _three.Group;child=new _three.MeshPhongMaterial({color:11184895,flatShading:!0});childNodes.name=amfName;childNodes.userData.author=amfAuthor;childNodes.userData.loader=\"AMF\";for(var id in amfObjects){xmlData=amfObjects[id];amfName=xmlData.meshes;amfAuthor=new _three.Group;amfAuthor.name=\nxmlData.name||\"\";for(xmlData=0;xmlData<amfName.length;xmlData++){var objDefaultMaterial=child;var j=amfName[xmlData];var vertices=new _three.Float32BufferAttribute(j.vertices,3),normals=null;j.normals.length&&(normals=new _three.Float32BufferAttribute(j.normals,3));if(j.color){var color$jscomp$0=j.color;objDefaultMaterial=child.clone();objDefaultMaterial.color=new _three.Color(color$jscomp$0.r,color$jscomp$0.g,color$jscomp$0.b);1!==color$jscomp$0.a&&(objDefaultMaterial.transparent=!0,objDefaultMaterial.opacity=\ncolor$jscomp$0.a)}color$jscomp$0=j.volumes;for(j=0;j<color$jscomp$0.length;j++){var volume=color$jscomp$0[j],newGeometry=new _three.BufferGeometry,material=objDefaultMaterial;newGeometry.setIndex(volume.triangles);newGeometry.setAttribute(\"position\",vertices.clone());normals&&newGeometry.setAttribute(\"normal\",normals.clone());void 0!==amfMaterials[volume.materialId]&&(material=amfMaterials[volume.materialId]);newGeometry.scale(data$jscomp$0,data$jscomp$0,data$jscomp$0);amfAuthor.add(new _three.Mesh(newGeometry,\nmaterial.clone()))}}childNodes.add(amfAuthor)}return childNodes}}]);return AMFLoader}(_three.Loader);exports.AMFLoader=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$loaders$AMFLoader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AMFLoader = void 0;\n\nvar _three = require(\"three\");\n\nvar _fflate = require(\"fflate\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * More information about the AMF format: http://amf.wikispaces.com\n *\n * Usage:\n *\tconst loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\nvar AMFLoader =\n/*#__PURE__*/\nfunction (_Loader) {\n  _inherits(AMFLoader, _Loader);\n\n  function AMFLoader(manager) {\n    _classCallCheck(this, AMFLoader);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AMFLoader).call(this, manager));\n  }\n\n  _createClass(AMFLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new _three.FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function loadDocument(data) {\n        var view = new DataView(data);\n        var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n\n        if (magic === 'PK') {\n          var zip = null;\n          var file = null;\n          console.log('THREE.AMFLoader: Loading Zip');\n\n          try {\n            zip = (0, _fflate.unzipSync)(new Uint8Array(data)); // eslint-disable-line no-undef\n          } catch (e) {\n            if (e instanceof ReferenceError) {\n              console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n              return null;\n            }\n          }\n\n          for (file in zip) {\n            if (file.toLowerCase().substr(-4) === '.amf') {\n              break;\n            }\n          }\n\n          console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n          view = new DataView(zip[file].buffer);\n        }\n\n        var fileText = _three.LoaderUtils.decodeText(view);\n\n        var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n          console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n          return null;\n        }\n\n        return xmlData;\n      }\n\n      function loadDocumentScale(node) {\n        var scale = 1.0;\n        var unit = 'millimeter';\n\n        if (node.documentElement.attributes.unit !== undefined) {\n          unit = node.documentElement.attributes.unit.value.toLowerCase();\n        }\n\n        var scaleUnits = {\n          millimeter: 1.0,\n          inch: 25.4,\n          feet: 304.8,\n          meter: 1000.0,\n          micron: 0.001\n        };\n\n        if (scaleUnits[unit] !== undefined) {\n          scale = scaleUnits[unit];\n        }\n\n        console.log('THREE.AMFLoader: Unit scale: ' + scale);\n        return scale;\n      }\n\n      function loadMaterials(node) {\n        var matName = 'AMF Material';\n        var matId = node.attributes.id.textContent;\n        var color = {\n          r: 1.0,\n          g: 1.0,\n          b: 1.0,\n          a: 1.0\n        };\n        var loadedMaterial = null;\n\n        for (var _i = 0; _i < node.childNodes.length; _i++) {\n          var matChildEl = node.childNodes[_i];\n\n          if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n            if (matChildEl.attributes.type.value === 'name') {\n              matName = matChildEl.textContent;\n            }\n          } else if (matChildEl.nodeName === 'color') {\n            color = loadColor(matChildEl);\n          }\n        }\n\n        loadedMaterial = new _three.MeshPhongMaterial({\n          flatShading: true,\n          color: new _three.Color(color.r, color.g, color.b),\n          name: matName\n        });\n\n        if (color.a !== 1.0) {\n          loadedMaterial.transparent = true;\n          loadedMaterial.opacity = color.a;\n        }\n\n        return {\n          id: matId,\n          material: loadedMaterial\n        };\n      }\n\n      function loadColor(node) {\n        var color = {\n          r: 1.0,\n          g: 1.0,\n          b: 1.0,\n          a: 1.0\n        };\n\n        for (var _i2 = 0; _i2 < node.childNodes.length; _i2++) {\n          var matColor = node.childNodes[_i2];\n\n          if (matColor.nodeName === 'r') {\n            color.r = matColor.textContent;\n          } else if (matColor.nodeName === 'g') {\n            color.g = matColor.textContent;\n          } else if (matColor.nodeName === 'b') {\n            color.b = matColor.textContent;\n          } else if (matColor.nodeName === 'a') {\n            color.a = matColor.textContent;\n          }\n        }\n\n        return color;\n      }\n\n      function loadMeshVolume(node) {\n        var volume = {\n          name: '',\n          triangles: [],\n          materialid: null\n        };\n        var currVolumeNode = node.firstElementChild;\n\n        if (node.attributes.materialid !== undefined) {\n          volume.materialId = node.attributes.materialid.nodeValue;\n        }\n\n        while (currVolumeNode) {\n          if (currVolumeNode.nodeName === 'metadata') {\n            if (currVolumeNode.attributes.type !== undefined) {\n              if (currVolumeNode.attributes.type.value === 'name') {\n                volume.name = currVolumeNode.textContent;\n              }\n            }\n          } else if (currVolumeNode.nodeName === 'triangle') {\n            var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n            var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n            var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n            volume.triangles.push(v1, v2, v3);\n          }\n\n          currVolumeNode = currVolumeNode.nextElementSibling;\n        }\n\n        return volume;\n      }\n\n      function loadMeshVertices(node) {\n        var vertArray = [];\n        var normalArray = [];\n        var currVerticesNode = node.firstElementChild;\n\n        while (currVerticesNode) {\n          if (currVerticesNode.nodeName === 'vertex') {\n            var vNode = currVerticesNode.firstElementChild;\n\n            while (vNode) {\n              if (vNode.nodeName === 'coordinates') {\n                var x = vNode.getElementsByTagName('x')[0].textContent;\n                var y = vNode.getElementsByTagName('y')[0].textContent;\n                var z = vNode.getElementsByTagName('z')[0].textContent;\n                vertArray.push(x, y, z);\n              } else if (vNode.nodeName === 'normal') {\n                var nx = vNode.getElementsByTagName('nx')[0].textContent;\n                var ny = vNode.getElementsByTagName('ny')[0].textContent;\n                var nz = vNode.getElementsByTagName('nz')[0].textContent;\n                normalArray.push(nx, ny, nz);\n              }\n\n              vNode = vNode.nextElementSibling;\n            }\n          }\n\n          currVerticesNode = currVerticesNode.nextElementSibling;\n        }\n\n        return {\n          vertices: vertArray,\n          normals: normalArray\n        };\n      }\n\n      function loadObject(node) {\n        var objId = node.attributes.id.textContent;\n        var loadedObject = {\n          name: 'amfobject',\n          meshes: []\n        };\n        var currColor = null;\n        var currObjNode = node.firstElementChild;\n\n        while (currObjNode) {\n          if (currObjNode.nodeName === 'metadata') {\n            if (currObjNode.attributes.type !== undefined) {\n              if (currObjNode.attributes.type.value === 'name') {\n                loadedObject.name = currObjNode.textContent;\n              }\n            }\n          } else if (currObjNode.nodeName === 'color') {\n            currColor = loadColor(currObjNode);\n          } else if (currObjNode.nodeName === 'mesh') {\n            var currMeshNode = currObjNode.firstElementChild;\n            var mesh = {\n              vertices: [],\n              normals: [],\n              volumes: [],\n              color: currColor\n            };\n\n            while (currMeshNode) {\n              if (currMeshNode.nodeName === 'vertices') {\n                var loadedVertices = loadMeshVertices(currMeshNode);\n                mesh.normals = mesh.normals.concat(loadedVertices.normals);\n                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n              } else if (currMeshNode.nodeName === 'volume') {\n                mesh.volumes.push(loadMeshVolume(currMeshNode));\n              }\n\n              currMeshNode = currMeshNode.nextElementSibling;\n            }\n\n            loadedObject.meshes.push(mesh);\n          }\n\n          currObjNode = currObjNode.nextElementSibling;\n        }\n\n        return {\n          id: objId,\n          obj: loadedObject\n        };\n      }\n\n      var xmlData = loadDocument(data);\n      var amfName = '';\n      var amfAuthor = '';\n      var amfScale = loadDocumentScale(xmlData);\n      var amfMaterials = {};\n      var amfObjects = {};\n      var childNodes = xmlData.documentElement.childNodes;\n      var i, j;\n\n      for (i = 0; i < childNodes.length; i++) {\n        var child = childNodes[i];\n\n        if (child.nodeName === 'metadata') {\n          if (child.attributes.type !== undefined) {\n            if (child.attributes.type.value === 'name') {\n              amfName = child.textContent;\n            } else if (child.attributes.type.value === 'author') {\n              amfAuthor = child.textContent;\n            }\n          }\n        } else if (child.nodeName === 'material') {\n          var loadedMaterial = loadMaterials(child);\n          amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n        } else if (child.nodeName === 'object') {\n          var loadedObject = loadObject(child);\n          amfObjects[loadedObject.id] = loadedObject.obj;\n        }\n      }\n\n      var sceneObject = new _three.Group();\n      var defaultMaterial = new _three.MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      sceneObject.name = amfName;\n      sceneObject.userData.author = amfAuthor;\n      sceneObject.userData.loader = 'AMF';\n\n      for (var id in amfObjects) {\n        var part = amfObjects[id];\n        var meshes = part.meshes;\n        var newObject = new _three.Group();\n        newObject.name = part.name || '';\n\n        for (i = 0; i < meshes.length; i++) {\n          var objDefaultMaterial = defaultMaterial;\n          var mesh = meshes[i];\n          var vertices = new _three.Float32BufferAttribute(mesh.vertices, 3);\n          var normals = null;\n\n          if (mesh.normals.length) {\n            normals = new _three.Float32BufferAttribute(mesh.normals, 3);\n          }\n\n          if (mesh.color) {\n            var color = mesh.color;\n            objDefaultMaterial = defaultMaterial.clone();\n            objDefaultMaterial.color = new _three.Color(color.r, color.g, color.b);\n\n            if (color.a !== 1.0) {\n              objDefaultMaterial.transparent = true;\n              objDefaultMaterial.opacity = color.a;\n            }\n          }\n\n          var volumes = mesh.volumes;\n\n          for (j = 0; j < volumes.length; j++) {\n            var volume = volumes[j];\n            var newGeometry = new _three.BufferGeometry();\n            var material = objDefaultMaterial;\n            newGeometry.setIndex(volume.triangles);\n            newGeometry.setAttribute('position', vertices.clone());\n\n            if (normals) {\n              newGeometry.setAttribute('normal', normals.clone());\n            }\n\n            if (amfMaterials[volume.materialId] !== undefined) {\n              material = amfMaterials[volume.materialId];\n            }\n\n            newGeometry.scale(amfScale, amfScale, amfScale);\n            newObject.add(new _three.Mesh(newGeometry, material.clone()));\n          }\n        }\n\n        sceneObject.add(newObject);\n      }\n\n      return sceneObject;\n    }\n  }]);\n\n  return AMFLoader;\n}(_three.Loader);\n\nexports.AMFLoader = AMFLoader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js","~$module$node_modules$fflate$esm$browser"]],"~:properties",["^5",["AMFLoader","obj","prototype","transparent","meter","micron","author","key","__esModule","flatShading","volumes","id","loader","normals","name","configurable","value","enumerable","vertices","a","writable","feet","b","r","triangles","__proto__","g","millimeter","meshes","materialId","color","inch","opacity","constructor","material","materialid"]],"~:compiled-at",1630917515919,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$loaders$AMFLoader.js\",\n\"lineCount\":19,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/loaders/AMFLoader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$loaders$AMFLoader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.AMFLoader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _fflate = require(\\\"fflate\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/**\\n * Description: Early release of an AMF Loader following the pattern of the\\n * example loaders in the three.js project.\\n *\\n * More information about the AMF format: http://amf.wikispaces.com\\n *\\n * Usage:\\n *\\tconst loader = new AMFLoader();\\n *\\tloader.load('/path/to/project.amf', function(objecttree) {\\n *\\t\\tscene.add(objecttree);\\n *\\t});\\n *\\n * Materials now supported, material colors supported\\n * Zip support, requires fflate\\n * No constellation support (yet)!\\n *\\n */\\nvar AMFLoader =\\n/*#__PURE__*/\\nfunction (_Loader) {\\n  _inherits(AMFLoader, _Loader);\\n\\n  function AMFLoader(manager) {\\n    _classCallCheck(this, AMFLoader);\\n\\n    return _possibleConstructorReturn(this, _getPrototypeOf(AMFLoader).call(this, manager));\\n  }\\n\\n  _createClass(AMFLoader, [{\\n    key: \\\"load\\\",\\n    value: function load(url, onLoad, onProgress, onError) {\\n      var scope = this;\\n      var loader = new _three.FileLoader(scope.manager);\\n      loader.setPath(scope.path);\\n      loader.setResponseType('arraybuffer');\\n      loader.setRequestHeader(scope.requestHeader);\\n      loader.setWithCredentials(scope.withCredentials);\\n      loader.load(url, function (text) {\\n        try {\\n          onLoad(scope.parse(text));\\n        } catch (e) {\\n          if (onError) {\\n            onError(e);\\n          } else {\\n            console.error(e);\\n          }\\n\\n          scope.manager.itemError(url);\\n        }\\n      }, onProgress, onError);\\n    }\\n  }, {\\n    key: \\\"parse\\\",\\n    value: function parse(data) {\\n      function loadDocument(data) {\\n        var view = new DataView(data);\\n        var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\\n\\n        if (magic === 'PK') {\\n          var zip = null;\\n          var file = null;\\n          console.log('THREE.AMFLoader: Loading Zip');\\n\\n          try {\\n            zip = (0, _fflate.unzipSync)(new Uint8Array(data)); // eslint-disable-line no-undef\\n          } catch (e) {\\n            if (e instanceof ReferenceError) {\\n              console.log('THREE.AMFLoader: fflate missing and file is compressed.');\\n              return null;\\n            }\\n          }\\n\\n          for (file in zip) {\\n            if (file.toLowerCase().substr(-4) === '.amf') {\\n              break;\\n            }\\n          }\\n\\n          console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\\n          view = new DataView(zip[file].buffer);\\n        }\\n\\n        var fileText = _three.LoaderUtils.decodeText(view);\\n\\n        var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\\n\\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\\n          console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\\n          return null;\\n        }\\n\\n        return xmlData;\\n      }\\n\\n      function loadDocumentScale(node) {\\n        var scale = 1.0;\\n        var unit = 'millimeter';\\n\\n        if (node.documentElement.attributes.unit !== undefined) {\\n          unit = node.documentElement.attributes.unit.value.toLowerCase();\\n        }\\n\\n        var scaleUnits = {\\n          millimeter: 1.0,\\n          inch: 25.4,\\n          feet: 304.8,\\n          meter: 1000.0,\\n          micron: 0.001\\n        };\\n\\n        if (scaleUnits[unit] !== undefined) {\\n          scale = scaleUnits[unit];\\n        }\\n\\n        console.log('THREE.AMFLoader: Unit scale: ' + scale);\\n        return scale;\\n      }\\n\\n      function loadMaterials(node) {\\n        var matName = 'AMF Material';\\n        var matId = node.attributes.id.textContent;\\n        var color = {\\n          r: 1.0,\\n          g: 1.0,\\n          b: 1.0,\\n          a: 1.0\\n        };\\n        var loadedMaterial = null;\\n\\n        for (var _i = 0; _i < node.childNodes.length; _i++) {\\n          var matChildEl = node.childNodes[_i];\\n\\n          if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\\n            if (matChildEl.attributes.type.value === 'name') {\\n              matName = matChildEl.textContent;\\n            }\\n          } else if (matChildEl.nodeName === 'color') {\\n            color = loadColor(matChildEl);\\n          }\\n        }\\n\\n        loadedMaterial = new _three.MeshPhongMaterial({\\n          flatShading: true,\\n          color: new _three.Color(color.r, color.g, color.b),\\n          name: matName\\n        });\\n\\n        if (color.a !== 1.0) {\\n          loadedMaterial.transparent = true;\\n          loadedMaterial.opacity = color.a;\\n        }\\n\\n        return {\\n          id: matId,\\n          material: loadedMaterial\\n        };\\n      }\\n\\n      function loadColor(node) {\\n        var color = {\\n          r: 1.0,\\n          g: 1.0,\\n          b: 1.0,\\n          a: 1.0\\n        };\\n\\n        for (var _i2 = 0; _i2 < node.childNodes.length; _i2++) {\\n          var matColor = node.childNodes[_i2];\\n\\n          if (matColor.nodeName === 'r') {\\n            color.r = matColor.textContent;\\n          } else if (matColor.nodeName === 'g') {\\n            color.g = matColor.textContent;\\n          } else if (matColor.nodeName === 'b') {\\n            color.b = matColor.textContent;\\n          } else if (matColor.nodeName === 'a') {\\n            color.a = matColor.textContent;\\n          }\\n        }\\n\\n        return color;\\n      }\\n\\n      function loadMeshVolume(node) {\\n        var volume = {\\n          name: '',\\n          triangles: [],\\n          materialid: null\\n        };\\n        var currVolumeNode = node.firstElementChild;\\n\\n        if (node.attributes.materialid !== undefined) {\\n          volume.materialId = node.attributes.materialid.nodeValue;\\n        }\\n\\n        while (currVolumeNode) {\\n          if (currVolumeNode.nodeName === 'metadata') {\\n            if (currVolumeNode.attributes.type !== undefined) {\\n              if (currVolumeNode.attributes.type.value === 'name') {\\n                volume.name = currVolumeNode.textContent;\\n              }\\n            }\\n          } else if (currVolumeNode.nodeName === 'triangle') {\\n            var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\\n            var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\\n            var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\\n            volume.triangles.push(v1, v2, v3);\\n          }\\n\\n          currVolumeNode = currVolumeNode.nextElementSibling;\\n        }\\n\\n        return volume;\\n      }\\n\\n      function loadMeshVertices(node) {\\n        var vertArray = [];\\n        var normalArray = [];\\n        var currVerticesNode = node.firstElementChild;\\n\\n        while (currVerticesNode) {\\n          if (currVerticesNode.nodeName === 'vertex') {\\n            var vNode = currVerticesNode.firstElementChild;\\n\\n            while (vNode) {\\n              if (vNode.nodeName === 'coordinates') {\\n                var x = vNode.getElementsByTagName('x')[0].textContent;\\n                var y = vNode.getElementsByTagName('y')[0].textContent;\\n                var z = vNode.getElementsByTagName('z')[0].textContent;\\n                vertArray.push(x, y, z);\\n              } else if (vNode.nodeName === 'normal') {\\n                var nx = vNode.getElementsByTagName('nx')[0].textContent;\\n                var ny = vNode.getElementsByTagName('ny')[0].textContent;\\n                var nz = vNode.getElementsByTagName('nz')[0].textContent;\\n                normalArray.push(nx, ny, nz);\\n              }\\n\\n              vNode = vNode.nextElementSibling;\\n            }\\n          }\\n\\n          currVerticesNode = currVerticesNode.nextElementSibling;\\n        }\\n\\n        return {\\n          vertices: vertArray,\\n          normals: normalArray\\n        };\\n      }\\n\\n      function loadObject(node) {\\n        var objId = node.attributes.id.textContent;\\n        var loadedObject = {\\n          name: 'amfobject',\\n          meshes: []\\n        };\\n        var currColor = null;\\n        var currObjNode = node.firstElementChild;\\n\\n        while (currObjNode) {\\n          if (currObjNode.nodeName === 'metadata') {\\n            if (currObjNode.attributes.type !== undefined) {\\n              if (currObjNode.attributes.type.value === 'name') {\\n                loadedObject.name = currObjNode.textContent;\\n              }\\n            }\\n          } else if (currObjNode.nodeName === 'color') {\\n            currColor = loadColor(currObjNode);\\n          } else if (currObjNode.nodeName === 'mesh') {\\n            var currMeshNode = currObjNode.firstElementChild;\\n            var mesh = {\\n              vertices: [],\\n              normals: [],\\n              volumes: [],\\n              color: currColor\\n            };\\n\\n            while (currMeshNode) {\\n              if (currMeshNode.nodeName === 'vertices') {\\n                var loadedVertices = loadMeshVertices(currMeshNode);\\n                mesh.normals = mesh.normals.concat(loadedVertices.normals);\\n                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\\n              } else if (currMeshNode.nodeName === 'volume') {\\n                mesh.volumes.push(loadMeshVolume(currMeshNode));\\n              }\\n\\n              currMeshNode = currMeshNode.nextElementSibling;\\n            }\\n\\n            loadedObject.meshes.push(mesh);\\n          }\\n\\n          currObjNode = currObjNode.nextElementSibling;\\n        }\\n\\n        return {\\n          id: objId,\\n          obj: loadedObject\\n        };\\n      }\\n\\n      var xmlData = loadDocument(data);\\n      var amfName = '';\\n      var amfAuthor = '';\\n      var amfScale = loadDocumentScale(xmlData);\\n      var amfMaterials = {};\\n      var amfObjects = {};\\n      var childNodes = xmlData.documentElement.childNodes;\\n      var i, j;\\n\\n      for (i = 0; i < childNodes.length; i++) {\\n        var child = childNodes[i];\\n\\n        if (child.nodeName === 'metadata') {\\n          if (child.attributes.type !== undefined) {\\n            if (child.attributes.type.value === 'name') {\\n              amfName = child.textContent;\\n            } else if (child.attributes.type.value === 'author') {\\n              amfAuthor = child.textContent;\\n            }\\n          }\\n        } else if (child.nodeName === 'material') {\\n          var loadedMaterial = loadMaterials(child);\\n          amfMaterials[loadedMaterial.id] = loadedMaterial.material;\\n        } else if (child.nodeName === 'object') {\\n          var loadedObject = loadObject(child);\\n          amfObjects[loadedObject.id] = loadedObject.obj;\\n        }\\n      }\\n\\n      var sceneObject = new _three.Group();\\n      var defaultMaterial = new _three.MeshPhongMaterial({\\n        color: 0xaaaaff,\\n        flatShading: true\\n      });\\n      sceneObject.name = amfName;\\n      sceneObject.userData.author = amfAuthor;\\n      sceneObject.userData.loader = 'AMF';\\n\\n      for (var id in amfObjects) {\\n        var part = amfObjects[id];\\n        var meshes = part.meshes;\\n        var newObject = new _three.Group();\\n        newObject.name = part.name || '';\\n\\n        for (i = 0; i < meshes.length; i++) {\\n          var objDefaultMaterial = defaultMaterial;\\n          var mesh = meshes[i];\\n          var vertices = new _three.Float32BufferAttribute(mesh.vertices, 3);\\n          var normals = null;\\n\\n          if (mesh.normals.length) {\\n            normals = new _three.Float32BufferAttribute(mesh.normals, 3);\\n          }\\n\\n          if (mesh.color) {\\n            var color = mesh.color;\\n            objDefaultMaterial = defaultMaterial.clone();\\n            objDefaultMaterial.color = new _three.Color(color.r, color.g, color.b);\\n\\n            if (color.a !== 1.0) {\\n              objDefaultMaterial.transparent = true;\\n              objDefaultMaterial.opacity = color.a;\\n            }\\n          }\\n\\n          var volumes = mesh.volumes;\\n\\n          for (j = 0; j < volumes.length; j++) {\\n            var volume = volumes[j];\\n            var newGeometry = new _three.BufferGeometry();\\n            var material = objDefaultMaterial;\\n            newGeometry.setIndex(volume.triangles);\\n            newGeometry.setAttribute('position', vertices.clone());\\n\\n            if (normals) {\\n              newGeometry.setAttribute('normal', normals.clone());\\n            }\\n\\n            if (amfMaterials[volume.materialId] !== undefined) {\\n              material = amfMaterials[volume.materialId];\\n            }\\n\\n            newGeometry.scale(amfScale, amfScale, amfScale);\\n            newObject.add(new _three.Mesh(newGeometry, material.clone()));\\n          }\\n        }\\n\\n        sceneObject.add(newObject);\\n      }\\n\\n      return sceneObject;\\n    }\\n  }]);\\n\\n  return AMFLoader;\\n}(_three.Loader);\\n\\nexports.AMFLoader = AMFLoader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"_getPrototypeOf\",\"o\",\"setPrototypeOf\",\"getPrototypeOf\",\"__proto__\",\"_inherits\",\"subClass\",\"superClass\",\"TypeError\",\"create\",\"value\",\"_setPrototypeOf\",\"p\",\"AMFLoader\",\"_three\",\"_fflate\",\"_Loader\",\"manager\",\"instance\",\"call\",\"self\",\"ReferenceError\",\"load\",\"url\",\"onLoad\",\"onProgress\",\"onError\",\"scope\",\"loader\",\"FileLoader\",\"setPath\",\"path\",\"setResponseType\",\"setRequestHeader\",\"requestHeader\",\"setWithCredentials\",\"withCredentials\",\"text\",\"parse\",\"e\",\"console\",\"error\",\"itemError\",\"data\",\"loadMaterials\",\"node\",\"matName\",\"matId\",\"attributes\",\"id\",\"textContent\",\"color\",\"r\",\"g\",\"b\",\"a\",\"_i\",\"childNodes\",\"matChildEl\",\"nodeName\",\"undefined\",\"type\",\"loadColor\",\"loadedMaterial\",\"MeshPhongMaterial\",\"flatShading\",\"Color\",\"name\",\"transparent\",\"opacity\",\"material\",\"_i2\",\"matColor\",\"loadObject\",\"objId\",\"loadedObject\",\"meshes\",\"currColor\",\"currObjNode\",\"firstElementChild\",\"currMeshNode\",\"mesh\",\"vertices\",\"normals\",\"volumes\",\"vertArray\",\"normalArray\",\"currVerticesNode\",\"vNode\",\"x\",\"getElementsByTagName\",\"y\",\"z\",\"push\",\"nx\",\"ny\",\"nz\",\"nextElementSibling\",\"concat\",\"volume\",\"triangles\",\"materialid\",\"currVolumeNode\",\"materialId\",\"nodeValue\",\"v1\",\"v2\",\"v3\",\"xmlData\",\"loadDocument\",\"view\",\"DataView\",\"String\",\"fromCharCode\",\"magic\",\"getUint8\",\"file\",\"zip\",\"log\",\"unzipSync\",\"Uint8Array\",\"toLowerCase\",\"substr\",\"buffer\",\"fileText\",\"LoaderUtils\",\"decodeText\",\"parseFromString\",\"DOMParser\",\"documentElement\",\"amfName\",\"amfAuthor\",\"amfScale\",\"loadDocumentScale\",\"scale\",\"unit\",\"scaleUnits\",\"millimeter\",\"inch\",\"feet\",\"meter\",\"micron\",\"amfMaterials\",\"amfObjects\",\"child\",\"sceneObject\",\"Group\",\"defaultMaterial\",\"userData\",\"author\",\"part\",\"newObject\",\"objDefaultMaterial\",\"Float32BufferAttribute\",\"clone\",\"j\",\"newGeometry\",\"BufferGeometry\",\"setIndex\",\"setAttribute\",\"add\",\"Mesh\",\"Loader\"]\n}\n"]