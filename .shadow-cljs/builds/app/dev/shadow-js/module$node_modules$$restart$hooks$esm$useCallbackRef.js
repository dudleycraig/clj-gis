["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@restart/hooks/esm/useCallbackRef.js"],"~:js","shadow$provide.module$node_modules$$restart$hooks$esm$useCallbackRef=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=function(){return(0,_react.useState)(null)};var _react=require(\"module$node_modules$react$index\")}","~:source","shadow$provide[\"module$node_modules$$restart$hooks$esm$useCallbackRef\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = useCallbackRef;\n\nvar _react = require(\"react\");\n\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\nfunction useCallbackRef() {\n  return (0, _react.useState)(null);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js"]],"~:properties",["^5",["__esModule","value"]],"~:compiled-at",1630917514047,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$restart$hooks$esm$useCallbackRef.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQ,SAAR,CAAA,CA4BAI,QAAuB,EAAG,CACxB,MAAO,CAAC,CAAA,CAAGC,MAAOC,CAAAA,QAAX,EAAqB,IAArB,CADiB,CA1B1B,KAAID,OAASP,OAAA,CAAQ,iCAAR,CARqG;\",\n\"sources\":[\"node_modules/@restart/hooks/esm/useCallbackRef.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$restart$hooks$esm$useCallbackRef\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = useCallbackRef;\\n\\nvar _react = require(\\\"react\\\");\\n\\n/**\\n * A convenience hook around `useState` designed to be paired with\\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\\n * instead of lazily accessing it in an effect.\\n *\\n * ```ts\\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\\n *\\n * useEffect(() => {\\n *   if (!element) return\\n *\\n *   const calendar = new FullCalendar.Calendar(element)\\n *\\n *   return () => {\\n *     calendar.destroy()\\n *   }\\n * }, [element])\\n *\\n * return <div ref={attachRef} />\\n * ```\\n *\\n * @category refs\\n */\\nfunction useCallbackRef() {\\n  return (0, _react.useState)(null);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"useCallbackRef\",\"_react\",\"useState\"]\n}\n"]