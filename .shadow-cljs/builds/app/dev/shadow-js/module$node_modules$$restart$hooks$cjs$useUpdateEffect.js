["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@restart/hooks/cjs/useUpdateEffect.js"],"~:js","shadow$provide.module$node_modules$$restart$hooks$cjs$useUpdateEffect=function(global,require,module,exports){exports.__esModule=!0;exports.default=void 0;var _react=require(\"module$node_modules$react$index\");exports.default=function(fn,deps){var isFirst=(0,_react.useRef)(!0);(0,_react.useEffect)(function(){if(isFirst.current)isFirst.current=!1;else return fn()},deps)}}","~:source","shadow$provide[\"module$node_modules$$restart$hooks$cjs$useUpdateEffect\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\n/**\n * Runs an effect only when the dependencies have changed, skipping the\n * initial \"on mount\" run. Caution, if the dependency list never changes,\n * the effect is **never run**\n *\n * ```ts\n *  const ref = useRef<HTMLInput>(null);\n *\n *  // focuses an element only if the focus changes, and not on mount\n *  useUpdateEffect(() => {\n *    const element = ref.current?.children[focusedIdx] as HTMLElement\n *\n *    element?.focus()\n *\n *  }, [focusedIndex])\n * ```\n * @param effect An effect to run on mount\n *\n * @category effects\n */\nfunction useUpdateEffect(fn, deps) {\n  var isFirst = (0, _react.useRef)(true);\n  (0, _react.useEffect)(function () {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n\n    return fn();\n  }, deps);\n}\n\nvar _default = useUpdateEffect;\nexports.default = _default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js"]],"~:properties",["^5",["__esModule","current","default"]],"~:compiled-at",1630505482897,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$restart$hooks$cjs$useUpdateEffect.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAAkB,IAAK,EAEvB,KAAIC,OAASL,OAAA,CAAQ,iCAAR,CAmCbE,QAAQE,CAAAA,OAAR,CAbAE,QAAwB,CAACC,EAAD,CAAKC,IAAL,CAAW,CACjC,IAAIC,QAAU,CAAC,CAAA,CAAGJ,MAAOK,CAAAA,MAAX,EAAmB,CAAA,CAAnB,CACd,EAAC,CAAA,CAAGL,MAAOM,CAAAA,SAAX,EAAsB,QAAS,EAAG,CAChC,GAAIF,OAAQG,CAAAA,OAAZ,CACEH,OAAQG,CAAAA,OAAR,CAAkB,CAAA,CADpB,KAKA,OAAOL,GAAA,EANyB,CAAlC,CAOGC,IAPH,CAFiC,CA5BgF;\",\n\"sources\":[\"node_modules/@restart/hooks/cjs/useUpdateEffect.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$restart$hooks$cjs$useUpdateEffect\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nexports.__esModule = true;\\nexports.default = void 0;\\n\\nvar _react = require(\\\"react\\\");\\n\\n/**\\n * Runs an effect only when the dependencies have changed, skipping the\\n * initial \\\"on mount\\\" run. Caution, if the dependency list never changes,\\n * the effect is **never run**\\n *\\n * ```ts\\n *  const ref = useRef<HTMLInput>(null);\\n *\\n *  // focuses an element only if the focus changes, and not on mount\\n *  useUpdateEffect(() => {\\n *    const element = ref.current?.children[focusedIdx] as HTMLElement\\n *\\n *    element?.focus()\\n *\\n *  }, [focusedIndex])\\n * ```\\n * @param effect An effect to run on mount\\n *\\n * @category effects\\n */\\nfunction useUpdateEffect(fn, deps) {\\n  var isFirst = (0, _react.useRef)(true);\\n  (0, _react.useEffect)(function () {\\n    if (isFirst.current) {\\n      isFirst.current = false;\\n      return;\\n    }\\n\\n    return fn();\\n  }, deps);\\n}\\n\\nvar _default = useUpdateEffect;\\nexports.default = _default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"__esModule\",\"default\",\"_react\",\"useUpdateEffect\",\"fn\",\"deps\",\"isFirst\",\"useRef\",\"useEffect\",\"current\"]\n}\n"]