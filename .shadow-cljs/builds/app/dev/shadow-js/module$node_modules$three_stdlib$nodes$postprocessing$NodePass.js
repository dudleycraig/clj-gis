["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/nodes/postprocessing/NodePass.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$nodes$postprocessing$NodePass=function(global,require,module,exports){function NodePass(){_ShaderPass.ShaderPass.call(this);this.name=\"\";this.uuid=_three.MathUtils.generateUUID();this.userData={};this.textureID=\"renderTexture\";this.input=new _ScreenNode.ScreenNode;this.material=new _NodeMaterial.NodeMaterial;this.needsUpdate=!0}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.NodePass=NodePass;var _three=require(\"module$node_modules$three$build$three_module\"),\n_ShaderPass=require(\"module$node_modules$three_stdlib$postprocessing$ShaderPass\"),_NodeMaterial=require(\"module$node_modules$three_stdlib$nodes$materials$NodeMaterial\"),_ScreenNode=require(\"module$node_modules$three_stdlib$nodes$inputs$ScreenNode\");NodePass.prototype=Object.create(_ShaderPass.ShaderPass.prototype);NodePass.prototype.constructor=NodePass;NodePass.prototype.render=function(){this.needsUpdate&&(this.material.dispose(),this.material.fragment.value=this.input,this.needsUpdate=!1);this.uniforms=\nthis.material.uniforms;_ShaderPass.ShaderPass.prototype.render.apply(this,arguments)};NodePass.prototype.copy=function(source){this.input=source.input;return this};NodePass.prototype.toJSON=function(meta){if(void 0===meta||\"string\"===typeof meta)meta={nodes:{}};meta&&!meta.passes&&(meta.passes={});if(!meta.passes[this.uuid]){var data={};data.uuid=this.uuid;data.type=\"NodePass\";meta.passes[this.uuid]=data;\"\"!==this.name&&(data.name=this.name);\"{}\"!==JSON.stringify(this.userData)&&(data.userData=this.userData);\ndata.input=this.input.toJSON(meta).uuid}meta.pass=this.uuid;return meta}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$nodes$postprocessing$NodePass\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodePass = NodePass;\n\nvar _three = require(\"three\");\n\nvar _ShaderPass = require(\"../../postprocessing/ShaderPass.js\");\n\nvar _NodeMaterial = require(\"../materials/NodeMaterial.js\");\n\nvar _ScreenNode = require(\"../inputs/ScreenNode.js\");\n\nfunction NodePass() {\n  _ShaderPass.ShaderPass.call(this);\n\n  this.name = '';\n  this.uuid = _three.MathUtils.generateUUID();\n  this.userData = {};\n  this.textureID = 'renderTexture';\n  this.input = new _ScreenNode.ScreenNode();\n  this.material = new _NodeMaterial.NodeMaterial();\n  this.needsUpdate = true;\n}\n\nNodePass.prototype = Object.create(_ShaderPass.ShaderPass.prototype);\nNodePass.prototype.constructor = NodePass;\n\nNodePass.prototype.render = function () {\n  if (this.needsUpdate) {\n    this.material.dispose();\n    this.material.fragment.value = this.input;\n    this.needsUpdate = false;\n  }\n\n  this.uniforms = this.material.uniforms;\n\n  _ShaderPass.ShaderPass.prototype.render.apply(this, arguments);\n};\n\nNodePass.prototype.copy = function (source) {\n  this.input = source.input;\n  return this;\n};\n\nNodePass.prototype.toJSON = function (meta) {\n  var isRootObject = meta === undefined || typeof meta === 'string';\n\n  if (isRootObject) {\n    meta = {\n      nodes: {}\n    };\n  }\n\n  if (meta && !meta.passes) meta.passes = {};\n\n  if (!meta.passes[this.uuid]) {\n    var data = {};\n    data.uuid = this.uuid;\n    data.type = 'NodePass';\n    meta.passes[this.uuid] = data;\n    if (this.name !== '') data.name = this.name;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n    data.input = this.input.toJSON(meta).uuid;\n  }\n\n  meta.pass = this.uuid;\n  return meta;\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js","~$module$node_modules$three_stdlib$nodes$materials$NodeMaterial","~$module$node_modules$three_stdlib$postprocessing$ShaderPass","~$module$node_modules$three_stdlib$nodes$inputs$ScreenNode"]],"~:properties",["^5",["needsUpdate","copy","prototype","pass","NodePass","__esModule","textureID","name","uuid","value","userData","input","nodes","type","render","passes","uniforms","constructor","toJSON","material"]],"~:compiled-at",1630917515266,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$nodes$postprocessing$NodePass.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/nodes/postprocessing/NodePass.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$nodes$postprocessing$NodePass\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.NodePass = NodePass;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _ShaderPass = require(\\\"../../postprocessing/ShaderPass.js\\\");\\n\\nvar _NodeMaterial = require(\\\"../materials/NodeMaterial.js\\\");\\n\\nvar _ScreenNode = require(\\\"../inputs/ScreenNode.js\\\");\\n\\nfunction NodePass() {\\n  _ShaderPass.ShaderPass.call(this);\\n\\n  this.name = '';\\n  this.uuid = _three.MathUtils.generateUUID();\\n  this.userData = {};\\n  this.textureID = 'renderTexture';\\n  this.input = new _ScreenNode.ScreenNode();\\n  this.material = new _NodeMaterial.NodeMaterial();\\n  this.needsUpdate = true;\\n}\\n\\nNodePass.prototype = Object.create(_ShaderPass.ShaderPass.prototype);\\nNodePass.prototype.constructor = NodePass;\\n\\nNodePass.prototype.render = function () {\\n  if (this.needsUpdate) {\\n    this.material.dispose();\\n    this.material.fragment.value = this.input;\\n    this.needsUpdate = false;\\n  }\\n\\n  this.uniforms = this.material.uniforms;\\n\\n  _ShaderPass.ShaderPass.prototype.render.apply(this, arguments);\\n};\\n\\nNodePass.prototype.copy = function (source) {\\n  this.input = source.input;\\n  return this;\\n};\\n\\nNodePass.prototype.toJSON = function (meta) {\\n  var isRootObject = meta === undefined || typeof meta === 'string';\\n\\n  if (isRootObject) {\\n    meta = {\\n      nodes: {}\\n    };\\n  }\\n\\n  if (meta && !meta.passes) meta.passes = {};\\n\\n  if (!meta.passes[this.uuid]) {\\n    var data = {};\\n    data.uuid = this.uuid;\\n    data.type = 'NodePass';\\n    meta.passes[this.uuid] = data;\\n    if (this.name !== '') data.name = this.name;\\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\\n    data.input = this.input.toJSON(meta).uuid;\\n  }\\n\\n  meta.pass = this.uuid;\\n  return meta;\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"NodePass\",\"_ShaderPass\",\"ShaderPass\",\"call\",\"name\",\"uuid\",\"_three\",\"MathUtils\",\"generateUUID\",\"userData\",\"textureID\",\"input\",\"_ScreenNode\",\"ScreenNode\",\"material\",\"_NodeMaterial\",\"NodeMaterial\",\"needsUpdate\",\"Object\",\"defineProperty\",\"value\",\"prototype\",\"create\",\"constructor\",\"render\",\"NodePass.prototype.render\",\"dispose\",\"fragment\",\"uniforms\",\"apply\",\"arguments\",\"copy\",\"NodePass.prototype.copy\",\"source\",\"toJSON\",\"NodePass.prototype.toJSON\",\"meta\",\"undefined\",\"nodes\",\"passes\",\"data\",\"type\",\"JSON\",\"stringify\",\"pass\"]\n}\n"]