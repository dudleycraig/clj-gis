["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-mesh-bvh/src/Utils/Debug.js"],"~:js","shadow$provide.module$node_modules$three_mesh_bvh$src$Utils$Debug=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function getPrimitiveSize(el){switch(_typeof(el)){case \"number\":return 8;case \"string\":return 2*el.length;case \"boolean\":return 4;\ndefault:return 0}}function getRootExtremes(bvh,group){var result={get total(){console.warn('getRootExtremes: \"total\" has been replaced by \"nodeCount\" and will be removed in the next release.');return this.nodeCount},nodeCount:0,leafNodeCount:0,depth:{min:Infinity,max:-Infinity},tris:{min:Infinity,max:-Infinity},splits:[0,0,0],surfaceAreaScore:0};bvh.traverse(function(depth,isLeaf,boundingData,offsetOrSplit,count){var l0=boundingData[3]-boundingData[0],l1=boundingData[4]-boundingData[1];boundingData=\nboundingData[5]-boundingData[2];l0=2*(l0*l1+l1*boundingData+boundingData*l0);result.nodeCount++;isLeaf?(result.leafNodeCount++,result.depth.min=Math.min(depth,result.depth.min),result.depth.max=Math.max(depth,result.depth.max),result.tris.min=Math.min(count,result.tris.min),result.tris.max=Math.max(count,result.tris.max),result.surfaceAreaScore+=l0*_Constants.TRIANGLE_INTERSECT_COST*count):(result.splits[offsetOrSplit]++,result.surfaceAreaScore+=l0*_Constants.TRAVERSAL_COST)},group);Infinity===result.tris.min&&\n(result.tris.min=0,result.tris.max=0);Infinity===result.depth.min&&(result.depth.min=0,result.depth.max=0);return result}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.estimateMemoryInBytes=function(obj){var traversed=new Set;obj=[obj];for(var bytes=0;obj.length;){var curr=obj.pop();if(!traversed.has(curr)){traversed.add(curr);for(var key in curr)if(curr.hasOwnProperty(key)){bytes+=getPrimitiveSize(key);var value=curr[key];!value||\"object\"!==_typeof(value)&&\"function\"!==typeof value?\nbytes+=getPrimitiveSize(value):/(Uint|Int|Float)(8|16|32)Array/.test(value.constructor.name)?bytes+=value.byteLength:value instanceof ArrayBuffer?bytes+=value.byteLength:obj.push(value)}}}return bytes};exports.getBVHExtremes=function(bvh){return bvh._roots.map(function(root,i){return getRootExtremes(bvh,i)})};var _Constants=require(\"module$node_modules$three_mesh_bvh$src$Constants\")}","~:source","shadow$provide[\"module$node_modules$three_mesh_bvh$src$Utils$Debug\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateMemoryInBytes = estimateMemoryInBytes;\nexports.getBVHExtremes = getBVHExtremes;\n\nvar _Constants = require(\"../Constants.js\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\nfunction getPrimitiveSize(el) {\n  switch (_typeof(el)) {\n    case 'number':\n      return 8;\n\n    case 'string':\n      return el.length * 2;\n\n    case 'boolean':\n      return 4;\n\n    default:\n      return 0;\n  }\n}\n\nfunction isTypedArray(arr) {\n  var regex = /(Uint|Int|Float)(8|16|32)Array/;\n  return regex.test(arr.constructor.name);\n}\n\nfunction getRootExtremes(bvh, group) {\n  var result = {\n    get total() {\n      console.warn('getRootExtremes: \"total\" has been replaced by \"nodeCount\" and will be removed in the next release.');\n      return this.nodeCount;\n    },\n\n    nodeCount: 0,\n    leafNodeCount: 0,\n    depth: {\n      min: Infinity,\n      max: -Infinity\n    },\n    tris: {\n      min: Infinity,\n      max: -Infinity\n    },\n    splits: [0, 0, 0],\n    surfaceAreaScore: 0\n  };\n  bvh.traverse(function (depth, isLeaf, boundingData, offsetOrSplit, count) {\n    var l0 = boundingData[0 + 3] - boundingData[0];\n    var l1 = boundingData[1 + 3] - boundingData[1];\n    var l2 = boundingData[2 + 3] - boundingData[2];\n    var surfaceArea = 2 * (l0 * l1 + l1 * l2 + l2 * l0);\n    result.nodeCount++;\n\n    if (isLeaf) {\n      result.leafNodeCount++;\n      result.depth.min = Math.min(depth, result.depth.min);\n      result.depth.max = Math.max(depth, result.depth.max);\n      result.tris.min = Math.min(count, result.tris.min);\n      result.tris.max = Math.max(count, result.tris.max);\n      result.surfaceAreaScore += surfaceArea * _Constants.TRIANGLE_INTERSECT_COST * count;\n    } else {\n      result.splits[offsetOrSplit]++;\n      result.surfaceAreaScore += surfaceArea * _Constants.TRAVERSAL_COST;\n    }\n  }, group); // If there are no leaf nodes because the tree hasn't finished generating yet.\n\n  if (result.tris.min === Infinity) {\n    result.tris.min = 0;\n    result.tris.max = 0;\n  }\n\n  if (result.depth.min === Infinity) {\n    result.depth.min = 0;\n    result.depth.max = 0;\n  }\n\n  return result;\n}\n\nfunction getBVHExtremes(bvh) {\n  return bvh._roots.map(function (root, i) {\n    return getRootExtremes(bvh, i);\n  });\n}\n\nfunction estimateMemoryInBytes(obj) {\n  var traversed = new Set();\n  var stack = [obj];\n  var bytes = 0;\n\n  while (stack.length) {\n    var curr = stack.pop();\n\n    if (traversed.has(curr)) {\n      continue;\n    }\n\n    traversed.add(curr);\n\n    for (var key in curr) {\n      if (!curr.hasOwnProperty(key)) {\n        continue;\n      }\n\n      bytes += getPrimitiveSize(key);\n      var value = curr[key];\n\n      if (value && (_typeof(value) === 'object' || typeof value === 'function')) {\n        if (isTypedArray(value)) {\n          bytes += value.byteLength;\n        } else if (value instanceof ArrayBuffer) {\n          bytes += value.byteLength;\n        } else {\n          stack.push(value);\n        }\n      } else {\n        bytes += getPrimitiveSize(value);\n      }\n    }\n  }\n\n  return bytes;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$three_mesh_bvh$src$Constants"]],"~:properties",["^5",["total","estimateMemoryInBytes","nodeCount","splits","min","__esModule","max","leafNodeCount","value","tris","getBVHExtremes","depth","surfaceAreaScore"]],"~:compiled-at",1630917516189,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_mesh_bvh$src$Utils$Debug.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-mesh-bvh/src/Utils/Debug.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_mesh_bvh$src$Utils$Debug\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.estimateMemoryInBytes = estimateMemoryInBytes;\\nexports.getBVHExtremes = getBVHExtremes;\\n\\nvar _Constants = require(\\\"../Constants.js\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\n// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\\nfunction getPrimitiveSize(el) {\\n  switch (_typeof(el)) {\\n    case 'number':\\n      return 8;\\n\\n    case 'string':\\n      return el.length * 2;\\n\\n    case 'boolean':\\n      return 4;\\n\\n    default:\\n      return 0;\\n  }\\n}\\n\\nfunction isTypedArray(arr) {\\n  var regex = /(Uint|Int|Float)(8|16|32)Array/;\\n  return regex.test(arr.constructor.name);\\n}\\n\\nfunction getRootExtremes(bvh, group) {\\n  var result = {\\n    get total() {\\n      console.warn('getRootExtremes: \\\"total\\\" has been replaced by \\\"nodeCount\\\" and will be removed in the next release.');\\n      return this.nodeCount;\\n    },\\n\\n    nodeCount: 0,\\n    leafNodeCount: 0,\\n    depth: {\\n      min: Infinity,\\n      max: -Infinity\\n    },\\n    tris: {\\n      min: Infinity,\\n      max: -Infinity\\n    },\\n    splits: [0, 0, 0],\\n    surfaceAreaScore: 0\\n  };\\n  bvh.traverse(function (depth, isLeaf, boundingData, offsetOrSplit, count) {\\n    var l0 = boundingData[0 + 3] - boundingData[0];\\n    var l1 = boundingData[1 + 3] - boundingData[1];\\n    var l2 = boundingData[2 + 3] - boundingData[2];\\n    var surfaceArea = 2 * (l0 * l1 + l1 * l2 + l2 * l0);\\n    result.nodeCount++;\\n\\n    if (isLeaf) {\\n      result.leafNodeCount++;\\n      result.depth.min = Math.min(depth, result.depth.min);\\n      result.depth.max = Math.max(depth, result.depth.max);\\n      result.tris.min = Math.min(count, result.tris.min);\\n      result.tris.max = Math.max(count, result.tris.max);\\n      result.surfaceAreaScore += surfaceArea * _Constants.TRIANGLE_INTERSECT_COST * count;\\n    } else {\\n      result.splits[offsetOrSplit]++;\\n      result.surfaceAreaScore += surfaceArea * _Constants.TRAVERSAL_COST;\\n    }\\n  }, group); // If there are no leaf nodes because the tree hasn't finished generating yet.\\n\\n  if (result.tris.min === Infinity) {\\n    result.tris.min = 0;\\n    result.tris.max = 0;\\n  }\\n\\n  if (result.depth.min === Infinity) {\\n    result.depth.min = 0;\\n    result.depth.max = 0;\\n  }\\n\\n  return result;\\n}\\n\\nfunction getBVHExtremes(bvh) {\\n  return bvh._roots.map(function (root, i) {\\n    return getRootExtremes(bvh, i);\\n  });\\n}\\n\\nfunction estimateMemoryInBytes(obj) {\\n  var traversed = new Set();\\n  var stack = [obj];\\n  var bytes = 0;\\n\\n  while (stack.length) {\\n    var curr = stack.pop();\\n\\n    if (traversed.has(curr)) {\\n      continue;\\n    }\\n\\n    traversed.add(curr);\\n\\n    for (var key in curr) {\\n      if (!curr.hasOwnProperty(key)) {\\n        continue;\\n      }\\n\\n      bytes += getPrimitiveSize(key);\\n      var value = curr[key];\\n\\n      if (value && (_typeof(value) === 'object' || typeof value === 'function')) {\\n        if (isTypedArray(value)) {\\n          bytes += value.byteLength;\\n        } else if (value instanceof ArrayBuffer) {\\n          bytes += value.byteLength;\\n        } else {\\n          stack.push(value);\\n        }\\n      } else {\\n        bytes += getPrimitiveSize(value);\\n      }\\n    }\\n  }\\n\\n  return bytes;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"getPrimitiveSize\",\"el\",\"length\",\"getRootExtremes\",\"bvh\",\"group\",\"result\",\"total\",\"console\",\"warn\",\"nodeCount\",\"leafNodeCount\",\"depth\",\"min\",\"Infinity\",\"max\",\"tris\",\"splits\",\"surfaceAreaScore\",\"traverse\",\"isLeaf\",\"boundingData\",\"offsetOrSplit\",\"count\",\"l0\",\"l1\",\"l2\",\"surfaceArea\",\"Math\",\"_Constants\",\"TRIANGLE_INTERSECT_COST\",\"TRAVERSAL_COST\",\"Object\",\"defineProperty\",\"value\",\"estimateMemoryInBytes\",\"traversed\",\"Set\",\"stack\",\"bytes\",\"curr\",\"pop\",\"has\",\"add\",\"key\",\"hasOwnProperty\",\"regex\",\"test\",\"name\",\"byteLength\",\"ArrayBuffer\",\"push\",\"getBVHExtremes\",\"_roots\",\"map\",\"root\",\"i\"]\n}\n"]