["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/nodes/postprocessing/NodePostProcessing.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$nodes$postprocessing$NodePostProcessing=function(global,require,module,exports){function NodePostProcessing(renderer,renderTarget){if(void 0===renderTarget){renderTarget={minFilter:_three.LinearFilter,magFilter:_three.LinearFilter,format:_three.RGBAFormat};var size=renderer.getDrawingBufferSize(new _three.Vector2);renderTarget=new _three.WebGLRenderTarget(size.width,size.height,renderTarget)}this.renderer=renderer;this.renderTarget=renderTarget;this.output=\nnew _ScreenNode.ScreenNode;this.material=new _NodeMaterial.NodeMaterial;this.camera=new _three.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new _three.Scene;this.quad=new _three.Mesh(new _three.PlaneGeometry(2,2),this.material);this.quad.frustumCulled=!1;this.scene.add(this.quad);this.needsUpdate=!0}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.NodePostProcessing=NodePostProcessing;var _three=require(\"module$node_modules$three$build$three_module\"),_NodeMaterial=require(\"module$node_modules$three_stdlib$nodes$materials$NodeMaterial\"),\n_ScreenNode=require(\"module$node_modules$three_stdlib$nodes$inputs$ScreenNode\");NodePostProcessing.prototype={constructor:NodePostProcessing,render:function(scene,camera,frame){this.needsUpdate&&(this.material.dispose(),this.material.fragment.value=this.output,this.material.build(),this.material.uniforms.renderTexture&&(this.material.uniforms.renderTexture.value=this.renderTarget.texture),this.needsUpdate=!1);frame.setRenderer(this.renderer).setRenderTexture(this.renderTarget.texture);this.renderer.setRenderTarget(this.renderTarget);\nthis.renderer.render(scene,camera);frame.updateNode(this.material);this.renderer.setRenderTarget(null);this.renderer.render(this.scene,this.camera)},setPixelRatio:function(value){this.renderer.setPixelRatio(value);value=this.renderer.getSize(new _three.Vector2);this.setSize(value.width,value.height)},setSize:function(width,height){var pixelRatio=this.renderer.getPixelRatio();this.renderTarget.setSize(width*pixelRatio,height*pixelRatio);this.renderer.setSize(width,height)},copy:function(source){this.output=\nsource.output;return this},toJSON:function(meta){if(void 0===meta||\"string\"===typeof meta)meta={nodes:{}};meta&&!meta.post&&(meta.post={});if(!meta.post[this.uuid]){var data={};data.uuid=this.uuid;data.type=\"NodePostProcessing\";meta.post[this.uuid]=data;\"\"!==this.name&&(data.name=this.name);\"{}\"!==JSON.stringify(this.userData)&&(data.userData=this.userData);data.output=this.output.toJSON(meta).uuid}meta.post=this.uuid;return meta}}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$nodes$postprocessing$NodePostProcessing\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodePostProcessing = NodePostProcessing;\n\nvar _three = require(\"three\");\n\nvar _NodeMaterial = require(\"../materials/NodeMaterial.js\");\n\nvar _ScreenNode = require(\"../inputs/ScreenNode.js\");\n\nfunction NodePostProcessing(renderer, renderTarget) {\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: _three.LinearFilter,\n      magFilter: _three.LinearFilter,\n      format: _three.RGBAFormat\n    };\n    var size = renderer.getDrawingBufferSize(new _three.Vector2());\n    renderTarget = new _three.WebGLRenderTarget(size.width, size.height, parameters);\n  }\n\n  this.renderer = renderer;\n  this.renderTarget = renderTarget;\n  this.output = new _ScreenNode.ScreenNode();\n  this.material = new _NodeMaterial.NodeMaterial();\n  this.camera = new _three.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new _three.Scene();\n  this.quad = new _three.Mesh(new _three.PlaneGeometry(2, 2), this.material);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n  this.needsUpdate = true;\n}\n\nNodePostProcessing.prototype = {\n  constructor: NodePostProcessing,\n  render: function render(scene, camera, frame) {\n    if (this.needsUpdate) {\n      this.material.dispose();\n      this.material.fragment.value = this.output;\n      this.material.build();\n\n      if (this.material.uniforms.renderTexture) {\n        this.material.uniforms.renderTexture.value = this.renderTarget.texture;\n      }\n\n      this.needsUpdate = false;\n    }\n\n    frame.setRenderer(this.renderer).setRenderTexture(this.renderTarget.texture);\n    this.renderer.setRenderTarget(this.renderTarget);\n    this.renderer.render(scene, camera);\n    frame.updateNode(this.material);\n    this.renderer.setRenderTarget(null);\n    this.renderer.render(this.scene, this.camera);\n  },\n  setPixelRatio: function setPixelRatio(value) {\n    this.renderer.setPixelRatio(value);\n    var size = this.renderer.getSize(new _three.Vector2());\n    this.setSize(size.width, size.height);\n  },\n  setSize: function setSize(width, height) {\n    var pixelRatio = this.renderer.getPixelRatio();\n    this.renderTarget.setSize(width * pixelRatio, height * pixelRatio);\n    this.renderer.setSize(width, height);\n  },\n  copy: function copy(source) {\n    this.output = source.output;\n    return this;\n  },\n  toJSON: function toJSON(meta) {\n    var isRootObject = meta === undefined || typeof meta === 'string';\n\n    if (isRootObject) {\n      meta = {\n        nodes: {}\n      };\n    }\n\n    if (meta && !meta.post) meta.post = {};\n\n    if (!meta.post[this.uuid]) {\n      var data = {};\n      data.uuid = this.uuid;\n      data.type = 'NodePostProcessing';\n      meta.post[this.uuid] = data;\n      if (this.name !== '') data.name = this.name;\n      if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n      data.output = this.output.toJSON(meta).uuid;\n    }\n\n    meta.post = this.uuid;\n    return meta;\n  }\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js","~$module$node_modules$three_stdlib$nodes$materials$NodeMaterial","~$module$node_modules$three_stdlib$nodes$inputs$ScreenNode"]],"~:properties",["^5",["renderer","frustumCulled","NodePostProcessing","output","needsUpdate","copy","prototype","__esModule","camera","post","name","uuid","value","userData","magFilter","nodes","setPixelRatio","type","render","setSize","minFilter","quad","renderTarget","format","constructor","scene","toJSON","material"]],"~:compiled-at",1630917515264,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$nodes$postprocessing$NodePostProcessing.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/nodes/postprocessing/NodePostProcessing.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$nodes$postprocessing$NodePostProcessing\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.NodePostProcessing = NodePostProcessing;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _NodeMaterial = require(\\\"../materials/NodeMaterial.js\\\");\\n\\nvar _ScreenNode = require(\\\"../inputs/ScreenNode.js\\\");\\n\\nfunction NodePostProcessing(renderer, renderTarget) {\\n  if (renderTarget === undefined) {\\n    var parameters = {\\n      minFilter: _three.LinearFilter,\\n      magFilter: _three.LinearFilter,\\n      format: _three.RGBAFormat\\n    };\\n    var size = renderer.getDrawingBufferSize(new _three.Vector2());\\n    renderTarget = new _three.WebGLRenderTarget(size.width, size.height, parameters);\\n  }\\n\\n  this.renderer = renderer;\\n  this.renderTarget = renderTarget;\\n  this.output = new _ScreenNode.ScreenNode();\\n  this.material = new _NodeMaterial.NodeMaterial();\\n  this.camera = new _three.OrthographicCamera(-1, 1, 1, -1, 0, 1);\\n  this.scene = new _three.Scene();\\n  this.quad = new _three.Mesh(new _three.PlaneGeometry(2, 2), this.material);\\n  this.quad.frustumCulled = false; // Avoid getting clipped\\n\\n  this.scene.add(this.quad);\\n  this.needsUpdate = true;\\n}\\n\\nNodePostProcessing.prototype = {\\n  constructor: NodePostProcessing,\\n  render: function render(scene, camera, frame) {\\n    if (this.needsUpdate) {\\n      this.material.dispose();\\n      this.material.fragment.value = this.output;\\n      this.material.build();\\n\\n      if (this.material.uniforms.renderTexture) {\\n        this.material.uniforms.renderTexture.value = this.renderTarget.texture;\\n      }\\n\\n      this.needsUpdate = false;\\n    }\\n\\n    frame.setRenderer(this.renderer).setRenderTexture(this.renderTarget.texture);\\n    this.renderer.setRenderTarget(this.renderTarget);\\n    this.renderer.render(scene, camera);\\n    frame.updateNode(this.material);\\n    this.renderer.setRenderTarget(null);\\n    this.renderer.render(this.scene, this.camera);\\n  },\\n  setPixelRatio: function setPixelRatio(value) {\\n    this.renderer.setPixelRatio(value);\\n    var size = this.renderer.getSize(new _three.Vector2());\\n    this.setSize(size.width, size.height);\\n  },\\n  setSize: function setSize(width, height) {\\n    var pixelRatio = this.renderer.getPixelRatio();\\n    this.renderTarget.setSize(width * pixelRatio, height * pixelRatio);\\n    this.renderer.setSize(width, height);\\n  },\\n  copy: function copy(source) {\\n    this.output = source.output;\\n    return this;\\n  },\\n  toJSON: function toJSON(meta) {\\n    var isRootObject = meta === undefined || typeof meta === 'string';\\n\\n    if (isRootObject) {\\n      meta = {\\n        nodes: {}\\n      };\\n    }\\n\\n    if (meta && !meta.post) meta.post = {};\\n\\n    if (!meta.post[this.uuid]) {\\n      var data = {};\\n      data.uuid = this.uuid;\\n      data.type = 'NodePostProcessing';\\n      meta.post[this.uuid] = data;\\n      if (this.name !== '') data.name = this.name;\\n      if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\\n      data.output = this.output.toJSON(meta).uuid;\\n    }\\n\\n    meta.post = this.uuid;\\n    return meta;\\n  }\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"NodePostProcessing\",\"renderer\",\"renderTarget\",\"undefined\",\"parameters\",\"minFilter\",\"_three\",\"LinearFilter\",\"magFilter\",\"format\",\"RGBAFormat\",\"size\",\"getDrawingBufferSize\",\"Vector2\",\"WebGLRenderTarget\",\"width\",\"height\",\"output\",\"_ScreenNode\",\"ScreenNode\",\"material\",\"_NodeMaterial\",\"NodeMaterial\",\"camera\",\"OrthographicCamera\",\"scene\",\"Scene\",\"quad\",\"Mesh\",\"PlaneGeometry\",\"frustumCulled\",\"add\",\"needsUpdate\",\"Object\",\"defineProperty\",\"value\",\"prototype\",\"constructor\",\"render\",\"frame\",\"dispose\",\"fragment\",\"build\",\"uniforms\",\"renderTexture\",\"texture\",\"setRenderer\",\"setRenderTexture\",\"setRenderTarget\",\"updateNode\",\"setPixelRatio\",\"getSize\",\"setSize\",\"pixelRatio\",\"getPixelRatio\",\"copy\",\"source\",\"toJSON\",\"meta\",\"nodes\",\"post\",\"uuid\",\"data\",\"type\",\"name\",\"JSON\",\"stringify\",\"userData\"]\n}\n"]