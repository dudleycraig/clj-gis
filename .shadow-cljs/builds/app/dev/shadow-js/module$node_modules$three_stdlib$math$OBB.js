["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/math/OBB.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$math$OBB=function(global,require,module,exports){function OBB(){var center=0<arguments.length&&void 0!==arguments[0]?arguments[0]:new _three.Vector3,halfSize=1<arguments.length&&void 0!==arguments[1]?arguments[1]:new _three.Vector3,rotation=2<arguments.length&&void 0!==arguments[2]?arguments[2]:new _three.Matrix3;this.center=center;this.halfSize=halfSize;this.rotation=rotation}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.OBB=OBB;var _three=\nrequire(\"module$node_modules$three$build$three_module\"),JSCompiler_object_inline_c_6553=null,JSCompiler_object_inline_u_6554=[new _three.Vector3,new _three.Vector3,new _three.Vector3],JSCompiler_object_inline_e_6555=[],JSCompiler_object_inline_c_6556=null,JSCompiler_object_inline_u_6557=[new _three.Vector3,new _three.Vector3,new _three.Vector3],JSCompiler_object_inline_e_6558=[],R=[[],[],[]],AbsR=[[],[],[]],t=[],xAxis=new _three.Vector3,yAxis=new _three.Vector3,zAxis=new _three.Vector3,v1=new _three.Vector3,\nsize=new _three.Vector3,closestPoint=new _three.Vector3,rotationMatrix=new _three.Matrix3,aabb=new _three.Box3,matrix$jscomp$0=new _three.Matrix4,inverse=new _three.Matrix4,localRay=new _three.Ray;Object.assign(OBB.prototype,{set:function(center,halfSize,rotation){this.center=center;this.halfSize=halfSize;this.rotation=rotation;return this},copy:function(obb){this.center.copy(obb.center);this.halfSize.copy(obb.halfSize);this.rotation.copy(obb.rotation);return this},clone:function(){return(new this.constructor).copy(this)},\ngetSize:function(result){return result.copy(this.halfSize).multiplyScalar(2)},clampPoint:function(point,result){var halfSize=this.halfSize;v1.subVectors(point,this.center);this.rotation.extractBasis(xAxis,yAxis,zAxis);result.copy(this.center);point=_three.MathUtils.clamp(v1.dot(xAxis),-halfSize.x,halfSize.x);result.add(xAxis.multiplyScalar(point));point=_three.MathUtils.clamp(v1.dot(yAxis),-halfSize.y,halfSize.y);result.add(yAxis.multiplyScalar(point));halfSize=_three.MathUtils.clamp(v1.dot(zAxis),\n-halfSize.z,halfSize.z);result.add(zAxis.multiplyScalar(halfSize));return result},containsPoint:function(point){v1.subVectors(point,this.center);this.rotation.extractBasis(xAxis,yAxis,zAxis);return Math.abs(v1.dot(xAxis))<=this.halfSize.x&&Math.abs(v1.dot(yAxis))<=this.halfSize.y&&Math.abs(v1.dot(zAxis))<=this.halfSize.z},intersectsBox3:function(box3){return this.intersectsOBB(obb.fromBox3(box3))},intersectsSphere:function(sphere){this.clampPoint(sphere.center,closestPoint);return closestPoint.distanceToSquared(sphere.center)<=\nsphere.radius*sphere.radius},intersectsOBB:function(obb){var epsilon=1<arguments.length&&void 0!==arguments[1]?arguments[1]:Number.EPSILON;JSCompiler_object_inline_c_6553=this.center;JSCompiler_object_inline_e_6555[0]=this.halfSize.x;JSCompiler_object_inline_e_6555[1]=this.halfSize.y;JSCompiler_object_inline_e_6555[2]=this.halfSize.z;this.rotation.extractBasis(JSCompiler_object_inline_u_6554[0],JSCompiler_object_inline_u_6554[1],JSCompiler_object_inline_u_6554[2]);JSCompiler_object_inline_c_6556=\nobb.center;JSCompiler_object_inline_e_6558[0]=obb.halfSize.x;JSCompiler_object_inline_e_6558[1]=obb.halfSize.y;JSCompiler_object_inline_e_6558[2]=obb.halfSize.z;obb.rotation.extractBasis(JSCompiler_object_inline_u_6557[0],JSCompiler_object_inline_u_6557[1],JSCompiler_object_inline_u_6557[2]);for(var i=0;3>i;i++)for(var j=0;3>j;j++)R[i][j]=JSCompiler_object_inline_u_6554[i].dot(JSCompiler_object_inline_u_6557[j]);v1.subVectors(JSCompiler_object_inline_c_6556,JSCompiler_object_inline_c_6553);t[0]=v1.dot(JSCompiler_object_inline_u_6554[0]);\nt[1]=v1.dot(JSCompiler_object_inline_u_6554[1]);t[2]=v1.dot(JSCompiler_object_inline_u_6554[2]);for(i=0;3>i;i++)for(j=0;3>j;j++)AbsR[i][j]=Math.abs(R[i][j])+epsilon;for(j=0;3>j;j++)if(epsilon=JSCompiler_object_inline_e_6555[j],i=JSCompiler_object_inline_e_6558[0]*AbsR[j][0]+JSCompiler_object_inline_e_6558[1]*AbsR[j][1]+JSCompiler_object_inline_e_6558[2]*AbsR[j][2],Math.abs(t[j])>epsilon+i)return!1;for(j=0;3>j;j++)if(epsilon=JSCompiler_object_inline_e_6555[0]*AbsR[0][j]+JSCompiler_object_inline_e_6555[1]*\nAbsR[1][j]+JSCompiler_object_inline_e_6555[2]*AbsR[2][j],i=JSCompiler_object_inline_e_6558[j],Math.abs(t[0]*R[0][j]+t[1]*R[1][j]+t[2]*R[2][j])>epsilon+i)return!1;epsilon=JSCompiler_object_inline_e_6555[1]*AbsR[2][0]+JSCompiler_object_inline_e_6555[2]*AbsR[1][0];i=JSCompiler_object_inline_e_6558[1]*AbsR[0][2]+JSCompiler_object_inline_e_6558[2]*AbsR[0][1];if(Math.abs(t[2]*R[1][0]-t[1]*R[2][0])>epsilon+i)return!1;epsilon=JSCompiler_object_inline_e_6555[1]*AbsR[2][1]+JSCompiler_object_inline_e_6555[2]*\nAbsR[1][1];i=JSCompiler_object_inline_e_6558[0]*AbsR[0][2]+JSCompiler_object_inline_e_6558[2]*AbsR[0][0];if(Math.abs(t[2]*R[1][1]-t[1]*R[2][1])>epsilon+i)return!1;epsilon=JSCompiler_object_inline_e_6555[1]*AbsR[2][2]+JSCompiler_object_inline_e_6555[2]*AbsR[1][2];i=JSCompiler_object_inline_e_6558[0]*AbsR[0][1]+JSCompiler_object_inline_e_6558[1]*AbsR[0][0];if(Math.abs(t[2]*R[1][2]-t[1]*R[2][2])>epsilon+i)return!1;epsilon=JSCompiler_object_inline_e_6555[0]*AbsR[2][0]+JSCompiler_object_inline_e_6555[2]*\nAbsR[0][0];i=JSCompiler_object_inline_e_6558[1]*AbsR[1][2]+JSCompiler_object_inline_e_6558[2]*AbsR[1][1];if(Math.abs(t[0]*R[2][0]-t[2]*R[0][0])>epsilon+i)return!1;epsilon=JSCompiler_object_inline_e_6555[0]*AbsR[2][1]+JSCompiler_object_inline_e_6555[2]*AbsR[0][1];i=JSCompiler_object_inline_e_6558[0]*AbsR[1][2]+JSCompiler_object_inline_e_6558[2]*AbsR[1][0];if(Math.abs(t[0]*R[2][1]-t[2]*R[0][1])>epsilon+i)return!1;epsilon=JSCompiler_object_inline_e_6555[0]*AbsR[2][2]+JSCompiler_object_inline_e_6555[2]*\nAbsR[0][2];i=JSCompiler_object_inline_e_6558[0]*AbsR[1][1]+JSCompiler_object_inline_e_6558[1]*AbsR[1][0];if(Math.abs(t[0]*R[2][2]-t[2]*R[0][2])>epsilon+i)return!1;epsilon=JSCompiler_object_inline_e_6555[0]*AbsR[1][0]+JSCompiler_object_inline_e_6555[1]*AbsR[0][0];i=JSCompiler_object_inline_e_6558[1]*AbsR[2][2]+JSCompiler_object_inline_e_6558[2]*AbsR[2][1];if(Math.abs(t[1]*R[0][0]-t[0]*R[1][0])>epsilon+i)return!1;epsilon=JSCompiler_object_inline_e_6555[0]*AbsR[1][1]+JSCompiler_object_inline_e_6555[1]*\nAbsR[0][1];i=JSCompiler_object_inline_e_6558[0]*AbsR[2][2]+JSCompiler_object_inline_e_6558[2]*AbsR[2][0];if(Math.abs(t[1]*R[0][1]-t[0]*R[1][1])>epsilon+i)return!1;epsilon=JSCompiler_object_inline_e_6555[0]*AbsR[1][2]+JSCompiler_object_inline_e_6555[1]*AbsR[0][2];i=JSCompiler_object_inline_e_6558[0]*AbsR[2][1]+JSCompiler_object_inline_e_6558[1]*AbsR[2][0];return Math.abs(t[1]*R[0][2]-t[0]*R[1][2])>epsilon+i?!1:!0},intersectsPlane:function(plane){this.rotation.extractBasis(xAxis,yAxis,zAxis);var r=\nthis.halfSize.x*Math.abs(plane.normal.dot(xAxis))+this.halfSize.y*Math.abs(plane.normal.dot(yAxis))+this.halfSize.z*Math.abs(plane.normal.dot(zAxis));plane=plane.normal.dot(this.center)-plane.constant;return Math.abs(plane)<=r},intersectRay:function(ray,result){this.getSize(size);aabb.setFromCenterAndSize(v1.set(0,0,0),size);var e=matrix$jscomp$0.elements,me=this.rotation.elements;e[0]=me[0];e[1]=me[1];e[2]=me[2];e[3]=0;e[4]=me[3];e[5]=me[4];e[6]=me[5];e[7]=0;e[8]=me[6];e[9]=me[7];e[10]=me[8];e[11]=\n0;e[12]=0;e[13]=0;e[14]=0;e[15]=1;matrix$jscomp$0.setPosition(this.center);inverse.copy(matrix$jscomp$0).invert();localRay.copy(ray).applyMatrix4(inverse);return localRay.intersectBox(aabb,result)?result.applyMatrix4(matrix$jscomp$0):null},intersectsRay:function(ray){return null!==this.intersectRay(ray,v1)},fromBox3:function(box3){box3.getCenter(this.center);box3.getSize(this.halfSize).multiplyScalar(.5);this.rotation.identity();return this},equals:function(obb){return obb.center.equals(this.center)&&\nobb.halfSize.equals(this.halfSize)&&obb.rotation.equals(this.rotation)},applyMatrix4:function(matrix){var e=matrix.elements,sx=v1.set(e[0],e[1],e[2]).length(),sy=v1.set(e[4],e[5],e[6]).length();e=v1.set(e[8],e[9],e[10]).length();0>matrix.determinant()&&(sx=-sx);rotationMatrix.setFromMatrix4(matrix);var invSX=1/sx,invSY=1/sy,invSZ=1/e;rotationMatrix.elements[0]*=invSX;rotationMatrix.elements[1]*=invSX;rotationMatrix.elements[2]*=invSX;rotationMatrix.elements[3]*=invSY;rotationMatrix.elements[4]*=invSY;\nrotationMatrix.elements[5]*=invSY;rotationMatrix.elements[6]*=invSZ;rotationMatrix.elements[7]*=invSZ;rotationMatrix.elements[8]*=invSZ;this.rotation.multiply(rotationMatrix);this.halfSize.x*=sx;this.halfSize.y*=sy;this.halfSize.z*=e;v1.setFromMatrixPosition(matrix);this.center.add(v1);return this}});var obb=new OBB}","~:source","shadow$provide[\"module$node_modules$three_stdlib$math$OBB\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OBB = OBB;\n\nvar _three = require(\"three\");\n\nvar a = {\n  c: null,\n  // center\n  u: [new _three.Vector3(), new _three.Vector3(), new _three.Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nvar b = {\n  c: null,\n  // center\n  u: [new _three.Vector3(), new _three.Vector3(), new _three.Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nvar R = [[], [], []];\nvar AbsR = [[], [], []];\nvar t = [];\nvar xAxis = new _three.Vector3();\nvar yAxis = new _three.Vector3();\nvar zAxis = new _three.Vector3();\nvar v1 = new _three.Vector3();\nvar size = new _three.Vector3();\nvar closestPoint = new _three.Vector3();\nvar rotationMatrix = new _three.Matrix3();\nvar aabb = new _three.Box3();\nvar matrix = new _three.Matrix4();\nvar inverse = new _three.Matrix4();\nvar localRay = new _three.Ray(); // OBB\n\nfunction OBB() {\n  var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _three.Vector3();\n  var halfSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _three.Vector3();\n  var rotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _three.Matrix3();\n  this.center = center;\n  this.halfSize = halfSize;\n  this.rotation = rotation;\n}\n\nObject.assign(OBB.prototype, {\n  set: function set(center, halfSize, rotation) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n    return this;\n  },\n  copy: function copy(obb) {\n    this.center.copy(obb.center);\n    this.halfSize.copy(obb.halfSize);\n    this.rotation.copy(obb.rotation);\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  getSize: function getSize(result) {\n    return result.copy(this.halfSize).multiplyScalar(2);\n  },\n\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n  clampPoint: function clampPoint(point, result) {\n    var halfSize = this.halfSize;\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // start at the center position of the OBB\n\n    result.copy(this.center); // project the target onto the OBB axes and walk towards that point\n\n    var x = _three.MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n\n    result.add(xAxis.multiplyScalar(x));\n\n    var y = _three.MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n\n    result.add(yAxis.multiplyScalar(y));\n\n    var z = _three.MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n\n    result.add(zAxis.multiplyScalar(z));\n    return result;\n  },\n  containsPoint: function containsPoint(point) {\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // project v1 onto each axis and check if these points lie inside the OBB\n\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n  },\n  intersectsBox3: function intersectsBox3(box3) {\n    return this.intersectsOBB(obb.fromBox3(box3));\n  },\n  intersectsSphere: function intersectsSphere(sphere) {\n    // find the point on the OBB closest to the sphere center\n    this.clampPoint(sphere.center, closestPoint); // if that point is inside the sphere, the OBB and sphere intersect\n\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  },\n\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n  intersectsOBB: function intersectsOBB(obb) {\n    var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.EPSILON;\n    // prepare data structures (the code uses the same nomenclature like the reference)\n    a.c = this.center;\n    a.e[0] = this.halfSize.x;\n    a.e[1] = this.halfSize.y;\n    a.e[2] = this.halfSize.z;\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n    b.c = obb.center;\n    b.e[0] = obb.halfSize.x;\n    b.e[1] = obb.halfSize.y;\n    b.e[2] = obb.halfSize.z;\n    obb.rotation.extractBasis(b.u[0], b.u[1], b.u[2]); // compute rotation matrix expressing b in a's coordinate frame\n\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j]);\n      }\n    } // compute translation vector\n\n\n    v1.subVectors(b.c, a.c); // bring translation into a's coordinate frame\n\n    t[0] = v1.dot(a.u[0]);\n    t[1] = v1.dot(a.u[1]);\n    t[2] = v1.dot(a.u[2]); // compute common subexpressions. Add in an epsilon term to\n    // counteract arithmetic errors when two edges are parallel and\n    // their cross product is (near) null\n\n    for (var _i = 0; _i < 3; _i++) {\n      for (var _j = 0; _j < 3; _j++) {\n        AbsR[_i][_j] = Math.abs(R[_i][_j]) + epsilon;\n      }\n    }\n\n    var ra, rb; // test axes L = A0, L = A1, L = A2\n\n    for (var _i2 = 0; _i2 < 3; _i2++) {\n      ra = a.e[_i2];\n      rb = b.e[0] * AbsR[_i2][0] + b.e[1] * AbsR[_i2][1] + b.e[2] * AbsR[_i2][2];\n      if (Math.abs(t[_i2]) > ra + rb) return false;\n    } // test axes L = B0, L = B1, L = B2\n\n\n    for (var _i3 = 0; _i3 < 3; _i3++) {\n      ra = a.e[0] * AbsR[0][_i3] + a.e[1] * AbsR[1][_i3] + a.e[2] * AbsR[2][_i3];\n      rb = b.e[_i3];\n      if (Math.abs(t[0] * R[0][_i3] + t[1] * R[1][_i3] + t[2] * R[2][_i3]) > ra + rb) return false;\n    } // test axis L = A0 x B0\n\n\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false; // test axis L = A0 x B1\n\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false; // test axis L = A0 x B2\n\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false; // test axis L = A1 x B0\n\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false; // test axis L = A1 x B1\n\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false; // test axis L = A1 x B2\n\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false; // test axis L = A2 x B0\n\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false; // test axis L = A2 x B1\n\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false; // test axis L = A2 x B2\n\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false; // since no separating axis is found, the OBBs must be intersecting\n\n    return true;\n  },\n\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n  intersectsPlane: function intersectsPlane(plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // compute the projection interval radius of this OBB onto L(t) = this->center + t * p.normal;\n\n    var r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis)); // compute distance of the OBB's center from the plane\n\n    var d = plane.normal.dot(this.center) - plane.constant; // Intersection occurs when distance d falls within [-r,+r] interval\n\n    return Math.abs(d) <= r;\n  },\n\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n  intersectRay: function intersectRay(ray, result) {\n    // the idea is to perform the intersection test in the local space\n    // of the OBB.\n    this.getSize(size);\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size); // create a 4x4 transformation matrix\n\n    matrix4FromRotationMatrix(matrix, this.rotation);\n    matrix.setPosition(this.center); // transform ray to the local space of the OBB\n\n    inverse.copy(matrix).invert();\n    localRay.copy(ray).applyMatrix4(inverse); // perform ray <-> AABB intersection test\n\n    if (localRay.intersectBox(aabb, result)) {\n      // transform the intersection point back to world space\n      return result.applyMatrix4(matrix);\n    } else {\n      return null;\n    }\n  },\n\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n  intersectsRay: function intersectsRay(ray) {\n    return this.intersectRay(ray, v1) !== null;\n  },\n  fromBox3: function fromBox3(box3) {\n    box3.getCenter(this.center);\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\n    this.rotation.identity();\n    return this;\n  },\n  equals: function equals(obb) {\n    return obb.center.equals(this.center) && obb.halfSize.equals(this.halfSize) && obb.rotation.equals(this.rotation);\n  },\n  applyMatrix4: function applyMatrix4(matrix) {\n    var e = matrix.elements;\n    var sx = v1.set(e[0], e[1], e[2]).length();\n    var sy = v1.set(e[4], e[5], e[6]).length();\n    var sz = v1.set(e[8], e[9], e[10]).length();\n    var det = matrix.determinant();\n    if (det < 0) sx = -sx;\n    rotationMatrix.setFromMatrix4(matrix);\n    var invSX = 1 / sx;\n    var invSY = 1 / sy;\n    var invSZ = 1 / sz;\n    rotationMatrix.elements[0] *= invSX;\n    rotationMatrix.elements[1] *= invSX;\n    rotationMatrix.elements[2] *= invSX;\n    rotationMatrix.elements[3] *= invSY;\n    rotationMatrix.elements[4] *= invSY;\n    rotationMatrix.elements[5] *= invSY;\n    rotationMatrix.elements[6] *= invSZ;\n    rotationMatrix.elements[7] *= invSZ;\n    rotationMatrix.elements[8] *= invSZ;\n    this.rotation.multiply(rotationMatrix);\n    this.halfSize.x *= sx;\n    this.halfSize.y *= sy;\n    this.halfSize.z *= sz;\n    v1.setFromMatrixPosition(matrix);\n    this.center.add(v1);\n    return this;\n  }\n});\n\nfunction matrix4FromRotationMatrix(matrix4, matrix3) {\n  var e = matrix4.elements;\n  var me = matrix3.elements;\n  e[0] = me[0];\n  e[1] = me[1];\n  e[2] = me[2];\n  e[3] = 0;\n  e[4] = me[3];\n  e[5] = me[4];\n  e[6] = me[5];\n  e[7] = 0;\n  e[8] = me[6];\n  e[9] = me[7];\n  e[10] = me[8];\n  e[11] = 0;\n  e[12] = 0;\n  e[13] = 0;\n  e[14] = 0;\n  e[15] = 1;\n}\n\nvar obb = new OBB();\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["z","intersectsSphere","OBB","intersectRay","copy","containsPoint","x","__esModule","intersectsOBB","fromBox3","clampPoint","applyMatrix4","value","center","rotation","intersectsPlane","y","clone","set","intersectsRay","intersectsBox3","halfSize","getSize","equals"]],"~:compiled-at",1630917515416,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$math$OBB.js\",\n\"lineCount\":17,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/math/OBB.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$math$OBB\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.OBB = OBB;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar a = {\\n  c: null,\\n  // center\\n  u: [new _three.Vector3(), new _three.Vector3(), new _three.Vector3()],\\n  // basis vectors\\n  e: [] // half width\\n\\n};\\nvar b = {\\n  c: null,\\n  // center\\n  u: [new _three.Vector3(), new _three.Vector3(), new _three.Vector3()],\\n  // basis vectors\\n  e: [] // half width\\n\\n};\\nvar R = [[], [], []];\\nvar AbsR = [[], [], []];\\nvar t = [];\\nvar xAxis = new _three.Vector3();\\nvar yAxis = new _three.Vector3();\\nvar zAxis = new _three.Vector3();\\nvar v1 = new _three.Vector3();\\nvar size = new _three.Vector3();\\nvar closestPoint = new _three.Vector3();\\nvar rotationMatrix = new _three.Matrix3();\\nvar aabb = new _three.Box3();\\nvar matrix = new _three.Matrix4();\\nvar inverse = new _three.Matrix4();\\nvar localRay = new _three.Ray(); // OBB\\n\\nfunction OBB() {\\n  var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _three.Vector3();\\n  var halfSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _three.Vector3();\\n  var rotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _three.Matrix3();\\n  this.center = center;\\n  this.halfSize = halfSize;\\n  this.rotation = rotation;\\n}\\n\\nObject.assign(OBB.prototype, {\\n  set: function set(center, halfSize, rotation) {\\n    this.center = center;\\n    this.halfSize = halfSize;\\n    this.rotation = rotation;\\n    return this;\\n  },\\n  copy: function copy(obb) {\\n    this.center.copy(obb.center);\\n    this.halfSize.copy(obb.halfSize);\\n    this.rotation.copy(obb.rotation);\\n    return this;\\n  },\\n  clone: function clone() {\\n    return new this.constructor().copy(this);\\n  },\\n  getSize: function getSize(result) {\\n    return result.copy(this.halfSize).multiplyScalar(2);\\n  },\\n\\n  /**\\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\\n   * by Christer Ericson (chapter 5.1.4)\\n   */\\n  clampPoint: function clampPoint(point, result) {\\n    var halfSize = this.halfSize;\\n    v1.subVectors(point, this.center);\\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // start at the center position of the OBB\\n\\n    result.copy(this.center); // project the target onto the OBB axes and walk towards that point\\n\\n    var x = _three.MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\\n\\n    result.add(xAxis.multiplyScalar(x));\\n\\n    var y = _three.MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\\n\\n    result.add(yAxis.multiplyScalar(y));\\n\\n    var z = _three.MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\\n\\n    result.add(zAxis.multiplyScalar(z));\\n    return result;\\n  },\\n  containsPoint: function containsPoint(point) {\\n    v1.subVectors(point, this.center);\\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // project v1 onto each axis and check if these points lie inside the OBB\\n\\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\\n  },\\n  intersectsBox3: function intersectsBox3(box3) {\\n    return this.intersectsOBB(obb.fromBox3(box3));\\n  },\\n  intersectsSphere: function intersectsSphere(sphere) {\\n    // find the point on the OBB closest to the sphere center\\n    this.clampPoint(sphere.center, closestPoint); // if that point is inside the sphere, the OBB and sphere intersect\\n\\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\\n  },\\n\\n  /**\\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\\n   * by Christer Ericson (chapter 4.4.1)\\n   *\\n   */\\n  intersectsOBB: function intersectsOBB(obb) {\\n    var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.EPSILON;\\n    // prepare data structures (the code uses the same nomenclature like the reference)\\n    a.c = this.center;\\n    a.e[0] = this.halfSize.x;\\n    a.e[1] = this.halfSize.y;\\n    a.e[2] = this.halfSize.z;\\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\\n    b.c = obb.center;\\n    b.e[0] = obb.halfSize.x;\\n    b.e[1] = obb.halfSize.y;\\n    b.e[2] = obb.halfSize.z;\\n    obb.rotation.extractBasis(b.u[0], b.u[1], b.u[2]); // compute rotation matrix expressing b in a's coordinate frame\\n\\n    for (var i = 0; i < 3; i++) {\\n      for (var j = 0; j < 3; j++) {\\n        R[i][j] = a.u[i].dot(b.u[j]);\\n      }\\n    } // compute translation vector\\n\\n\\n    v1.subVectors(b.c, a.c); // bring translation into a's coordinate frame\\n\\n    t[0] = v1.dot(a.u[0]);\\n    t[1] = v1.dot(a.u[1]);\\n    t[2] = v1.dot(a.u[2]); // compute common subexpressions. Add in an epsilon term to\\n    // counteract arithmetic errors when two edges are parallel and\\n    // their cross product is (near) null\\n\\n    for (var _i = 0; _i < 3; _i++) {\\n      for (var _j = 0; _j < 3; _j++) {\\n        AbsR[_i][_j] = Math.abs(R[_i][_j]) + epsilon;\\n      }\\n    }\\n\\n    var ra, rb; // test axes L = A0, L = A1, L = A2\\n\\n    for (var _i2 = 0; _i2 < 3; _i2++) {\\n      ra = a.e[_i2];\\n      rb = b.e[0] * AbsR[_i2][0] + b.e[1] * AbsR[_i2][1] + b.e[2] * AbsR[_i2][2];\\n      if (Math.abs(t[_i2]) > ra + rb) return false;\\n    } // test axes L = B0, L = B1, L = B2\\n\\n\\n    for (var _i3 = 0; _i3 < 3; _i3++) {\\n      ra = a.e[0] * AbsR[0][_i3] + a.e[1] * AbsR[1][_i3] + a.e[2] * AbsR[2][_i3];\\n      rb = b.e[_i3];\\n      if (Math.abs(t[0] * R[0][_i3] + t[1] * R[1][_i3] + t[2] * R[2][_i3]) > ra + rb) return false;\\n    } // test axis L = A0 x B0\\n\\n\\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false; // test axis L = A0 x B1\\n\\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false; // test axis L = A0 x B2\\n\\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false; // test axis L = A1 x B0\\n\\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false; // test axis L = A1 x B1\\n\\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false; // test axis L = A1 x B2\\n\\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false; // test axis L = A2 x B0\\n\\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false; // test axis L = A2 x B1\\n\\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false; // test axis L = A2 x B2\\n\\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false; // since no separating axis is found, the OBBs must be intersecting\\n\\n    return true;\\n  },\\n\\n  /**\\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\\n   * by Christer Ericson (chapter 5.2.3)\\n   */\\n  intersectsPlane: function intersectsPlane(plane) {\\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // compute the projection interval radius of this OBB onto L(t) = this->center + t * p.normal;\\n\\n    var r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis)); // compute distance of the OBB's center from the plane\\n\\n    var d = plane.normal.dot(this.center) - plane.constant; // Intersection occurs when distance d falls within [-r,+r] interval\\n\\n    return Math.abs(d) <= r;\\n  },\\n\\n  /**\\n   * Performs a ray/OBB intersection test and stores the intersection point\\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\\n   */\\n  intersectRay: function intersectRay(ray, result) {\\n    // the idea is to perform the intersection test in the local space\\n    // of the OBB.\\n    this.getSize(size);\\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size); // create a 4x4 transformation matrix\\n\\n    matrix4FromRotationMatrix(matrix, this.rotation);\\n    matrix.setPosition(this.center); // transform ray to the local space of the OBB\\n\\n    inverse.copy(matrix).invert();\\n    localRay.copy(ray).applyMatrix4(inverse); // perform ray <-> AABB intersection test\\n\\n    if (localRay.intersectBox(aabb, result)) {\\n      // transform the intersection point back to world space\\n      return result.applyMatrix4(matrix);\\n    } else {\\n      return null;\\n    }\\n  },\\n\\n  /**\\n   * Performs a ray/OBB intersection test. Returns either true or false if\\n   * there is a intersection or not.\\n   */\\n  intersectsRay: function intersectsRay(ray) {\\n    return this.intersectRay(ray, v1) !== null;\\n  },\\n  fromBox3: function fromBox3(box3) {\\n    box3.getCenter(this.center);\\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\\n    this.rotation.identity();\\n    return this;\\n  },\\n  equals: function equals(obb) {\\n    return obb.center.equals(this.center) && obb.halfSize.equals(this.halfSize) && obb.rotation.equals(this.rotation);\\n  },\\n  applyMatrix4: function applyMatrix4(matrix) {\\n    var e = matrix.elements;\\n    var sx = v1.set(e[0], e[1], e[2]).length();\\n    var sy = v1.set(e[4], e[5], e[6]).length();\\n    var sz = v1.set(e[8], e[9], e[10]).length();\\n    var det = matrix.determinant();\\n    if (det < 0) sx = -sx;\\n    rotationMatrix.setFromMatrix4(matrix);\\n    var invSX = 1 / sx;\\n    var invSY = 1 / sy;\\n    var invSZ = 1 / sz;\\n    rotationMatrix.elements[0] *= invSX;\\n    rotationMatrix.elements[1] *= invSX;\\n    rotationMatrix.elements[2] *= invSX;\\n    rotationMatrix.elements[3] *= invSY;\\n    rotationMatrix.elements[4] *= invSY;\\n    rotationMatrix.elements[5] *= invSY;\\n    rotationMatrix.elements[6] *= invSZ;\\n    rotationMatrix.elements[7] *= invSZ;\\n    rotationMatrix.elements[8] *= invSZ;\\n    this.rotation.multiply(rotationMatrix);\\n    this.halfSize.x *= sx;\\n    this.halfSize.y *= sy;\\n    this.halfSize.z *= sz;\\n    v1.setFromMatrixPosition(matrix);\\n    this.center.add(v1);\\n    return this;\\n  }\\n});\\n\\nfunction matrix4FromRotationMatrix(matrix4, matrix3) {\\n  var e = matrix4.elements;\\n  var me = matrix3.elements;\\n  e[0] = me[0];\\n  e[1] = me[1];\\n  e[2] = me[2];\\n  e[3] = 0;\\n  e[4] = me[3];\\n  e[5] = me[4];\\n  e[6] = me[5];\\n  e[7] = 0;\\n  e[8] = me[6];\\n  e[9] = me[7];\\n  e[10] = me[8];\\n  e[11] = 0;\\n  e[12] = 0;\\n  e[13] = 0;\\n  e[14] = 0;\\n  e[15] = 1;\\n}\\n\\nvar obb = new OBB();\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"OBB\",\"center\",\"arguments\",\"length\",\"undefined\",\"_three\",\"Vector3\",\"halfSize\",\"rotation\",\"Matrix3\",\"Object\",\"defineProperty\",\"value\",\"R\",\"AbsR\",\"t\",\"xAxis\",\"yAxis\",\"zAxis\",\"v1\",\"size\",\"closestPoint\",\"rotationMatrix\",\"aabb\",\"Box3\",\"matrix\",\"Matrix4\",\"inverse\",\"localRay\",\"Ray\",\"assign\",\"prototype\",\"set\",\"copy\",\"obb\",\"clone\",\"constructor\",\"getSize\",\"result\",\"multiplyScalar\",\"clampPoint\",\"point\",\"subVectors\",\"extractBasis\",\"x\",\"MathUtils\",\"clamp\",\"dot\",\"add\",\"y\",\"z\",\"containsPoint\",\"Math\",\"abs\",\"intersectsBox3\",\"box3\",\"intersectsOBB\",\"fromBox3\",\"intersectsSphere\",\"sphere\",\"distanceToSquared\",\"radius\",\"epsilon\",\"Number\",\"EPSILON\",\"c\",\"e\",\"u\",\"i\",\"j\",\"_i\",\"_j\",\"_i2\",\"ra\",\"rb\",\"_i3\",\"intersectsPlane\",\"plane\",\"r\",\"normal\",\"d\",\"constant\",\"intersectRay\",\"ray\",\"setFromCenterAndSize\",\"elements\",\"me\",\"setPosition\",\"invert\",\"applyMatrix4\",\"intersectBox\",\"intersectsRay\",\"getCenter\",\"identity\",\"equals\",\"sx\",\"sy\",\"sz\",\"determinant\",\"det\",\"setFromMatrix4\",\"invSX\",\"invSY\",\"invSZ\",\"multiply\",\"setFromMatrixPosition\"]\n}\n"]