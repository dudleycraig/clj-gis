["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/nodes/materials/NodeMaterial.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$nodes$materials$NodeMaterial=function(global,require,module,exports){function NodeMaterial(vertex,fragment){_three.ShaderMaterial.call(this);this.vertex=vertex||new _RawNode.RawNode(new _PositionNode.PositionNode(_PositionNode.PositionNode.PROJECTION));this.fragment=fragment||new _RawNode.RawNode(new _ColorNode.ColorNode(16711680));this.updaters=[]}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.NodeMaterial=NodeMaterial;var _three=require(\"module$node_modules$three$build$three_module\"),\n_NodeBuilder=require(\"module$node_modules$three_stdlib$nodes$core$NodeBuilder\"),_ColorNode=require(\"module$node_modules$three_stdlib$nodes$inputs$ColorNode\"),_PositionNode=require(\"module$node_modules$three_stdlib$nodes$accessors$PositionNode\"),_RawNode=require(\"module$node_modules$three_stdlib$nodes$materials$nodes$RawNode\");NodeMaterial.prototype=Object.create(_three.ShaderMaterial.prototype);NodeMaterial.prototype.constructor=NodeMaterial;NodeMaterial.prototype.type=\"NodeMaterial\";NodeMaterial.prototype.isNodeMaterial=\n!0;Object.defineProperties(NodeMaterial.prototype,{properties:{get:function(){return this.fragment.properties}},needsUpdate:{set:function(value){!0===value&&this.version++;this.needsCompile=value},get:function(){return this.needsCompile}}});NodeMaterial.prototype.onBeforeCompile=function(shader,renderer){this.build({renderer});shader.defines=this.defines;shader.uniforms=this.uniforms;shader.vertexShader=this.vertexShader;shader.fragmentShader=this.fragmentShader;shader.extensionDerivatives=!0===this.extensions.derivatives;\nshader.extensionFragDepth=!0===this.extensions.fragDepth;shader.extensionDrawBuffers=!0===this.extensions.drawBuffers;shader.extensionShaderTextureLOD=!0===this.extensions.shaderTextureLOD};NodeMaterial.prototype.customProgramCacheKey=function(){return this.getHash()};NodeMaterial.prototype.getHash=function(){var hash='{\"vertex\":'+(this.vertex.getHash()+\",\");hash+='\"fragment\":'+this.fragment.getHash();return hash+\"}\"};NodeMaterial.prototype.updateFrame=function(frame){for(var i=0;i<this.updaters.length;++i)frame.updateNode(this.updaters[i])};\nNodeMaterial.prototype.build=function(params){params=params||{};var builder=params.builder||new _NodeBuilder.NodeBuilder;builder.setMaterial(this,params.renderer);builder.build(this.vertex,this.fragment);this.vertexShader=builder.getCode(\"vertex\");this.fragmentShader=builder.getCode(\"fragment\");this.defines=builder.defines;this.uniforms=builder.uniforms;this.extensions=builder.extensions;this.updaters=builder.updaters;this.fog=builder.requires.fog;this.lights=builder.requires.lights;this.transparent=\nbuilder.requires.transparent||this.blending>_three.NormalBlending;return this};NodeMaterial.prototype.copy=function(source){var uuid=this.uuid,name;for(name in source)this[name]=source[name];this.uuid=uuid;void 0!==source.userData&&(this.userData=JSON.parse(JSON.stringify(source.userData)));return this};NodeMaterial.prototype.toJSON=function(meta){if(void 0===meta||\"string\"===typeof meta)meta={nodes:{}};meta&&!meta.materials&&(meta.materials={});if(!meta.materials[this.uuid]){var data={};data.uuid=\nthis.uuid;data.type=this.type;meta.materials[data.uuid]=data;\"\"!==this.name&&(data.name=this.name);void 0!==this.size&&(data.size=this.size);void 0!==this.sizeAttenuation&&(data.sizeAttenuation=this.sizeAttenuation);this.blending!==_three.NormalBlending&&(data.blending=this.blending);!0===this.flatShading&&(data.flatShading=this.flatShading);this.side!==_three.FrontSide&&(data.side=this.side);this.vertexColors!==_three.NoColors&&(data.vertexColors=this.vertexColors);this.depthFunc!==_three.LessEqualDepth&&\n(data.depthFunc=this.depthFunc);!1===this.depthTest&&(data.depthTest=this.depthTest);!1===this.depthWrite&&(data.depthWrite=this.depthWrite);1!==this.linewidth&&(data.linewidth=this.linewidth);void 0!==this.dashSize&&(data.dashSize=this.dashSize);void 0!==this.gapSize&&(data.gapSize=this.gapSize);void 0!==this.scale&&(data.scale=this.scale);!0===this.dithering&&(data.dithering=!0);!0===this.wireframe&&(data.wireframe=this.wireframe);1<this.wireframeLinewidth&&(data.wireframeLinewidth=this.wireframeLinewidth);\n\"round\"!==this.wireframeLinecap&&(data.wireframeLinecap=this.wireframeLinecap);\"round\"!==this.wireframeLinejoin&&(data.wireframeLinejoin=this.wireframeLinejoin);0<this.alphaTest&&(data.alphaTest=this.alphaTest);!0===this.premultipliedAlpha&&(data.premultipliedAlpha=this.premultipliedAlpha);!0===this.morphTargets&&(data.morphTargets=!0);!0===this.skinning&&(data.skinning=!0);!1===this.visible&&(data.visible=!1);\"{}\"!==JSON.stringify(this.userData)&&(data.userData=this.userData);data.fog=this.fog;data.lights=\nthis.lights;data.vertex=this.vertex.toJSON(meta).uuid;data.fragment=this.fragment.toJSON(meta).uuid}meta.material=this.uuid;return meta}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$nodes$materials$NodeMaterial\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeMaterial = NodeMaterial;\n\nvar _three = require(\"three\");\n\nvar _NodeBuilder = require(\"../core/NodeBuilder.js\");\n\nvar _ColorNode = require(\"../inputs/ColorNode.js\");\n\nvar _PositionNode = require(\"../accessors/PositionNode.js\");\n\nvar _RawNode = require(\"./nodes/RawNode.js\");\n\nfunction NodeMaterial(vertex, fragment) {\n  _three.ShaderMaterial.call(this);\n\n  this.vertex = vertex || new _RawNode.RawNode(new _PositionNode.PositionNode(_PositionNode.PositionNode.PROJECTION));\n  this.fragment = fragment || new _RawNode.RawNode(new _ColorNode.ColorNode(0xff0000));\n  this.updaters = [];\n}\n\nNodeMaterial.prototype = Object.create(_three.ShaderMaterial.prototype);\nNodeMaterial.prototype.constructor = NodeMaterial;\nNodeMaterial.prototype.type = 'NodeMaterial';\nNodeMaterial.prototype.isNodeMaterial = true;\nObject.defineProperties(NodeMaterial.prototype, {\n  properties: {\n    get: function get() {\n      return this.fragment.properties;\n    }\n  },\n  needsUpdate: {\n    set: function set(value) {\n      if (value === true) this.version++;\n      this.needsCompile = value;\n    },\n    get: function get() {\n      return this.needsCompile;\n    }\n  }\n});\n\nNodeMaterial.prototype.onBeforeCompile = function (shader, renderer) {\n  this.build({\n    renderer: renderer\n  });\n  shader.defines = this.defines;\n  shader.uniforms = this.uniforms;\n  shader.vertexShader = this.vertexShader;\n  shader.fragmentShader = this.fragmentShader;\n  shader.extensionDerivatives = this.extensions.derivatives === true;\n  shader.extensionFragDepth = this.extensions.fragDepth === true;\n  shader.extensionDrawBuffers = this.extensions.drawBuffers === true;\n  shader.extensionShaderTextureLOD = this.extensions.shaderTextureLOD === true;\n};\n\nNodeMaterial.prototype.customProgramCacheKey = function () {\n  var hash = this.getHash();\n  return hash;\n};\n\nNodeMaterial.prototype.getHash = function () {\n  var hash = '{';\n  hash += '\"vertex\":' + this.vertex.getHash() + ',';\n  hash += '\"fragment\":' + this.fragment.getHash();\n  hash += '}';\n  return hash;\n};\n\nNodeMaterial.prototype.updateFrame = function (frame) {\n  for (var i = 0; i < this.updaters.length; ++i) {\n    frame.updateNode(this.updaters[i]);\n  }\n};\n\nNodeMaterial.prototype.build = function (params) {\n  params = params || {};\n  var builder = params.builder || new _NodeBuilder.NodeBuilder();\n  builder.setMaterial(this, params.renderer);\n  builder.build(this.vertex, this.fragment);\n  this.vertexShader = builder.getCode('vertex');\n  this.fragmentShader = builder.getCode('fragment');\n  this.defines = builder.defines;\n  this.uniforms = builder.uniforms;\n  this.extensions = builder.extensions;\n  this.updaters = builder.updaters;\n  this.fog = builder.requires.fog;\n  this.lights = builder.requires.lights;\n  this.transparent = builder.requires.transparent || this.blending > _three.NormalBlending;\n  return this;\n};\n\nNodeMaterial.prototype.copy = function (source) {\n  var uuid = this.uuid;\n\n  for (var name in source) {\n    this[name] = source[name];\n  }\n\n  this.uuid = uuid;\n\n  if (source.userData !== undefined) {\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n  }\n\n  return this;\n};\n\nNodeMaterial.prototype.toJSON = function (meta) {\n  var isRootObject = meta === undefined || typeof meta === 'string';\n\n  if (isRootObject) {\n    meta = {\n      nodes: {}\n    };\n  }\n\n  if (meta && !meta.materials) meta.materials = {};\n\n  if (!meta.materials[this.uuid]) {\n    var data = {};\n    data.uuid = this.uuid;\n    data.type = this.type;\n    meta.materials[data.uuid] = data;\n    if (this.name !== '') data.name = this.name;\n    if (this.size !== undefined) data.size = this.size;\n    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n    if (this.blending !== _three.NormalBlending) data.blending = this.blending;\n    if (this.flatShading === true) data.flatShading = this.flatShading;\n    if (this.side !== _three.FrontSide) data.side = this.side;\n    if (this.vertexColors !== _three.NoColors) data.vertexColors = this.vertexColors;\n    if (this.depthFunc !== _three.LessEqualDepth) data.depthFunc = this.depthFunc;\n    if (this.depthTest === false) data.depthTest = this.depthTest;\n    if (this.depthWrite === false) data.depthWrite = this.depthWrite;\n    if (this.linewidth !== 1) data.linewidth = this.linewidth;\n    if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n    if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n    if (this.scale !== undefined) data.scale = this.scale;\n    if (this.dithering === true) data.dithering = true;\n    if (this.wireframe === true) data.wireframe = this.wireframe;\n    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n    if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n    if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n    if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n    if (this.morphTargets === true) data.morphTargets = true;\n    if (this.skinning === true) data.skinning = true;\n    if (this.visible === false) data.visible = false;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n    data.fog = this.fog;\n    data.lights = this.lights;\n    data.vertex = this.vertex.toJSON(meta).uuid;\n    data.fragment = this.fragment.toJSON(meta).uuid;\n  }\n\n  meta.material = this.uuid;\n  return meta;\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_stdlib$nodes$materials$nodes$RawNode","~$shadow.js","~$module$node_modules$three_stdlib$nodes$inputs$ColorNode","~$module$node_modules$three_stdlib$nodes$accessors$PositionNode","~$module$node_modules$three_stdlib$nodes$core$NodeBuilder"]],"~:properties",["^5",["fragmentShader","properties","extensions","wireframeLinewidth","renderer","depthTest","needsCompile","blending","needsUpdate","copy","gapSize","isNodeMaterial","prototype","skinning","scale","transparent","side","depthFunc","fog","lights","__esModule","flatShading","fragment","premultipliedAlpha","wireframeLinecap","defines","materials","dashSize","dithering","vertexShader","name","uuid","customProgramCacheKey","value","visible","wireframe","updaters","vertexColors","build","userData","getHash","linewidth","nodes","extensionShaderTextureLOD","type","onBeforeCompile","sizeAttenuation","updateFrame","depthWrite","extensionDrawBuffers","vertex","set","extensionFragDepth","size","morphTargets","extensionDerivatives","uniforms","NodeMaterial","alphaTest","get","constructor","toJSON","material","wireframeLinejoin"]],"~:compiled-at",1630917515243,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$nodes$materials$NodeMaterial.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/nodes/materials/NodeMaterial.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$nodes$materials$NodeMaterial\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.NodeMaterial = NodeMaterial;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _NodeBuilder = require(\\\"../core/NodeBuilder.js\\\");\\n\\nvar _ColorNode = require(\\\"../inputs/ColorNode.js\\\");\\n\\nvar _PositionNode = require(\\\"../accessors/PositionNode.js\\\");\\n\\nvar _RawNode = require(\\\"./nodes/RawNode.js\\\");\\n\\nfunction NodeMaterial(vertex, fragment) {\\n  _three.ShaderMaterial.call(this);\\n\\n  this.vertex = vertex || new _RawNode.RawNode(new _PositionNode.PositionNode(_PositionNode.PositionNode.PROJECTION));\\n  this.fragment = fragment || new _RawNode.RawNode(new _ColorNode.ColorNode(0xff0000));\\n  this.updaters = [];\\n}\\n\\nNodeMaterial.prototype = Object.create(_three.ShaderMaterial.prototype);\\nNodeMaterial.prototype.constructor = NodeMaterial;\\nNodeMaterial.prototype.type = 'NodeMaterial';\\nNodeMaterial.prototype.isNodeMaterial = true;\\nObject.defineProperties(NodeMaterial.prototype, {\\n  properties: {\\n    get: function get() {\\n      return this.fragment.properties;\\n    }\\n  },\\n  needsUpdate: {\\n    set: function set(value) {\\n      if (value === true) this.version++;\\n      this.needsCompile = value;\\n    },\\n    get: function get() {\\n      return this.needsCompile;\\n    }\\n  }\\n});\\n\\nNodeMaterial.prototype.onBeforeCompile = function (shader, renderer) {\\n  this.build({\\n    renderer: renderer\\n  });\\n  shader.defines = this.defines;\\n  shader.uniforms = this.uniforms;\\n  shader.vertexShader = this.vertexShader;\\n  shader.fragmentShader = this.fragmentShader;\\n  shader.extensionDerivatives = this.extensions.derivatives === true;\\n  shader.extensionFragDepth = this.extensions.fragDepth === true;\\n  shader.extensionDrawBuffers = this.extensions.drawBuffers === true;\\n  shader.extensionShaderTextureLOD = this.extensions.shaderTextureLOD === true;\\n};\\n\\nNodeMaterial.prototype.customProgramCacheKey = function () {\\n  var hash = this.getHash();\\n  return hash;\\n};\\n\\nNodeMaterial.prototype.getHash = function () {\\n  var hash = '{';\\n  hash += '\\\"vertex\\\":' + this.vertex.getHash() + ',';\\n  hash += '\\\"fragment\\\":' + this.fragment.getHash();\\n  hash += '}';\\n  return hash;\\n};\\n\\nNodeMaterial.prototype.updateFrame = function (frame) {\\n  for (var i = 0; i < this.updaters.length; ++i) {\\n    frame.updateNode(this.updaters[i]);\\n  }\\n};\\n\\nNodeMaterial.prototype.build = function (params) {\\n  params = params || {};\\n  var builder = params.builder || new _NodeBuilder.NodeBuilder();\\n  builder.setMaterial(this, params.renderer);\\n  builder.build(this.vertex, this.fragment);\\n  this.vertexShader = builder.getCode('vertex');\\n  this.fragmentShader = builder.getCode('fragment');\\n  this.defines = builder.defines;\\n  this.uniforms = builder.uniforms;\\n  this.extensions = builder.extensions;\\n  this.updaters = builder.updaters;\\n  this.fog = builder.requires.fog;\\n  this.lights = builder.requires.lights;\\n  this.transparent = builder.requires.transparent || this.blending > _three.NormalBlending;\\n  return this;\\n};\\n\\nNodeMaterial.prototype.copy = function (source) {\\n  var uuid = this.uuid;\\n\\n  for (var name in source) {\\n    this[name] = source[name];\\n  }\\n\\n  this.uuid = uuid;\\n\\n  if (source.userData !== undefined) {\\n    this.userData = JSON.parse(JSON.stringify(source.userData));\\n  }\\n\\n  return this;\\n};\\n\\nNodeMaterial.prototype.toJSON = function (meta) {\\n  var isRootObject = meta === undefined || typeof meta === 'string';\\n\\n  if (isRootObject) {\\n    meta = {\\n      nodes: {}\\n    };\\n  }\\n\\n  if (meta && !meta.materials) meta.materials = {};\\n\\n  if (!meta.materials[this.uuid]) {\\n    var data = {};\\n    data.uuid = this.uuid;\\n    data.type = this.type;\\n    meta.materials[data.uuid] = data;\\n    if (this.name !== '') data.name = this.name;\\n    if (this.size !== undefined) data.size = this.size;\\n    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\\n    if (this.blending !== _three.NormalBlending) data.blending = this.blending;\\n    if (this.flatShading === true) data.flatShading = this.flatShading;\\n    if (this.side !== _three.FrontSide) data.side = this.side;\\n    if (this.vertexColors !== _three.NoColors) data.vertexColors = this.vertexColors;\\n    if (this.depthFunc !== _three.LessEqualDepth) data.depthFunc = this.depthFunc;\\n    if (this.depthTest === false) data.depthTest = this.depthTest;\\n    if (this.depthWrite === false) data.depthWrite = this.depthWrite;\\n    if (this.linewidth !== 1) data.linewidth = this.linewidth;\\n    if (this.dashSize !== undefined) data.dashSize = this.dashSize;\\n    if (this.gapSize !== undefined) data.gapSize = this.gapSize;\\n    if (this.scale !== undefined) data.scale = this.scale;\\n    if (this.dithering === true) data.dithering = true;\\n    if (this.wireframe === true) data.wireframe = this.wireframe;\\n    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\\n    if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\\n    if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\\n    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\\n    if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\\n    if (this.morphTargets === true) data.morphTargets = true;\\n    if (this.skinning === true) data.skinning = true;\\n    if (this.visible === false) data.visible = false;\\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\\n    data.fog = this.fog;\\n    data.lights = this.lights;\\n    data.vertex = this.vertex.toJSON(meta).uuid;\\n    data.fragment = this.fragment.toJSON(meta).uuid;\\n  }\\n\\n  meta.material = this.uuid;\\n  return meta;\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"NodeMaterial\",\"vertex\",\"fragment\",\"_three\",\"ShaderMaterial\",\"call\",\"_RawNode\",\"RawNode\",\"_PositionNode\",\"PositionNode\",\"PROJECTION\",\"_ColorNode\",\"ColorNode\",\"updaters\",\"Object\",\"defineProperty\",\"value\",\"_NodeBuilder\",\"prototype\",\"create\",\"constructor\",\"type\",\"isNodeMaterial\",\"defineProperties\",\"properties\",\"get\",\"needsUpdate\",\"set\",\"version\",\"needsCompile\",\"onBeforeCompile\",\"NodeMaterial.prototype.onBeforeCompile\",\"shader\",\"renderer\",\"build\",\"defines\",\"uniforms\",\"vertexShader\",\"fragmentShader\",\"extensionDerivatives\",\"extensions\",\"derivatives\",\"extensionFragDepth\",\"fragDepth\",\"extensionDrawBuffers\",\"drawBuffers\",\"extensionShaderTextureLOD\",\"shaderTextureLOD\",\"customProgramCacheKey\",\"NodeMaterial.prototype.customProgramCacheKey\",\"getHash\",\"hash\",\"NodeMaterial.prototype.getHash\",\"updateFrame\",\"NodeMaterial.prototype.updateFrame\",\"frame\",\"i\",\"length\",\"updateNode\",\"NodeMaterial.prototype.build\",\"params\",\"builder\",\"NodeBuilder\",\"setMaterial\",\"getCode\",\"fog\",\"requires\",\"lights\",\"transparent\",\"blending\",\"NormalBlending\",\"copy\",\"NodeMaterial.prototype.copy\",\"source\",\"uuid\",\"name\",\"undefined\",\"userData\",\"JSON\",\"parse\",\"stringify\",\"toJSON\",\"NodeMaterial.prototype.toJSON\",\"meta\",\"nodes\",\"materials\",\"data\",\"size\",\"sizeAttenuation\",\"flatShading\",\"side\",\"FrontSide\",\"vertexColors\",\"NoColors\",\"depthFunc\",\"LessEqualDepth\",\"depthTest\",\"depthWrite\",\"linewidth\",\"dashSize\",\"gapSize\",\"scale\",\"dithering\",\"wireframe\",\"wireframeLinewidth\",\"wireframeLinecap\",\"wireframeLinejoin\",\"alphaTest\",\"premultipliedAlpha\",\"morphTargets\",\"skinning\",\"visible\",\"material\"]\n}\n"]