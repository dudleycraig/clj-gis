["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/ColorCorrectionShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$ColorCorrectionShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.ColorCorrectionShader=void 0;global=require(\"module$node_modules$three$build$three_module\");global={uniforms:{tDiffuse:{value:null},powRGB:{value:new global.Vector3(2,2,2)},mulRGB:{value:new global.Vector3(1,1,1)},addRGB:{value:new global.Vector3(0,0,0)}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",\nfragmentShader:\"uniform sampler2D tDiffuse;\\nuniform vec3 powRGB;\\nuniform vec3 mulRGB;\\nuniform vec3 addRGB;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tgl_FragColor \\x3d texture2D( tDiffuse, vUv );\\n\\tgl_FragColor.rgb \\x3d mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\\n}\"};exports.ColorCorrectionShader=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$ColorCorrectionShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorCorrectionShader = void 0;\n\nvar _three = require(\"three\");\n\n/**\n * Color correction\n */\nvar ColorCorrectionShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    powRGB: {\n      value: new _three.Vector3(2, 2, 2)\n    },\n    mulRGB: {\n      value: new _three.Vector3(1, 1, 1)\n    },\n    addRGB: {\n      value: new _three.Vector3(0, 0, 0)\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform vec3 powRGB;', 'uniform vec3 mulRGB;', 'uniform vec3 addRGB;', 'varying vec2 vUv;', 'void main() {', '\tgl_FragColor = texture2D( tDiffuse, vUv );', '\tgl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );', '}'].join('\\n')\n};\nexports.ColorCorrectionShader = ColorCorrectionShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["fragmentShader","mulRGB","addRGB","__esModule","tDiffuse","vertexShader","powRGB","value","uniforms","ColorCorrectionShader"]],"~:compiled-at",1630917515580,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$ColorCorrectionShader.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,qBAAR,CAAgC,IAAK,EAEjCC,OAAAA,CAASP,OAAA,CAAQ,8CAAR,CAKTM,OAAAA,CAAwB,CAC1BE,SAAU,CACRC,SAAU,CACRJ,MAAO,IADC,CADF,CAIRK,OAAQ,CACNL,MAAO,IAAIE,MAAOI,CAAAA,OAAX,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,CAAzB,CADD,CAJA,CAORC,OAAQ,CACNP,MAAO,IAAIE,MAAOI,CAAAA,OAAX,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,CAAzB,CADD,CAPA,CAURE,OAAQ,CACNR,MAAO,IAAIE,MAAOI,CAAAA,OAAX,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,CAAzB,CADD,CAVA,CADgB,CAe1BG,aAAiJ,qIAfvH;AAgB1BC,eAA2R,qQAhBjQ,CAkB5Bb,QAAQI,CAAAA,qBAAR,CAAgCA,MA/B2F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/ColorCorrectionShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$ColorCorrectionShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.ColorCorrectionShader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\n/**\\n * Color correction\\n */\\nvar ColorCorrectionShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    powRGB: {\\n      value: new _three.Vector3(2, 2, 2)\\n    },\\n    mulRGB: {\\n      value: new _three.Vector3(1, 1, 1)\\n    },\\n    addRGB: {\\n      value: new _three.Vector3(0, 0, 0)\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform vec3 powRGB;', 'uniform vec3 mulRGB;', 'uniform vec3 addRGB;', 'varying vec2 vUv;', 'void main() {', '\\tgl_FragColor = texture2D( tDiffuse, vUv );', '\\tgl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );', '}'].join('\\\\n')\\n};\\nexports.ColorCorrectionShader = ColorCorrectionShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"ColorCorrectionShader\",\"_three\",\"uniforms\",\"tDiffuse\",\"powRGB\",\"Vector3\",\"mulRGB\",\"addRGB\",\"vertexShader\",\"fragmentShader\"]\n}\n"]