["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/misc/RollerCoaster.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$misc$RollerCoaster=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.TreesGeometry=exports.SkyGeometry=exports.RollerCoasterShadowGeometry=exports.RollerCoasterLiftersGeometry=exports.RollerCoasterGeometry=void 0;var _three=require(\"module$node_modules$three$build$three_module\");global=function(curve,divisions){function drawShape(shape,color){normal.set(0,0,-1).applyQuaternion(quaternion);for(var j=\n0;j<shape.length;j++)vector.copy(shape[j]),vector.applyQuaternion(quaternion),vector.add(point),vertices.push(vector.x,vector.y,vector.z),normals.push(normal.x,normal.y,normal.z),colors.push(color[0],color[1],color[2]);normal.set(0,0,1).applyQuaternion(quaternion);for(j=shape.length-1;0<=j;j--)vector.copy(shape[j]),vector.applyQuaternion(quaternion),vector.add(point),vertices.push(vector.x,vector.y,vector.z),normals.push(normal.x,normal.y,normal.z),colors.push(color[0],color[1],color[2])}function extrudeShape(shape,\noffset,color){for(var j=0,jl=shape.length;j<jl;j++){var point1=shape[j],point2=shape[(j+1)%jl];vector1.copy(point1).add(offset);vector1.applyQuaternion(quaternion);vector1.add(point);vector2.copy(point2).add(offset);vector2.applyQuaternion(quaternion);vector2.add(point);vector3.copy(point2).add(offset);vector3.applyQuaternion(prevQuaternion);vector3.add(prevPoint);vector4.copy(point1).add(offset);vector4.applyQuaternion(prevQuaternion);vector4.add(prevPoint);vertices.push(vector1.x,vector1.y,vector1.z);\nvertices.push(vector2.x,vector2.y,vector2.z);vertices.push(vector4.x,vector4.y,vector4.z);vertices.push(vector2.x,vector2.y,vector2.z);vertices.push(vector3.x,vector3.y,vector3.z);vertices.push(vector4.x,vector4.y,vector4.z);normal1.copy(point1);normal1.applyQuaternion(quaternion);normal1.normalize();normal2.copy(point2);normal2.applyQuaternion(quaternion);normal2.normalize();normal3.copy(point2);normal3.applyQuaternion(prevQuaternion);normal3.normalize();normal4.copy(point1);normal4.applyQuaternion(prevQuaternion);\nnormal4.normalize();normals.push(normal1.x,normal1.y,normal1.z);normals.push(normal2.x,normal2.y,normal2.z);normals.push(normal4.x,normal4.y,normal4.z);normals.push(normal2.x,normal2.y,normal2.z);normals.push(normal3.x,normal3.y,normal3.z);normals.push(normal4.x,normal4.y,normal4.z);colors.push(color[0],color[1],color[2]);colors.push(color[0],color[1],color[2]);colors.push(color[0],color[1],color[2]);colors.push(color[0],color[1],color[2]);colors.push(color[0],color[1],color[2]);colors.push(color[0],\ncolor[1],color[2])}}_three.BufferGeometry.call(this);var vertices=[],normals=[],colors=[],color1=[1,1,1],color2=[1,1,0],up=new _three.Vector3(0,1,0),forward=new _three.Vector3,right=new _three.Vector3,quaternion=new _three.Quaternion,prevQuaternion=new _three.Quaternion;prevQuaternion.setFromAxisAngle(up,Math.PI/2);var point=new _three.Vector3,prevPoint=new _three.Vector3;prevPoint.copy(curve.getPointAt(0));for(var step=[new _three.Vector3(-.225,0,0),new _three.Vector3(0,-.05,0),new _three.Vector3(0,\n-.175,0),new _three.Vector3(0,-.05,0),new _three.Vector3(.225,0,0),new _three.Vector3(0,-.175,0)],PI2=2*Math.PI,sides=5,tube1=[],i=0;i<sides;i++){var angle=i/sides*PI2;tube1.push(new _three.Vector3(.06*Math.sin(angle),.06*Math.cos(angle),0))}sides=6;i=[];for(var _i=0;_i<sides;_i++)angle=_i/sides*PI2,i.push(new _three.Vector3(.025*Math.sin(angle),.025*Math.cos(angle),0));var vector=new _three.Vector3,normal=new _three.Vector3,vector1=new _three.Vector3,vector2=new _three.Vector3,vector3=new _three.Vector3,\nvector4=new _three.Vector3,normal1=new _three.Vector3,normal2=new _three.Vector3,normal3=new _three.Vector3,normal4=new _three.Vector3;PI2=new _three.Vector3;for(sides=1;sides<=divisions;sides++)point.copy(curve.getPointAt(sides/divisions)),up.set(0,1,0),forward.subVectors(point,prevPoint).normalize(),right.crossVectors(up,forward).normalize(),up.crossVectors(forward,right),angle=Math.atan2(forward.x,forward.z),quaternion.setFromAxisAngle(up,angle),0===sides%2&&drawShape(step,color2),extrudeShape(tube1,\nPI2.set(0,-.125,0),color2),extrudeShape(i,PI2.set(.2,0,0),color1),extrudeShape(i,PI2.set(-.2,0,0),color1),prevPoint.copy(point),prevQuaternion.copy(quaternion);this.setAttribute(\"position\",new _three.BufferAttribute(new Float32Array(vertices),3));this.setAttribute(\"normal\",new _three.BufferAttribute(new Float32Array(normals),3));this.setAttribute(\"color\",new _three.BufferAttribute(new Float32Array(colors),3))};exports.RollerCoasterGeometry=global;global.prototype=Object.create(_three.BufferGeometry.prototype);\nglobal=function(curve,divisions){function extrudeShape(shape,fromPoint,toPoint){for(var j=0,jl=shape.length;j<jl;j++){var point1=shape[j],point2=shape[(j+1)%jl];vector1.copy(point1);vector1.applyQuaternion(quaternion);vector1.add(fromPoint);vector2.copy(point2);vector2.applyQuaternion(quaternion);vector2.add(fromPoint);vector3.copy(point2);vector3.applyQuaternion(quaternion);vector3.add(toPoint);vector4.copy(point1);vector4.applyQuaternion(quaternion);vector4.add(toPoint);vertices.push(vector1.x,\nvector1.y,vector1.z);vertices.push(vector2.x,vector2.y,vector2.z);vertices.push(vector4.x,vector4.y,vector4.z);vertices.push(vector2.x,vector2.y,vector2.z);vertices.push(vector3.x,vector3.y,vector3.z);vertices.push(vector4.x,vector4.y,vector4.z);normal1.copy(point1);normal1.applyQuaternion(quaternion);normal1.normalize();normal2.copy(point2);normal2.applyQuaternion(quaternion);normal2.normalize();normal3.copy(point2);normal3.applyQuaternion(quaternion);normal3.normalize();normal4.copy(point1);normal4.applyQuaternion(quaternion);\nnormal4.normalize();normals.push(normal1.x,normal1.y,normal1.z);normals.push(normal2.x,normal2.y,normal2.z);normals.push(normal4.x,normal4.y,normal4.z);normals.push(normal2.x,normal2.y,normal2.z);normals.push(normal3.x,normal3.y,normal3.z);normals.push(normal4.x,normal4.y,normal4.z)}}_three.BufferGeometry.call(this);for(var vertices=[],normals=[],quaternion=new _three.Quaternion,up=new _three.Vector3(0,1,0),point=new _three.Vector3,tangent=new _three.Vector3,tube1=[new _three.Vector3(0,.05,-.05),\nnew _three.Vector3(0,.05,.05),new _three.Vector3(0,-.05,0)],tube2=[new _three.Vector3(-.05,0,.05),new _three.Vector3(-.05,0,-.05),new _three.Vector3(.05,0,0)],tube3=[new _three.Vector3(.05,0,-.05),new _three.Vector3(.05,0,.05),new _three.Vector3(-.05,0,0)],vector1=new _three.Vector3,vector2=new _three.Vector3,vector3=new _three.Vector3,vector4=new _three.Vector3,normal1=new _three.Vector3,normal2=new _three.Vector3,normal3=new _three.Vector3,normal4=new _three.Vector3,fromPoint=new _three.Vector3,\ntoPoint=new _three.Vector3,i=1;i<=divisions;i++)point.copy(curve.getPointAt(i/divisions)),tangent.copy(curve.getTangentAt(i/divisions)),quaternion.setFromAxisAngle(up,Math.atan2(tangent.x,tangent.z)),10<point.y?(fromPoint.set(-.75,-.35,0),fromPoint.applyQuaternion(quaternion),fromPoint.add(point),toPoint.set(.75,-.35,0),toPoint.applyQuaternion(quaternion),toPoint.add(point),extrudeShape(tube1,fromPoint,toPoint),fromPoint.set(-.7,-.3,0),fromPoint.applyQuaternion(quaternion),fromPoint.add(point),toPoint.set(-.7,\n-point.y,0),toPoint.applyQuaternion(quaternion),toPoint.add(point),extrudeShape(tube2,fromPoint,toPoint),fromPoint.set(.7,-.3,0),fromPoint.applyQuaternion(quaternion),fromPoint.add(point),toPoint.set(.7,-point.y,0)):(fromPoint.set(0,-.2,0),fromPoint.applyQuaternion(quaternion),fromPoint.add(point),toPoint.set(0,-point.y,0)),toPoint.applyQuaternion(quaternion),toPoint.add(point),extrudeShape(tube3,fromPoint,toPoint);this.setAttribute(\"position\",new _three.BufferAttribute(new Float32Array(vertices),\n3));this.setAttribute(\"normal\",new _three.BufferAttribute(new Float32Array(normals),3))};exports.RollerCoasterLiftersGeometry=global;global.prototype=Object.create(_three.BufferGeometry.prototype);global=function(curve,divisions){_three.BufferGeometry.call(this);var vertices=[],up=new _three.Vector3(0,1,0),forward=new _three.Vector3,quaternion=new _three.Quaternion,prevQuaternion=new _three.Quaternion;prevQuaternion.setFromAxisAngle(up,Math.PI/2);var point=new _three.Vector3,prevPoint=new _three.Vector3;\nprevPoint.copy(curve.getPointAt(0));prevPoint.y=0;for(var vector1=new _three.Vector3,vector2=new _three.Vector3,vector3=new _three.Vector3,vector4=new _three.Vector3,i=1;i<=divisions;i++)point.copy(curve.getPointAt(i/divisions)),point.y=0,forward.subVectors(point,prevPoint),quaternion.setFromAxisAngle(up,Math.atan2(forward.x,forward.z)),vector1.set(-.3,0,0),vector1.applyQuaternion(quaternion),vector1.add(point),vector2.set(.3,0,0),vector2.applyQuaternion(quaternion),vector2.add(point),vector3.set(.3,\n0,0),vector3.applyQuaternion(prevQuaternion),vector3.add(prevPoint),vector4.set(-.3,0,0),vector4.applyQuaternion(prevQuaternion),vector4.add(prevPoint),vertices.push(vector1.x,vector1.y,vector1.z),vertices.push(vector2.x,vector2.y,vector2.z),vertices.push(vector4.x,vector4.y,vector4.z),vertices.push(vector2.x,vector2.y,vector2.z),vertices.push(vector3.x,vector3.y,vector3.z),vertices.push(vector4.x,vector4.y,vector4.z),prevPoint.copy(point),prevQuaternion.copy(quaternion);this.setAttribute(\"position\",\nnew _three.BufferAttribute(new Float32Array(vertices),3))};exports.RollerCoasterShadowGeometry=global;global.prototype=Object.create(_three.BufferGeometry.prototype);global=function(){_three.BufferGeometry.call(this);for(var vertices=[],i=0;100>i;i++){var x=800*Math.random()-400,y=50*Math.random()+50,z=800*Math.random()-400,size=40*Math.random()+20;vertices.push(x-size,y,z-size);vertices.push(x+size,y,z-size);vertices.push(x-size,y,z+size);vertices.push(x+size,y,z-size);vertices.push(x+size,y,z+size);\nvertices.push(x-size,y,z+size)}this.setAttribute(\"position\",new _three.BufferAttribute(new Float32Array(vertices),3))};exports.SkyGeometry=global;global.prototype=Object.create(_three.BufferGeometry.prototype);global=function(landscape){_three.BufferGeometry.call(this);var vertices=[],colors=[],raycaster=new _three.Raycaster;raycaster.ray.direction.set(0,-1,0);for(var i=0;2E3>i;i++){var x=500*Math.random()-250,z=500*Math.random()-250;raycaster.ray.origin.set(x,50,z);var intersections=raycaster.intersectObject(landscape);\nif(0!==intersections.length){intersections=intersections[0].point.y;var height=5*Math.random()+.5,angle=Math.random()*Math.PI*2;vertices.push(x+Math.sin(angle),intersections,z+Math.cos(angle));vertices.push(x,intersections+height,z);vertices.push(x+Math.sin(angle+Math.PI),intersections,z+Math.cos(angle+Math.PI));angle+=Math.PI/2;vertices.push(x+Math.sin(angle),intersections,z+Math.cos(angle));vertices.push(x,intersections+height,z);vertices.push(x+Math.sin(angle+Math.PI),intersections,z+Math.cos(angle+\nMath.PI));x=.1*Math.random();for(z=0;6>z;z++)colors.push(.2+x,.4+x,0)}}this.setAttribute(\"position\",new _three.BufferAttribute(new Float32Array(vertices),3));this.setAttribute(\"color\",new _three.BufferAttribute(new Float32Array(colors),3))};exports.TreesGeometry=global;global.prototype=Object.create(_three.BufferGeometry.prototype)}","~:source","shadow$provide[\"module$node_modules$three_stdlib$misc$RollerCoaster\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreesGeometry = exports.SkyGeometry = exports.RollerCoasterShadowGeometry = exports.RollerCoasterLiftersGeometry = exports.RollerCoasterGeometry = void 0;\n\nvar _three = require(\"three\");\n\nvar RollerCoasterGeometry = function RollerCoasterGeometry(curve, divisions) {\n  _three.BufferGeometry.call(this);\n\n  var vertices = [];\n  var normals = [];\n  var colors = [];\n  var color1 = [1, 1, 1];\n  var color2 = [1, 1, 0];\n  var up = new _three.Vector3(0, 1, 0);\n  var forward = new _three.Vector3();\n  var right = new _three.Vector3();\n  var quaternion = new _three.Quaternion();\n  var prevQuaternion = new _three.Quaternion();\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n  var point = new _three.Vector3();\n  var prevPoint = new _three.Vector3();\n  prevPoint.copy(curve.getPointAt(0)); // shapes\n\n  var step = [new _three.Vector3(-0.225, 0, 0), new _three.Vector3(0, -0.05, 0), new _three.Vector3(0, -0.175, 0), new _three.Vector3(0, -0.05, 0), new _three.Vector3(0.225, 0, 0), new _three.Vector3(0, -0.175, 0)];\n  var PI2 = Math.PI * 2;\n  var sides = 5;\n  var tube1 = [];\n\n  for (var i = 0; i < sides; i++) {\n    var angle = i / sides * PI2;\n    tube1.push(new _three.Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n  }\n\n  var sides = 6;\n  var tube2 = [];\n\n  for (var _i = 0; _i < sides; _i++) {\n    var angle = _i / sides * PI2;\n    tube2.push(new _three.Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n  }\n\n  var vector = new _three.Vector3();\n  var normal = new _three.Vector3();\n\n  function drawShape(shape, color) {\n    normal.set(0, 0, -1).applyQuaternion(quaternion);\n\n    for (var j = 0; j < shape.length; j++) {\n      vector.copy(shape[j]);\n      vector.applyQuaternion(quaternion);\n      vector.add(point);\n      vertices.push(vector.x, vector.y, vector.z);\n      normals.push(normal.x, normal.y, normal.z);\n      colors.push(color[0], color[1], color[2]);\n    }\n\n    normal.set(0, 0, 1).applyQuaternion(quaternion);\n\n    for (var _j = shape.length - 1; _j >= 0; _j--) {\n      vector.copy(shape[_j]);\n      vector.applyQuaternion(quaternion);\n      vector.add(point);\n      vertices.push(vector.x, vector.y, vector.z);\n      normals.push(normal.x, normal.y, normal.z);\n      colors.push(color[0], color[1], color[2]);\n    }\n  }\n\n  var vector1 = new _three.Vector3();\n  var vector2 = new _three.Vector3();\n  var vector3 = new _three.Vector3();\n  var vector4 = new _three.Vector3();\n  var normal1 = new _three.Vector3();\n  var normal2 = new _three.Vector3();\n  var normal3 = new _three.Vector3();\n  var normal4 = new _three.Vector3();\n\n  function extrudeShape(shape, offset, color) {\n    for (var j = 0, jl = shape.length; j < jl; j++) {\n      var point1 = shape[j];\n      var point2 = shape[(j + 1) % jl];\n      vector1.copy(point1).add(offset);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.copy(point2).add(offset);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.copy(point2).add(offset);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.copy(point1).add(offset);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z); //\n\n      normal1.copy(point1);\n      normal1.applyQuaternion(quaternion);\n      normal1.normalize();\n      normal2.copy(point2);\n      normal2.applyQuaternion(quaternion);\n      normal2.normalize();\n      normal3.copy(point2);\n      normal3.applyQuaternion(prevQuaternion);\n      normal3.normalize();\n      normal4.copy(point1);\n      normal4.applyQuaternion(prevQuaternion);\n      normal4.normalize();\n      normals.push(normal1.x, normal1.y, normal1.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal3.x, normal3.y, normal3.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n    }\n  }\n\n  var offset = new _three.Vector3();\n\n  for (var _i2 = 1; _i2 <= divisions; _i2++) {\n    point.copy(curve.getPointAt(_i2 / divisions));\n    up.set(0, 1, 0);\n    forward.subVectors(point, prevPoint).normalize();\n    right.crossVectors(up, forward).normalize();\n    up.crossVectors(forward, right);\n    var angle = Math.atan2(forward.x, forward.z);\n    quaternion.setFromAxisAngle(up, angle);\n\n    if (_i2 % 2 === 0) {\n      drawShape(step, color2);\n    }\n\n    extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n    extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n    extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n    prevPoint.copy(point);\n    prevQuaternion.copy(quaternion);\n  } // console.log( vertices.length );\n\n\n  this.setAttribute('position', new _three.BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('normal', new _three.BufferAttribute(new Float32Array(normals), 3));\n  this.setAttribute('color', new _three.BufferAttribute(new Float32Array(colors), 3));\n};\n\nexports.RollerCoasterGeometry = RollerCoasterGeometry;\nRollerCoasterGeometry.prototype = Object.create(_three.BufferGeometry.prototype);\n\nvar RollerCoasterLiftersGeometry = function RollerCoasterLiftersGeometry(curve, divisions) {\n  _three.BufferGeometry.call(this);\n\n  var vertices = [];\n  var normals = [];\n  var quaternion = new _three.Quaternion();\n  var up = new _three.Vector3(0, 1, 0);\n  var point = new _three.Vector3();\n  var tangent = new _three.Vector3(); // shapes\n\n  var tube1 = [new _three.Vector3(0, 0.05, -0.05), new _three.Vector3(0, 0.05, 0.05), new _three.Vector3(0, -0.05, 0)];\n  var tube2 = [new _three.Vector3(-0.05, 0, 0.05), new _three.Vector3(-0.05, 0, -0.05), new _three.Vector3(0.05, 0, 0)];\n  var tube3 = [new _three.Vector3(0.05, 0, -0.05), new _three.Vector3(0.05, 0, 0.05), new _three.Vector3(-0.05, 0, 0)];\n  var vector1 = new _three.Vector3();\n  var vector2 = new _three.Vector3();\n  var vector3 = new _three.Vector3();\n  var vector4 = new _three.Vector3();\n  var normal1 = new _three.Vector3();\n  var normal2 = new _three.Vector3();\n  var normal3 = new _three.Vector3();\n  var normal4 = new _three.Vector3();\n\n  function extrudeShape(shape, fromPoint, toPoint) {\n    for (var j = 0, jl = shape.length; j < jl; j++) {\n      var point1 = shape[j];\n      var point2 = shape[(j + 1) % jl];\n      vector1.copy(point1);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(fromPoint);\n      vector2.copy(point2);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(fromPoint);\n      vector3.copy(point2);\n      vector3.applyQuaternion(quaternion);\n      vector3.add(toPoint);\n      vector4.copy(point1);\n      vector4.applyQuaternion(quaternion);\n      vector4.add(toPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z); //\n\n      normal1.copy(point1);\n      normal1.applyQuaternion(quaternion);\n      normal1.normalize();\n      normal2.copy(point2);\n      normal2.applyQuaternion(quaternion);\n      normal2.normalize();\n      normal3.copy(point2);\n      normal3.applyQuaternion(quaternion);\n      normal3.normalize();\n      normal4.copy(point1);\n      normal4.applyQuaternion(quaternion);\n      normal4.normalize();\n      normals.push(normal1.x, normal1.y, normal1.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal3.x, normal3.y, normal3.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n    }\n  }\n\n  var fromPoint = new _three.Vector3();\n  var toPoint = new _three.Vector3();\n\n  for (var i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    tangent.copy(curve.getTangentAt(i / divisions));\n    var angle = Math.atan2(tangent.x, tangent.z);\n    quaternion.setFromAxisAngle(up, angle); //\n\n    if (point.y > 10) {\n      fromPoint.set(-0.75, -0.35, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0.75, -0.35, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube1, fromPoint, toPoint);\n      fromPoint.set(-0.7, -0.3, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(-0.7, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube2, fromPoint, toPoint);\n      fromPoint.set(0.7, -0.3, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0.7, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube3, fromPoint, toPoint);\n    } else {\n      fromPoint.set(0, -0.2, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube3, fromPoint, toPoint);\n    }\n  }\n\n  this.setAttribute('position', new _three.BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('normal', new _three.BufferAttribute(new Float32Array(normals), 3));\n};\n\nexports.RollerCoasterLiftersGeometry = RollerCoasterLiftersGeometry;\nRollerCoasterLiftersGeometry.prototype = Object.create(_three.BufferGeometry.prototype);\n\nvar RollerCoasterShadowGeometry = function RollerCoasterShadowGeometry(curve, divisions) {\n  _three.BufferGeometry.call(this);\n\n  var vertices = [];\n  var up = new _three.Vector3(0, 1, 0);\n  var forward = new _three.Vector3();\n  var quaternion = new _three.Quaternion();\n  var prevQuaternion = new _three.Quaternion();\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n  var point = new _three.Vector3();\n  var prevPoint = new _three.Vector3();\n  prevPoint.copy(curve.getPointAt(0));\n  prevPoint.y = 0;\n  var vector1 = new _three.Vector3();\n  var vector2 = new _three.Vector3();\n  var vector3 = new _three.Vector3();\n  var vector4 = new _three.Vector3();\n\n  for (var i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    point.y = 0;\n    forward.subVectors(point, prevPoint);\n    var angle = Math.atan2(forward.x, forward.z);\n    quaternion.setFromAxisAngle(up, angle);\n    vector1.set(-0.3, 0, 0);\n    vector1.applyQuaternion(quaternion);\n    vector1.add(point);\n    vector2.set(0.3, 0, 0);\n    vector2.applyQuaternion(quaternion);\n    vector2.add(point);\n    vector3.set(0.3, 0, 0);\n    vector3.applyQuaternion(prevQuaternion);\n    vector3.add(prevPoint);\n    vector4.set(-0.3, 0, 0);\n    vector4.applyQuaternion(prevQuaternion);\n    vector4.add(prevPoint);\n    vertices.push(vector1.x, vector1.y, vector1.z);\n    vertices.push(vector2.x, vector2.y, vector2.z);\n    vertices.push(vector4.x, vector4.y, vector4.z);\n    vertices.push(vector2.x, vector2.y, vector2.z);\n    vertices.push(vector3.x, vector3.y, vector3.z);\n    vertices.push(vector4.x, vector4.y, vector4.z);\n    prevPoint.copy(point);\n    prevQuaternion.copy(quaternion);\n  }\n\n  this.setAttribute('position', new _three.BufferAttribute(new Float32Array(vertices), 3));\n};\n\nexports.RollerCoasterShadowGeometry = RollerCoasterShadowGeometry;\nRollerCoasterShadowGeometry.prototype = Object.create(_three.BufferGeometry.prototype);\n\nvar SkyGeometry = function SkyGeometry() {\n  _three.BufferGeometry.call(this);\n\n  var vertices = [];\n\n  for (var i = 0; i < 100; i++) {\n    var x = Math.random() * 800 - 400;\n    var y = Math.random() * 50 + 50;\n    var z = Math.random() * 800 - 400;\n    var size = Math.random() * 40 + 20;\n    vertices.push(x - size, y, z - size);\n    vertices.push(x + size, y, z - size);\n    vertices.push(x - size, y, z + size);\n    vertices.push(x + size, y, z - size);\n    vertices.push(x + size, y, z + size);\n    vertices.push(x - size, y, z + size);\n  }\n\n  this.setAttribute('position', new _three.BufferAttribute(new Float32Array(vertices), 3));\n};\n\nexports.SkyGeometry = SkyGeometry;\nSkyGeometry.prototype = Object.create(_three.BufferGeometry.prototype);\n\nvar TreesGeometry = function TreesGeometry(landscape) {\n  _three.BufferGeometry.call(this);\n\n  var vertices = [];\n  var colors = [];\n  var raycaster = new _three.Raycaster();\n  raycaster.ray.direction.set(0, -1, 0);\n\n  for (var i = 0; i < 2000; i++) {\n    var x = Math.random() * 500 - 250;\n    var z = Math.random() * 500 - 250;\n    raycaster.ray.origin.set(x, 50, z);\n    var intersections = raycaster.intersectObject(landscape);\n    if (intersections.length === 0) continue;\n    var y = intersections[0].point.y;\n    var height = Math.random() * 5 + 0.5;\n    var angle = Math.random() * Math.PI * 2;\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n    vertices.push(x, y + height, z);\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n    angle += Math.PI / 2;\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n    vertices.push(x, y + height, z);\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n    var random = Math.random() * 0.1;\n\n    for (var j = 0; j < 6; j++) {\n      colors.push(0.2 + random, 0.4 + random, 0);\n    }\n  }\n\n  this.setAttribute('position', new _three.BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('color', new _three.BufferAttribute(new Float32Array(colors), 3));\n};\n\nexports.TreesGeometry = TreesGeometry;\nTreesGeometry.prototype = Object.create(_three.BufferGeometry.prototype);\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["RollerCoasterGeometry","TreesGeometry","prototype","RollerCoasterLiftersGeometry","SkyGeometry","__esModule","value","RollerCoasterShadowGeometry","y"]],"~:compiled-at",1630917515115,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$misc$RollerCoaster.js\",\n\"lineCount\":22,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/misc/RollerCoaster.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$misc$RollerCoaster\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.TreesGeometry = exports.SkyGeometry = exports.RollerCoasterShadowGeometry = exports.RollerCoasterLiftersGeometry = exports.RollerCoasterGeometry = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar RollerCoasterGeometry = function RollerCoasterGeometry(curve, divisions) {\\n  _three.BufferGeometry.call(this);\\n\\n  var vertices = [];\\n  var normals = [];\\n  var colors = [];\\n  var color1 = [1, 1, 1];\\n  var color2 = [1, 1, 0];\\n  var up = new _three.Vector3(0, 1, 0);\\n  var forward = new _three.Vector3();\\n  var right = new _three.Vector3();\\n  var quaternion = new _three.Quaternion();\\n  var prevQuaternion = new _three.Quaternion();\\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\\n  var point = new _three.Vector3();\\n  var prevPoint = new _three.Vector3();\\n  prevPoint.copy(curve.getPointAt(0)); // shapes\\n\\n  var step = [new _three.Vector3(-0.225, 0, 0), new _three.Vector3(0, -0.05, 0), new _three.Vector3(0, -0.175, 0), new _three.Vector3(0, -0.05, 0), new _three.Vector3(0.225, 0, 0), new _three.Vector3(0, -0.175, 0)];\\n  var PI2 = Math.PI * 2;\\n  var sides = 5;\\n  var tube1 = [];\\n\\n  for (var i = 0; i < sides; i++) {\\n    var angle = i / sides * PI2;\\n    tube1.push(new _three.Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\\n  }\\n\\n  var sides = 6;\\n  var tube2 = [];\\n\\n  for (var _i = 0; _i < sides; _i++) {\\n    var angle = _i / sides * PI2;\\n    tube2.push(new _three.Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\\n  }\\n\\n  var vector = new _three.Vector3();\\n  var normal = new _three.Vector3();\\n\\n  function drawShape(shape, color) {\\n    normal.set(0, 0, -1).applyQuaternion(quaternion);\\n\\n    for (var j = 0; j < shape.length; j++) {\\n      vector.copy(shape[j]);\\n      vector.applyQuaternion(quaternion);\\n      vector.add(point);\\n      vertices.push(vector.x, vector.y, vector.z);\\n      normals.push(normal.x, normal.y, normal.z);\\n      colors.push(color[0], color[1], color[2]);\\n    }\\n\\n    normal.set(0, 0, 1).applyQuaternion(quaternion);\\n\\n    for (var _j = shape.length - 1; _j >= 0; _j--) {\\n      vector.copy(shape[_j]);\\n      vector.applyQuaternion(quaternion);\\n      vector.add(point);\\n      vertices.push(vector.x, vector.y, vector.z);\\n      normals.push(normal.x, normal.y, normal.z);\\n      colors.push(color[0], color[1], color[2]);\\n    }\\n  }\\n\\n  var vector1 = new _three.Vector3();\\n  var vector2 = new _three.Vector3();\\n  var vector3 = new _three.Vector3();\\n  var vector4 = new _three.Vector3();\\n  var normal1 = new _three.Vector3();\\n  var normal2 = new _three.Vector3();\\n  var normal3 = new _three.Vector3();\\n  var normal4 = new _three.Vector3();\\n\\n  function extrudeShape(shape, offset, color) {\\n    for (var j = 0, jl = shape.length; j < jl; j++) {\\n      var point1 = shape[j];\\n      var point2 = shape[(j + 1) % jl];\\n      vector1.copy(point1).add(offset);\\n      vector1.applyQuaternion(quaternion);\\n      vector1.add(point);\\n      vector2.copy(point2).add(offset);\\n      vector2.applyQuaternion(quaternion);\\n      vector2.add(point);\\n      vector3.copy(point2).add(offset);\\n      vector3.applyQuaternion(prevQuaternion);\\n      vector3.add(prevPoint);\\n      vector4.copy(point1).add(offset);\\n      vector4.applyQuaternion(prevQuaternion);\\n      vector4.add(prevPoint);\\n      vertices.push(vector1.x, vector1.y, vector1.z);\\n      vertices.push(vector2.x, vector2.y, vector2.z);\\n      vertices.push(vector4.x, vector4.y, vector4.z);\\n      vertices.push(vector2.x, vector2.y, vector2.z);\\n      vertices.push(vector3.x, vector3.y, vector3.z);\\n      vertices.push(vector4.x, vector4.y, vector4.z); //\\n\\n      normal1.copy(point1);\\n      normal1.applyQuaternion(quaternion);\\n      normal1.normalize();\\n      normal2.copy(point2);\\n      normal2.applyQuaternion(quaternion);\\n      normal2.normalize();\\n      normal3.copy(point2);\\n      normal3.applyQuaternion(prevQuaternion);\\n      normal3.normalize();\\n      normal4.copy(point1);\\n      normal4.applyQuaternion(prevQuaternion);\\n      normal4.normalize();\\n      normals.push(normal1.x, normal1.y, normal1.z);\\n      normals.push(normal2.x, normal2.y, normal2.z);\\n      normals.push(normal4.x, normal4.y, normal4.z);\\n      normals.push(normal2.x, normal2.y, normal2.z);\\n      normals.push(normal3.x, normal3.y, normal3.z);\\n      normals.push(normal4.x, normal4.y, normal4.z);\\n      colors.push(color[0], color[1], color[2]);\\n      colors.push(color[0], color[1], color[2]);\\n      colors.push(color[0], color[1], color[2]);\\n      colors.push(color[0], color[1], color[2]);\\n      colors.push(color[0], color[1], color[2]);\\n      colors.push(color[0], color[1], color[2]);\\n    }\\n  }\\n\\n  var offset = new _three.Vector3();\\n\\n  for (var _i2 = 1; _i2 <= divisions; _i2++) {\\n    point.copy(curve.getPointAt(_i2 / divisions));\\n    up.set(0, 1, 0);\\n    forward.subVectors(point, prevPoint).normalize();\\n    right.crossVectors(up, forward).normalize();\\n    up.crossVectors(forward, right);\\n    var angle = Math.atan2(forward.x, forward.z);\\n    quaternion.setFromAxisAngle(up, angle);\\n\\n    if (_i2 % 2 === 0) {\\n      drawShape(step, color2);\\n    }\\n\\n    extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\\n    extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\\n    extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\\n    prevPoint.copy(point);\\n    prevQuaternion.copy(quaternion);\\n  } // console.log( vertices.length );\\n\\n\\n  this.setAttribute('position', new _three.BufferAttribute(new Float32Array(vertices), 3));\\n  this.setAttribute('normal', new _three.BufferAttribute(new Float32Array(normals), 3));\\n  this.setAttribute('color', new _three.BufferAttribute(new Float32Array(colors), 3));\\n};\\n\\nexports.RollerCoasterGeometry = RollerCoasterGeometry;\\nRollerCoasterGeometry.prototype = Object.create(_three.BufferGeometry.prototype);\\n\\nvar RollerCoasterLiftersGeometry = function RollerCoasterLiftersGeometry(curve, divisions) {\\n  _three.BufferGeometry.call(this);\\n\\n  var vertices = [];\\n  var normals = [];\\n  var quaternion = new _three.Quaternion();\\n  var up = new _three.Vector3(0, 1, 0);\\n  var point = new _three.Vector3();\\n  var tangent = new _three.Vector3(); // shapes\\n\\n  var tube1 = [new _three.Vector3(0, 0.05, -0.05), new _three.Vector3(0, 0.05, 0.05), new _three.Vector3(0, -0.05, 0)];\\n  var tube2 = [new _three.Vector3(-0.05, 0, 0.05), new _three.Vector3(-0.05, 0, -0.05), new _three.Vector3(0.05, 0, 0)];\\n  var tube3 = [new _three.Vector3(0.05, 0, -0.05), new _three.Vector3(0.05, 0, 0.05), new _three.Vector3(-0.05, 0, 0)];\\n  var vector1 = new _three.Vector3();\\n  var vector2 = new _three.Vector3();\\n  var vector3 = new _three.Vector3();\\n  var vector4 = new _three.Vector3();\\n  var normal1 = new _three.Vector3();\\n  var normal2 = new _three.Vector3();\\n  var normal3 = new _three.Vector3();\\n  var normal4 = new _three.Vector3();\\n\\n  function extrudeShape(shape, fromPoint, toPoint) {\\n    for (var j = 0, jl = shape.length; j < jl; j++) {\\n      var point1 = shape[j];\\n      var point2 = shape[(j + 1) % jl];\\n      vector1.copy(point1);\\n      vector1.applyQuaternion(quaternion);\\n      vector1.add(fromPoint);\\n      vector2.copy(point2);\\n      vector2.applyQuaternion(quaternion);\\n      vector2.add(fromPoint);\\n      vector3.copy(point2);\\n      vector3.applyQuaternion(quaternion);\\n      vector3.add(toPoint);\\n      vector4.copy(point1);\\n      vector4.applyQuaternion(quaternion);\\n      vector4.add(toPoint);\\n      vertices.push(vector1.x, vector1.y, vector1.z);\\n      vertices.push(vector2.x, vector2.y, vector2.z);\\n      vertices.push(vector4.x, vector4.y, vector4.z);\\n      vertices.push(vector2.x, vector2.y, vector2.z);\\n      vertices.push(vector3.x, vector3.y, vector3.z);\\n      vertices.push(vector4.x, vector4.y, vector4.z); //\\n\\n      normal1.copy(point1);\\n      normal1.applyQuaternion(quaternion);\\n      normal1.normalize();\\n      normal2.copy(point2);\\n      normal2.applyQuaternion(quaternion);\\n      normal2.normalize();\\n      normal3.copy(point2);\\n      normal3.applyQuaternion(quaternion);\\n      normal3.normalize();\\n      normal4.copy(point1);\\n      normal4.applyQuaternion(quaternion);\\n      normal4.normalize();\\n      normals.push(normal1.x, normal1.y, normal1.z);\\n      normals.push(normal2.x, normal2.y, normal2.z);\\n      normals.push(normal4.x, normal4.y, normal4.z);\\n      normals.push(normal2.x, normal2.y, normal2.z);\\n      normals.push(normal3.x, normal3.y, normal3.z);\\n      normals.push(normal4.x, normal4.y, normal4.z);\\n    }\\n  }\\n\\n  var fromPoint = new _three.Vector3();\\n  var toPoint = new _three.Vector3();\\n\\n  for (var i = 1; i <= divisions; i++) {\\n    point.copy(curve.getPointAt(i / divisions));\\n    tangent.copy(curve.getTangentAt(i / divisions));\\n    var angle = Math.atan2(tangent.x, tangent.z);\\n    quaternion.setFromAxisAngle(up, angle); //\\n\\n    if (point.y > 10) {\\n      fromPoint.set(-0.75, -0.35, 0);\\n      fromPoint.applyQuaternion(quaternion);\\n      fromPoint.add(point);\\n      toPoint.set(0.75, -0.35, 0);\\n      toPoint.applyQuaternion(quaternion);\\n      toPoint.add(point);\\n      extrudeShape(tube1, fromPoint, toPoint);\\n      fromPoint.set(-0.7, -0.3, 0);\\n      fromPoint.applyQuaternion(quaternion);\\n      fromPoint.add(point);\\n      toPoint.set(-0.7, -point.y, 0);\\n      toPoint.applyQuaternion(quaternion);\\n      toPoint.add(point);\\n      extrudeShape(tube2, fromPoint, toPoint);\\n      fromPoint.set(0.7, -0.3, 0);\\n      fromPoint.applyQuaternion(quaternion);\\n      fromPoint.add(point);\\n      toPoint.set(0.7, -point.y, 0);\\n      toPoint.applyQuaternion(quaternion);\\n      toPoint.add(point);\\n      extrudeShape(tube3, fromPoint, toPoint);\\n    } else {\\n      fromPoint.set(0, -0.2, 0);\\n      fromPoint.applyQuaternion(quaternion);\\n      fromPoint.add(point);\\n      toPoint.set(0, -point.y, 0);\\n      toPoint.applyQuaternion(quaternion);\\n      toPoint.add(point);\\n      extrudeShape(tube3, fromPoint, toPoint);\\n    }\\n  }\\n\\n  this.setAttribute('position', new _three.BufferAttribute(new Float32Array(vertices), 3));\\n  this.setAttribute('normal', new _three.BufferAttribute(new Float32Array(normals), 3));\\n};\\n\\nexports.RollerCoasterLiftersGeometry = RollerCoasterLiftersGeometry;\\nRollerCoasterLiftersGeometry.prototype = Object.create(_three.BufferGeometry.prototype);\\n\\nvar RollerCoasterShadowGeometry = function RollerCoasterShadowGeometry(curve, divisions) {\\n  _three.BufferGeometry.call(this);\\n\\n  var vertices = [];\\n  var up = new _three.Vector3(0, 1, 0);\\n  var forward = new _three.Vector3();\\n  var quaternion = new _three.Quaternion();\\n  var prevQuaternion = new _three.Quaternion();\\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\\n  var point = new _three.Vector3();\\n  var prevPoint = new _three.Vector3();\\n  prevPoint.copy(curve.getPointAt(0));\\n  prevPoint.y = 0;\\n  var vector1 = new _three.Vector3();\\n  var vector2 = new _three.Vector3();\\n  var vector3 = new _three.Vector3();\\n  var vector4 = new _three.Vector3();\\n\\n  for (var i = 1; i <= divisions; i++) {\\n    point.copy(curve.getPointAt(i / divisions));\\n    point.y = 0;\\n    forward.subVectors(point, prevPoint);\\n    var angle = Math.atan2(forward.x, forward.z);\\n    quaternion.setFromAxisAngle(up, angle);\\n    vector1.set(-0.3, 0, 0);\\n    vector1.applyQuaternion(quaternion);\\n    vector1.add(point);\\n    vector2.set(0.3, 0, 0);\\n    vector2.applyQuaternion(quaternion);\\n    vector2.add(point);\\n    vector3.set(0.3, 0, 0);\\n    vector3.applyQuaternion(prevQuaternion);\\n    vector3.add(prevPoint);\\n    vector4.set(-0.3, 0, 0);\\n    vector4.applyQuaternion(prevQuaternion);\\n    vector4.add(prevPoint);\\n    vertices.push(vector1.x, vector1.y, vector1.z);\\n    vertices.push(vector2.x, vector2.y, vector2.z);\\n    vertices.push(vector4.x, vector4.y, vector4.z);\\n    vertices.push(vector2.x, vector2.y, vector2.z);\\n    vertices.push(vector3.x, vector3.y, vector3.z);\\n    vertices.push(vector4.x, vector4.y, vector4.z);\\n    prevPoint.copy(point);\\n    prevQuaternion.copy(quaternion);\\n  }\\n\\n  this.setAttribute('position', new _three.BufferAttribute(new Float32Array(vertices), 3));\\n};\\n\\nexports.RollerCoasterShadowGeometry = RollerCoasterShadowGeometry;\\nRollerCoasterShadowGeometry.prototype = Object.create(_three.BufferGeometry.prototype);\\n\\nvar SkyGeometry = function SkyGeometry() {\\n  _three.BufferGeometry.call(this);\\n\\n  var vertices = [];\\n\\n  for (var i = 0; i < 100; i++) {\\n    var x = Math.random() * 800 - 400;\\n    var y = Math.random() * 50 + 50;\\n    var z = Math.random() * 800 - 400;\\n    var size = Math.random() * 40 + 20;\\n    vertices.push(x - size, y, z - size);\\n    vertices.push(x + size, y, z - size);\\n    vertices.push(x - size, y, z + size);\\n    vertices.push(x + size, y, z - size);\\n    vertices.push(x + size, y, z + size);\\n    vertices.push(x - size, y, z + size);\\n  }\\n\\n  this.setAttribute('position', new _three.BufferAttribute(new Float32Array(vertices), 3));\\n};\\n\\nexports.SkyGeometry = SkyGeometry;\\nSkyGeometry.prototype = Object.create(_three.BufferGeometry.prototype);\\n\\nvar TreesGeometry = function TreesGeometry(landscape) {\\n  _three.BufferGeometry.call(this);\\n\\n  var vertices = [];\\n  var colors = [];\\n  var raycaster = new _three.Raycaster();\\n  raycaster.ray.direction.set(0, -1, 0);\\n\\n  for (var i = 0; i < 2000; i++) {\\n    var x = Math.random() * 500 - 250;\\n    var z = Math.random() * 500 - 250;\\n    raycaster.ray.origin.set(x, 50, z);\\n    var intersections = raycaster.intersectObject(landscape);\\n    if (intersections.length === 0) continue;\\n    var y = intersections[0].point.y;\\n    var height = Math.random() * 5 + 0.5;\\n    var angle = Math.random() * Math.PI * 2;\\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\\n    vertices.push(x, y + height, z);\\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\\n    angle += Math.PI / 2;\\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\\n    vertices.push(x, y + height, z);\\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\\n    var random = Math.random() * 0.1;\\n\\n    for (var j = 0; j < 6; j++) {\\n      colors.push(0.2 + random, 0.4 + random, 0);\\n    }\\n  }\\n\\n  this.setAttribute('position', new _three.BufferAttribute(new Float32Array(vertices), 3));\\n  this.setAttribute('color', new _three.BufferAttribute(new Float32Array(colors), 3));\\n};\\n\\nexports.TreesGeometry = TreesGeometry;\\nTreesGeometry.prototype = Object.create(_three.BufferGeometry.prototype);\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"TreesGeometry\",\"SkyGeometry\",\"RollerCoasterShadowGeometry\",\"RollerCoasterLiftersGeometry\",\"RollerCoasterGeometry\",\"_three\",\"curve\",\"divisions\",\"drawShape\",\"shape\",\"color\",\"normal\",\"set\",\"applyQuaternion\",\"quaternion\",\"j\",\"length\",\"vector\",\"copy\",\"add\",\"point\",\"vertices\",\"push\",\"x\",\"y\",\"z\",\"normals\",\"colors\",\"_j\",\"extrudeShape\",\"offset\",\"jl\",\"point1\",\"point2\",\"vector1\",\"vector2\",\"vector3\",\"prevQuaternion\",\"prevPoint\",\"vector4\",\"normal1\",\"normalize\",\"normal2\",\"normal3\",\"normal4\",\"BufferGeometry\",\"call\",\"color1\",\"color2\",\"up\",\"Vector3\",\"forward\",\"right\",\"Quaternion\",\"setFromAxisAngle\",\"Math\",\"PI\",\"getPointAt\",\"step\",\"PI2\",\"sides\",\"tube1\",\"i\",\"angle\",\"sin\",\"cos\",\"tube2\",\"_i\",\"_i2\",\"subVectors\",\"crossVectors\",\"atan2\",\"setAttribute\",\"BufferAttribute\",\"Float32Array\",\"prototype\",\"create\",\"fromPoint\",\"toPoint\",\"tangent\",\"tube3\",\"getTangentAt\",\"random\",\"size\",\"landscape\",\"raycaster\",\"Raycaster\",\"ray\",\"direction\",\"origin\",\"intersections\",\"intersectObject\",\"height\"]\n}\n"]