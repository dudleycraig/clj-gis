["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@blueprintjs/core/lib/cjs/components/hotkeys/hotkeyParser.js"],"~:js","shadow$provide.module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeyParser=function(global,require,module,exports){function isMac(platformOverride){platformOverride=null!=platformOverride?platformOverride:\"undefined\"!==typeof navigator?navigator.platform:void 0;return null==platformOverride?!1:/Mac|iPod|iPhone|iPad/.test(platformOverride)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.normalizeKeyCombo=exports.getKeyCombo=exports.getKeyComboString=exports.parseKeyCombo=\nexports.comboMatches=exports.ShiftKeys=exports.Aliases=exports.ModifierBitMasks=exports.Modifiers=exports.KeyCodes=void 0;exports.KeyCodes={8:\"backspace\",9:\"tab\",13:\"enter\",20:\"capslock\",27:\"esc\",32:\"space\",33:\"pageup\",34:\"pagedown\",35:\"end\",36:\"home\",37:\"left\",38:\"up\",39:\"right\",40:\"down\",45:\"ins\",46:\"del\",48:\"0\",49:\"1\",50:\"2\",51:\"3\",52:\"4\",53:\"5\",54:\"6\",55:\"7\",56:\"8\",57:\"9\",65:\"a\",66:\"b\",67:\"c\",68:\"d\",69:\"e\",70:\"f\",71:\"g\",72:\"h\",73:\"i\",74:\"j\",75:\"k\",76:\"l\",77:\"m\",78:\"n\",79:\"o\",80:\"p\",81:\"q\",82:\"r\",\n83:\"s\",84:\"t\",85:\"u\",86:\"v\",87:\"w\",88:\"x\",89:\"y\",90:\"z\",106:\"*\",107:\"+\",109:\"-\",110:\".\",111:\"/\",186:\";\",187:\"\\x3d\",188:\",\",189:\"-\",190:\".\",191:\"/\",192:\"`\",219:\"[\",220:\"\\\\\",221:\"]\",222:\"'\"};exports.Modifiers={16:\"shift\",17:\"ctrl\",18:\"alt\",91:\"meta\",93:\"meta\",224:\"meta\"};exports.ModifierBitMasks={alt:1,ctrl:2,meta:4,shift:8};exports.Aliases={cmd:\"meta\",command:\"meta\",escape:\"esc\",minus:\"-\",mod:isMac()?\"meta\":\"ctrl\",option:\"alt\",plus:\"+\",return:\"enter\",win:\"meta\"};exports.ShiftKeys={\"~\":\"`\",\"!\":\"1\",\n\"@\":\"2\",\"#\":\"3\",$:\"4\",\"%\":\"5\",\"^\":\"6\",\"\\x26\":\"7\",\"*\":\"8\",\"(\":\"9\",\")\":\"0\",_:\"-\",\"+\":\"\\x3d\",\"{\":\"[\",\"}\":\"]\",\"|\":\"\\\\\",\":\":\";\",'\"':\"'\",\"\\x3c\":\",\",\"\\x3e\":\".\",\"?\":\"/\"};for(global=1;12>=global;++global)exports.KeyCodes[111+global]=\"f\"+global;for(global=0;9>=global;++global)exports.KeyCodes[96+global]=\"num\"+global.toString();exports.comboMatches=function(a,b){return a.modifiers===b.modifiers&&a.key===b.key};exports.parseKeyCombo=function(combo){for(var modifiers=0,key,_i=0,pieces_1=combo.replace(/\\s/g,\"\").toLowerCase().split(\"+\");_i<\npieces_1.length;_i++){var piece=pieces_1[_i];if(\"\"===piece)throw Error('Failed to parse key combo \"'+combo+'\".\\n                Valid key combos look like \"cmd + plus\", \"shift+p\", or \"!\"');null!=exports.Aliases[piece]&&(piece=exports.Aliases[piece]);null!=exports.ModifierBitMasks[piece]?modifiers+=exports.ModifierBitMasks[piece]:null!=exports.ShiftKeys[piece]?(modifiers+=exports.ModifierBitMasks.shift,key=exports.ShiftKeys[piece]):key=piece.toLowerCase()}return{modifiers,key}};exports.getKeyComboString=\nfunction(e){var keys=[];e.ctrlKey&&keys.push(\"ctrl\");e.altKey&&keys.push(\"alt\");e.shiftKey&&keys.push(\"shift\");e.metaKey&&keys.push(\"meta\");e=e.which;null==exports.Modifiers[e]&&(null!=exports.KeyCodes[e]?keys.push(exports.KeyCodes[e]):keys.push(String.fromCharCode(e).toLowerCase()));return keys.join(\" + \")};exports.getKeyCombo=function(e){var key,which=e.which;null==exports.Modifiers[which]&&(key=null!=exports.KeyCodes[which]?exports.KeyCodes[which]:String.fromCharCode(which).toLowerCase());which=\n0;e.altKey&&(which+=exports.ModifierBitMasks.alt);e.ctrlKey&&(which+=exports.ModifierBitMasks.ctrl);e.metaKey&&(which+=exports.ModifierBitMasks.meta);e.shiftKey&&(which+=exports.ModifierBitMasks.shift);return{modifiers:which,key}};exports.normalizeKeyCombo=function(combo,platformOverride){return combo.replace(/\\s/g,\"\").split(\"+\").map(function(key){key=null!=exports.Aliases[key]?exports.Aliases[key]:key;return\"meta\"===key?isMac(platformOverride)?\"cmd\":\"ctrl\":key})}}","~:source","shadow$provide[\"module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeyParser\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeKeyCombo = exports.getKeyCombo = exports.getKeyComboString = exports.parseKeyCombo = exports.comboMatches = exports.ShiftKeys = exports.Aliases = exports.ModifierBitMasks = exports.Modifiers = exports.KeyCodes = void 0;\nexports.KeyCodes = {\n    8: \"backspace\",\n    9: \"tab\",\n    13: \"enter\",\n    20: \"capslock\",\n    27: \"esc\",\n    32: \"space\",\n    33: \"pageup\",\n    34: \"pagedown\",\n    35: \"end\",\n    36: \"home\",\n    37: \"left\",\n    38: \"up\",\n    39: \"right\",\n    40: \"down\",\n    45: \"ins\",\n    46: \"del\",\n    // number keys\n    48: \"0\",\n    49: \"1\",\n    50: \"2\",\n    51: \"3\",\n    52: \"4\",\n    53: \"5\",\n    54: \"6\",\n    55: \"7\",\n    56: \"8\",\n    57: \"9\",\n    // alphabet\n    65: \"a\",\n    66: \"b\",\n    67: \"c\",\n    68: \"d\",\n    69: \"e\",\n    70: \"f\",\n    71: \"g\",\n    72: \"h\",\n    73: \"i\",\n    74: \"j\",\n    75: \"k\",\n    76: \"l\",\n    77: \"m\",\n    78: \"n\",\n    79: \"o\",\n    80: \"p\",\n    81: \"q\",\n    82: \"r\",\n    83: \"s\",\n    84: \"t\",\n    85: \"u\",\n    86: \"v\",\n    87: \"w\",\n    88: \"x\",\n    89: \"y\",\n    90: \"z\",\n    // punctuation\n    106: \"*\",\n    107: \"+\",\n    109: \"-\",\n    110: \".\",\n    111: \"/\",\n    186: \";\",\n    187: \"=\",\n    188: \",\",\n    189: \"-\",\n    190: \".\",\n    191: \"/\",\n    192: \"`\",\n    219: \"[\",\n    220: \"\\\\\",\n    221: \"]\",\n    222: \"'\",\n};\nexports.Modifiers = {\n    16: \"shift\",\n    17: \"ctrl\",\n    18: \"alt\",\n    91: \"meta\",\n    93: \"meta\",\n    224: \"meta\",\n};\nexports.ModifierBitMasks = {\n    alt: 1,\n    ctrl: 2,\n    meta: 4,\n    shift: 8,\n};\nexports.Aliases = {\n    cmd: \"meta\",\n    command: \"meta\",\n    escape: \"esc\",\n    minus: \"-\",\n    mod: isMac() ? \"meta\" : \"ctrl\",\n    option: \"alt\",\n    plus: \"+\",\n    return: \"enter\",\n    win: \"meta\",\n};\n// alph sorting is unintuitive here\n// tslint:disable object-literal-sort-keys\nexports.ShiftKeys = {\n    \"~\": \"`\",\n    \"!\": \"1\",\n    \"@\": \"2\",\n    \"#\": \"3\",\n    $: \"4\",\n    \"%\": \"5\",\n    \"^\": \"6\",\n    \"&\": \"7\",\n    \"*\": \"8\",\n    \"(\": \"9\",\n    \")\": \"0\",\n    _: \"-\",\n    \"+\": \"=\",\n    \"{\": \"[\",\n    \"}\": \"]\",\n    \"|\": \"\\\\\",\n    \":\": \";\",\n    '\"': \"'\",\n    \"<\": \",\",\n    \">\": \".\",\n    \"?\": \"/\",\n};\n// tslint:enable object-literal-sort-keys\n// Function keys\nfor (var i = 1; i <= 12; ++i) {\n    exports.KeyCodes[111 + i] = \"f\" + i;\n}\n// Numpad\nfor (var i = 0; i <= 9; ++i) {\n    exports.KeyCodes[96 + i] = \"num\" + i.toString();\n}\nfunction comboMatches(a, b) {\n    return a.modifiers === b.modifiers && a.key === b.key;\n}\nexports.comboMatches = comboMatches;\n/**\n * Converts a key combo string into a key combo object. Key combos include\n * zero or more modifier keys, such as `shift` or `alt`, and exactly one\n * action key, such as `A`, `enter`, or `left`.\n *\n * For action keys that require a shift, e.g. `@` or `|`, we inlude the\n * necessary `shift` modifier and automatically convert the action key to the\n * unshifted version. For example, `@` is equivalent to `shift+2`.\n */\nvar parseKeyCombo = function (combo) {\n    var pieces = combo.replace(/\\s/g, \"\").toLowerCase().split(\"+\");\n    var modifiers = 0;\n    var key;\n    for (var _i = 0, pieces_1 = pieces; _i < pieces_1.length; _i++) {\n        var piece = pieces_1[_i];\n        if (piece === \"\") {\n            throw new Error(\"Failed to parse key combo \\\"\" + combo + \"\\\".\\n                Valid key combos look like \\\"cmd + plus\\\", \\\"shift+p\\\", or \\\"!\\\"\");\n        }\n        if (exports.Aliases[piece] != null) {\n            piece = exports.Aliases[piece];\n        }\n        if (exports.ModifierBitMasks[piece] != null) {\n            modifiers += exports.ModifierBitMasks[piece];\n        }\n        else if (exports.ShiftKeys[piece] != null) {\n            modifiers += exports.ModifierBitMasks.shift;\n            key = exports.ShiftKeys[piece];\n        }\n        else {\n            key = piece.toLowerCase();\n        }\n    }\n    return { modifiers: modifiers, key: key };\n};\nexports.parseKeyCombo = parseKeyCombo;\n/**\n * Converts a keyboard event into a valid combo prop string\n */\nvar getKeyComboString = function (e) {\n    var keys = [];\n    // modifiers first\n    if (e.ctrlKey) {\n        keys.push(\"ctrl\");\n    }\n    if (e.altKey) {\n        keys.push(\"alt\");\n    }\n    if (e.shiftKey) {\n        keys.push(\"shift\");\n    }\n    if (e.metaKey) {\n        keys.push(\"meta\");\n    }\n    // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n    // eslint-disable-next-line deprecation/deprecation\n    var which = e.which;\n    if (exports.Modifiers[which] != null) {\n        // no action key\n    }\n    else if (exports.KeyCodes[which] != null) {\n        keys.push(exports.KeyCodes[which]);\n    }\n    else {\n        // eslint-disable-next-line id-blacklist\n        keys.push(String.fromCharCode(which).toLowerCase());\n    }\n    // join keys with plusses\n    return keys.join(\" + \");\n};\nexports.getKeyComboString = getKeyComboString;\n/**\n * Determines the key combo object from the given keyboard event. Again, a key\n * combo includes zero or more modifiers (represented by a bitmask) and one\n * action key, which we determine from the `e.which` property of the keyboard\n * event.\n */\nvar getKeyCombo = function (e) {\n    var key;\n    // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n    // eslint-disable-next-line deprecation/deprecation\n    var which = e.which;\n    if (exports.Modifiers[which] != null) {\n        // keep key null\n    }\n    else if (exports.KeyCodes[which] != null) {\n        key = exports.KeyCodes[which];\n    }\n    else {\n        // eslint-disable-next-line id-blacklist\n        key = String.fromCharCode(which).toLowerCase();\n    }\n    var modifiers = 0;\n    if (e.altKey) {\n        modifiers += exports.ModifierBitMasks.alt;\n    }\n    if (e.ctrlKey) {\n        modifiers += exports.ModifierBitMasks.ctrl;\n    }\n    if (e.metaKey) {\n        modifiers += exports.ModifierBitMasks.meta;\n    }\n    if (e.shiftKey) {\n        modifiers += exports.ModifierBitMasks.shift;\n    }\n    return { modifiers: modifiers, key: key };\n};\nexports.getKeyCombo = getKeyCombo;\n/**\n * Splits a key combo string into its constituent key values and looks up\n * aliases, such as `return` -> `enter`.\n *\n * Unlike the parseKeyCombo method, this method does NOT convert shifted\n * action keys. So `\"@\"` will NOT be converted to `[\"shift\", \"2\"]`).\n */\nvar normalizeKeyCombo = function (combo, platformOverride) {\n    var keys = combo.replace(/\\s/g, \"\").split(\"+\");\n    return keys.map(function (key) {\n        var keyName = exports.Aliases[key] != null ? exports.Aliases[key] : key;\n        return keyName === \"meta\" ? (isMac(platformOverride) ? \"cmd\" : \"ctrl\") : keyName;\n    });\n};\nexports.normalizeKeyCombo = normalizeKeyCombo;\nfunction isMac(platformOverride) {\n    var platform = platformOverride != null ? platformOverride : typeof navigator !== \"undefined\" ? navigator.platform : undefined;\n    return platform == null ? false : /Mac|iPod|iPhone|iPad/.test(platform);\n}\n//# sourceMappingURL=hotkeyParser.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["Modifiers","ShiftKeys","parseKeyCombo","command","comboMatches","getKeyComboString","plus","return","key","__esModule","option","ModifierBitMasks","Aliases","minus","normalizeKeyCombo","escape","win","value","shift","alt","modifiers","_","mod","cmd","meta","ctrl","$","KeyCodes","getKeyCombo"]],"~:compiled-at",1630405505187,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeyParser.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@blueprintjs/core/lib/cjs/components/hotkeys/hotkeyParser.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$blueprintjs$core$lib$cjs$components$hotkeys$hotkeyParser\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n/*\\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.normalizeKeyCombo = exports.getKeyCombo = exports.getKeyComboString = exports.parseKeyCombo = exports.comboMatches = exports.ShiftKeys = exports.Aliases = exports.ModifierBitMasks = exports.Modifiers = exports.KeyCodes = void 0;\\nexports.KeyCodes = {\\n    8: \\\"backspace\\\",\\n    9: \\\"tab\\\",\\n    13: \\\"enter\\\",\\n    20: \\\"capslock\\\",\\n    27: \\\"esc\\\",\\n    32: \\\"space\\\",\\n    33: \\\"pageup\\\",\\n    34: \\\"pagedown\\\",\\n    35: \\\"end\\\",\\n    36: \\\"home\\\",\\n    37: \\\"left\\\",\\n    38: \\\"up\\\",\\n    39: \\\"right\\\",\\n    40: \\\"down\\\",\\n    45: \\\"ins\\\",\\n    46: \\\"del\\\",\\n    // number keys\\n    48: \\\"0\\\",\\n    49: \\\"1\\\",\\n    50: \\\"2\\\",\\n    51: \\\"3\\\",\\n    52: \\\"4\\\",\\n    53: \\\"5\\\",\\n    54: \\\"6\\\",\\n    55: \\\"7\\\",\\n    56: \\\"8\\\",\\n    57: \\\"9\\\",\\n    // alphabet\\n    65: \\\"a\\\",\\n    66: \\\"b\\\",\\n    67: \\\"c\\\",\\n    68: \\\"d\\\",\\n    69: \\\"e\\\",\\n    70: \\\"f\\\",\\n    71: \\\"g\\\",\\n    72: \\\"h\\\",\\n    73: \\\"i\\\",\\n    74: \\\"j\\\",\\n    75: \\\"k\\\",\\n    76: \\\"l\\\",\\n    77: \\\"m\\\",\\n    78: \\\"n\\\",\\n    79: \\\"o\\\",\\n    80: \\\"p\\\",\\n    81: \\\"q\\\",\\n    82: \\\"r\\\",\\n    83: \\\"s\\\",\\n    84: \\\"t\\\",\\n    85: \\\"u\\\",\\n    86: \\\"v\\\",\\n    87: \\\"w\\\",\\n    88: \\\"x\\\",\\n    89: \\\"y\\\",\\n    90: \\\"z\\\",\\n    // punctuation\\n    106: \\\"*\\\",\\n    107: \\\"+\\\",\\n    109: \\\"-\\\",\\n    110: \\\".\\\",\\n    111: \\\"/\\\",\\n    186: \\\";\\\",\\n    187: \\\"=\\\",\\n    188: \\\",\\\",\\n    189: \\\"-\\\",\\n    190: \\\".\\\",\\n    191: \\\"/\\\",\\n    192: \\\"`\\\",\\n    219: \\\"[\\\",\\n    220: \\\"\\\\\\\\\\\",\\n    221: \\\"]\\\",\\n    222: \\\"'\\\",\\n};\\nexports.Modifiers = {\\n    16: \\\"shift\\\",\\n    17: \\\"ctrl\\\",\\n    18: \\\"alt\\\",\\n    91: \\\"meta\\\",\\n    93: \\\"meta\\\",\\n    224: \\\"meta\\\",\\n};\\nexports.ModifierBitMasks = {\\n    alt: 1,\\n    ctrl: 2,\\n    meta: 4,\\n    shift: 8,\\n};\\nexports.Aliases = {\\n    cmd: \\\"meta\\\",\\n    command: \\\"meta\\\",\\n    escape: \\\"esc\\\",\\n    minus: \\\"-\\\",\\n    mod: isMac() ? \\\"meta\\\" : \\\"ctrl\\\",\\n    option: \\\"alt\\\",\\n    plus: \\\"+\\\",\\n    return: \\\"enter\\\",\\n    win: \\\"meta\\\",\\n};\\n// alph sorting is unintuitive here\\n// tslint:disable object-literal-sort-keys\\nexports.ShiftKeys = {\\n    \\\"~\\\": \\\"`\\\",\\n    \\\"!\\\": \\\"1\\\",\\n    \\\"@\\\": \\\"2\\\",\\n    \\\"#\\\": \\\"3\\\",\\n    $: \\\"4\\\",\\n    \\\"%\\\": \\\"5\\\",\\n    \\\"^\\\": \\\"6\\\",\\n    \\\"&\\\": \\\"7\\\",\\n    \\\"*\\\": \\\"8\\\",\\n    \\\"(\\\": \\\"9\\\",\\n    \\\")\\\": \\\"0\\\",\\n    _: \\\"-\\\",\\n    \\\"+\\\": \\\"=\\\",\\n    \\\"{\\\": \\\"[\\\",\\n    \\\"}\\\": \\\"]\\\",\\n    \\\"|\\\": \\\"\\\\\\\\\\\",\\n    \\\":\\\": \\\";\\\",\\n    '\\\"': \\\"'\\\",\\n    \\\"<\\\": \\\",\\\",\\n    \\\">\\\": \\\".\\\",\\n    \\\"?\\\": \\\"/\\\",\\n};\\n// tslint:enable object-literal-sort-keys\\n// Function keys\\nfor (var i = 1; i <= 12; ++i) {\\n    exports.KeyCodes[111 + i] = \\\"f\\\" + i;\\n}\\n// Numpad\\nfor (var i = 0; i <= 9; ++i) {\\n    exports.KeyCodes[96 + i] = \\\"num\\\" + i.toString();\\n}\\nfunction comboMatches(a, b) {\\n    return a.modifiers === b.modifiers && a.key === b.key;\\n}\\nexports.comboMatches = comboMatches;\\n/**\\n * Converts a key combo string into a key combo object. Key combos include\\n * zero or more modifier keys, such as `shift` or `alt`, and exactly one\\n * action key, such as `A`, `enter`, or `left`.\\n *\\n * For action keys that require a shift, e.g. `@` or `|`, we inlude the\\n * necessary `shift` modifier and automatically convert the action key to the\\n * unshifted version. For example, `@` is equivalent to `shift+2`.\\n */\\nvar parseKeyCombo = function (combo) {\\n    var pieces = combo.replace(/\\\\s/g, \\\"\\\").toLowerCase().split(\\\"+\\\");\\n    var modifiers = 0;\\n    var key;\\n    for (var _i = 0, pieces_1 = pieces; _i < pieces_1.length; _i++) {\\n        var piece = pieces_1[_i];\\n        if (piece === \\\"\\\") {\\n            throw new Error(\\\"Failed to parse key combo \\\\\\\"\\\" + combo + \\\"\\\\\\\".\\\\n                Valid key combos look like \\\\\\\"cmd + plus\\\\\\\", \\\\\\\"shift+p\\\\\\\", or \\\\\\\"!\\\\\\\"\\\");\\n        }\\n        if (exports.Aliases[piece] != null) {\\n            piece = exports.Aliases[piece];\\n        }\\n        if (exports.ModifierBitMasks[piece] != null) {\\n            modifiers += exports.ModifierBitMasks[piece];\\n        }\\n        else if (exports.ShiftKeys[piece] != null) {\\n            modifiers += exports.ModifierBitMasks.shift;\\n            key = exports.ShiftKeys[piece];\\n        }\\n        else {\\n            key = piece.toLowerCase();\\n        }\\n    }\\n    return { modifiers: modifiers, key: key };\\n};\\nexports.parseKeyCombo = parseKeyCombo;\\n/**\\n * Converts a keyboard event into a valid combo prop string\\n */\\nvar getKeyComboString = function (e) {\\n    var keys = [];\\n    // modifiers first\\n    if (e.ctrlKey) {\\n        keys.push(\\\"ctrl\\\");\\n    }\\n    if (e.altKey) {\\n        keys.push(\\\"alt\\\");\\n    }\\n    if (e.shiftKey) {\\n        keys.push(\\\"shift\\\");\\n    }\\n    if (e.metaKey) {\\n        keys.push(\\\"meta\\\");\\n    }\\n    // HACKHACK: https://github.com/palantir/blueprint/issues/4165\\n    // eslint-disable-next-line deprecation/deprecation\\n    var which = e.which;\\n    if (exports.Modifiers[which] != null) {\\n        // no action key\\n    }\\n    else if (exports.KeyCodes[which] != null) {\\n        keys.push(exports.KeyCodes[which]);\\n    }\\n    else {\\n        // eslint-disable-next-line id-blacklist\\n        keys.push(String.fromCharCode(which).toLowerCase());\\n    }\\n    // join keys with plusses\\n    return keys.join(\\\" + \\\");\\n};\\nexports.getKeyComboString = getKeyComboString;\\n/**\\n * Determines the key combo object from the given keyboard event. Again, a key\\n * combo includes zero or more modifiers (represented by a bitmask) and one\\n * action key, which we determine from the `e.which` property of the keyboard\\n * event.\\n */\\nvar getKeyCombo = function (e) {\\n    var key;\\n    // HACKHACK: https://github.com/palantir/blueprint/issues/4165\\n    // eslint-disable-next-line deprecation/deprecation\\n    var which = e.which;\\n    if (exports.Modifiers[which] != null) {\\n        // keep key null\\n    }\\n    else if (exports.KeyCodes[which] != null) {\\n        key = exports.KeyCodes[which];\\n    }\\n    else {\\n        // eslint-disable-next-line id-blacklist\\n        key = String.fromCharCode(which).toLowerCase();\\n    }\\n    var modifiers = 0;\\n    if (e.altKey) {\\n        modifiers += exports.ModifierBitMasks.alt;\\n    }\\n    if (e.ctrlKey) {\\n        modifiers += exports.ModifierBitMasks.ctrl;\\n    }\\n    if (e.metaKey) {\\n        modifiers += exports.ModifierBitMasks.meta;\\n    }\\n    if (e.shiftKey) {\\n        modifiers += exports.ModifierBitMasks.shift;\\n    }\\n    return { modifiers: modifiers, key: key };\\n};\\nexports.getKeyCombo = getKeyCombo;\\n/**\\n * Splits a key combo string into its constituent key values and looks up\\n * aliases, such as `return` -> `enter`.\\n *\\n * Unlike the parseKeyCombo method, this method does NOT convert shifted\\n * action keys. So `\\\"@\\\"` will NOT be converted to `[\\\"shift\\\", \\\"2\\\"]`).\\n */\\nvar normalizeKeyCombo = function (combo, platformOverride) {\\n    var keys = combo.replace(/\\\\s/g, \\\"\\\").split(\\\"+\\\");\\n    return keys.map(function (key) {\\n        var keyName = exports.Aliases[key] != null ? exports.Aliases[key] : key;\\n        return keyName === \\\"meta\\\" ? (isMac(platformOverride) ? \\\"cmd\\\" : \\\"ctrl\\\") : keyName;\\n    });\\n};\\nexports.normalizeKeyCombo = normalizeKeyCombo;\\nfunction isMac(platformOverride) {\\n    var platform = platformOverride != null ? platformOverride : typeof navigator !== \\\"undefined\\\" ? navigator.platform : undefined;\\n    return platform == null ? false : /Mac|iPod|iPhone|iPad/.test(platform);\\n}\\n//# sourceMappingURL=hotkeyParser.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"isMac\",\"platformOverride\",\"platform\",\"navigator\",\"undefined\",\"test\",\"Object\",\"defineProperty\",\"value\",\"normalizeKeyCombo\",\"getKeyCombo\",\"getKeyComboString\",\"parseKeyCombo\",\"comboMatches\",\"ShiftKeys\",\"Aliases\",\"ModifierBitMasks\",\"Modifiers\",\"KeyCodes\",\"alt\",\"ctrl\",\"meta\",\"shift\",\"cmd\",\"command\",\"escape\",\"minus\",\"mod\",\"option\",\"plus\",\"return\",\"win\",\"$\",\"_\",\"i\",\"toString\",\"a\",\"b\",\"modifiers\",\"key\",\"combo\",\"_i\",\"pieces_1\",\"replace\",\"toLowerCase\",\"split\",\"pieces\",\"length\",\"piece\",\"Error\",\"e\",\"keys\",\"ctrlKey\",\"push\",\"altKey\",\"shiftKey\",\"metaKey\",\"which\",\"String\",\"fromCharCode\",\"join\",\"map\",\"keyName\"]\n}\n"]