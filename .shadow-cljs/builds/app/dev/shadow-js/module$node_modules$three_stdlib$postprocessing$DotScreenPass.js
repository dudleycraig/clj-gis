["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/postprocessing/DotScreenPass.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$postprocessing$DotScreenPass=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.DotScreenPass=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_Pass=require(\"module$node_modules$three_stdlib$postprocessing$Pass\"),_DotScreenShader=require(\"module$node_modules$three_stdlib$shaders$DotScreenShader\");global=function(center,angle,scale){void 0===_DotScreenShader.DotScreenShader&&\nconsole.error(\"THREE.DotScreenPass relies on DotScreenShader\");var shader=_DotScreenShader.DotScreenShader;this.uniforms=_three.UniformsUtils.clone(shader.uniforms);void 0!==center&&this.uniforms.center.value.copy(center);void 0!==angle&&(this.uniforms.angle.value=angle);void 0!==scale&&(this.uniforms.scale.value=scale);this.material=new _three.ShaderMaterial({uniforms:this.uniforms,vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader});this.fsQuad=new _Pass.FullScreenQuad(this.material)};\nexports.DotScreenPass=global;global.prototype=Object.assign(Object.create(_Pass.Pass.prototype),{constructor:global,render:function(renderer,writeBuffer,readBuffer){this.uniforms.tDiffuse.value=readBuffer.texture;this.uniforms.tSize.value.set(readBuffer.width,readBuffer.height);this.renderToScreen?renderer.setRenderTarget(null):(renderer.setRenderTarget(writeBuffer),this.clear&&renderer.clear());this.fsQuad.render(renderer)}})}","~:source","shadow$provide[\"module$node_modules$three_stdlib$postprocessing$DotScreenPass\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DotScreenPass = void 0;\n\nvar _three = require(\"three\");\n\nvar _Pass = require(\"./Pass.js\");\n\nvar _DotScreenShader = require(\"../shaders/DotScreenShader.js\");\n\nvar DotScreenPass = function DotScreenPass(center, angle, scale) {\n  if (_DotScreenShader.DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on DotScreenShader');\n  var shader = _DotScreenShader.DotScreenShader;\n  this.uniforms = _three.UniformsUtils.clone(shader.uniforms);\n  if (center !== undefined) this.uniforms['center'].value.copy(center);\n  if (angle !== undefined) this.uniforms['angle'].value = angle;\n  if (scale !== undefined) this.uniforms['scale'].value = scale;\n  this.material = new _three.ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.fsQuad = new _Pass.FullScreenQuad(this.material);\n};\n\nexports.DotScreenPass = DotScreenPass;\nDotScreenPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\n  constructor: DotScreenPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three_stdlib$shaders$DotScreenShader","~$module$node_modules$three$build$three_module","~$shadow.js","~$module$node_modules$three_stdlib$postprocessing$Pass"]],"~:properties",["^5",["fragmentShader","prototype","__esModule","vertexShader","value","fsQuad","render","uniforms","DotScreenPass","constructor","material"]],"~:compiled-at",1630917515531,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$postprocessing$DotScreenPass.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,aAAR,CAAwB,IAAK,EAE7B,KAAIC,OAASP,OAAA,CAAQ,8CAAR,CAAb,CAEIQ,MAAQR,OAAA,CAAQ,sDAAR,CAFZ,CAIIS,iBAAmBT,OAAA,CAAQ,0DAAR,CAEnBM,OAAAA,CAAgBA,QAAsB,CAACI,MAAD,CAASC,KAAT,CAAgBC,KAAhB,CAAuB,CACtBC,IAAAA,EAAzC,GAAIJ,gBAAiBK,CAAAA,eAArB;AAAoDC,OAAQC,CAAAA,KAAR,CAAc,+CAAd,CACpD,KAAIC,OAASR,gBAAiBK,CAAAA,eAC9B,KAAKI,CAAAA,QAAL,CAAgBX,MAAOY,CAAAA,aAAcC,CAAAA,KAArB,CAA2BH,MAAOC,CAAAA,QAAlC,CACDL,KAAAA,EAAf,GAAIH,MAAJ,EAA0B,IAAKQ,CAAAA,QAAL,CAAA,MAAwBb,CAAAA,KAAMgB,CAAAA,IAA9B,CAAmCX,MAAnC,CACZG,KAAAA,EAAd,GAAIF,KAAJ,GAAyB,IAAKO,CAAAA,QAAL,CAAA,KAAuBb,CAAAA,KAAhD,CAAwDM,KAAxD,CACcE,KAAAA,EAAd,GAAID,KAAJ,GAAyB,IAAKM,CAAAA,QAAL,CAAA,KAAuBb,CAAAA,KAAhD,CAAwDO,KAAxD,CACA,KAAKU,CAAAA,QAAL,CAAgB,IAAIf,MAAOgB,CAAAA,cAAX,CAA0B,CACxCL,SAAU,IAAKA,CAAAA,QADyB,CAExCM,aAAcP,MAAOO,CAAAA,YAFmB,CAGxCC,eAAgBR,MAAOQ,CAAAA,cAHiB,CAA1B,CAKhB,KAAKC,CAAAA,MAAL,CAAc,IAAIlB,KAAMmB,CAAAA,cAAV,CAAyB,IAAKL,CAAAA,QAA9B,CAZiD,CAejEpB;OAAQI,CAAAA,aAAR,CAAwBA,MACxBA,OAAcsB,CAAAA,SAAd,CAA0BzB,MAAO0B,CAAAA,MAAP,CAAc1B,MAAO2B,CAAAA,MAAP,CAActB,KAAMuB,CAAAA,IAAKH,CAAAA,SAAzB,CAAd,CAAmD,CAC3EI,YAAa1B,MAD8D,CAE3E2B,OAAQA,QAAe,CAACC,QAAD,CAAWC,WAAX,CAAwBC,UAAxB,CAErB,CACA,IAAKlB,CAAAA,QAAL,CAAA,QAA0Bb,CAAAA,KAA1B,CAAkC+B,UAAWC,CAAAA,OAC7C,KAAKnB,CAAAA,QAAL,CAAA,KAAuBb,CAAAA,KAAMiC,CAAAA,GAA7B,CAAiCF,UAAWG,CAAAA,KAA5C,CAAmDH,UAAWI,CAAAA,MAA9D,CAEI,KAAKC,CAAAA,cAAT,CACEP,QAASQ,CAAAA,eAAT,CAAyB,IAAzB,CADF,EAIER,QAASQ,CAAAA,eAAT,CAAyBP,WAAzB,CACA,CAAI,IAAKQ,CAAAA,KAAT,EAAgBT,QAASS,CAAAA,KAAT,EALlB,CAEE,KAAKjB,CAAAA,MAAOO,CAAAA,MAAZ,CAAmBC,QAAnB,CANF,CAJyE,CAAnD,CA9BgG;\",\n\"sources\":[\"node_modules/three-stdlib/postprocessing/DotScreenPass.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$postprocessing$DotScreenPass\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.DotScreenPass = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _Pass = require(\\\"./Pass.js\\\");\\n\\nvar _DotScreenShader = require(\\\"../shaders/DotScreenShader.js\\\");\\n\\nvar DotScreenPass = function DotScreenPass(center, angle, scale) {\\n  if (_DotScreenShader.DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on DotScreenShader');\\n  var shader = _DotScreenShader.DotScreenShader;\\n  this.uniforms = _three.UniformsUtils.clone(shader.uniforms);\\n  if (center !== undefined) this.uniforms['center'].value.copy(center);\\n  if (angle !== undefined) this.uniforms['angle'].value = angle;\\n  if (scale !== undefined) this.uniforms['scale'].value = scale;\\n  this.material = new _three.ShaderMaterial({\\n    uniforms: this.uniforms,\\n    vertexShader: shader.vertexShader,\\n    fragmentShader: shader.fragmentShader\\n  });\\n  this.fsQuad = new _Pass.FullScreenQuad(this.material);\\n};\\n\\nexports.DotScreenPass = DotScreenPass;\\nDotScreenPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\\n  constructor: DotScreenPass,\\n  render: function render(renderer, writeBuffer, readBuffer\\n  /*, deltaTime, maskActive */\\n  ) {\\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\\n\\n    if (this.renderToScreen) {\\n      renderer.setRenderTarget(null);\\n      this.fsQuad.render(renderer);\\n    } else {\\n      renderer.setRenderTarget(writeBuffer);\\n      if (this.clear) renderer.clear();\\n      this.fsQuad.render(renderer);\\n    }\\n  }\\n});\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"DotScreenPass\",\"_three\",\"_Pass\",\"_DotScreenShader\",\"center\",\"angle\",\"scale\",\"undefined\",\"DotScreenShader\",\"console\",\"error\",\"shader\",\"uniforms\",\"UniformsUtils\",\"clone\",\"copy\",\"material\",\"ShaderMaterial\",\"vertexShader\",\"fragmentShader\",\"fsQuad\",\"FullScreenQuad\",\"prototype\",\"assign\",\"create\",\"Pass\",\"constructor\",\"render\",\"renderer\",\"writeBuffer\",\"readBuffer\",\"texture\",\"set\",\"width\",\"height\",\"renderToScreen\",\"setRenderTarget\",\"clear\"]\n}\n"]