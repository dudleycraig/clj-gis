["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@restart/hooks/esm/useCommittedRef.js"],"~:js","shadow$provide.module$node_modules$$restart$hooks$esm$useCommittedRef=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=void 0;var _react=require(\"module$node_modules$react$index\");exports[\"default\"]=function(value){var ref=(0,_react.useRef)(value);(0,_react.useEffect)(function(){ref.current=value},[value]);return ref}}","~:source","shadow$provide[\"module$node_modules$$restart$hooks$esm$useCommittedRef\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = require(\"react\");\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded befor being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  var ref = (0, _react.useRef)(value);\n  (0, _react.useEffect)(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nvar _default = useCommittedRef;\nexports[\"default\"] = _default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react$index","~$shadow.js"]],"~:properties",["^5",["__esModule","value","current"]],"~:compiled-at",1630917513997,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$restart$hooks$esm$useCommittedRef.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQ,SAAR,CAAA,CAAqB,IAAK,EAE1B,KAAII,OAASN,OAAA,CAAQ,iCAAR,CAoBbE,QAAA,CAAQ,SAAR,CAAA,CATAK,QAAwB,CAACF,KAAD,CAAQ,CAC9B,IAAIG,IAAM,CAAC,CAAA,CAAGF,MAAOG,CAAAA,MAAX,EAAmBJ,KAAnB,CACV,EAAC,CAAA,CAAGC,MAAOI,CAAAA,SAAX,EAAsB,QAAS,EAAG,CAChCF,GAAIG,CAAAA,OAAJ,CAAcN,KADkB,CAAlC,CAEG,CAACA,KAAD,CAFH,CAGA,OAAOG,IALuB,CAnBmF;\",\n\"sources\":[\"node_modules/@restart/hooks/esm/useCommittedRef.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$restart$hooks$esm$useCommittedRef\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = void 0;\\n\\nvar _react = require(\\\"react\\\");\\n\\n/**\\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\\n * value is the one rendered with. Generally only required for Concurrent mode usage\\n * where previous work in `render()` may be discarded befor being used.\\n *\\n * This is safe to access in an event handler.\\n *\\n * @param value The `Ref` value\\n */\\nfunction useCommittedRef(value) {\\n  var ref = (0, _react.useRef)(value);\\n  (0, _react.useEffect)(function () {\\n    ref.current = value;\\n  }, [value]);\\n  return ref;\\n}\\n\\nvar _default = useCommittedRef;\\nexports[\\\"default\\\"] = _default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"_react\",\"useCommittedRef\",\"ref\",\"useRef\",\"useEffect\",\"current\"]\n}\n"]