["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/postprocessing/TexturePass.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$postprocessing$TexturePass=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.TexturePass=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_Pass=require(\"module$node_modules$three_stdlib$postprocessing$Pass\"),_CopyShader=require(\"module$node_modules$three_stdlib$shaders$CopyShader\");global=function(map,opacity){void 0===_CopyShader.CopyShader&&console.error(\"THREE.TexturePass relies on CopyShader\");\nvar shader=_CopyShader.CopyShader;this.map=map;this.opacity=void 0!==opacity?opacity:1;this.uniforms=_three.UniformsUtils.clone(shader.uniforms);this.material=new _three.ShaderMaterial({uniforms:this.uniforms,vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader,depthTest:!1,depthWrite:!1});this.needsSwap=!1;this.fsQuad=new _Pass.FullScreenQuad(null)};exports.TexturePass=global;global.prototype=Object.assign(Object.create(_Pass.Pass.prototype),{constructor:global,render:function(renderer,\nwriteBuffer,readBuffer){writeBuffer=renderer.autoClear;renderer.autoClear=!1;this.fsQuad.material=this.material;this.uniforms.opacity.value=this.opacity;this.uniforms.tDiffuse.value=this.map;this.material.transparent=1>this.opacity;renderer.setRenderTarget(this.renderToScreen?null:readBuffer);this.clear&&renderer.clear();this.fsQuad.render(renderer);renderer.autoClear=writeBuffer}})}","~:source","shadow$provide[\"module$node_modules$three_stdlib$postprocessing$TexturePass\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TexturePass = void 0;\n\nvar _three = require(\"three\");\n\nvar _Pass = require(\"./Pass.js\");\n\nvar _CopyShader = require(\"../shaders/CopyShader.js\");\n\nvar TexturePass = function TexturePass(map, opacity) {\n  if (_CopyShader.CopyShader === undefined) console.error('THREE.TexturePass relies on CopyShader');\n  var shader = _CopyShader.CopyShader;\n  this.map = map;\n  this.opacity = opacity !== undefined ? opacity : 1.0;\n  this.uniforms = _three.UniformsUtils.clone(shader.uniforms);\n  this.material = new _three.ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    depthTest: false,\n    depthWrite: false\n  });\n  this.needsSwap = false;\n  this.fsQuad = new _Pass.FullScreenQuad(null);\n};\n\nexports.TexturePass = TexturePass;\nTexturePass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\n  constructor: TexturePass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.fsQuad.material = this.material;\n    this.uniforms['opacity'].value = this.opacity;\n    this.uniforms['tDiffuse'].value = this.map;\n    this.material.transparent = this.opacity < 1.0;\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n    renderer.autoClear = oldAutoClear;\n  }\n});\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_stdlib$shaders$CopyShader","~$shadow.js","~$module$node_modules$three_stdlib$postprocessing$Pass"]],"~:properties",["^5",["fragmentShader","map","depthTest","TexturePass","prototype","transparent","needsSwap","__esModule","vertexShader","value","fsQuad","autoClear","render","depthWrite","uniforms","opacity","constructor","material"]],"~:compiled-at",1630917515510,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$postprocessing$TexturePass.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAE3B,KAAIC,OAASP,OAAA,CAAQ,8CAAR,CAAb,CAEIQ,MAAQR,OAAA,CAAQ,sDAAR,CAFZ,CAIIS,YAAcT,OAAA,CAAQ,qDAAR,CAEdM,OAAAA,CAAcA,QAAoB,CAACI,GAAD,CAAMC,OAAN,CAAe,CACpBC,IAAAA,EAA/B,GAAIH,WAAYI,CAAAA,UAAhB,EAA0CC,OAAQC,CAAAA,KAAR,CAAc,wCAAd,CAC1C;IAAIC,OAASP,WAAYI,CAAAA,UACzB,KAAKH,CAAAA,GAAL,CAAWA,GACX,KAAKC,CAAAA,OAAL,CAA2BC,IAAAA,EAAZ,GAAAD,OAAA,CAAwBA,OAAxB,CAAkC,CACjD,KAAKM,CAAAA,QAAL,CAAgBV,MAAOW,CAAAA,aAAcC,CAAAA,KAArB,CAA2BH,MAAOC,CAAAA,QAAlC,CAChB,KAAKG,CAAAA,QAAL,CAAgB,IAAIb,MAAOc,CAAAA,cAAX,CAA0B,CACxCJ,SAAU,IAAKA,CAAAA,QADyB,CAExCK,aAAcN,MAAOM,CAAAA,YAFmB,CAGxCC,eAAgBP,MAAOO,CAAAA,cAHiB,CAIxCC,UAAW,CAAA,CAJ6B,CAKxCC,WAAY,CAAA,CAL4B,CAA1B,CAOhB,KAAKC,CAAAA,SAAL,CAAiB,CAAA,CACjB,KAAKC,CAAAA,MAAL,CAAc,IAAInB,KAAMoB,CAAAA,cAAV,CAAyB,IAAzB,CAdqC,CAiBrD1B,QAAQI,CAAAA,WAAR,CAAsBA,MACtBA,OAAYuB,CAAAA,SAAZ,CAAwB1B,MAAO2B,CAAAA,MAAP,CAAc3B,MAAO4B,CAAAA,MAAP,CAAcvB,KAAMwB,CAAAA,IAAKH,CAAAA,SAAzB,CAAd,CAAmD,CACzEI,YAAa3B,MAD4D,CAEzE4B,OAAQA,QAAe,CAACC,QAAD;AAAWC,WAAX,CAAwBC,UAAxB,CAErB,CACIC,WAAAA,CAAeH,QAASI,CAAAA,SAC5BJ,SAASI,CAAAA,SAAT,CAAqB,CAAA,CACrB,KAAKZ,CAAAA,MAAOP,CAAAA,QAAZ,CAAuB,IAAKA,CAAAA,QAC5B,KAAKH,CAAAA,QAAL,CAAA,OAAyBZ,CAAAA,KAAzB,CAAiC,IAAKM,CAAAA,OACtC,KAAKM,CAAAA,QAAL,CAAA,QAA0BZ,CAAAA,KAA1B,CAAkC,IAAKK,CAAAA,GACvC,KAAKU,CAAAA,QAASoB,CAAAA,WAAd,CAA2C,CAA3C,CAA4B,IAAK7B,CAAAA,OACjCwB,SAASM,CAAAA,eAAT,CAAyB,IAAKC,CAAAA,cAAL,CAAsB,IAAtB,CAA6BL,UAAtD,CACI,KAAKM,CAAAA,KAAT,EAAgBR,QAASQ,CAAAA,KAAT,EAChB,KAAKhB,CAAAA,MAAOO,CAAAA,MAAZ,CAAmBC,QAAnB,CACAA,SAASI,CAAAA,SAAT,CAAqBD,WAVrB,CAJuE,CAAnD,CAhCgG;\",\n\"sources\":[\"node_modules/three-stdlib/postprocessing/TexturePass.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$postprocessing$TexturePass\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.TexturePass = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _Pass = require(\\\"./Pass.js\\\");\\n\\nvar _CopyShader = require(\\\"../shaders/CopyShader.js\\\");\\n\\nvar TexturePass = function TexturePass(map, opacity) {\\n  if (_CopyShader.CopyShader === undefined) console.error('THREE.TexturePass relies on CopyShader');\\n  var shader = _CopyShader.CopyShader;\\n  this.map = map;\\n  this.opacity = opacity !== undefined ? opacity : 1.0;\\n  this.uniforms = _three.UniformsUtils.clone(shader.uniforms);\\n  this.material = new _three.ShaderMaterial({\\n    uniforms: this.uniforms,\\n    vertexShader: shader.vertexShader,\\n    fragmentShader: shader.fragmentShader,\\n    depthTest: false,\\n    depthWrite: false\\n  });\\n  this.needsSwap = false;\\n  this.fsQuad = new _Pass.FullScreenQuad(null);\\n};\\n\\nexports.TexturePass = TexturePass;\\nTexturePass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\\n  constructor: TexturePass,\\n  render: function render(renderer, writeBuffer, readBuffer\\n  /*, deltaTime, maskActive */\\n  ) {\\n    var oldAutoClear = renderer.autoClear;\\n    renderer.autoClear = false;\\n    this.fsQuad.material = this.material;\\n    this.uniforms['opacity'].value = this.opacity;\\n    this.uniforms['tDiffuse'].value = this.map;\\n    this.material.transparent = this.opacity < 1.0;\\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\\n    if (this.clear) renderer.clear();\\n    this.fsQuad.render(renderer);\\n    renderer.autoClear = oldAutoClear;\\n  }\\n});\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"TexturePass\",\"_three\",\"_Pass\",\"_CopyShader\",\"map\",\"opacity\",\"undefined\",\"CopyShader\",\"console\",\"error\",\"shader\",\"uniforms\",\"UniformsUtils\",\"clone\",\"material\",\"ShaderMaterial\",\"vertexShader\",\"fragmentShader\",\"depthTest\",\"depthWrite\",\"needsSwap\",\"fsQuad\",\"FullScreenQuad\",\"prototype\",\"assign\",\"create\",\"Pass\",\"constructor\",\"render\",\"renderer\",\"writeBuffer\",\"readBuffer\",\"oldAutoClear\",\"autoClear\",\"transparent\",\"setRenderTarget\",\"renderToScreen\",\"clear\"]\n}\n"]