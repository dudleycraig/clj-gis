["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/nodes/materials/nodes/StandardNode.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$nodes$materials$nodes$StandardNode=function(global,require,module,exports){function StandardNode(){_Node.Node.call(this);this.color=new _ColorNode.ColorNode(16777215);this.roughness=new _FloatNode.FloatNode(1);this.metalness=new _FloatNode.FloatNode(0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.StandardNode=StandardNode;var _three=require(\"module$node_modules$three$build$three_module\"),_Node=require(\"module$node_modules$three_stdlib$nodes$core$Node\"),\n_ExpressionNode=require(\"module$node_modules$three_stdlib$nodes$core$ExpressionNode\"),_ColorNode=require(\"module$node_modules$three_stdlib$nodes$inputs$ColorNode\"),_FloatNode=require(\"module$node_modules$three_stdlib$nodes$inputs$FloatNode\"),_SpecularMIPLevelNode=require(\"module$node_modules$three_stdlib$nodes$utils$SpecularMIPLevelNode\");StandardNode.prototype=Object.create(_Node.Node.prototype);StandardNode.prototype.constructor=StandardNode;StandardNode.prototype.nodeType=\"Standard\";StandardNode.prototype.build=\nfunction(builder){builder.define(\"STANDARD\");var useClearcoat=this.clearcoat||this.clearcoatRoughness||this.clearCoatNormal;useClearcoat&&builder.define(\"CLEARCOAT\");builder.requires.lights=!0;builder.extensions.derivatives=!0;builder.extensions.shaderTextureLOD=!0;if(builder.isShader(\"vertex\")){useClearcoat=this.position?this.position.analyzeAndFlow(builder,\"v3\",{cache:\"position\"}):void 0;builder.mergeUniform(_three.UniformsUtils.merge([_three.UniformsLib.fog,_three.UniformsLib.lights]));_three.UniformsLib.LTC_1&&\n(builder.uniforms.ltc_1={value:void 0},builder.uniforms.ltc_2={value:void 0});builder.addParsCode(\"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include \\x3cfog_pars_vertex\\x3e\\n#include \\x3cmorphtarget_pars_vertex\\x3e\\n#include \\x3cskinning_pars_vertex\\x3e\\n#include \\x3cshadowmap_pars_vertex\\x3e\\n#include \\x3clogdepthbuf_pars_vertex\\x3e\\n#include \\x3cclipping_planes_pars_vertex\\x3e\");var output=\"#include \\x3cbeginnormal_vertex\\x3e,#include \\x3cmorphnormal_vertex\\x3e,#include \\x3cskinbase_vertex\\x3e,#include \\x3cskinnormal_vertex\\x3e,#include \\x3cdefaultnormal_vertex\\x3e,#ifndef FLAT_SHADED,\\tvNormal \\x3d normalize( transformedNormal );,#endif,#include \\x3cbegin_vertex\\x3e\".split(\",\");\nuseClearcoat&&output.push(useClearcoat.code,useClearcoat.result?\"transformed \\x3d \"+useClearcoat.result+\";\":\"\");output.push(\"#include \\x3cmorphtarget_vertex\\x3e\",\"#include \\x3cskinning_vertex\\x3e\",\"#include \\x3cproject_vertex\\x3e\",\"#include \\x3cfog_vertex\\x3e\",\"#include \\x3clogdepthbuf_vertex\\x3e\",\"#include \\x3cclipping_planes_vertex\\x3e\",\"\\tvViewPosition \\x3d - mvPosition.xyz;\",\"#include \\x3cworldpos_vertex\\x3e\",\"#include \\x3cshadowmap_vertex\\x3e\")}else{var specularRoughness=new _ExpressionNode.ExpressionNode(\"material.specularRoughness\",\n\"f\"),clearcoatRoughness=new _ExpressionNode.ExpressionNode(\"material.clearcoatRoughness\",\"f\");output={roughness:specularRoughness,bias:new _SpecularMIPLevelNode.SpecularMIPLevelNode(specularRoughness),viewNormal:new _ExpressionNode.ExpressionNode(\"normal\",\"v3\"),worldNormal:new _ExpressionNode.ExpressionNode(\"inverseTransformDirection( geometry.normal, viewMatrix )\",\"v3\"),gamma:!0};var contextGammaOnly={gamma:!0},contextClearcoatEnvironment={roughness:clearcoatRoughness,bias:new _SpecularMIPLevelNode.SpecularMIPLevelNode(clearcoatRoughness),\nviewNormal:new _ExpressionNode.ExpressionNode(\"clearcoatNormal\",\"v3\"),worldNormal:new _ExpressionNode.ExpressionNode(\"inverseTransformDirection( geometry.clearcoatNormal, viewMatrix )\",\"v3\"),gamma:!0};this.mask&&this.mask.analyze(builder);this.color.analyze(builder,{slot:\"color\",context:contextGammaOnly});this.roughness.analyze(builder);this.metalness.analyze(builder);this.alpha&&this.alpha.analyze(builder);this.normal&&this.normal.analyze(builder);this.clearcoat&&this.clearcoat.analyze(builder);\nthis.clearcoatRoughness&&this.clearcoatRoughness.analyze(builder);this.clearcoatNormal&&this.clearcoatNormal.analyze(builder);this.reflectivity&&this.reflectivity.analyze(builder);this.light&&this.light.analyze(builder,{cache:\"light\"});this.ao&&this.ao.analyze(builder);this.ambient&&this.ambient.analyze(builder);this.shadow&&this.shadow.analyze(builder);this.emissive&&this.emissive.analyze(builder,{slot:\"emissive\"});this.environment&&(this.environment.analyze(builder,{cache:\"radiance\",context:output,\nslot:\"radiance\"}),builder.requires.irradiance&&this.environment.analyze(builder,{cache:\"irradiance\",context:output,slot:\"irradiance\"}));this.sheen&&this.sheen.analyze(builder);specularRoughness=this.mask?this.mask.flow(builder,\"b\"):void 0;contextGammaOnly=this.color.flow(builder,\"c\",{slot:\"color\",context:contextGammaOnly});var roughness=this.roughness.flow(builder,\"f\"),metalness=this.metalness.flow(builder,\"f\"),alpha=this.alpha?this.alpha.flow(builder,\"f\"):void 0,normal=this.normal?this.normal.flow(builder,\n\"v3\"):void 0,clearcoat=this.clearcoat?this.clearcoat.flow(builder,\"f\"):void 0;clearcoatRoughness=this.clearcoatRoughness?this.clearcoatRoughness.flow(builder,\"f\"):void 0;var clearcoatNormal=this.clearcoatNormal?this.clearcoatNormal.flow(builder,\"v3\"):void 0,reflectivity=this.reflectivity?this.reflectivity.flow(builder,\"f\"):void 0,light=this.light?this.light.flow(builder,\"v3\",{cache:\"light\"}):void 0,ao=this.ao?this.ao.flow(builder,\"f\"):void 0,ambient=this.ambient?this.ambient.flow(builder,\"c\"):void 0,\nshadow=this.shadow?this.shadow.flow(builder,\"c\"):void 0,emissive=this.emissive?this.emissive.flow(builder,\"c\",{slot:\"emissive\"}):void 0;if(this.environment){var environment={radiance:this.environment.flow(builder,\"c\",{cache:\"radiance\",context:output,slot:\"radiance\"})};builder.requires.irradiance&&(environment.irradiance=this.environment.flow(builder,\"c\",{cache:\"irradiance\",context:output,slot:\"irradiance\"}))}contextClearcoatEnvironment=useClearcoat&&environment?this.environment.flow(builder,\"c\",{cache:\"clearcoat\",\ncontext:contextClearcoatEnvironment,slot:\"environment\"}):void 0;var sheen=this.sheen?this.sheen.flow(builder,\"c\"):void 0;builder.requires.transparent=void 0!==alpha;builder.addParsCode(\"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include \\x3cdithering_pars_fragment\\x3e\\n#include \\x3cfog_pars_fragment\\x3e\\n#include \\x3cbsdfs\\x3e\\n#include \\x3clights_pars_begin\\x3e\\n#include \\x3clights_physical_pars_fragment\\x3e\\n#include \\x3cshadowmap_pars_fragment\\x3e\\n#include \\x3clogdepthbuf_pars_fragment\\x3e\");\noutput=[\"#include \\x3cclipping_planes_fragment\\x3e\",\"\\t#include \\x3cnormal_fragment_begin\\x3e\",\"\\t#include \\x3cclearcoat_normal_fragment_begin\\x3e\",\"\\tPhysicalMaterial material;\",\"\\tmaterial.diffuseColor \\x3d vec3( 1.0 );\"];specularRoughness&&output.push(specularRoughness.code,\"if ( ! \"+specularRoughness.result+\" ) discard;\");output.push(contextGammaOnly.code,\"\\tvec3 diffuseColor \\x3d \"+contextGammaOnly.result+\";\",\"\\tReflectedLight reflectedLight \\x3d ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\",\n\"#include \\x3clogdepthbuf_fragment\\x3e\",roughness.code,\"\\tfloat roughnessFactor \\x3d \"+roughness.result+\";\",metalness.code,\"\\tfloat metalnessFactor \\x3d \"+metalness.result+\";\");alpha&&output.push(alpha.code,\"#ifdef ALPHATEST\",\"\\tif ( \"+alpha.result+\" \\x3c\\x3d ALPHATEST ) discard;\",\"#endif\");normal&&output.push(normal.code,\"normal \\x3d \"+normal.result+\";\");clearcoatNormal&&output.push(clearcoatNormal.code,\"clearcoatNormal \\x3d \"+clearcoatNormal.result+\";\");output.push(\"vec3 dxy \\x3d max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\",\n\"float geometryRoughness \\x3d max( max( dxy.x, dxy.y ), dxy.z );\");output.push(\"material.diffuseColor \\x3d \"+(light?\"vec3( 1.0 )\":\"diffuseColor * ( 1.0 - metalnessFactor )\")+\";\",\"material.specularRoughness \\x3d max( roughnessFactor, 0.0525 );\",\"material.specularRoughness +\\x3d geometryRoughness;\",\"material.specularRoughness \\x3d min( material.specularRoughness, 1.0 );\",\"material.specularRoughness \\x3d clamp( roughnessFactor, 0.04, 1.0 );\");clearcoat?output.push(clearcoat.code,\"material.clearcoat \\x3d saturate( \"+\nclearcoat.result+\" );\"):useClearcoat&&output.push(\"material.clearcoat \\x3d 0.0;\");clearcoatRoughness?output.push(clearcoatRoughness.code,\"material.clearcoatRoughness \\x3d max( \"+clearcoatRoughness.result+\", 0.0525 );\",\"material.clearcoatRoughness +\\x3d geometryRoughness;\",\"material.clearcoatRoughness \\x3d min( material.clearcoatRoughness, 1.0 );\"):useClearcoat&&output.push(\"material.clearcoatRoughness \\x3d 0.0;\");sheen&&output.push(\"material.sheenColor \\x3d \"+sheen.result+\";\");reflectivity?output.push(reflectivity.code,\n\"material.specularColor \\x3d mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( \"+reflectivity.result+\" ) ), diffuseColor, metalnessFactor );\"):output.push(\"material.specularColor \\x3d mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor, metalnessFactor );\");output.push(\"#include \\x3clights_fragment_begin\\x3e\");light&&(output.push(light.code,\"reflectedLight.directDiffuse \\x3d \"+light.result+\";\"),output.push(\"diffuseColor *\\x3d 1.0 - metalnessFactor;\",\"reflectedLight.directDiffuse *\\x3d diffuseColor;\",\n\"reflectedLight.indirectDiffuse *\\x3d diffuseColor;\"));ao&&output.push(ao.code,\"reflectedLight.indirectDiffuse *\\x3d \"+ao.result+\";\",\"float dotNV \\x3d saturate( dot( geometry.normal, geometry.viewDir ) );\",\"reflectedLight.indirectSpecular *\\x3d computeSpecularOcclusion( dotNV, \"+ao.result+\", material.specularRoughness );\");ambient&&output.push(ambient.code,\"reflectedLight.indirectDiffuse +\\x3d \"+ambient.result+\";\");shadow&&output.push(shadow.code,\"reflectedLight.directDiffuse *\\x3d \"+shadow.result+\n\";\",\"reflectedLight.directSpecular *\\x3d \"+shadow.result+\";\");emissive&&output.push(emissive.code,\"reflectedLight.directDiffuse +\\x3d \"+emissive.result+\";\");environment&&(output.push(environment.radiance.code),builder.requires.irradiance&&output.push(environment.irradiance.code),contextClearcoatEnvironment&&output.push(contextClearcoatEnvironment.code,\"clearcoatRadiance +\\x3d \"+contextClearcoatEnvironment.result+\";\"),output.push(\"radiance +\\x3d \"+environment.radiance.result+\";\"),builder.requires.irradiance&&\noutput.push(\"iblIrradiance +\\x3d PI * \"+environment.irradiance.result+\";\"));output.push(\"#include \\x3clights_fragment_end\\x3e\");output.push(\"vec3 outgoingLight \\x3d reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;\");alpha?output.push(\"gl_FragColor \\x3d vec4( outgoingLight, \"+alpha.result+\" );\"):output.push(\"gl_FragColor \\x3d vec4( outgoingLight, 1.0 );\");output.push(\"#include \\x3ctonemapping_fragment\\x3e\",\"#include \\x3cencodings_fragment\\x3e\",\n\"#include \\x3cfog_fragment\\x3e\",\"#include \\x3cpremultiplied_alpha_fragment\\x3e\",\"#include \\x3cdithering_fragment\\x3e\")}return output.join(\"\\n\")};StandardNode.prototype.copy=function(source){_Node.Node.prototype.copy.call(this,source);source.position&&(this.position=source.position);this.color=source.color;this.roughness=source.roughness;this.metalness=source.metalness;source.mask&&(this.mask=source.mask);source.alpha&&(this.alpha=source.alpha);source.normal&&(this.normal=source.normal);source.clearcoat&&\n(this.clearcoat=source.clearcoat);source.clearcoatRoughness&&(this.clearcoatRoughness=source.clearcoatRoughness);source.clearcoatNormal&&(this.clearcoatNormal=source.clearcoatNormal);source.reflectivity&&(this.reflectivity=source.reflectivity);source.light&&(this.light=source.light);source.shadow&&(this.shadow=source.shadow);source.ao&&(this.ao=source.ao);source.emissive&&(this.emissive=source.emissive);source.ambient&&(this.ambient=source.ambient);source.environment&&(this.environment=source.environment);\nsource.sheen&&(this.sheen=source.sheen);return this};StandardNode.prototype.toJSON=function(meta){var data=this.getJSONNode(meta);data||(data=this.createJSONNode(meta),this.position&&(data.position=this.position.toJSON(meta).uuid),data.color=this.color.toJSON(meta).uuid,data.roughness=this.roughness.toJSON(meta).uuid,data.metalness=this.metalness.toJSON(meta).uuid,this.mask&&(data.mask=this.mask.toJSON(meta).uuid),this.alpha&&(data.alpha=this.alpha.toJSON(meta).uuid),this.normal&&(data.normal=this.normal.toJSON(meta).uuid),\nthis.clearcoat&&(data.clearcoat=this.clearcoat.toJSON(meta).uuid),this.clearcoatRoughness&&(data.clearcoatRoughness=this.clearcoatRoughness.toJSON(meta).uuid),this.clearcoatNormal&&(data.clearcoatNormal=this.clearcoatNormal.toJSON(meta).uuid),this.reflectivity&&(data.reflectivity=this.reflectivity.toJSON(meta).uuid),this.light&&(data.light=this.light.toJSON(meta).uuid),this.shadow&&(data.shadow=this.shadow.toJSON(meta).uuid),this.ao&&(data.ao=this.ao.toJSON(meta).uuid),this.emissive&&(data.emissive=\nthis.emissive.toJSON(meta).uuid),this.ambient&&(data.ambient=this.ambient.toJSON(meta).uuid),this.environment&&(data.environment=this.environment.toJSON(meta).uuid),this.sheen&&(data.sheen=this.sheen.toJSON(meta).uuid));return data}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$nodes$materials$nodes$StandardNode\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StandardNode = StandardNode;\n\nvar _three = require(\"three\");\n\nvar _Node = require(\"../../core/Node.js\");\n\nvar _ExpressionNode = require(\"../../core/ExpressionNode.js\");\n\nvar _ColorNode = require(\"../../inputs/ColorNode.js\");\n\nvar _FloatNode = require(\"../../inputs/FloatNode.js\");\n\nvar _SpecularMIPLevelNode = require(\"../../utils/SpecularMIPLevelNode.js\");\n\nfunction StandardNode() {\n  _Node.Node.call(this);\n\n  this.color = new _ColorNode.ColorNode(0xffffff);\n  this.roughness = new _FloatNode.FloatNode(1);\n  this.metalness = new _FloatNode.FloatNode(0);\n}\n\nStandardNode.prototype = Object.create(_Node.Node.prototype);\nStandardNode.prototype.constructor = StandardNode;\nStandardNode.prototype.nodeType = 'Standard';\n\nStandardNode.prototype.build = function (builder) {\n  var code;\n  builder.define('STANDARD');\n  var useClearcoat = this.clearcoat || this.clearcoatRoughness || this.clearCoatNormal;\n\n  if (useClearcoat) {\n    builder.define('CLEARCOAT');\n  }\n\n  builder.requires.lights = true;\n  builder.extensions.derivatives = true;\n  builder.extensions.shaderTextureLOD = true;\n\n  if (builder.isShader('vertex')) {\n    var position = this.position ? this.position.analyzeAndFlow(builder, 'v3', {\n      cache: 'position'\n    }) : undefined;\n    builder.mergeUniform(_three.UniformsUtils.merge([_three.UniformsLib.fog, _three.UniformsLib.lights]));\n\n    if (_three.UniformsLib.LTC_1) {\n      // add ltc data textures to material uniforms\n      builder.uniforms.ltc_1 = {\n        value: undefined\n      };\n      builder.uniforms.ltc_2 = {\n        value: undefined\n      };\n    }\n\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\tvarying vec3 vNormal;', '#endif', //\"#include <encodings_pars_fragment>\", // encoding functions\n    '#include <fog_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <shadowmap_pars_vertex>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>'].join('\\n'));\n    var output = ['#include <beginnormal_vertex>', '#include <morphnormal_vertex>', '#include <skinbase_vertex>', '#include <skinnormal_vertex>', '#include <defaultnormal_vertex>', '#ifndef FLAT_SHADED', // Normal computed with derivatives when FLAT_SHADED\n    '\tvNormal = normalize( transformedNormal );', '#endif', '#include <begin_vertex>'];\n\n    if (position) {\n      output.push(position.code, position.result ? 'transformed = ' + position.result + ';' : '');\n    }\n\n    output.push('#include <morphtarget_vertex>', '#include <skinning_vertex>', '#include <project_vertex>', '#include <fog_vertex>', '#include <logdepthbuf_vertex>', '#include <clipping_planes_vertex>', '\tvViewPosition = - mvPosition.xyz;', '#include <worldpos_vertex>', '#include <shadowmap_vertex>');\n    code = output.join('\\n');\n  } else {\n    var specularRoughness = new _ExpressionNode.ExpressionNode('material.specularRoughness', 'f');\n    var clearcoatRoughness = new _ExpressionNode.ExpressionNode('material.clearcoatRoughness', 'f');\n    var contextEnvironment = {\n      roughness: specularRoughness,\n      bias: new _SpecularMIPLevelNode.SpecularMIPLevelNode(specularRoughness),\n      viewNormal: new _ExpressionNode.ExpressionNode('normal', 'v3'),\n      worldNormal: new _ExpressionNode.ExpressionNode('inverseTransformDirection( geometry.normal, viewMatrix )', 'v3'),\n      gamma: true\n    };\n    var contextGammaOnly = {\n      gamma: true\n    };\n    var contextClearcoatEnvironment = {\n      roughness: clearcoatRoughness,\n      bias: new _SpecularMIPLevelNode.SpecularMIPLevelNode(clearcoatRoughness),\n      viewNormal: new _ExpressionNode.ExpressionNode('clearcoatNormal', 'v3'),\n      worldNormal: new _ExpressionNode.ExpressionNode('inverseTransformDirection( geometry.clearcoatNormal, viewMatrix )', 'v3'),\n      gamma: true\n    }; // analyze all nodes to reuse generate codes\n\n    if (this.mask) this.mask.analyze(builder);\n    this.color.analyze(builder, {\n      slot: 'color',\n      context: contextGammaOnly\n    });\n    this.roughness.analyze(builder);\n    this.metalness.analyze(builder);\n    if (this.alpha) this.alpha.analyze(builder);\n    if (this.normal) this.normal.analyze(builder);\n    if (this.clearcoat) this.clearcoat.analyze(builder);\n    if (this.clearcoatRoughness) this.clearcoatRoughness.analyze(builder);\n    if (this.clearcoatNormal) this.clearcoatNormal.analyze(builder);\n    if (this.reflectivity) this.reflectivity.analyze(builder);\n    if (this.light) this.light.analyze(builder, {\n      cache: 'light'\n    });\n    if (this.ao) this.ao.analyze(builder);\n    if (this.ambient) this.ambient.analyze(builder);\n    if (this.shadow) this.shadow.analyze(builder);\n    if (this.emissive) this.emissive.analyze(builder, {\n      slot: 'emissive'\n    });\n\n    if (this.environment) {\n      // isolate environment from others inputs ( see TextureNode, CubeTextureNode )\n      // environment.analyze will detect if there is a need of calculate irradiance\n      this.environment.analyze(builder, {\n        cache: 'radiance',\n        context: contextEnvironment,\n        slot: 'radiance'\n      });\n\n      if (builder.requires.irradiance) {\n        this.environment.analyze(builder, {\n          cache: 'irradiance',\n          context: contextEnvironment,\n          slot: 'irradiance'\n        });\n      }\n    }\n\n    if (this.sheen) this.sheen.analyze(builder); // build code\n\n    var mask = this.mask ? this.mask.flow(builder, 'b') : undefined;\n    var color = this.color.flow(builder, 'c', {\n      slot: 'color',\n      context: contextGammaOnly\n    });\n    var roughness = this.roughness.flow(builder, 'f');\n    var metalness = this.metalness.flow(builder, 'f');\n    var alpha = this.alpha ? this.alpha.flow(builder, 'f') : undefined;\n    var normal = this.normal ? this.normal.flow(builder, 'v3') : undefined;\n    var clearcoat = this.clearcoat ? this.clearcoat.flow(builder, 'f') : undefined;\n    var clearcoatRoughness = this.clearcoatRoughness ? this.clearcoatRoughness.flow(builder, 'f') : undefined;\n    var clearcoatNormal = this.clearcoatNormal ? this.clearcoatNormal.flow(builder, 'v3') : undefined;\n    var reflectivity = this.reflectivity ? this.reflectivity.flow(builder, 'f') : undefined;\n    var light = this.light ? this.light.flow(builder, 'v3', {\n      cache: 'light'\n    }) : undefined;\n    var ao = this.ao ? this.ao.flow(builder, 'f') : undefined;\n    var ambient = this.ambient ? this.ambient.flow(builder, 'c') : undefined;\n    var shadow = this.shadow ? this.shadow.flow(builder, 'c') : undefined;\n    var emissive = this.emissive ? this.emissive.flow(builder, 'c', {\n      slot: 'emissive'\n    }) : undefined;\n    var environment;\n\n    if (this.environment) {\n      environment = {\n        radiance: this.environment.flow(builder, 'c', {\n          cache: 'radiance',\n          context: contextEnvironment,\n          slot: 'radiance'\n        })\n      };\n\n      if (builder.requires.irradiance) {\n        environment.irradiance = this.environment.flow(builder, 'c', {\n          cache: 'irradiance',\n          context: contextEnvironment,\n          slot: 'irradiance'\n        });\n      }\n    }\n\n    var clearcoatEnv = useClearcoat && environment ? this.environment.flow(builder, 'c', {\n      cache: 'clearcoat',\n      context: contextClearcoatEnvironment,\n      slot: 'environment'\n    }) : undefined;\n    var sheen = this.sheen ? this.sheen.flow(builder, 'c') : undefined;\n    builder.requires.transparent = alpha !== undefined;\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\tvarying vec3 vNormal;', '#endif', '#include <dithering_pars_fragment>', '#include <fog_pars_fragment>', '#include <bsdfs>', '#include <lights_pars_begin>', '#include <lights_physical_pars_fragment>', '#include <shadowmap_pars_fragment>', '#include <logdepthbuf_pars_fragment>'].join('\\n'));\n    var output = ['#include <clipping_planes_fragment>', // add before: prevent undeclared normal\n    '\t#include <normal_fragment_begin>', '\t#include <clearcoat_normal_fragment_begin>', // add before: prevent undeclared material\n    '\tPhysicalMaterial material;', '\tmaterial.diffuseColor = vec3( 1.0 );'];\n\n    if (mask) {\n      output.push(mask.code, 'if ( ! ' + mask.result + ' ) discard;');\n    }\n\n    output.push(color.code, '\tvec3 diffuseColor = ' + color.result + ';', '\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );', '#include <logdepthbuf_fragment>', roughness.code, '\tfloat roughnessFactor = ' + roughness.result + ';', metalness.code, '\tfloat metalnessFactor = ' + metalness.result + ';');\n\n    if (alpha) {\n      output.push(alpha.code, '#ifdef ALPHATEST', '\tif ( ' + alpha.result + ' <= ALPHATEST ) discard;', '#endif');\n    }\n\n    if (normal) {\n      output.push(normal.code, 'normal = ' + normal.result + ';');\n    }\n\n    if (clearcoatNormal) {\n      output.push(clearcoatNormal.code, 'clearcoatNormal = ' + clearcoatNormal.result + ';');\n    } // anti-aliasing code by @elalish\n\n\n    output.push('vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );', 'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );'); // optimization for now\n\n    output.push('material.diffuseColor = ' + (light ? 'vec3( 1.0 )' : 'diffuseColor * ( 1.0 - metalnessFactor )') + ';', 'material.specularRoughness = max( roughnessFactor, 0.0525 );', 'material.specularRoughness += geometryRoughness;', 'material.specularRoughness = min( material.specularRoughness, 1.0 );', 'material.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );');\n\n    if (clearcoat) {\n      output.push(clearcoat.code, 'material.clearcoat = saturate( ' + clearcoat.result + ' );' // Burley clearcoat model\n      );\n    } else if (useClearcoat) {\n      output.push('material.clearcoat = 0.0;');\n    }\n\n    if (clearcoatRoughness) {\n      output.push(clearcoatRoughness.code, 'material.clearcoatRoughness = max( ' + clearcoatRoughness.result + ', 0.0525 );', 'material.clearcoatRoughness += geometryRoughness;', 'material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );');\n    } else if (useClearcoat) {\n      output.push('material.clearcoatRoughness = 0.0;');\n    }\n\n    if (sheen) {\n      output.push('material.sheenColor = ' + sheen.result + ';');\n    }\n\n    if (reflectivity) {\n      output.push(reflectivity.code, 'material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( ' + reflectivity.result + ' ) ), diffuseColor, metalnessFactor );');\n    } else {\n      output.push('material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor, metalnessFactor );');\n    }\n\n    output.push('#include <lights_fragment_begin>');\n\n    if (light) {\n      output.push(light.code, 'reflectedLight.directDiffuse = ' + light.result + ';'); // apply color\n\n      output.push('diffuseColor *= 1.0 - metalnessFactor;', 'reflectedLight.directDiffuse *= diffuseColor;', 'reflectedLight.indirectDiffuse *= diffuseColor;');\n    }\n\n    if (ao) {\n      output.push(ao.code, 'reflectedLight.indirectDiffuse *= ' + ao.result + ';', 'float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );', 'reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ' + ao.result + ', material.specularRoughness );');\n    }\n\n    if (ambient) {\n      output.push(ambient.code, 'reflectedLight.indirectDiffuse += ' + ambient.result + ';');\n    }\n\n    if (shadow) {\n      output.push(shadow.code, 'reflectedLight.directDiffuse *= ' + shadow.result + ';', 'reflectedLight.directSpecular *= ' + shadow.result + ';');\n    }\n\n    if (emissive) {\n      output.push(emissive.code, 'reflectedLight.directDiffuse += ' + emissive.result + ';');\n    }\n\n    if (environment) {\n      output.push(environment.radiance.code);\n\n      if (builder.requires.irradiance) {\n        output.push(environment.irradiance.code);\n      }\n\n      if (clearcoatEnv) {\n        output.push(clearcoatEnv.code, 'clearcoatRadiance += ' + clearcoatEnv.result + ';');\n      }\n\n      output.push('radiance += ' + environment.radiance.result + ';');\n\n      if (builder.requires.irradiance) {\n        output.push('iblIrradiance += PI * ' + environment.irradiance.result + ';');\n      }\n    }\n\n    output.push('#include <lights_fragment_end>');\n    output.push('vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;');\n\n    if (alpha) {\n      output.push('gl_FragColor = vec4( outgoingLight, ' + alpha.result + ' );');\n    } else {\n      output.push('gl_FragColor = vec4( outgoingLight, 1.0 );');\n    }\n\n    output.push('#include <tonemapping_fragment>', '#include <encodings_fragment>', '#include <fog_fragment>', '#include <premultiplied_alpha_fragment>', '#include <dithering_fragment>');\n    code = output.join('\\n');\n  }\n\n  return code;\n};\n\nStandardNode.prototype.copy = function (source) {\n  _Node.Node.prototype.copy.call(this, source); // vertex\n\n\n  if (source.position) this.position = source.position; // fragment\n\n  this.color = source.color;\n  this.roughness = source.roughness;\n  this.metalness = source.metalness;\n  if (source.mask) this.mask = source.mask;\n  if (source.alpha) this.alpha = source.alpha;\n  if (source.normal) this.normal = source.normal;\n  if (source.clearcoat) this.clearcoat = source.clearcoat;\n  if (source.clearcoatRoughness) this.clearcoatRoughness = source.clearcoatRoughness;\n  if (source.clearcoatNormal) this.clearcoatNormal = source.clearcoatNormal;\n  if (source.reflectivity) this.reflectivity = source.reflectivity;\n  if (source.light) this.light = source.light;\n  if (source.shadow) this.shadow = source.shadow;\n  if (source.ao) this.ao = source.ao;\n  if (source.emissive) this.emissive = source.emissive;\n  if (source.ambient) this.ambient = source.ambient;\n  if (source.environment) this.environment = source.environment;\n  if (source.sheen) this.sheen = source.sheen;\n  return this;\n};\n\nStandardNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta); // vertex\n\n    if (this.position) data.position = this.position.toJSON(meta).uuid; // fragment\n\n    data.color = this.color.toJSON(meta).uuid;\n    data.roughness = this.roughness.toJSON(meta).uuid;\n    data.metalness = this.metalness.toJSON(meta).uuid;\n    if (this.mask) data.mask = this.mask.toJSON(meta).uuid;\n    if (this.alpha) data.alpha = this.alpha.toJSON(meta).uuid;\n    if (this.normal) data.normal = this.normal.toJSON(meta).uuid;\n    if (this.clearcoat) data.clearcoat = this.clearcoat.toJSON(meta).uuid;\n    if (this.clearcoatRoughness) data.clearcoatRoughness = this.clearcoatRoughness.toJSON(meta).uuid;\n    if (this.clearcoatNormal) data.clearcoatNormal = this.clearcoatNormal.toJSON(meta).uuid;\n    if (this.reflectivity) data.reflectivity = this.reflectivity.toJSON(meta).uuid;\n    if (this.light) data.light = this.light.toJSON(meta).uuid;\n    if (this.shadow) data.shadow = this.shadow.toJSON(meta).uuid;\n    if (this.ao) data.ao = this.ao.toJSON(meta).uuid;\n    if (this.emissive) data.emissive = this.emissive.toJSON(meta).uuid;\n    if (this.ambient) data.ambient = this.ambient.toJSON(meta).uuid;\n    if (this.environment) data.environment = this.environment.toJSON(meta).uuid;\n    if (this.sheen) data.sheen = this.sheen.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js","~$module$node_modules$three_stdlib$nodes$inputs$FloatNode","~$module$node_modules$three_stdlib$nodes$inputs$ColorNode","~$module$node_modules$three_stdlib$nodes$core$ExpressionNode","~$module$node_modules$three_stdlib$nodes$utils$SpecularMIPLevelNode","~$module$node_modules$three_stdlib$nodes$core$Node"]],"~:properties",["^5",["clearcoat","viewNormal","light","reflectivity","gamma","worldNormal","copy","prototype","transparent","lights","emissive","slot","__esModule","clearcoatRoughness","ltc_1","derivatives","normal","cache","shadow","sheen","position","nodeType","value","ambient","context","build","radiance","environment","alpha","bias","metalness","shaderTextureLOD","roughness","clearcoatNormal","color","irradiance","ltc_2","StandardNode","mask","ao","constructor","toJSON"]],"~:compiled-at",1630917515230,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$nodes$materials$nodes$StandardNode.js\",\n\"lineCount\":25,\n\"mappings\":\"AAAAA,cAAA,CAAA,mEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoBhIC,QAASA,aAAY,EAAG,CACtBC,KAAMC,CAAAA,IAAKC,CAAAA,IAAX,CAAgB,IAAhB,CAEA,KAAKC,CAAAA,KAAL,CAAa,IAAIC,UAAWC,CAAAA,SAAf,CAAyB,QAAzB,CACb,KAAKC,CAAAA,SAAL,CAAiB,IAAIC,UAAWC,CAAAA,SAAf,CAAyB,CAAzB,CACjB,KAAKC,CAAAA,SAAL,CAAiB,IAAIF,UAAWC,CAAAA,SAAf,CAAyB,CAAzB,CALK,CAjBxBE,MAAOC,CAAAA,cAAP,CAAsBb,OAAtB,CAA+B,YAA/B,CAA6C,CAC3Cc,MAAO,CAAA,CADoC,CAA7C,CAGAd,QAAQC,CAAAA,YAAR,CAAuBA,YAEvB,KAAIc,OAASjB,OAAA,CAAQ,8CAAR,CAAb,CAEII,MAAQJ,OAAA,CAAQ,kDAAR,CAFZ;AAIIkB,gBAAkBlB,OAAA,CAAQ,4DAAR,CAJtB,CAMIQ,WAAaR,OAAA,CAAQ,yDAAR,CANjB,CAQIW,WAAaX,OAAA,CAAQ,yDAAR,CARjB,CAUImB,sBAAwBnB,OAAA,CAAQ,mEAAR,CAU5BG,aAAaiB,CAAAA,SAAb,CAAyBN,MAAOO,CAAAA,MAAP,CAAcjB,KAAMC,CAAAA,IAAKe,CAAAA,SAAzB,CACzBjB,aAAaiB,CAAAA,SAAUE,CAAAA,WAAvB,CAAqCnB,YACrCA,aAAaiB,CAAAA,SAAUG,CAAAA,QAAvB,CAAkC,UAElCpB,aAAaiB,CAAAA,SAAUI,CAAAA,KAAvB;AAA+BC,QAAS,CAACC,OAAD,CAAU,CAEhDA,OAAQC,CAAAA,MAAR,CAAe,UAAf,CACA,KAAIC,aAAe,IAAKC,CAAAA,SAApBD,EAAiC,IAAKE,CAAAA,kBAAtCF,EAA4D,IAAKG,CAAAA,eAEjEH,aAAJ,EACEF,OAAQC,CAAAA,MAAR,CAAe,WAAf,CAGFD,QAAQM,CAAAA,QAASC,CAAAA,MAAjB,CAA0B,CAAA,CAC1BP,QAAQQ,CAAAA,UAAWC,CAAAA,WAAnB,CAAiC,CAAA,CACjCT,QAAQQ,CAAAA,UAAWE,CAAAA,gBAAnB,CAAsC,CAAA,CAEtC,IAAIV,OAAQW,CAAAA,QAAR,CAAiB,QAAjB,CAAJ,CAAgC,CAC1BC,YAAAA,CAAW,IAAKA,CAAAA,QAAL,CAAgB,IAAKA,CAAAA,QAASC,CAAAA,cAAd,CAA6Bb,OAA7B,CAAsC,IAAtC,CAA4C,CACzEc,MAAO,UADkE,CAA5C,CAAhB,CAEVC,IAAAA,EACLf,QAAQgB,CAAAA,YAAR,CAAqBzB,MAAO0B,CAAAA,aAAcC,CAAAA,KAArB,CAA2B,CAAC3B,MAAO4B,CAAAA,WAAYC,CAAAA,GAApB,CAAyB7B,MAAO4B,CAAAA,WAAYZ,CAAAA,MAA5C,CAA3B,CAArB,CAEIhB,OAAO4B,CAAAA,WAAYE,CAAAA,KAAvB;CAEErB,OAAQsB,CAAAA,QAASC,CAAAA,KAGjB,CAHyB,CACvBjC,MAAOyB,IAAAA,EADgB,CAGzB,CAAAf,OAAQsB,CAAAA,QAASE,CAAAA,KAAjB,CAAyB,CACvBlC,MAAOyB,IAAAA,EADgB,CAL3B,CAUAf,QAAQyB,CAAAA,WAAR,CACiL,sUADjL,CAEA,KAAIC,OAAS,2RAAA,CAAA,KAAA,CAAA,GAAA,CAGTd;YAAJ,EACEc,MAAOC,CAAAA,IAAP,CAAYf,YAASgB,CAAAA,IAArB,CAA2BhB,YAASiB,CAAAA,MAAT,CAAkB,mBAAlB,CAAqCjB,YAASiB,CAAAA,MAA9C,CAAuD,GAAvD,CAA6D,EAAxF,CAGFH,OAAOC,CAAAA,IAAP,CAAY,qCAAZ,CAA6C,kCAA7C,CAA2E,iCAA3E,CAAwG,6BAAxG,CAAiI,qCAAjI,CAAkK,yCAAlK,CAAuM,wCAAvM,CAA6O,kCAA7O,CAA2Q,mCAA3Q,CAzB8B,CAAhC,IA2BO,CACL,IAAIG,kBAAoB,IAAItC,eAAgBuC,CAAAA,cAApB,CAAmC,4BAAnC;AAAiE,GAAjE,CAAxB,CACI3B,mBAAqB,IAAIZ,eAAgBuC,CAAAA,cAApB,CAAmC,6BAAnC,CAAkE,GAAlE,CACrBC,OAAAA,CAAqB,CACvBhD,UAAW8C,iBADY,CAEvBG,KAAM,IAAIxC,qBAAsByC,CAAAA,oBAA1B,CAA+CJ,iBAA/C,CAFiB,CAGvBK,WAAY,IAAI3C,eAAgBuC,CAAAA,cAApB,CAAmC,QAAnC,CAA6C,IAA7C,CAHW,CAIvBK,YAAa,IAAI5C,eAAgBuC,CAAAA,cAApB,CAAmC,0DAAnC,CAA+F,IAA/F,CAJU,CAKvBM,MAAO,CAAA,CALgB,CAOzB,KAAIC,iBAAmB,CACrBD,MAAO,CAAA,CADc,CAAvB,CAGIE,4BAA8B,CAChCvD,UAAWoB,kBADqB,CAEhC6B,KAAM,IAAIxC,qBAAsByC,CAAAA,oBAA1B,CAA+C9B,kBAA/C,CAF0B;AAGhC+B,WAAY,IAAI3C,eAAgBuC,CAAAA,cAApB,CAAmC,iBAAnC,CAAsD,IAAtD,CAHoB,CAIhCK,YAAa,IAAI5C,eAAgBuC,CAAAA,cAApB,CAAmC,mEAAnC,CAAwG,IAAxG,CAJmB,CAKhCM,MAAO,CAAA,CALyB,CAQ9B,KAAKG,CAAAA,IAAT,EAAe,IAAKA,CAAAA,IAAKC,CAAAA,OAAV,CAAkBzC,OAAlB,CACf,KAAKnB,CAAAA,KAAM4D,CAAAA,OAAX,CAAmBzC,OAAnB,CAA4B,CAC1B0C,KAAM,OADoB,CAE1BC,QAASL,gBAFiB,CAA5B,CAIA,KAAKtD,CAAAA,SAAUyD,CAAAA,OAAf,CAAuBzC,OAAvB,CACA,KAAKb,CAAAA,SAAUsD,CAAAA,OAAf,CAAuBzC,OAAvB,CACI,KAAK4C,CAAAA,KAAT,EAAgB,IAAKA,CAAAA,KAAMH,CAAAA,OAAX,CAAmBzC,OAAnB,CACZ,KAAK6C,CAAAA,MAAT,EAAiB,IAAKA,CAAAA,MAAOJ,CAAAA,OAAZ,CAAoBzC,OAApB,CACb,KAAKG,CAAAA,SAAT,EAAoB,IAAKA,CAAAA,SAAUsC,CAAAA,OAAf,CAAuBzC,OAAvB,CAChB;IAAKI,CAAAA,kBAAT,EAA6B,IAAKA,CAAAA,kBAAmBqC,CAAAA,OAAxB,CAAgCzC,OAAhC,CACzB,KAAK8C,CAAAA,eAAT,EAA0B,IAAKA,CAAAA,eAAgBL,CAAAA,OAArB,CAA6BzC,OAA7B,CACtB,KAAK+C,CAAAA,YAAT,EAAuB,IAAKA,CAAAA,YAAaN,CAAAA,OAAlB,CAA0BzC,OAA1B,CACnB,KAAKgD,CAAAA,KAAT,EAAgB,IAAKA,CAAAA,KAAMP,CAAAA,OAAX,CAAmBzC,OAAnB,CAA4B,CAC1Cc,MAAO,OADmC,CAA5B,CAGZ,KAAKmC,CAAAA,EAAT,EAAa,IAAKA,CAAAA,EAAGR,CAAAA,OAAR,CAAgBzC,OAAhB,CACT,KAAKkD,CAAAA,OAAT,EAAkB,IAAKA,CAAAA,OAAQT,CAAAA,OAAb,CAAqBzC,OAArB,CACd,KAAKmD,CAAAA,MAAT,EAAiB,IAAKA,CAAAA,MAAOV,CAAAA,OAAZ,CAAoBzC,OAApB,CACb,KAAKoD,CAAAA,QAAT,EAAmB,IAAKA,CAAAA,QAASX,CAAAA,OAAd,CAAsBzC,OAAtB,CAA+B,CAChD0C,KAAM,UAD0C,CAA/B,CAIf,KAAKW,CAAAA,WAAT,GAGE,IAAKA,CAAAA,WAAYZ,CAAAA,OAAjB,CAAyBzC,OAAzB,CAAkC,CAChCc,MAAO,UADyB,CAEhC6B,QAASX,MAFuB;AAGhCU,KAAM,UAH0B,CAAlC,CAMA,CAAI1C,OAAQM,CAAAA,QAASgD,CAAAA,UAArB,EACE,IAAKD,CAAAA,WAAYZ,CAAAA,OAAjB,CAAyBzC,OAAzB,CAAkC,CAChCc,MAAO,YADyB,CAEhC6B,QAASX,MAFuB,CAGhCU,KAAM,YAH0B,CAAlC,CAVJ,CAkBI,KAAKa,CAAAA,KAAT,EAAgB,IAAKA,CAAAA,KAAMd,CAAAA,OAAX,CAAmBzC,OAAnB,CAEZwC,kBAAAA,CAAO,IAAKA,CAAAA,IAAL,CAAY,IAAKA,CAAAA,IAAKgB,CAAAA,IAAV,CAAexD,OAAf,CAAwB,GAAxB,CAAZ,CAA2Ce,IAAAA,EAClDlC,iBAAAA,CAAQ,IAAKA,CAAAA,KAAM2E,CAAAA,IAAX,CAAgBxD,OAAhB,CAAyB,GAAzB,CAA8B,CACxC0C,KAAM,OADkC,CAExCC,QAASL,gBAF+B,CAA9B,CAIZ,KAAItD,UAAY,IAAKA,CAAAA,SAAUwE,CAAAA,IAAf,CAAoBxD,OAApB,CAA6B,GAA7B,CAAhB,CACIb,UAAY,IAAKA,CAAAA,SAAUqE,CAAAA,IAAf,CAAoBxD,OAApB,CAA6B,GAA7B,CADhB,CAEI4C,MAAQ,IAAKA,CAAAA,KAAL,CAAa,IAAKA,CAAAA,KAAMY,CAAAA,IAAX,CAAgBxD,OAAhB,CAAyB,GAAzB,CAAb,CAA6Ce,IAAAA,EAFzD,CAGI8B,OAAS,IAAKA,CAAAA,MAAL,CAAc,IAAKA,CAAAA,MAAOW,CAAAA,IAAZ,CAAiBxD,OAAjB;AAA0B,IAA1B,CAAd,CAAgDe,IAAAA,EAH7D,CAIIZ,UAAY,IAAKA,CAAAA,SAAL,CAAiB,IAAKA,CAAAA,SAAUqD,CAAAA,IAAf,CAAoBxD,OAApB,CAA6B,GAA7B,CAAjB,CAAqDe,IAAAA,EACjEX,mBAAJ,CAAyB,IAAKA,CAAAA,kBAAL,CAA0B,IAAKA,CAAAA,kBAAmBoD,CAAAA,IAAxB,CAA6BxD,OAA7B,CAAsC,GAAtC,CAA1B,CAAuEe,IAAAA,EAChG,KAAI+B,gBAAkB,IAAKA,CAAAA,eAAL,CAAuB,IAAKA,CAAAA,eAAgBU,CAAAA,IAArB,CAA0BxD,OAA1B,CAAmC,IAAnC,CAAvB,CAAkEe,IAAAA,EAAxF,CACIgC,aAAe,IAAKA,CAAAA,YAAL,CAAoB,IAAKA,CAAAA,YAAaS,CAAAA,IAAlB,CAAuBxD,OAAvB,CAAgC,GAAhC,CAApB,CAA2De,IAAAA,EAD9E,CAEIiC,MAAQ,IAAKA,CAAAA,KAAL,CAAa,IAAKA,CAAAA,KAAMQ,CAAAA,IAAX,CAAgBxD,OAAhB,CAAyB,IAAzB,CAA+B,CACtDc,MAAO,OAD+C,CAA/B,CAAb,CAEPC,IAAAA,EAJL,CAKIkC,GAAK,IAAKA,CAAAA,EAAL,CAAU,IAAKA,CAAAA,EAAGO,CAAAA,IAAR,CAAaxD,OAAb,CAAsB,GAAtB,CAAV,CAAuCe,IAAAA,EALhD,CAMImC,QAAU,IAAKA,CAAAA,OAAL,CAAe,IAAKA,CAAAA,OAAQM,CAAAA,IAAb,CAAkBxD,OAAlB,CAA2B,GAA3B,CAAf,CAAiDe,IAAAA,EAN/D;AAOIoC,OAAS,IAAKA,CAAAA,MAAL,CAAc,IAAKA,CAAAA,MAAOK,CAAAA,IAAZ,CAAiBxD,OAAjB,CAA0B,GAA1B,CAAd,CAA+Ce,IAAAA,EAP5D,CAQIqC,SAAW,IAAKA,CAAAA,QAAL,CAAgB,IAAKA,CAAAA,QAASI,CAAAA,IAAd,CAAmBxD,OAAnB,CAA4B,GAA5B,CAAiC,CAC9D0C,KAAM,UADwD,CAAjC,CAAhB,CAEV3B,IAAAA,EAGL,IAAI,IAAKsC,CAAAA,WAAT,CAAsB,CACpB,IAAAA,YAAc,CACZI,SAAU,IAAKJ,CAAAA,WAAYG,CAAAA,IAAjB,CAAsBxD,OAAtB,CAA+B,GAA/B,CAAoC,CAC5Cc,MAAO,UADqC,CAE5C6B,QAASX,MAFmC,CAG5CU,KAAM,UAHsC,CAApC,CADE,CAQV1C,QAAQM,CAAAA,QAASgD,CAAAA,UAArB,GACED,WAAYC,CAAAA,UADd,CAC2B,IAAKD,CAAAA,WAAYG,CAAAA,IAAjB,CAAsBxD,OAAtB,CAA+B,GAA/B,CAAoC,CAC3Dc,MAAO,YADoD,CAE3D6B,QAASX,MAFkD,CAG3DU,KAAM,YAHqD,CAApC,CAD3B,CAToB,CAkBlBgB,2BAAAA,CAAexD,YAAA,EAAgBmD,WAAhB,CAA8B,IAAKA,CAAAA,WAAYG,CAAAA,IAAjB,CAAsBxD,OAAtB,CAA+B,GAA/B,CAAoC,CACnFc,MAAO,WAD4E;AAEnF6B,QAASJ,2BAF0E,CAGnFG,KAAM,aAH6E,CAApC,CAA9B,CAId3B,IAAAA,EACL,KAAIwC,MAAQ,IAAKA,CAAAA,KAAL,CAAa,IAAKA,CAAAA,KAAMC,CAAAA,IAAX,CAAgBxD,OAAhB,CAAyB,GAAzB,CAAb,CAA6Ce,IAAAA,EACzDf,QAAQM,CAAAA,QAASqD,CAAAA,WAAjB,CAAyC5C,IAAAA,EAAzC,GAA+B6B,KAC/B5C,QAAQyB,CAAAA,WAAR,CAA2T,mWAA3T,CACIC;MAAJ,CAAa,CAAC,2CAAD,CACb,0CADa,CACwB,oDADxB,CAEb,8BAFa,CAEkB,2CAFlB,CAITc,kBAAJ,EACEd,MAAOC,CAAAA,IAAP,CAAYa,iBAAKZ,CAAAA,IAAjB,CAAuB,SAAvB,CAAmCY,iBAAKX,CAAAA,MAAxC,CAAiD,aAAjD,CAGFH,OAAOC,CAAAA,IAAP,CAAY9C,gBAAM+C,CAAAA,IAAlB,CAAwB,2BAAxB,CAAkD/C,gBAAMgD,CAAAA,MAAxD,CAAiE,GAAjE,CAAsE,4GAAtE;AAAgL,uCAAhL,CAAmN7C,SAAU4C,CAAAA,IAA7N,CAAmO,+BAAnO,CAAiQ5C,SAAU6C,CAAAA,MAA3Q,CAAoR,GAApR,CAAyR1C,SAAUyC,CAAAA,IAAnS,CAAyS,+BAAzS,CAAuUzC,SAAU0C,CAAAA,MAAjV,CAA0V,GAA1V,CAEIe,MAAJ,EACElB,MAAOC,CAAAA,IAAP,CAAYiB,KAAMhB,CAAAA,IAAlB,CAAwB,kBAAxB,CAA4C,SAA5C,CAAuDgB,KAAMf,CAAAA,MAA7D,CAAsE,gCAAtE,CAAkG,QAAlG,CAGEgB,OAAJ,EACEnB,MAAOC,CAAAA,IAAP,CAAYkB,MAAOjB,CAAAA,IAAnB,CAAyB,cAAzB,CAAuCiB,MAAOhB,CAAAA,MAA9C,CAAuD,GAAvD,CAGEiB,gBAAJ,EACEpB,MAAOC,CAAAA,IAAP,CAAYmB,eAAgBlB,CAAAA,IAA5B,CAAkC,uBAAlC,CAAyDkB,eAAgBjB,CAAAA,MAAzE,CAAkF,GAAlF,CAIFH,OAAOC,CAAAA,IAAP,CAAY,oFAAZ;AAA+F,iEAA/F,CAEAD,OAAOC,CAAAA,IAAP,CAAY,6BAAZ,EAA0CqB,KAAA,CAAQ,aAAR,CAAwB,0CAAlE,EAAgH,GAAhH,CAAqH,iEAArH,CAAqL,qDAArL,CAAyO,yEAAzO,CAAiT,sEAAjT,CAEI7C,UAAJ,CACEuB,MAAOC,CAAAA,IAAP,CAAYxB,SAAUyB,CAAAA,IAAtB,CAA4B,oCAA5B;AAAgEzB,SAAU0B,CAAAA,MAA1E,CAAmF,KAAnF,CADF,CAGW3B,YAHX,EAIEwB,MAAOC,CAAAA,IAAP,CAAY,8BAAZ,CAGEvB,mBAAJ,CACEsB,MAAOC,CAAAA,IAAP,CAAYvB,kBAAmBwB,CAAAA,IAA/B,CAAqC,wCAArC,CAA6ExB,kBAAmByB,CAAAA,MAAhG,CAAyG,aAAzG,CAAwH,sDAAxH,CAA6K,2EAA7K,CADF,CAEW3B,YAFX,EAGEwB,MAAOC,CAAAA,IAAP,CAAY,uCAAZ,CAGE4B,MAAJ,EACE7B,MAAOC,CAAAA,IAAP,CAAY,2BAAZ,CAAuC4B,KAAM1B,CAAAA,MAA7C,CAAsD,GAAtD,CAGEkB,aAAJ,CACErB,MAAOC,CAAAA,IAAP,CAAYoB,YAAanB,CAAAA,IAAzB;AAA+B,8EAA/B,CAA6GmB,YAAalB,CAAAA,MAA1H,CAAmI,wCAAnI,CADF,CAGEH,MAAOC,CAAAA,IAAP,CAAY,yGAAZ,CAGFD,OAAOC,CAAAA,IAAP,CAAY,wCAAZ,CAEIqB,MAAJ,GACEtB,MAAOC,CAAAA,IAAP,CAAYqB,KAAMpB,CAAAA,IAAlB,CAAwB,oCAAxB,CAA4DoB,KAAMnB,CAAAA,MAAlE,CAA2E,GAA3E,CAEA,CAAAH,MAAOC,CAAAA,IAAP,CAAY,2CAAZ,CAAsD,kDAAtD;AAAuG,oDAAvG,CAHF,CAMIsB,GAAJ,EACEvB,MAAOC,CAAAA,IAAP,CAAYsB,EAAGrB,CAAAA,IAAf,CAAqB,uCAArB,CAA4DqB,EAAGpB,CAAAA,MAA/D,CAAwE,GAAxE,CAA6E,wEAA7E,CAAoJ,yEAApJ,CAA6NoB,EAAGpB,CAAAA,MAAhO,CAAyO,iCAAzO,CAGEqB,QAAJ,EACExB,MAAOC,CAAAA,IAAP,CAAYuB,OAAQtB,CAAAA,IAApB,CAA0B,uCAA1B,CAAiEsB,OAAQrB,CAAAA,MAAzE,CAAkF,GAAlF,CAGEsB,OAAJ,EACEzB,MAAOC,CAAAA,IAAP,CAAYwB,MAAOvB,CAAAA,IAAnB,CAAyB,qCAAzB,CAA8DuB,MAAOtB,CAAAA,MAArE;AAA8E,GAA9E,CAAmF,sCAAnF,CAAyHsB,MAAOtB,CAAAA,MAAhI,CAAyI,GAAzI,CAGEuB,SAAJ,EACE1B,MAAOC,CAAAA,IAAP,CAAYyB,QAASxB,CAAAA,IAArB,CAA2B,qCAA3B,CAAgEwB,QAASvB,CAAAA,MAAzE,CAAkF,GAAlF,CAGEwB,YAAJ,GACE3B,MAAOC,CAAAA,IAAP,CAAY0B,WAAYI,CAAAA,QAAS7B,CAAAA,IAAjC,CAYA,CAVI5B,OAAQM,CAAAA,QAASgD,CAAAA,UAUrB,EATE5B,MAAOC,CAAAA,IAAP,CAAY0B,WAAYC,CAAAA,UAAW1B,CAAAA,IAAnC,CASF,CANI8B,2BAMJ,EALEhC,MAAOC,CAAAA,IAAP,CAAY+B,2BAAa9B,CAAAA,IAAzB,CAA+B,0BAA/B,CAAyD8B,2BAAa7B,CAAAA,MAAtE,CAA+E,GAA/E,CAKF,CAFAH,MAAOC,CAAAA,IAAP,CAAY,iBAAZ,CAA6B0B,WAAYI,CAAAA,QAAS5B,CAAAA,MAAlD,CAA2D,GAA3D,CAEA,CAAI7B,OAAQM,CAAAA,QAASgD,CAAAA,UAArB;AACE5B,MAAOC,CAAAA,IAAP,CAAY,2BAAZ,CAAuC0B,WAAYC,CAAAA,UAAWzB,CAAAA,MAA9D,CAAuE,GAAvE,CAdJ,CAkBAH,OAAOC,CAAAA,IAAP,CAAY,sCAAZ,CACAD,OAAOC,CAAAA,IAAP,CAAY,0JAAZ,CAEIiB,MAAJ,CACElB,MAAOC,CAAAA,IAAP,CAAY,yCAAZ,CAAqDiB,KAAMf,CAAAA,MAA3D,CAAoE,KAApE,CADF,CAGEH,MAAOC,CAAAA,IAAP,CAAY,+CAAZ,CAGFD,OAAOC,CAAAA,IAAP,CAAY,uCAAZ,CAA+C,qCAA/C;AAAgF,+BAAhF,CAA2G,+CAA3G,CAAsJ,qCAAtJ,CAvNK,CA2NP,MA5NSD,OAAOkC,CAAAA,IAAPhC,CAAY,IAAZA,CAvCuC,CAsQlDnD,aAAaiB,CAAAA,SAAUmE,CAAAA,IAAvB,CAA8BC,QAAS,CAACC,MAAD,CAAS,CAC9CrF,KAAMC,CAAAA,IAAKe,CAAAA,SAAUmE,CAAAA,IAAKjF,CAAAA,IAA1B,CAA+B,IAA/B,CAAqCmF,MAArC,CAGIA,OAAOnD,CAAAA,QAAX,GAAqB,IAAKA,CAAAA,QAA1B,CAAqCmD,MAAOnD,CAAAA,QAA5C,CAEA,KAAK/B,CAAAA,KAAL,CAAakF,MAAOlF,CAAAA,KACpB,KAAKG,CAAAA,SAAL,CAAiB+E,MAAO/E,CAAAA,SACxB,KAAKG,CAAAA,SAAL,CAAiB4E,MAAO5E,CAAAA,SACpB4E,OAAOvB,CAAAA,IAAX,GAAiB,IAAKA,CAAAA,IAAtB,CAA6BuB,MAAOvB,CAAAA,IAApC,CACIuB,OAAOnB,CAAAA,KAAX,GAAkB,IAAKA,CAAAA,KAAvB,CAA+BmB,MAAOnB,CAAAA,KAAtC,CACImB,OAAOlB,CAAAA,MAAX,GAAmB,IAAKA,CAAAA,MAAxB,CAAiCkB,MAAOlB,CAAAA,MAAxC,CACIkB,OAAO5D,CAAAA,SAAX;CAAsB,IAAKA,CAAAA,SAA3B,CAAuC4D,MAAO5D,CAAAA,SAA9C,CACI4D,OAAO3D,CAAAA,kBAAX,GAA+B,IAAKA,CAAAA,kBAApC,CAAyD2D,MAAO3D,CAAAA,kBAAhE,CACI2D,OAAOjB,CAAAA,eAAX,GAA4B,IAAKA,CAAAA,eAAjC,CAAmDiB,MAAOjB,CAAAA,eAA1D,CACIiB,OAAOhB,CAAAA,YAAX,GAAyB,IAAKA,CAAAA,YAA9B,CAA6CgB,MAAOhB,CAAAA,YAApD,CACIgB,OAAOf,CAAAA,KAAX,GAAkB,IAAKA,CAAAA,KAAvB,CAA+Be,MAAOf,CAAAA,KAAtC,CACIe,OAAOZ,CAAAA,MAAX,GAAmB,IAAKA,CAAAA,MAAxB,CAAiCY,MAAOZ,CAAAA,MAAxC,CACIY,OAAOd,CAAAA,EAAX,GAAe,IAAKA,CAAAA,EAApB,CAAyBc,MAAOd,CAAAA,EAAhC,CACIc,OAAOX,CAAAA,QAAX,GAAqB,IAAKA,CAAAA,QAA1B,CAAqCW,MAAOX,CAAAA,QAA5C,CACIW,OAAOb,CAAAA,OAAX,GAAoB,IAAKA,CAAAA,OAAzB,CAAmCa,MAAOb,CAAAA,OAA1C,CACIa,OAAOV,CAAAA,WAAX,GAAwB,IAAKA,CAAAA,WAA7B,CAA2CU,MAAOV,CAAAA,WAAlD,CACIU;MAAOR,CAAAA,KAAX,GAAkB,IAAKA,CAAAA,KAAvB,CAA+BQ,MAAOR,CAAAA,KAAtC,CACA,OAAO,KAvBuC,CA0BhD9E,aAAaiB,CAAAA,SAAUsE,CAAAA,MAAvB,CAAgCC,QAAS,CAACC,IAAD,CAAO,CAC9C,IAAIC,KAAO,IAAKC,CAAAA,WAAL,CAAiBF,IAAjB,CAENC,KAAL,GACEA,IAoBA,CApBO,IAAKE,CAAAA,cAAL,CAAoBH,IAApB,CAoBP,CAlBI,IAAKtD,CAAAA,QAkBT,GAlBmBuD,IAAKvD,CAAAA,QAkBxB,CAlBmC,IAAKA,CAAAA,QAASoD,CAAAA,MAAd,CAAqBE,IAArB,CAA2BI,CAAAA,IAkB9D,EAhBAH,IAAKtF,CAAAA,KAgBL,CAhBa,IAAKA,CAAAA,KAAMmF,CAAAA,MAAX,CAAkBE,IAAlB,CAAwBI,CAAAA,IAgBrC,CAfAH,IAAKnF,CAAAA,SAeL,CAfiB,IAAKA,CAAAA,SAAUgF,CAAAA,MAAf,CAAsBE,IAAtB,CAA4BI,CAAAA,IAe7C,CAdAH,IAAKhF,CAAAA,SAcL,CAdiB,IAAKA,CAAAA,SAAU6E,CAAAA,MAAf,CAAsBE,IAAtB,CAA4BI,CAAAA,IAc7C,CAbI,IAAK9B,CAAAA,IAaT,GAbe2B,IAAK3B,CAAAA,IAapB,CAb2B,IAAKA,CAAAA,IAAKwB,CAAAA,MAAV,CAAiBE,IAAjB,CAAuBI,CAAAA,IAalD,EAZI,IAAK1B,CAAAA,KAYT,GAZgBuB,IAAKvB,CAAAA,KAYrB,CAZ6B,IAAKA,CAAAA,KAAMoB,CAAAA,MAAX,CAAkBE,IAAlB,CAAwBI,CAAAA,IAYrD,EAXI,IAAKzB,CAAAA,MAWT,GAXiBsB,IAAKtB,CAAAA,MAWtB,CAX+B,IAAKA,CAAAA,MAAOmB,CAAAA,MAAZ,CAAmBE,IAAnB,CAAyBI,CAAAA,IAWxD;AAVI,IAAKnE,CAAAA,SAUT,GAVoBgE,IAAKhE,CAAAA,SAUzB,CAVqC,IAAKA,CAAAA,SAAU6D,CAAAA,MAAf,CAAsBE,IAAtB,CAA4BI,CAAAA,IAUjE,EATI,IAAKlE,CAAAA,kBAST,GAT6B+D,IAAK/D,CAAAA,kBASlC,CATuD,IAAKA,CAAAA,kBAAmB4D,CAAAA,MAAxB,CAA+BE,IAA/B,CAAqCI,CAAAA,IAS5F,EARI,IAAKxB,CAAAA,eAQT,GAR0BqB,IAAKrB,CAAAA,eAQ/B,CARiD,IAAKA,CAAAA,eAAgBkB,CAAAA,MAArB,CAA4BE,IAA5B,CAAkCI,CAAAA,IAQnF,EAPI,IAAKvB,CAAAA,YAOT,GAPuBoB,IAAKpB,CAAAA,YAO5B,CAP2C,IAAKA,CAAAA,YAAaiB,CAAAA,MAAlB,CAAyBE,IAAzB,CAA+BI,CAAAA,IAO1E,EANI,IAAKtB,CAAAA,KAMT,GANgBmB,IAAKnB,CAAAA,KAMrB,CAN6B,IAAKA,CAAAA,KAAMgB,CAAAA,MAAX,CAAkBE,IAAlB,CAAwBI,CAAAA,IAMrD,EALI,IAAKnB,CAAAA,MAKT,GALiBgB,IAAKhB,CAAAA,MAKtB,CAL+B,IAAKA,CAAAA,MAAOa,CAAAA,MAAZ,CAAmBE,IAAnB,CAAyBI,CAAAA,IAKxD,EAJI,IAAKrB,CAAAA,EAIT,GAJakB,IAAKlB,CAAAA,EAIlB,CAJuB,IAAKA,CAAAA,EAAGe,CAAAA,MAAR,CAAeE,IAAf,CAAqBI,CAAAA,IAI5C,EAHI,IAAKlB,CAAAA,QAGT,GAHmBe,IAAKf,CAAAA,QAGxB;AAHmC,IAAKA,CAAAA,QAASY,CAAAA,MAAd,CAAqBE,IAArB,CAA2BI,CAAAA,IAG9D,EAFI,IAAKpB,CAAAA,OAET,GAFkBiB,IAAKjB,CAAAA,OAEvB,CAFiC,IAAKA,CAAAA,OAAQc,CAAAA,MAAb,CAAoBE,IAApB,CAA0BI,CAAAA,IAE3D,EADI,IAAKjB,CAAAA,WACT,GADsBc,IAAKd,CAAAA,WAC3B,CADyC,IAAKA,CAAAA,WAAYW,CAAAA,MAAjB,CAAwBE,IAAxB,CAA8BI,CAAAA,IACvE,EAAI,IAAKf,CAAAA,KAAT,GAAgBY,IAAKZ,CAAAA,KAArB,CAA6B,IAAKA,CAAAA,KAAMS,CAAAA,MAAX,CAAkBE,IAAlB,CAAwBI,CAAAA,IAArD,CArBF,CAwBA,OAAOH,KA3BuC,CAhUgF;\",\n\"sources\":[\"node_modules/three-stdlib/nodes/materials/nodes/StandardNode.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$nodes$materials$nodes$StandardNode\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.StandardNode = StandardNode;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _Node = require(\\\"../../core/Node.js\\\");\\n\\nvar _ExpressionNode = require(\\\"../../core/ExpressionNode.js\\\");\\n\\nvar _ColorNode = require(\\\"../../inputs/ColorNode.js\\\");\\n\\nvar _FloatNode = require(\\\"../../inputs/FloatNode.js\\\");\\n\\nvar _SpecularMIPLevelNode = require(\\\"../../utils/SpecularMIPLevelNode.js\\\");\\n\\nfunction StandardNode() {\\n  _Node.Node.call(this);\\n\\n  this.color = new _ColorNode.ColorNode(0xffffff);\\n  this.roughness = new _FloatNode.FloatNode(1);\\n  this.metalness = new _FloatNode.FloatNode(0);\\n}\\n\\nStandardNode.prototype = Object.create(_Node.Node.prototype);\\nStandardNode.prototype.constructor = StandardNode;\\nStandardNode.prototype.nodeType = 'Standard';\\n\\nStandardNode.prototype.build = function (builder) {\\n  var code;\\n  builder.define('STANDARD');\\n  var useClearcoat = this.clearcoat || this.clearcoatRoughness || this.clearCoatNormal;\\n\\n  if (useClearcoat) {\\n    builder.define('CLEARCOAT');\\n  }\\n\\n  builder.requires.lights = true;\\n  builder.extensions.derivatives = true;\\n  builder.extensions.shaderTextureLOD = true;\\n\\n  if (builder.isShader('vertex')) {\\n    var position = this.position ? this.position.analyzeAndFlow(builder, 'v3', {\\n      cache: 'position'\\n    }) : undefined;\\n    builder.mergeUniform(_three.UniformsUtils.merge([_three.UniformsLib.fog, _three.UniformsLib.lights]));\\n\\n    if (_three.UniformsLib.LTC_1) {\\n      // add ltc data textures to material uniforms\\n      builder.uniforms.ltc_1 = {\\n        value: undefined\\n      };\\n      builder.uniforms.ltc_2 = {\\n        value: undefined\\n      };\\n    }\\n\\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\\tvarying vec3 vNormal;', '#endif', //\\\"#include <encodings_pars_fragment>\\\", // encoding functions\\n    '#include <fog_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <shadowmap_pars_vertex>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>'].join('\\\\n'));\\n    var output = ['#include <beginnormal_vertex>', '#include <morphnormal_vertex>', '#include <skinbase_vertex>', '#include <skinnormal_vertex>', '#include <defaultnormal_vertex>', '#ifndef FLAT_SHADED', // Normal computed with derivatives when FLAT_SHADED\\n    '\\tvNormal = normalize( transformedNormal );', '#endif', '#include <begin_vertex>'];\\n\\n    if (position) {\\n      output.push(position.code, position.result ? 'transformed = ' + position.result + ';' : '');\\n    }\\n\\n    output.push('#include <morphtarget_vertex>', '#include <skinning_vertex>', '#include <project_vertex>', '#include <fog_vertex>', '#include <logdepthbuf_vertex>', '#include <clipping_planes_vertex>', '\\tvViewPosition = - mvPosition.xyz;', '#include <worldpos_vertex>', '#include <shadowmap_vertex>');\\n    code = output.join('\\\\n');\\n  } else {\\n    var specularRoughness = new _ExpressionNode.ExpressionNode('material.specularRoughness', 'f');\\n    var clearcoatRoughness = new _ExpressionNode.ExpressionNode('material.clearcoatRoughness', 'f');\\n    var contextEnvironment = {\\n      roughness: specularRoughness,\\n      bias: new _SpecularMIPLevelNode.SpecularMIPLevelNode(specularRoughness),\\n      viewNormal: new _ExpressionNode.ExpressionNode('normal', 'v3'),\\n      worldNormal: new _ExpressionNode.ExpressionNode('inverseTransformDirection( geometry.normal, viewMatrix )', 'v3'),\\n      gamma: true\\n    };\\n    var contextGammaOnly = {\\n      gamma: true\\n    };\\n    var contextClearcoatEnvironment = {\\n      roughness: clearcoatRoughness,\\n      bias: new _SpecularMIPLevelNode.SpecularMIPLevelNode(clearcoatRoughness),\\n      viewNormal: new _ExpressionNode.ExpressionNode('clearcoatNormal', 'v3'),\\n      worldNormal: new _ExpressionNode.ExpressionNode('inverseTransformDirection( geometry.clearcoatNormal, viewMatrix )', 'v3'),\\n      gamma: true\\n    }; // analyze all nodes to reuse generate codes\\n\\n    if (this.mask) this.mask.analyze(builder);\\n    this.color.analyze(builder, {\\n      slot: 'color',\\n      context: contextGammaOnly\\n    });\\n    this.roughness.analyze(builder);\\n    this.metalness.analyze(builder);\\n    if (this.alpha) this.alpha.analyze(builder);\\n    if (this.normal) this.normal.analyze(builder);\\n    if (this.clearcoat) this.clearcoat.analyze(builder);\\n    if (this.clearcoatRoughness) this.clearcoatRoughness.analyze(builder);\\n    if (this.clearcoatNormal) this.clearcoatNormal.analyze(builder);\\n    if (this.reflectivity) this.reflectivity.analyze(builder);\\n    if (this.light) this.light.analyze(builder, {\\n      cache: 'light'\\n    });\\n    if (this.ao) this.ao.analyze(builder);\\n    if (this.ambient) this.ambient.analyze(builder);\\n    if (this.shadow) this.shadow.analyze(builder);\\n    if (this.emissive) this.emissive.analyze(builder, {\\n      slot: 'emissive'\\n    });\\n\\n    if (this.environment) {\\n      // isolate environment from others inputs ( see TextureNode, CubeTextureNode )\\n      // environment.analyze will detect if there is a need of calculate irradiance\\n      this.environment.analyze(builder, {\\n        cache: 'radiance',\\n        context: contextEnvironment,\\n        slot: 'radiance'\\n      });\\n\\n      if (builder.requires.irradiance) {\\n        this.environment.analyze(builder, {\\n          cache: 'irradiance',\\n          context: contextEnvironment,\\n          slot: 'irradiance'\\n        });\\n      }\\n    }\\n\\n    if (this.sheen) this.sheen.analyze(builder); // build code\\n\\n    var mask = this.mask ? this.mask.flow(builder, 'b') : undefined;\\n    var color = this.color.flow(builder, 'c', {\\n      slot: 'color',\\n      context: contextGammaOnly\\n    });\\n    var roughness = this.roughness.flow(builder, 'f');\\n    var metalness = this.metalness.flow(builder, 'f');\\n    var alpha = this.alpha ? this.alpha.flow(builder, 'f') : undefined;\\n    var normal = this.normal ? this.normal.flow(builder, 'v3') : undefined;\\n    var clearcoat = this.clearcoat ? this.clearcoat.flow(builder, 'f') : undefined;\\n    var clearcoatRoughness = this.clearcoatRoughness ? this.clearcoatRoughness.flow(builder, 'f') : undefined;\\n    var clearcoatNormal = this.clearcoatNormal ? this.clearcoatNormal.flow(builder, 'v3') : undefined;\\n    var reflectivity = this.reflectivity ? this.reflectivity.flow(builder, 'f') : undefined;\\n    var light = this.light ? this.light.flow(builder, 'v3', {\\n      cache: 'light'\\n    }) : undefined;\\n    var ao = this.ao ? this.ao.flow(builder, 'f') : undefined;\\n    var ambient = this.ambient ? this.ambient.flow(builder, 'c') : undefined;\\n    var shadow = this.shadow ? this.shadow.flow(builder, 'c') : undefined;\\n    var emissive = this.emissive ? this.emissive.flow(builder, 'c', {\\n      slot: 'emissive'\\n    }) : undefined;\\n    var environment;\\n\\n    if (this.environment) {\\n      environment = {\\n        radiance: this.environment.flow(builder, 'c', {\\n          cache: 'radiance',\\n          context: contextEnvironment,\\n          slot: 'radiance'\\n        })\\n      };\\n\\n      if (builder.requires.irradiance) {\\n        environment.irradiance = this.environment.flow(builder, 'c', {\\n          cache: 'irradiance',\\n          context: contextEnvironment,\\n          slot: 'irradiance'\\n        });\\n      }\\n    }\\n\\n    var clearcoatEnv = useClearcoat && environment ? this.environment.flow(builder, 'c', {\\n      cache: 'clearcoat',\\n      context: contextClearcoatEnvironment,\\n      slot: 'environment'\\n    }) : undefined;\\n    var sheen = this.sheen ? this.sheen.flow(builder, 'c') : undefined;\\n    builder.requires.transparent = alpha !== undefined;\\n    builder.addParsCode(['varying vec3 vViewPosition;', '#ifndef FLAT_SHADED', '\\tvarying vec3 vNormal;', '#endif', '#include <dithering_pars_fragment>', '#include <fog_pars_fragment>', '#include <bsdfs>', '#include <lights_pars_begin>', '#include <lights_physical_pars_fragment>', '#include <shadowmap_pars_fragment>', '#include <logdepthbuf_pars_fragment>'].join('\\\\n'));\\n    var output = ['#include <clipping_planes_fragment>', // add before: prevent undeclared normal\\n    '\\t#include <normal_fragment_begin>', '\\t#include <clearcoat_normal_fragment_begin>', // add before: prevent undeclared material\\n    '\\tPhysicalMaterial material;', '\\tmaterial.diffuseColor = vec3( 1.0 );'];\\n\\n    if (mask) {\\n      output.push(mask.code, 'if ( ! ' + mask.result + ' ) discard;');\\n    }\\n\\n    output.push(color.code, '\\tvec3 diffuseColor = ' + color.result + ';', '\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );', '#include <logdepthbuf_fragment>', roughness.code, '\\tfloat roughnessFactor = ' + roughness.result + ';', metalness.code, '\\tfloat metalnessFactor = ' + metalness.result + ';');\\n\\n    if (alpha) {\\n      output.push(alpha.code, '#ifdef ALPHATEST', '\\tif ( ' + alpha.result + ' <= ALPHATEST ) discard;', '#endif');\\n    }\\n\\n    if (normal) {\\n      output.push(normal.code, 'normal = ' + normal.result + ';');\\n    }\\n\\n    if (clearcoatNormal) {\\n      output.push(clearcoatNormal.code, 'clearcoatNormal = ' + clearcoatNormal.result + ';');\\n    } // anti-aliasing code by @elalish\\n\\n\\n    output.push('vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );', 'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );'); // optimization for now\\n\\n    output.push('material.diffuseColor = ' + (light ? 'vec3( 1.0 )' : 'diffuseColor * ( 1.0 - metalnessFactor )') + ';', 'material.specularRoughness = max( roughnessFactor, 0.0525 );', 'material.specularRoughness += geometryRoughness;', 'material.specularRoughness = min( material.specularRoughness, 1.0 );', 'material.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );');\\n\\n    if (clearcoat) {\\n      output.push(clearcoat.code, 'material.clearcoat = saturate( ' + clearcoat.result + ' );' // Burley clearcoat model\\n      );\\n    } else if (useClearcoat) {\\n      output.push('material.clearcoat = 0.0;');\\n    }\\n\\n    if (clearcoatRoughness) {\\n      output.push(clearcoatRoughness.code, 'material.clearcoatRoughness = max( ' + clearcoatRoughness.result + ', 0.0525 );', 'material.clearcoatRoughness += geometryRoughness;', 'material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );');\\n    } else if (useClearcoat) {\\n      output.push('material.clearcoatRoughness = 0.0;');\\n    }\\n\\n    if (sheen) {\\n      output.push('material.sheenColor = ' + sheen.result + ';');\\n    }\\n\\n    if (reflectivity) {\\n      output.push(reflectivity.code, 'material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( ' + reflectivity.result + ' ) ), diffuseColor, metalnessFactor );');\\n    } else {\\n      output.push('material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor, metalnessFactor );');\\n    }\\n\\n    output.push('#include <lights_fragment_begin>');\\n\\n    if (light) {\\n      output.push(light.code, 'reflectedLight.directDiffuse = ' + light.result + ';'); // apply color\\n\\n      output.push('diffuseColor *= 1.0 - metalnessFactor;', 'reflectedLight.directDiffuse *= diffuseColor;', 'reflectedLight.indirectDiffuse *= diffuseColor;');\\n    }\\n\\n    if (ao) {\\n      output.push(ao.code, 'reflectedLight.indirectDiffuse *= ' + ao.result + ';', 'float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );', 'reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ' + ao.result + ', material.specularRoughness );');\\n    }\\n\\n    if (ambient) {\\n      output.push(ambient.code, 'reflectedLight.indirectDiffuse += ' + ambient.result + ';');\\n    }\\n\\n    if (shadow) {\\n      output.push(shadow.code, 'reflectedLight.directDiffuse *= ' + shadow.result + ';', 'reflectedLight.directSpecular *= ' + shadow.result + ';');\\n    }\\n\\n    if (emissive) {\\n      output.push(emissive.code, 'reflectedLight.directDiffuse += ' + emissive.result + ';');\\n    }\\n\\n    if (environment) {\\n      output.push(environment.radiance.code);\\n\\n      if (builder.requires.irradiance) {\\n        output.push(environment.irradiance.code);\\n      }\\n\\n      if (clearcoatEnv) {\\n        output.push(clearcoatEnv.code, 'clearcoatRadiance += ' + clearcoatEnv.result + ';');\\n      }\\n\\n      output.push('radiance += ' + environment.radiance.result + ';');\\n\\n      if (builder.requires.irradiance) {\\n        output.push('iblIrradiance += PI * ' + environment.irradiance.result + ';');\\n      }\\n    }\\n\\n    output.push('#include <lights_fragment_end>');\\n    output.push('vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;');\\n\\n    if (alpha) {\\n      output.push('gl_FragColor = vec4( outgoingLight, ' + alpha.result + ' );');\\n    } else {\\n      output.push('gl_FragColor = vec4( outgoingLight, 1.0 );');\\n    }\\n\\n    output.push('#include <tonemapping_fragment>', '#include <encodings_fragment>', '#include <fog_fragment>', '#include <premultiplied_alpha_fragment>', '#include <dithering_fragment>');\\n    code = output.join('\\\\n');\\n  }\\n\\n  return code;\\n};\\n\\nStandardNode.prototype.copy = function (source) {\\n  _Node.Node.prototype.copy.call(this, source); // vertex\\n\\n\\n  if (source.position) this.position = source.position; // fragment\\n\\n  this.color = source.color;\\n  this.roughness = source.roughness;\\n  this.metalness = source.metalness;\\n  if (source.mask) this.mask = source.mask;\\n  if (source.alpha) this.alpha = source.alpha;\\n  if (source.normal) this.normal = source.normal;\\n  if (source.clearcoat) this.clearcoat = source.clearcoat;\\n  if (source.clearcoatRoughness) this.clearcoatRoughness = source.clearcoatRoughness;\\n  if (source.clearcoatNormal) this.clearcoatNormal = source.clearcoatNormal;\\n  if (source.reflectivity) this.reflectivity = source.reflectivity;\\n  if (source.light) this.light = source.light;\\n  if (source.shadow) this.shadow = source.shadow;\\n  if (source.ao) this.ao = source.ao;\\n  if (source.emissive) this.emissive = source.emissive;\\n  if (source.ambient) this.ambient = source.ambient;\\n  if (source.environment) this.environment = source.environment;\\n  if (source.sheen) this.sheen = source.sheen;\\n  return this;\\n};\\n\\nStandardNode.prototype.toJSON = function (meta) {\\n  var data = this.getJSONNode(meta);\\n\\n  if (!data) {\\n    data = this.createJSONNode(meta); // vertex\\n\\n    if (this.position) data.position = this.position.toJSON(meta).uuid; // fragment\\n\\n    data.color = this.color.toJSON(meta).uuid;\\n    data.roughness = this.roughness.toJSON(meta).uuid;\\n    data.metalness = this.metalness.toJSON(meta).uuid;\\n    if (this.mask) data.mask = this.mask.toJSON(meta).uuid;\\n    if (this.alpha) data.alpha = this.alpha.toJSON(meta).uuid;\\n    if (this.normal) data.normal = this.normal.toJSON(meta).uuid;\\n    if (this.clearcoat) data.clearcoat = this.clearcoat.toJSON(meta).uuid;\\n    if (this.clearcoatRoughness) data.clearcoatRoughness = this.clearcoatRoughness.toJSON(meta).uuid;\\n    if (this.clearcoatNormal) data.clearcoatNormal = this.clearcoatNormal.toJSON(meta).uuid;\\n    if (this.reflectivity) data.reflectivity = this.reflectivity.toJSON(meta).uuid;\\n    if (this.light) data.light = this.light.toJSON(meta).uuid;\\n    if (this.shadow) data.shadow = this.shadow.toJSON(meta).uuid;\\n    if (this.ao) data.ao = this.ao.toJSON(meta).uuid;\\n    if (this.emissive) data.emissive = this.emissive.toJSON(meta).uuid;\\n    if (this.ambient) data.ambient = this.ambient.toJSON(meta).uuid;\\n    if (this.environment) data.environment = this.environment.toJSON(meta).uuid;\\n    if (this.sheen) data.sheen = this.sheen.toJSON(meta).uuid;\\n  }\\n\\n  return data;\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"StandardNode\",\"_Node\",\"Node\",\"call\",\"color\",\"_ColorNode\",\"ColorNode\",\"roughness\",\"_FloatNode\",\"FloatNode\",\"metalness\",\"Object\",\"defineProperty\",\"value\",\"_three\",\"_ExpressionNode\",\"_SpecularMIPLevelNode\",\"prototype\",\"create\",\"constructor\",\"nodeType\",\"build\",\"StandardNode.prototype.build\",\"builder\",\"define\",\"useClearcoat\",\"clearcoat\",\"clearcoatRoughness\",\"clearCoatNormal\",\"requires\",\"lights\",\"extensions\",\"derivatives\",\"shaderTextureLOD\",\"isShader\",\"position\",\"analyzeAndFlow\",\"cache\",\"undefined\",\"mergeUniform\",\"UniformsUtils\",\"merge\",\"UniformsLib\",\"fog\",\"LTC_1\",\"uniforms\",\"ltc_1\",\"ltc_2\",\"addParsCode\",\"output\",\"push\",\"code\",\"result\",\"specularRoughness\",\"ExpressionNode\",\"contextEnvironment\",\"bias\",\"SpecularMIPLevelNode\",\"viewNormal\",\"worldNormal\",\"gamma\",\"contextGammaOnly\",\"contextClearcoatEnvironment\",\"mask\",\"analyze\",\"slot\",\"context\",\"alpha\",\"normal\",\"clearcoatNormal\",\"reflectivity\",\"light\",\"ao\",\"ambient\",\"shadow\",\"emissive\",\"environment\",\"irradiance\",\"sheen\",\"flow\",\"radiance\",\"clearcoatEnv\",\"transparent\",\"join\",\"copy\",\"StandardNode.prototype.copy\",\"source\",\"toJSON\",\"StandardNode.prototype.toJSON\",\"meta\",\"data\",\"getJSONNode\",\"createJSONNode\",\"uuid\"]\n}\n"]