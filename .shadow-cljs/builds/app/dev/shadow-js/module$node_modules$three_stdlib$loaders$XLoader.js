["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/loaders/XLoader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$loaders$XLoader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.XLoader=void 0;var _three=require(\"module$node_modules$three$build$three_module\");global=function(){var classCallCheck=function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError(\"Cannot call a class as a function\");},createClass=function(){function defineProperties(target,props){for(var _i2=0;_i2<props.length;_i2++){var descriptor=\nprops[_i2];descriptor.enumerable=descriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){protoProps&&defineProperties(Constructor.prototype,protoProps);staticProps&&defineProperties(Constructor,staticProps);return Constructor}}(),XboneInf=function XboneInf(){classCallCheck(this,XboneInf);this.boneName=\"\";this.BoneIndex=0;this.Indeces=[];this.Weights=\n[];this.OffsetMatrix=this.initMatrix=null},XAnimationInfo=function XAnimationInfo(){classCallCheck(this,XAnimationInfo);this.boneName=this.animeName=\"\";this.targetBone=null;this.keyType=4;this.frameStartLv=0;this.keyFrames=[];this.InverseMx=null},XAnimationObj=function(){function XAnimationObj(_flags){classCallCheck(this,XAnimationObj);this.fps=30;this.name=\"xanimation\";this.length=0;this.hierarchy=[];this.putFlags=_flags;void 0===this.putFlags.putPos&&(this.putFlags.putPos=!0);void 0===this.putFlags.putRot&&\n(this.putFlags.putRot=!0);void 0===this.putFlags.putScl&&(this.putFlags.putScl=!0)}createClass(XAnimationObj,[{key:\"make\",value:function(XAnimationInfoArray){for(var _i3=0;_i3<XAnimationInfoArray.length;_i3++)this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[_i3]));this.length=this.hierarchy[0].keys[this.hierarchy[0].keys.length-1].time}},{key:\"clone\",value:function(){return Object.assign({},this)}},{key:\"makeBonekeys\",value:function(XAnimationInfo){var refObj={};refObj.name=XAnimationInfo.boneName;\nrefObj.parent=\"\";refObj.keys=this.keyFrameRefactor(XAnimationInfo);refObj.copy=function(){return Object.assign({},this)};return refObj}},{key:\"keyFrameRefactor\",value:function(XAnimationInfo){for(var keys=[],_i4=0;_i4<XAnimationInfo.keyFrames.length;_i4++){var keyframe={};keyframe.time=XAnimationInfo.keyFrames[_i4].time*this.fps;XAnimationInfo.keyFrames[_i4].pos&&this.putFlags.putPos&&(keyframe.pos=XAnimationInfo.keyFrames[_i4].pos);XAnimationInfo.keyFrames[_i4].rot&&this.putFlags.putRot&&(keyframe.rot=\nXAnimationInfo.keyFrames[_i4].rot);XAnimationInfo.keyFrames[_i4].scl&&this.putFlags.putScl&&(keyframe.scl=XAnimationInfo.keyFrames[_i4].scl);XAnimationInfo.keyFrames[_i4].matrix&&(keyframe.matrix=XAnimationInfo.keyFrames[_i4].matrix,this.putFlags.putPos&&(keyframe.pos=(new _three.Vector3).setFromMatrixPosition(keyframe.matrix)),this.putFlags.putRot&&(keyframe.rot=(new _three.Quaternion).setFromRotationMatrix(keyframe.matrix)),this.putFlags.putScl&&(keyframe.scl=(new _three.Vector3).setFromMatrixScale(keyframe.matrix)));\nkeys.push(keyframe)}return keys}}]);return XAnimationObj}(),XKeyFrameInfo=function XKeyFrameInfo(){classCallCheck(this,XKeyFrameInfo);this.time=this.Frame=this.index=0;this.matrix=null};return function(){function XLoader(manager){_three.Loader.call(this,manager);classCallCheck(this,XLoader);this.debug=!1;this.texloader=new _three.TextureLoader(this.manager);this.url=\"\";this._putMatLength=0;this._nowMat=null;this._nowFrameName=\"\";this.frameHierarchie=[];this.Hierarchies={};this.HieStack=[];this._currentObject=\n{};this._currentFrame={};this.onLoad=this._data=null;this.IsUvYReverse=!0;this.Meshes=[];this.animations=[];this.animTicksPerSecond=30;this._currentAnimeFrames=this._currentAnime=this._currentGeo=null}createClass(XLoader,[{key:\"_setArgOption\",value:function(_arg){if(_arg){for(var _i5=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;_i5<_arg.length;_i5++)switch(_i5){case 0:this.url=_arg[_i5];break;case 1:this.options=_arg[_i5]}void 0===this.options&&(this.options={})}}},{key:\"load\",value:function(_arg,\nonLoad,onProgress,onError){var _this=this;this._setArgOption(_arg);_arg=new _three.FileLoader(this.manager);_arg.setPath(this.path);_arg.setResponseType(\"arraybuffer\");_arg.setRequestHeader(this.requestHeader);_arg.setWithCredentials(this.withCredentials);_arg.load(this.url,function(response){try{_this.parse(response,onLoad)}catch(e){onError?onError(e):console.error(e),_this.manager.itemError(_this.url)}},onProgress,onError)}},{key:\"_readLine\",value:function(line){for(var readed=0;;){var find=line.indexOf(\"//\",\nreaded);-1===find&&(find=line.indexOf(\"#\",readed));if(-1<find&&2>find)find=line.indexOf(\"\\r\\n\",readed),0<find?readed=find+2:(find=line.indexOf(\"\\r\",readed),readed=0<find?find+1:line.indexOf(\"\\n\",readed)+1);else break}return line.substr(readed)}},{key:\"_readLine\",value:function(line){for(var readed=0;;){var find=line.indexOf(\"//\",readed);-1===find&&(find=line.indexOf(\"#\",readed));if(-1<find&&2>find)find=line.indexOf(\"\\r\\n\",readed),0<find?readed=find+2:(find=line.indexOf(\"\\r\",readed),readed=0<find?\nfind+1:line.indexOf(\"\\n\",readed)+1);else break}return line.substr(readed)}},{key:\"_isBinary\",value:function(binData){binData=new DataView(binData);if(84+50*binData.getUint32(80,!0)===binData.byteLength)return!0;for(var fileLength=binData.byteLength,index=0;index<fileLength;index++)if(127<binData.getUint8(index,!1))return!0;return!1}},{key:\"_ensureBinary\",value:function(buf){if(\"string\"===typeof buf){for(var array_buffer=new Uint8Array(buf.length),_i6=0;_i6<buf.length;_i6++)array_buffer[_i6]=buf.charCodeAt(_i6)&\n255;return array_buffer.buffer||array_buffer}return buf}},{key:\"_ensureString\",value:function(buf){return\"string\"!==typeof buf?_three.LoaderUtils.decodeText(new Uint8Array(buf)):buf}},{key:\"parse\",value:function(data,onLoad){var binData=this._ensureBinary(data);this._data=this._ensureString(data);this.onLoad=onLoad;return this._isBinary(binData)?this._parseBinary(binData):this._parseASCII()}},{key:\"_parseBinary\",value:function(data){return this._parseASCII(_three.LoaderUtils.decodeText(new Uint8Array(data)))}},\n{key:\"_parseASCII\",value:function(){var path=\"\"!==this.resourcePath?this.resourcePath:\"\"!==this.path?this.path:_three.LoaderUtils.extractUrlBase(this.url);this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);this.Hierarchies.children=[];this._hierarchieParse(this.Hierarchies,16);this._changeRoot();this._currentObject=this.Hierarchies.children.shift();this._mainloop()}},{key:\"_hierarchieParse\",value:function(_parent,_end){for(var endRead=_end;;){var find1=this._data.indexOf(\"{\",endRead)+1,\nfindEnd=this._data.indexOf(\"}\",endRead),findNext=this._data.indexOf(\"{\",find1)+1;if(0<find1&&findEnd>find1){_end={children:[]};endRead=this._readLine(this._data.substr(endRead,find1-endRead-1)).trim();var word=endRead.split(/ /g);0<word.length?(_end.type=word[0],_end.name=2<=word.length?word[1]:word[0]+this.Hierarchies.children.length):(_end.name=endRead,_end.type=\"\");\"Animation\"===_end.type?(_end.data=this._data.substr(findNext,findEnd-findNext).trim(),find1=this._hierarchieParse(_end,findEnd+1),\nendRead=find1.end,_end.children=find1.parent.children):(endRead=this._data.lastIndexOf(\";\",0<findNext?Math.min(findNext,findEnd):findEnd),_end.data=this._data.substr(find1,endRead-find1).trim(),0>=findNext||findEnd<findNext?endRead=findEnd+1:(find1=this._hierarchieParse(_end,Math.max(endRead+1,find1)),endRead=find1.end,_end.children=find1.parent.children));_end.parent=_parent;\"template\"!=_end.type&&_parent.children.push(_end)}else{endRead=-1===find1?this._data.length:findEnd+1;break}}return{parent:_parent,\nend:endRead}}},{key:\"_mainloop\",value:function(){var _this2=this;this._mainProc();this._currentObject.parent||0<this._currentObject.children.length||!this._currentObject.worked?setTimeout(function(){_this2._mainloop()},1):setTimeout(function(){_this2.onLoad({models:_this2.Meshes,animations:_this2.animations})},1)}},{key:\"_mainProc\",value:function(){for(var breakFlag=!1;;){if(!this._currentObject.worked){switch(this._currentObject.type){case \"AnimTicksPerSecond\":this.animTicksPerSecond=parseInt(this._currentObject.data);\nbreak;case \"Frame\":this._setFrame();break;case \"FrameTransformMatrix\":this._setFrameTransformMatrix();break;case \"Mesh\":this._changeRoot();this._currentGeo={};this._currentGeo.name=this._currentObject.name.trim();this._currentGeo.parentName=this._getParentName(this._currentObject).trim();this._currentGeo.VertexSetedBoneCount=[];this._currentGeo.GeometryData={vertices:[],normals:[],uvs:[],skinIndices:[],skinWeights:[],indices:[],materialIndices:[]};this._currentGeo.Materials=[];this._currentGeo.normalVectors=\n[];this._currentGeo.BoneInfs=[];this._currentGeo.baseFrame=this._currentFrame;this._makeBoneFrom_CurrentFrame();this._readVertexDatas();breakFlag=!0;break;case \"MeshNormals\":this._readVertexDatas();break;case \"MeshTextureCoords\":this._setMeshTextureCoords();break;case \"MeshMaterialList\":this._setMeshMaterialList();break;case \"Material\":this._setMaterial();break;case \"SkinWeights\":this._setSkinWeights();break;case \"AnimationSet\":this._changeRoot();this._currentAnime={};this._currentAnime.name=this._currentObject.name.trim();\nthis._currentAnime.AnimeFrames=[];break;case \"Animation\":this._currentAnimeFrames&&this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);this._currentAnimeFrames=new XAnimationInfo;this._currentAnimeFrames.boneName=this._currentObject.data.trim();break;case \"AnimationKey\":this._readAnimationKey(),breakFlag=!0}this._currentObject.worked=!0}0<this._currentObject.children.length?(this._currentObject=this._currentObject.children.shift(),this.debug&&console.log(\"processing \"+this._currentObject.name)):\n(this._currentObject.worked&&this._currentObject.parent&&!this._currentObject.parent.parent&&this._changeRoot(),this._currentObject.parent?this._currentObject=this._currentObject.parent:breakFlag=!0);if(breakFlag)break}}},{key:\"_changeRoot\",value:function(){null!=this._currentGeo&&this._currentGeo.name&&this._makeOutputGeometry();this._currentGeo={};null!=this._currentAnime&&this._currentAnime.name&&(this._currentAnimeFrames&&(this._currentAnime.AnimeFrames.push(this._currentAnimeFrames),this._currentAnimeFrames=\nnull),this._makeOutputAnimation());this._currentAnime={}}},{key:\"_getParentName\",value:function(_obj){return _obj.parent?_obj.parent.name?_obj.parent.name:this._getParentName(_obj.parent):\"\"}},{key:\"_setFrame\",value:function(){this._nowFrameName=this._currentObject.name.trim();this._currentFrame={};this._currentFrame.name=this._nowFrameName;this._currentFrame.children=[];this._currentObject.parent&&this._currentObject.parent.name&&(this._currentFrame.parentName=this._currentObject.parent.name);this.frameHierarchie.push(this._nowFrameName);\nthis.HieStack[this._nowFrameName]=this._currentFrame}},{key:\"_setFrameTransformMatrix\",value:function(){this._currentFrame.FrameTransformMatrix=new _three.Matrix4;var data=this._currentObject.data.split(\",\");this._ParseMatrixData(this._currentFrame.FrameTransformMatrix,data);this._makeBoneFrom_CurrentFrame()}},{key:\"_makeBoneFrom_CurrentFrame\",value:function(){if(this._currentFrame.FrameTransformMatrix){var b=new _three.Bone;b.name=this._currentFrame.name;b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\nb.matrixWorld=b.matrix;b.FrameTransformMatrix=this._currentFrame.FrameTransformMatrix;this._currentFrame.putBone=b;if(this._currentFrame.parentName)for(var frame in this.HieStack)this.HieStack[frame].name===this._currentFrame.parentName&&this.HieStack[frame].putBone.add(this._currentFrame.putBone)}}},{key:\"_readVertexDatas\",value:function(){for(var endRead=0,mode=0,mode_local=0,maxLength=0;;){var changeMode=!1;if(0===mode_local)endRead=this._readInt1(endRead).endRead,mode_local=1,maxLength=this._currentObject.data.indexOf(\";;\",\nendRead)+1,0>=maxLength&&(maxLength=this._currentObject.data.length);else{var find=0;switch(mode){case 0:find=this._currentObject.data.indexOf(\",\",endRead)+1;break;case 1:find=this._currentObject.data.indexOf(\";,\",endRead)+1}if(0===find||find>maxLength)find=maxLength,mode_local=0,changeMode=!0;switch(this._currentObject.type){case \"Mesh\":switch(mode){case 0:this._readVertex1(this._currentObject.data.substr(endRead,find-endRead));break;case 1:this._readFace1(this._currentObject.data.substr(endRead,\nfind-endRead))}break;case \"MeshNormals\":switch(mode){case 0:this._readNormalVector1(this._currentObject.data.substr(endRead,find-endRead))}}endRead=find+1;changeMode&&mode++}if(endRead>=this._currentObject.data.length)break}}},{key:\"_readInt1\",value:function(start){var find=this._currentObject.data.indexOf(\";\",start);return{refI:parseInt(this._currentObject.data.substr(start,find-start)),endRead:find+1}}},{key:\"_readVertex1\",value:function(line){line=this._readLine(line.trim()).substr(0,line.length-\n2).split(\";\");this._currentGeo.GeometryData.vertices.push(parseFloat(line[0]),parseFloat(line[1]),parseFloat(line[2]));this._currentGeo.GeometryData.skinIndices.push(0,0,0,0);this._currentGeo.GeometryData.skinWeights.push(1,0,0,0);this._currentGeo.VertexSetedBoneCount.push(0)}},{key:\"_readFace1\",value:function(line){line=this._readLine(line.trim()).substr(2,line.length-4).split(\",\");this._currentGeo.GeometryData.indices.push(parseInt(line[0],10),parseInt(line[1],10),parseInt(line[2],10))}},{key:\"_readNormalVector1\",\nvalue:function(line){line=this._readLine(line.trim()).substr(0,line.length-2).split(\";\");this._currentGeo.GeometryData.normals.push(parseFloat(line[0]),parseFloat(line[1]),parseFloat(line[2]))}},{key:\"_buildGeometry\",value:function(){for(var bufferGeometry=new _three.BufferGeometry,position=[],normals=[],uvs=[],skinIndices=[],skinWeights=[],data=this._currentGeo.GeometryData,_i7=0,l=data.indices.length;_i7<l;_i7++){var stride2=2*data.indices[_i7],stride3=3*data.indices[_i7],stride4=4*data.indices[_i7];\nposition.push(data.vertices[stride3],data.vertices[stride3+1],data.vertices[stride3+2]);normals.push(data.normals[stride3],data.normals[stride3+1],data.normals[stride3+2]);skinIndices.push(data.skinIndices[stride4],data.skinIndices[stride4+1],data.skinIndices[stride4+2],data.skinIndices[stride4+3]);skinWeights.push(data.skinWeights[stride4],data.skinWeights[stride4+1],data.skinWeights[stride4+2],data.skinWeights[stride4+3]);uvs.push(data.uvs[stride2],data.uvs[stride2+1])}bufferGeometry.setAttribute(\"position\",\nnew _three.Float32BufferAttribute(position,3));bufferGeometry.setAttribute(\"normal\",new _three.Float32BufferAttribute(normals,3));bufferGeometry.setAttribute(\"uv\",new _three.Float32BufferAttribute(uvs,2));bufferGeometry.setAttribute(\"skinIndex\",new _three.Uint16BufferAttribute(skinIndices,4));bufferGeometry.setAttribute(\"skinWeight\",new _three.Float32BufferAttribute(skinWeights,4));this._computeGroups(bufferGeometry,data.materialIndices);return bufferGeometry}},{key:\"_computeGroups\",value:function(bufferGeometry,\nmaterialIndices){for(var group,groups=[],materialIndex=void 0,_i8=0;_i8<materialIndices.length;_i8++){var currentMaterialIndex=materialIndices[_i8];currentMaterialIndex!==materialIndex&&(materialIndex=currentMaterialIndex,void 0!==group&&(group.count=3*_i8-group.start,groups.push(group)),group={start:3*_i8,materialIndex})}void 0!==group&&(group.count=3*i-group.start,groups.push(group));bufferGeometry.groups=groups}},{key:\"_setMeshTextureCoords\",value:function(){for(var endRead=0,mode=0,mode_local=\n0;;){switch(mode){case 0:if(0===mode_local)endRead=this._readInt1(0).endRead,mode_local=1;else{var find=this._currentObject.data.indexOf(\",\",endRead)+1;0===find&&(find=this._currentObject.data.length,mode=2,mode_local=0);endRead=this._currentObject.data.substr(endRead,find-endRead);endRead=this._readLine(endRead.trim()).split(\";\");this.IsUvYReverse?this._currentGeo.GeometryData.uvs.push(parseFloat(endRead[0]),1-parseFloat(endRead[1])):this._currentGeo.GeometryData.uvs.push(parseFloat(endRead[0]),\nparseFloat(endRead[1]));endRead=find+1}}if(endRead>=this._currentObject.data.length)break}}},{key:\"_setMeshMaterialList\",value:function(){for(var endRead=0,mode=0,mode_local=0;;){if(2>mode_local)endRead=this._readInt1(endRead).endRead,mode_local++;else{var find=this._currentObject.data.indexOf(\";\",endRead);-1===find&&(find=this._currentObject.data.length,mode=3,mode_local=0);endRead=this._currentObject.data.substr(endRead,find-endRead);endRead=this._readLine(endRead.trim()).split(\",\");for(find=0;find<\nendRead.length;find++)this._currentGeo.GeometryData.materialIndices[find]=parseInt(endRead[find]);endRead=this._currentObject.data.length}if(endRead>=this._currentObject.data.length||3<=mode)break}}},{key:\"_setMaterial\",value:function(){var _nowMat=new _three.MeshPhongMaterial({color:16777215*Math.random()});_nowMat.side=_three.FrontSide;_nowMat.name=this._currentObject.name;var endRead=0,find=this._currentObject.data.indexOf(\";;\",endRead);endRead=this._currentObject.data.substr(endRead,find-endRead);\nendRead=this._readLine(endRead.trim()).split(\";\");_nowMat.color.r=parseFloat(endRead[0]);_nowMat.color.g=parseFloat(endRead[1]);_nowMat.color.b=parseFloat(endRead[2]);endRead=find+2;find=this._currentObject.data.indexOf(\";\",endRead);endRead=this._currentObject.data.substr(endRead,find-endRead);_nowMat.shininess=parseFloat(this._readLine(endRead));endRead=find+1;find=this._currentObject.data.indexOf(\";;\",endRead);endRead=this._currentObject.data.substr(endRead,find-endRead);endRead=this._readLine(endRead.trim()).split(\";\");\n_nowMat.specular.r=parseFloat(endRead[0]);_nowMat.specular.g=parseFloat(endRead[1]);_nowMat.specular.b=parseFloat(endRead[2]);endRead=find+2;find=this._currentObject.data.indexOf(\";;\",endRead);-1===find&&(find=this._currentObject.data.length);endRead=this._currentObject.data.substr(endRead,find-endRead);find=this._readLine(endRead.trim()).split(\";\");_nowMat.emissive.r=parseFloat(find[0]);_nowMat.emissive.g=parseFloat(find[1]);for(_nowMat.emissive.b=parseFloat(find[2]);;)if(0<this._currentObject.children.length)switch(find=\nthis._currentObject.children.shift(),this.debug&&console.log(\"processing \"+find.name),endRead=find.data.substr(1,find.data.length-2),find.type){case \"TextureFilename\":_nowMat.map=this.texloader.load(endRead);break;case \"BumpMapFilename\":_nowMat.bumpMap=this.texloader.load(endRead);_nowMat.bumpScale=.05;break;case \"NormalMapFilename\":_nowMat.normalMap=this.texloader.load(endRead);_nowMat.normalScale=new _three.Vector2(2,2);break;case \"EmissiveMapFilename\":_nowMat.emissiveMap=this.texloader.load(endRead);\nbreak;case \"LightMapFilename\":_nowMat.lightMap=this.texloader.load(endRead)}else break;this._currentGeo.Materials.push(_nowMat)}},{key:\"_setSkinWeights\",value:function(){var boneInf=new XboneInf,endRead=0,find=this._currentObject.data.indexOf(\";\",endRead),line=this._currentObject.data.substr(endRead,find-endRead);endRead=find+1;boneInf.boneName=line.substr(1,line.length-2);boneInf.BoneIndex=this._currentGeo.BoneInfs.length;find=this._currentObject.data.indexOf(\";\",endRead);endRead=find+1;find=this._currentObject.data.indexOf(\";\",\nendRead);line=this._currentObject.data.substr(endRead,find-endRead);endRead=this._readLine(line.trim()).split(\",\");for(line=0;line<endRead.length;line++)boneInf.Indeces.push(parseInt(endRead[line]));endRead=find+1;find=this._currentObject.data.indexOf(\";\",endRead);line=this._currentObject.data.substr(endRead,find-endRead);endRead=this._readLine(line.trim()).split(\",\");for(line=0;line<endRead.length;line++)boneInf.Weights.push(parseFloat(endRead[line]));endRead=find+1;find=this._currentObject.data.indexOf(\";\",\nendRead);0>=find&&(find=this._currentObject.data.length);line=this._currentObject.data.substr(endRead,find-endRead);find=this._readLine(line.trim()).split(\",\");boneInf.OffsetMatrix=new _three.Matrix4;this._ParseMatrixData(boneInf.OffsetMatrix,find);this._currentGeo.BoneInfs.push(boneInf)}},{key:\"_makePutBoneList\",value:function(_RootName,_bones){var putting=!1,frame;for(frame in this.HieStack)if(this.HieStack[frame].name===_RootName||putting){putting=!0;var b=new _three.Bone;b.name=this.HieStack[frame].name;\nb.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);b.matrixWorld=b.matrix;b.FrameTransformMatrix=this.HieStack[frame].FrameTransformMatrix;b.pos=(new _three.Vector3).setFromMatrixPosition(b.FrameTransformMatrix).toArray();b.rotq=(new _three.Quaternion).setFromRotationMatrix(b.FrameTransformMatrix).toArray();b.scl=(new _three.Vector3).setFromMatrixScale(b.FrameTransformMatrix).toArray();if(this.HieStack[frame].parentName&&0<this.HieStack[frame].parentName.length)for(var _i11=0;_i11<_bones.length;_i11++)if(this.HieStack[frame].parentName===\n_bones[_i11].name){_bones[_i11].add(b);b.parent=_i11;break}_bones.push(b)}}},{key:\"_makeOutputGeometry\",value:function(){var mesh;if(0<this._currentGeo.BoneInfs.length){var putBones=[];this._makePutBoneList(this._currentGeo.baseFrame.parentName,putBones);for(mesh=0;mesh<this._currentGeo.BoneInfs.length;mesh++){for(var boneIndex=0,bb=0;bb<putBones.length;bb++)if(putBones[bb].name===this._currentGeo.BoneInfs[mesh].boneName){boneIndex=bb;putBones[bb].OffsetMatrix=new _three.Matrix4;putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[mesh].OffsetMatrix);\nbreak}for(bb=0;bb<this._currentGeo.BoneInfs[mesh].Indeces.length;bb++){var nowVertexID=this._currentGeo.BoneInfs[mesh].Indeces[bb],nowVal=this._currentGeo.BoneInfs[mesh].Weights[bb],stride=4*nowVertexID;switch(this._currentGeo.VertexSetedBoneCount[nowVertexID]){case 0:this._currentGeo.GeometryData.skinIndices[stride]=boneIndex;this._currentGeo.GeometryData.skinWeights[stride]=nowVal;break;case 1:this._currentGeo.GeometryData.skinIndices[stride+1]=boneIndex;this._currentGeo.GeometryData.skinWeights[stride+\n1]=nowVal;break;case 2:this._currentGeo.GeometryData.skinIndices[stride+2]=boneIndex;this._currentGeo.GeometryData.skinWeights[stride+2]=nowVal;break;case 3:this._currentGeo.GeometryData.skinIndices[stride+3]=boneIndex,this._currentGeo.GeometryData.skinWeights[stride+3]=nowVal}this._currentGeo.VertexSetedBoneCount[nowVertexID]++;4<this._currentGeo.VertexSetedBoneCount[nowVertexID]&&console.log(\"warn! over 4 bone weight! :\"+nowVertexID)}}for(mesh=0;mesh<this._currentGeo.Materials.length;mesh++)this._currentGeo.Materials[mesh].skinning=\n!0;boneIndex=[];for(mesh=0;mesh<putBones.length;mesh++)putBones[mesh].OffsetMatrix?boneIndex.push(putBones[mesh].OffsetMatrix):boneIndex.push(new _three.Matrix4);mesh=this._buildGeometry();mesh=new _three.SkinnedMesh(mesh,1===this._currentGeo.Materials.length?this._currentGeo.Materials[0]:this._currentGeo.Materials);this._initSkeleton(mesh,putBones,boneIndex)}else putBones=this._buildGeometry(),mesh=new _three.Mesh(putBones,1===this._currentGeo.Materials.length?this._currentGeo.Materials[0]:this._currentGeo.Materials);\nmesh.name=this._currentGeo.name;putBones=new _three.Matrix4;if((boneIndex=this._currentGeo.baseFrame.putBone)&&boneIndex.parent){for(;;)if(boneIndex=boneIndex.parent)putBones.multiply(boneIndex.FrameTransformMatrix);else break;mesh.applyMatrix4(putBones)}this.Meshes.push(mesh)}},{key:\"_initSkeleton\",value:function(mesh,boneList,boneInverses){var bones=[],il;var i=0;for(il=boneList.length;i<il;i++){var gbone=boneList[i];var bone=new _three.Bone;bones.push(bone);bone.name=gbone.name;bone.position.fromArray(gbone.pos);\nbone.quaternion.fromArray(gbone.rotq);void 0!==gbone.scl&&bone.scale.fromArray(gbone.scl)}i=0;for(il=boneList.length;i<il;i++)gbone=boneList[i],-1!==gbone.parent&&null!==gbone.parent&&void 0!==bones[gbone.parent]?bones[gbone.parent].add(bones[i]):mesh.add(bones[i]);mesh.updateMatrixWorld(!0);boneList=new _three.Skeleton(bones,boneInverses);mesh.bind(boneList,mesh.matrixWorld)}},{key:\"_readAnimationKey\",value:function(){var endRead=0,find=this._currentObject.data.indexOf(\";\",endRead),line=this._currentObject.data.substr(endRead,\nfind-endRead);endRead=find+1;var nowKeyType=parseInt(this._readLine(line));find=this._currentObject.data.indexOf(\";\",endRead);line=this._currentObject.data.substr(find+1);endRead=this._readLine(line.trim()).split(\";;,\");for(find=0;find<endRead.length;find++){var data2=endRead[find].split(\";\");line=new XKeyFrameInfo;line.type=nowKeyType;line.Frame=parseInt(data2[0]);line.index=this._currentAnimeFrames.keyFrames.length;line.time=line.Frame;if(4!=nowKeyType){for(var frameFound=!1,mm=0;mm<this._currentAnimeFrames.keyFrames.length;mm++)if(this._currentAnimeFrames.keyFrames[mm].Frame===\nline.Frame){line=this._currentAnimeFrames.keyFrames[mm];frameFound=!0;break}data2=data2[2].split(\",\");switch(nowKeyType){case 0:line.rot=new _three.Quaternion(parseFloat(data2[1]),parseFloat(data2[2]),parseFloat(data2[3]),-1*parseFloat(data2[0]));break;case 1:line.scl=new _three.Vector3(parseFloat(data2[0]),parseFloat(data2[1]),parseFloat(data2[2]));break;case 2:line.pos=new _three.Vector3(parseFloat(data2[0]),parseFloat(data2[1]),parseFloat(data2[2]))}frameFound||this._currentAnimeFrames.keyFrames.push(line)}else line.matrix=\nnew _three.Matrix4,this._ParseMatrixData(line.matrix,data2[2].split(\",\")),this._currentAnimeFrames.keyFrames.push(line)}}},{key:\"_makeOutputAnimation\",value:function(){var animationObj=new XAnimationObj(this.options);animationObj.fps=this.animTicksPerSecond;animationObj.name=this._currentAnime.name;animationObj.make(this._currentAnime.AnimeFrames);this.animations.push(animationObj)}},{key:\"assignAnimation\",value:function(_model,_animation){_model||(_model=this.Meshes[0]);_animation||(_animation=this.animations[0]);\nif(!_model||!_animation)return null;var put={};put.fps=_animation.fps;put.name=_animation.name;put.length=_animation.length;put.hierarchy=[];for(var b=0;b<_model.skeleton.bones.length;b++){for(var findAnimation=!1,_i13=0;_i13<_animation.hierarchy.length;_i13++)if(_model.skeleton.bones[b].name===_animation.hierarchy[_i13].name){findAnimation=!0;_i13=_animation.hierarchy[_i13].copy();_i13.parent=-1;if(_model.skeleton.bones[b].parent&&\"Bone\"===_model.skeleton.bones[b].parent.type)for(var bb=0;bb<put.hierarchy.length;bb++)put.hierarchy[bb].name===\n_model.skeleton.bones[b].parent.name&&(_i13.parent=bb,_i13.parentName=_model.skeleton.bones[b].parent.name);put.hierarchy.push(_i13);break}if(!findAnimation){findAnimation=_animation.hierarchy[0].copy();findAnimation.name=_model.skeleton.bones[b].name;findAnimation.parent=-1;for(_i13=0;_i13<findAnimation.keys.length;_i13++)findAnimation.keys[_i13].pos&&findAnimation.keys[_i13].pos.set(0,0,0),findAnimation.keys[_i13].scl&&findAnimation.keys[_i13].scl.set(1,1,1),findAnimation.keys[_i13].rot&&findAnimation.keys[_i13].rot.set(0,\n0,0,1);put.hierarchy.push(findAnimation)}}_model.geometry.animations||(_model.geometry.animations=[]);_model.geometry.animations.push(_three.AnimationClip.parseAnimation(put,_model.skeleton.bones));_model.animationMixer||(_model.animationMixer=new _three.AnimationMixer(_model));return put}},{key:\"_ParseMatrixData\",value:function(targetMatrix,data){targetMatrix.set(parseFloat(data[0]),parseFloat(data[4]),parseFloat(data[8]),parseFloat(data[12]),parseFloat(data[1]),parseFloat(data[5]),parseFloat(data[9]),\nparseFloat(data[13]),parseFloat(data[2]),parseFloat(data[6]),parseFloat(data[10]),parseFloat(data[14]),parseFloat(data[3]),parseFloat(data[7]),parseFloat(data[11]),parseFloat(data[15]))}}]);return XLoader}()}();exports.XLoader=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$loaders$XLoader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XLoader = void 0;\n\nvar _three = require(\"three\");\n\nvar XLoader = function () {\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var _i2 = 0; _i2 < props.length; _i2++) {\n        var descriptor = props[_i2];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if ('value' in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var XboneInf = function XboneInf() {\n    classCallCheck(this, XboneInf);\n    this.boneName = '';\n    this.BoneIndex = 0;\n    this.Indeces = [];\n    this.Weights = [];\n    this.initMatrix = null;\n    this.OffsetMatrix = null;\n  };\n\n  var XAnimationInfo = function XAnimationInfo() {\n    classCallCheck(this, XAnimationInfo);\n    this.animeName = '';\n    this.boneName = '';\n    this.targetBone = null;\n    this.keyType = 4;\n    this.frameStartLv = 0;\n    this.keyFrames = [];\n    this.InverseMx = null;\n  };\n\n  var XAnimationObj = function () {\n    function XAnimationObj(_flags) {\n      classCallCheck(this, XAnimationObj);\n      this.fps = 30;\n      this.name = 'xanimation';\n      this.length = 0;\n      this.hierarchy = [];\n      this.putFlags = _flags;\n\n      if (this.putFlags.putPos === undefined) {\n        this.putFlags.putPos = true;\n      }\n\n      if (this.putFlags.putRot === undefined) {\n        this.putFlags.putRot = true;\n      }\n\n      if (this.putFlags.putScl === undefined) {\n        this.putFlags.putScl = true;\n      }\n    }\n\n    createClass(XAnimationObj, [{\n      key: 'make',\n      value: function make(XAnimationInfoArray) {\n        for (var _i3 = 0; _i3 < XAnimationInfoArray.length; _i3++) {\n          this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[_i3]));\n        }\n\n        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n      }\n    }, {\n      key: 'clone',\n      value: function clone() {\n        return Object.assign({}, this);\n      }\n    }, {\n      key: 'makeBonekeys',\n      value: function makeBonekeys(XAnimationInfo) {\n        var refObj = {};\n        refObj.name = XAnimationInfo.boneName;\n        refObj.parent = '';\n        refObj.keys = this.keyFrameRefactor(XAnimationInfo);\n\n        refObj.copy = function () {\n          return Object.assign({}, this);\n        };\n\n        return refObj;\n      }\n    }, {\n      key: 'keyFrameRefactor',\n      value: function keyFrameRefactor(XAnimationInfo) {\n        var keys = [];\n\n        for (var _i4 = 0; _i4 < XAnimationInfo.keyFrames.length; _i4++) {\n          var keyframe = {};\n          keyframe.time = XAnimationInfo.keyFrames[_i4].time * this.fps;\n\n          if (XAnimationInfo.keyFrames[_i4].pos && this.putFlags.putPos) {\n            keyframe.pos = XAnimationInfo.keyFrames[_i4].pos;\n          }\n\n          if (XAnimationInfo.keyFrames[_i4].rot && this.putFlags.putRot) {\n            keyframe.rot = XAnimationInfo.keyFrames[_i4].rot;\n          }\n\n          if (XAnimationInfo.keyFrames[_i4].scl && this.putFlags.putScl) {\n            keyframe.scl = XAnimationInfo.keyFrames[_i4].scl;\n          }\n\n          if (XAnimationInfo.keyFrames[_i4].matrix) {\n            keyframe.matrix = XAnimationInfo.keyFrames[_i4].matrix;\n\n            if (this.putFlags.putPos) {\n              keyframe.pos = new _three.Vector3().setFromMatrixPosition(keyframe.matrix);\n            }\n\n            if (this.putFlags.putRot) {\n              keyframe.rot = new _three.Quaternion().setFromRotationMatrix(keyframe.matrix);\n            }\n\n            if (this.putFlags.putScl) {\n              keyframe.scl = new _three.Vector3().setFromMatrixScale(keyframe.matrix);\n            }\n          }\n\n          keys.push(keyframe);\n        }\n\n        return keys;\n      }\n    }]);\n    return XAnimationObj;\n  }();\n\n  var XKeyFrameInfo = function XKeyFrameInfo() {\n    classCallCheck(this, XKeyFrameInfo);\n    this.index = 0;\n    this.Frame = 0;\n    this.time = 0.0;\n    this.matrix = null;\n  };\n\n  var XLoader = function () {\n    function XLoader(manager) {\n      _three.Loader.call(this, manager);\n\n      classCallCheck(this, XLoader);\n      this.debug = false;\n      this.texloader = new _three.TextureLoader(this.manager);\n      this.url = '';\n      this._putMatLength = 0;\n      this._nowMat = null;\n      this._nowFrameName = '';\n      this.frameHierarchie = [];\n      this.Hierarchies = {};\n      this.HieStack = [];\n      this._currentObject = {};\n      this._currentFrame = {};\n      this._data = null;\n      this.onLoad = null;\n      this.IsUvYReverse = true;\n      this.Meshes = [];\n      this.animations = [];\n      this.animTicksPerSecond = 30;\n      this._currentGeo = null;\n      this._currentAnime = null;\n      this._currentAnimeFrames = null;\n    }\n\n    createClass(XLoader, [{\n      key: '_setArgOption',\n      value: function _setArgOption(_arg) {\n        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n        if (!_arg) {\n          return;\n        }\n\n        for (var _i5 = _start; _i5 < _arg.length; _i5++) {\n          switch (_i5) {\n            case 0:\n              this.url = _arg[_i5];\n              break;\n\n            case 1:\n              this.options = _arg[_i5];\n              break;\n          }\n        }\n\n        if (this.options === undefined) {\n          this.options = {};\n        }\n      }\n    }, {\n      key: 'load',\n      value: function load(_arg, onLoad, onProgress, onError) {\n        var _this = this;\n\n        this._setArgOption(_arg);\n\n        var loader = new _three.FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setResponseType('arraybuffer');\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(this.url, function (response) {\n          try {\n            _this.parse(response, onLoad);\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n\n            _this.manager.itemError(_this.url);\n          }\n        }, onProgress, onError);\n      }\n    }, {\n      key: '_readLine',\n      value: function _readLine(line) {\n        var readed = 0;\n\n        while (true) {\n          var find = -1;\n          find = line.indexOf('//', readed);\n\n          if (find === -1) {\n            find = line.indexOf('#', readed);\n          }\n\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf('\\r\\n', readed);\n\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf('\\r', readed);\n\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf('\\n', readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n\n        return line.substr(readed);\n      }\n    }, {\n      key: '_readLine',\n      value: function _readLine(line) {\n        var readed = 0;\n\n        while (true) {\n          var find = -1;\n          find = line.indexOf('//', readed);\n\n          if (find === -1) {\n            find = line.indexOf('#', readed);\n          }\n\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf('\\r\\n', readed);\n\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf('\\r', readed);\n\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf('\\n', readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n\n        return line.substr(readed);\n      }\n    }, {\n      key: '_isBinary',\n      value: function _isBinary(binData) {\n        var reader = new DataView(binData);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n\n        if (expect === reader.byteLength) {\n          return true;\n        }\n\n        var fileLength = reader.byteLength;\n\n        for (var index = 0; index < fileLength; index++) {\n          if (reader.getUint8(index, false) > 127) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: '_ensureBinary',\n      value: function _ensureBinary(buf) {\n        if (typeof buf === 'string') {\n          var array_buffer = new Uint8Array(buf.length);\n\n          for (var _i6 = 0; _i6 < buf.length; _i6++) {\n            array_buffer[_i6] = buf.charCodeAt(_i6) & 0xff;\n          }\n\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: '_ensureString',\n      value: function _ensureString(buf) {\n        if (typeof buf !== 'string') {\n          return _three.LoaderUtils.decodeText(new Uint8Array(buf));\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: 'parse',\n      value: function _parse(data, onLoad) {\n        var binData = this._ensureBinary(data);\n\n        this._data = this._ensureString(data);\n        this.onLoad = onLoad;\n        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n      }\n    }, {\n      key: '_parseBinary',\n      value: function _parseBinary(data) {\n        return this._parseASCII(_three.LoaderUtils.decodeText(new Uint8Array(data)));\n      }\n    }, {\n      key: '_parseASCII',\n      value: function _parseASCII() {\n        var path;\n\n        if (this.resourcePath !== '') {\n          path = this.resourcePath;\n        } else if (this.path !== '') {\n          path = this.path;\n        } else {\n          path = _three.LoaderUtils.extractUrlBase(this.url);\n        }\n\n        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n        var endRead = 16;\n        this.Hierarchies.children = [];\n\n        this._hierarchieParse(this.Hierarchies, endRead);\n\n        this._changeRoot();\n\n        this._currentObject = this.Hierarchies.children.shift();\n\n        this._mainloop();\n      }\n    }, {\n      key: '_hierarchieParse',\n      value: function _hierarchieParse(_parent, _end) {\n        var endRead = _end;\n\n        while (true) {\n          var find1 = this._data.indexOf('{', endRead) + 1;\n\n          var findEnd = this._data.indexOf('}', endRead);\n\n          var findNext = this._data.indexOf('{', find1) + 1;\n\n          if (find1 > 0 && findEnd > find1) {\n            var _currentObject = {};\n            _currentObject.children = [];\n\n            var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n\n            var word = nameData.split(/ /g);\n\n            if (word.length > 0) {\n              _currentObject.type = word[0];\n\n              if (word.length >= 2) {\n                _currentObject.name = word[1];\n              } else {\n                _currentObject.name = word[0] + this.Hierarchies.children.length;\n              }\n            } else {\n              _currentObject.name = nameData;\n              _currentObject.type = '';\n            }\n\n            if (_currentObject.type === 'Animation') {\n              _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n\n              var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n\n              endRead = refs.end;\n              _currentObject.children = refs.parent.children;\n            } else {\n              var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n\n              _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n\n              if (findNext <= 0 || findEnd < findNext) {\n                endRead = findEnd + 1;\n              } else {\n                var nextStart = Math.max(DataEnder + 1, find1);\n\n                var _refs = this._hierarchieParse(_currentObject, nextStart);\n\n                endRead = _refs.end;\n                _currentObject.children = _refs.parent.children;\n              }\n            }\n\n            _currentObject.parent = _parent;\n\n            if (_currentObject.type != 'template') {\n              _parent.children.push(_currentObject);\n            }\n          } else {\n            endRead = find1 === -1 ? this._data.length : findEnd + 1;\n            break;\n          }\n        }\n\n        return {\n          parent: _parent,\n          end: endRead\n        };\n      }\n    }, {\n      key: '_mainloop',\n      value: function _mainloop() {\n        var _this2 = this;\n\n        this._mainProc();\n\n        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n          setTimeout(function () {\n            _this2._mainloop();\n          }, 1);\n        } else {\n          setTimeout(function () {\n            _this2.onLoad({\n              models: _this2.Meshes,\n              animations: _this2.animations\n            });\n          }, 1);\n        }\n      }\n    }, {\n      key: '_mainProc',\n      value: function _mainProc() {\n        var breakFlag = false;\n\n        while (true) {\n          if (!this._currentObject.worked) {\n            switch (this._currentObject.type) {\n              case 'template':\n                break;\n\n              case 'AnimTicksPerSecond':\n                this.animTicksPerSecond = parseInt(this._currentObject.data);\n                break;\n\n              case 'Frame':\n                this._setFrame();\n\n                break;\n\n              case 'FrameTransformMatrix':\n                this._setFrameTransformMatrix();\n\n                break;\n\n              case 'Mesh':\n                this._changeRoot();\n\n                this._currentGeo = {};\n                this._currentGeo.name = this._currentObject.name.trim();\n                this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                this._currentGeo.VertexSetedBoneCount = [];\n                this._currentGeo.GeometryData = {\n                  vertices: [],\n                  normals: [],\n                  uvs: [],\n                  skinIndices: [],\n                  skinWeights: [],\n                  indices: [],\n                  materialIndices: []\n                };\n                this._currentGeo.Materials = [];\n                this._currentGeo.normalVectors = [];\n                this._currentGeo.BoneInfs = [];\n                this._currentGeo.baseFrame = this._currentFrame;\n\n                this._makeBoneFrom_CurrentFrame();\n\n                this._readVertexDatas();\n\n                breakFlag = true;\n                break;\n\n              case 'MeshNormals':\n                this._readVertexDatas();\n\n                break;\n\n              case 'MeshTextureCoords':\n                this._setMeshTextureCoords();\n\n                break;\n\n              case 'VertexDuplicationIndices':\n                break;\n\n              case 'MeshMaterialList':\n                this._setMeshMaterialList();\n\n                break;\n\n              case 'Material':\n                this._setMaterial();\n\n                break;\n\n              case 'SkinWeights':\n                this._setSkinWeights();\n\n                break;\n\n              case 'AnimationSet':\n                this._changeRoot();\n\n                this._currentAnime = {};\n                this._currentAnime.name = this._currentObject.name.trim();\n                this._currentAnime.AnimeFrames = [];\n                break;\n\n              case 'Animation':\n                if (this._currentAnimeFrames) {\n                  this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                }\n\n                this._currentAnimeFrames = new XAnimationInfo();\n                this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                break;\n\n              case 'AnimationKey':\n                this._readAnimationKey();\n\n                breakFlag = true;\n                break;\n            }\n\n            this._currentObject.worked = true;\n          }\n\n          if (this._currentObject.children.length > 0) {\n            this._currentObject = this._currentObject.children.shift();\n\n            if (this.debug) {\n              console.log('processing ' + this._currentObject.name);\n            }\n\n            if (breakFlag) break;\n          } else {\n            if (this._currentObject.worked) {\n              if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                this._changeRoot();\n              }\n            }\n\n            if (this._currentObject.parent) {\n              this._currentObject = this._currentObject.parent;\n            } else {\n              breakFlag = true;\n            }\n\n            if (breakFlag) break;\n          }\n        }\n\n        return;\n      }\n    }, {\n      key: '_changeRoot',\n      value: function _changeRoot() {\n        if (this._currentGeo != null && this._currentGeo.name) {\n          this._makeOutputGeometry();\n        }\n\n        this._currentGeo = {};\n\n        if (this._currentAnime != null && this._currentAnime.name) {\n          if (this._currentAnimeFrames) {\n            this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n\n            this._currentAnimeFrames = null;\n          }\n\n          this._makeOutputAnimation();\n        }\n\n        this._currentAnime = {};\n      }\n    }, {\n      key: '_getParentName',\n      value: function _getParentName(_obj) {\n        if (_obj.parent) {\n          if (_obj.parent.name) {\n            return _obj.parent.name;\n          } else {\n            return this._getParentName(_obj.parent);\n          }\n        } else {\n          return '';\n        }\n      }\n    }, {\n      key: '_setFrame',\n      value: function _setFrame() {\n        this._nowFrameName = this._currentObject.name.trim();\n        this._currentFrame = {};\n        this._currentFrame.name = this._nowFrameName;\n        this._currentFrame.children = [];\n\n        if (this._currentObject.parent && this._currentObject.parent.name) {\n          this._currentFrame.parentName = this._currentObject.parent.name;\n        }\n\n        this.frameHierarchie.push(this._nowFrameName);\n        this.HieStack[this._nowFrameName] = this._currentFrame;\n      }\n    }, {\n      key: '_setFrameTransformMatrix',\n      value: function _setFrameTransformMatrix() {\n        this._currentFrame.FrameTransformMatrix = new _three.Matrix4();\n\n        var data = this._currentObject.data.split(',');\n\n        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n\n        this._makeBoneFrom_CurrentFrame();\n      }\n    }, {\n      key: '_makeBoneFrom_CurrentFrame',\n      value: function _makeBoneFrom_CurrentFrame() {\n        if (!this._currentFrame.FrameTransformMatrix) {\n          return;\n        }\n\n        var b = new _three.Bone();\n        b.name = this._currentFrame.name;\n        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n        b.matrixWorld = b.matrix;\n        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n        this._currentFrame.putBone = b;\n\n        if (this._currentFrame.parentName) {\n          for (var frame in this.HieStack) {\n            if (this.HieStack[frame].name === this._currentFrame.parentName) {\n              this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n            }\n          }\n        }\n      }\n    }, {\n      key: '_readVertexDatas',\n      value: function _readVertexDatas() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        var maxLength = 0;\n\n        while (true) {\n          var changeMode = false;\n\n          if (mode_local === 0) {\n            var refO = this._readInt1(endRead);\n\n            endRead = refO.endRead;\n            mode_local = 1;\n            maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;\n\n            if (maxLength <= 0) {\n              maxLength = this._currentObject.data.length;\n            }\n          } else {\n            var find = 0;\n\n            switch (mode) {\n              case 0:\n                find = this._currentObject.data.indexOf(',', endRead) + 1;\n                break;\n\n              case 1:\n                find = this._currentObject.data.indexOf(';,', endRead) + 1;\n                break;\n            }\n\n            if (find === 0 || find > maxLength) {\n              find = maxLength;\n              mode_local = 0;\n              changeMode = true;\n            }\n\n            switch (this._currentObject.type) {\n              case 'Mesh':\n                switch (mode) {\n                  case 0:\n                    this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n\n                  case 1:\n                    this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n                }\n\n                break;\n\n              case 'MeshNormals':\n                switch (mode) {\n                  case 0:\n                    this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n                }\n\n                break;\n            }\n\n            endRead = find + 1;\n\n            if (changeMode) {\n              mode++;\n            }\n          }\n\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_readInt1',\n      value: function _readInt1(start) {\n        var find = this._currentObject.data.indexOf(';', start);\n\n        return {\n          refI: parseInt(this._currentObject.data.substr(start, find - start)),\n          endRead: find + 1\n        };\n      }\n    }, {\n      key: '_readVertex1',\n      value: function _readVertex1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n\n        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n\n        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n\n        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n\n        this._currentGeo.VertexSetedBoneCount.push(0);\n      }\n    }, {\n      key: '_readFace1',\n      value: function _readFace1(line) {\n        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');\n\n        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n      }\n    }, {\n      key: '_readNormalVector1',\n      value: function _readNormalVector1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n\n        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n      }\n    }, {\n      key: '_buildGeometry',\n      value: function _buildGeometry() {\n        var bufferGeometry = new _three.BufferGeometry();\n        var position = [];\n        var normals = [];\n        var uvs = [];\n        var skinIndices = [];\n        var skinWeights = []; //\n\n        var data = this._currentGeo.GeometryData;\n\n        for (var _i7 = 0, l = data.indices.length; _i7 < l; _i7++) {\n          var stride2 = data.indices[_i7] * 2;\n          var stride3 = data.indices[_i7] * 3;\n          var stride4 = data.indices[_i7] * 4;\n          position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n          normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n          skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n          skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n          uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n        } //\n\n\n        bufferGeometry.setAttribute('position', new _three.Float32BufferAttribute(position, 3));\n        bufferGeometry.setAttribute('normal', new _three.Float32BufferAttribute(normals, 3));\n        bufferGeometry.setAttribute('uv', new _three.Float32BufferAttribute(uvs, 2));\n        bufferGeometry.setAttribute('skinIndex', new _three.Uint16BufferAttribute(skinIndices, 4));\n        bufferGeometry.setAttribute('skinWeight', new _three.Float32BufferAttribute(skinWeights, 4));\n\n        this._computeGroups(bufferGeometry, data.materialIndices);\n\n        return bufferGeometry;\n      }\n    }, {\n      key: '_computeGroups',\n      value: function _computeGroups(bufferGeometry, materialIndices) {\n        var group;\n        var groups = [];\n        var materialIndex = undefined;\n\n        for (var _i8 = 0; _i8 < materialIndices.length; _i8++) {\n          var currentMaterialIndex = materialIndices[_i8];\n\n          if (currentMaterialIndex !== materialIndex) {\n            materialIndex = currentMaterialIndex;\n\n            if (group !== undefined) {\n              group.count = _i8 * 3 - group.start;\n              groups.push(group);\n            }\n\n            group = {\n              start: _i8 * 3,\n              materialIndex: materialIndex\n            };\n          }\n        }\n\n        if (group !== undefined) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n\n        bufferGeometry.groups = groups;\n      }\n    }, {\n      key: '_setMeshTextureCoords',\n      value: function _setMeshTextureCoords() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n\n        while (true) {\n          switch (mode) {\n            case 0:\n              if (mode_local === 0) {\n                var refO = this._readInt1(0);\n\n                endRead = refO.endRead;\n                mode_local = 1;\n              } else {\n                var find = this._currentObject.data.indexOf(',', endRead) + 1;\n\n                if (find === 0) {\n                  find = this._currentObject.data.length;\n                  mode = 2;\n                  mode_local = 0;\n                }\n\n                var line = this._currentObject.data.substr(endRead, find - endRead);\n\n                var data = this._readLine(line.trim()).split(';');\n\n                if (this.IsUvYReverse) {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                } else {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                }\n\n                endRead = find + 1;\n              }\n\n              break;\n          }\n\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_setMeshMaterialList',\n      value: function _setMeshMaterialList() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n\n        while (true) {\n          if (mode_local < 2) {\n            var refO = this._readInt1(endRead);\n\n            endRead = refO.endRead;\n            mode_local++;\n          } else {\n            var find = this._currentObject.data.indexOf(';', endRead);\n\n            if (find === -1) {\n              find = this._currentObject.data.length;\n              mode = 3;\n              mode_local = 0;\n            }\n\n            var line = this._currentObject.data.substr(endRead, find - endRead);\n\n            var data = this._readLine(line.trim()).split(',');\n\n            for (var _i9 = 0; _i9 < data.length; _i9++) {\n              this._currentGeo.GeometryData.materialIndices[_i9] = parseInt(data[_i9]);\n            }\n\n            endRead = this._currentObject.data.length;\n          }\n\n          if (endRead >= this._currentObject.data.length || mode >= 3) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_setMaterial',\n      value: function _setMaterial() {\n        var _nowMat = new _three.MeshPhongMaterial({\n          color: Math.random() * 0xffffff\n        });\n\n        _nowMat.side = _three.FrontSide;\n        _nowMat.name = this._currentObject.name;\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';;', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data = this._readLine(line.trim()).split(';');\n\n        _nowMat.color.r = parseFloat(data[0]);\n        _nowMat.color.g = parseFloat(data[1]);\n        _nowMat.color.b = parseFloat(data[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        _nowMat.shininess = parseFloat(this._readLine(line));\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';;', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data2 = this._readLine(line.trim()).split(';');\n\n        _nowMat.specular.r = parseFloat(data2[0]);\n        _nowMat.specular.g = parseFloat(data2[1]);\n        _nowMat.specular.b = parseFloat(data2[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(';;', endRead);\n\n        if (find === -1) {\n          find = this._currentObject.data.length;\n        }\n\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data3 = this._readLine(line.trim()).split(';');\n\n        _nowMat.emissive.r = parseFloat(data3[0]);\n        _nowMat.emissive.g = parseFloat(data3[1]);\n        _nowMat.emissive.b = parseFloat(data3[2]);\n        var localObject = null;\n\n        while (true) {\n          if (this._currentObject.children.length > 0) {\n            localObject = this._currentObject.children.shift();\n\n            if (this.debug) {\n              console.log('processing ' + localObject.name);\n            }\n\n            var fileName = localObject.data.substr(1, localObject.data.length - 2);\n\n            switch (localObject.type) {\n              case 'TextureFilename':\n                _nowMat.map = this.texloader.load(fileName);\n                break;\n\n              case 'BumpMapFilename':\n                _nowMat.bumpMap = this.texloader.load(fileName);\n                _nowMat.bumpScale = 0.05;\n                break;\n\n              case 'NormalMapFilename':\n                _nowMat.normalMap = this.texloader.load(fileName);\n                _nowMat.normalScale = new _three.Vector2(2, 2);\n                break;\n\n              case 'EmissiveMapFilename':\n                _nowMat.emissiveMap = this.texloader.load(fileName);\n                break;\n\n              case 'LightMapFilename':\n                _nowMat.lightMap = this.texloader.load(fileName);\n                break;\n            }\n          } else {\n            break;\n          }\n        }\n\n        this._currentGeo.Materials.push(_nowMat);\n      }\n    }, {\n      key: '_setSkinWeights',\n      value: function _setSkinWeights() {\n        var boneInf = new XboneInf();\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        endRead = find + 1;\n        boneInf.boneName = line.substr(1, line.length - 2);\n        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n        find = this._currentObject.data.indexOf(';', endRead);\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data = this._readLine(line.trim()).split(',');\n\n        for (var _i10 = 0; _i10 < data.length; _i10++) {\n          boneInf.Indeces.push(parseInt(data[_i10]));\n        }\n\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data2 = this._readLine(line.trim()).split(',');\n\n        for (var _i = 0; _i < data2.length; _i++) {\n          boneInf.Weights.push(parseFloat(data2[_i]));\n        }\n\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n\n        if (find <= 0) {\n          find = this._currentObject.data.length;\n        }\n\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data3 = this._readLine(line.trim()).split(',');\n\n        boneInf.OffsetMatrix = new _three.Matrix4();\n\n        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n\n        this._currentGeo.BoneInfs.push(boneInf);\n      }\n    }, {\n      key: '_makePutBoneList',\n      value: function _makePutBoneList(_RootName, _bones) {\n        var putting = false;\n\n        for (var frame in this.HieStack) {\n          if (this.HieStack[frame].name === _RootName || putting) {\n            putting = true;\n            var b = new _three.Bone();\n            b.name = this.HieStack[frame].name;\n            b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n            b.matrixWorld = b.matrix;\n            b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n            b.pos = new _three.Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray();\n            b.rotq = new _three.Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray();\n            b.scl = new _three.Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray();\n\n            if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n              for (var _i11 = 0; _i11 < _bones.length; _i11++) {\n                if (this.HieStack[frame].parentName === _bones[_i11].name) {\n                  _bones[_i11].add(b);\n\n                  b.parent = _i11;\n                  break;\n                }\n              }\n            }\n\n            _bones.push(b);\n          }\n        }\n      }\n    }, {\n      key: '_makeOutputGeometry',\n      value: function _makeOutputGeometry() {\n        var mesh = null;\n\n        if (this._currentGeo.BoneInfs.length > 0) {\n          var putBones = [];\n\n          this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n\n          for (var bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n            var boneIndex = 0;\n\n            for (var bb = 0; bb < putBones.length; bb++) {\n              if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                boneIndex = bb;\n                putBones[bb].OffsetMatrix = new _three.Matrix4();\n                putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                break;\n              }\n            }\n\n            for (var vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n              var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n              var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n              var stride = nowVertexID * 4;\n\n              switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                case 0:\n                  this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                  break;\n\n                case 1:\n                  this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                  break;\n\n                case 2:\n                  this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                  break;\n\n                case 3:\n                  this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                  break;\n              }\n\n              this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n\n              if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                console.log('warn! over 4 bone weight! :' + nowVertexID);\n              }\n            }\n          }\n\n          for (var sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n            this._currentGeo.Materials[sk].skinning = true;\n          }\n\n          var offsetList = [];\n\n          for (var _bi = 0; _bi < putBones.length; _bi++) {\n            if (putBones[_bi].OffsetMatrix) {\n              offsetList.push(putBones[_bi].OffsetMatrix);\n            } else {\n              offsetList.push(new _three.Matrix4());\n            }\n          }\n\n          var bufferGeometry = this._buildGeometry();\n\n          mesh = new _three.SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n\n          this._initSkeleton(mesh, putBones, offsetList);\n        } else {\n          var _bufferGeometry = this._buildGeometry();\n\n          mesh = new _three.Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n        }\n\n        mesh.name = this._currentGeo.name;\n        var worldBaseMx = new _three.Matrix4();\n        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n\n        if (currentMxFrame && currentMxFrame.parent) {\n          while (true) {\n            currentMxFrame = currentMxFrame.parent;\n\n            if (currentMxFrame) {\n              worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n            } else {\n              break;\n            }\n          }\n\n          mesh.applyMatrix4(worldBaseMx);\n        }\n\n        this.Meshes.push(mesh);\n      }\n    }, {\n      key: '_initSkeleton',\n      value: function _initSkeleton(mesh, boneList, boneInverses) {\n        var bones = [],\n            bone,\n            gbone;\n        var i, il;\n\n        for (i = 0, il = boneList.length; i < il; i++) {\n          gbone = boneList[i];\n          bone = new _three.Bone();\n          bones.push(bone);\n          bone.name = gbone.name;\n          bone.position.fromArray(gbone.pos);\n          bone.quaternion.fromArray(gbone.rotq);\n          if (gbone.scl !== undefined) bone.scale.fromArray(gbone.scl);\n        }\n\n        for (i = 0, il = boneList.length; i < il; i++) {\n          gbone = boneList[i];\n\n          if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n            bones[gbone.parent].add(bones[i]);\n          } else {\n            mesh.add(bones[i]);\n          }\n        }\n\n        mesh.updateMatrixWorld(true);\n        var skeleton = new _three.Skeleton(bones, boneInverses);\n        mesh.bind(skeleton, mesh.matrixWorld);\n      }\n    }, {\n      key: '_readAnimationKey',\n      value: function _readAnimationKey() {\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        endRead = find + 1;\n        var nowKeyType = parseInt(this._readLine(line));\n        find = this._currentObject.data.indexOf(';', endRead);\n        endRead = find + 1;\n        line = this._currentObject.data.substr(endRead);\n\n        var data = this._readLine(line.trim()).split(';;,');\n\n        for (var _i12 = 0; _i12 < data.length; _i12++) {\n          var data2 = data[_i12].split(';');\n\n          var keyInfo = new XKeyFrameInfo();\n          keyInfo.type = nowKeyType;\n          keyInfo.Frame = parseInt(data2[0]);\n          keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n          keyInfo.time = keyInfo.Frame;\n\n          if (nowKeyType != 4) {\n            var frameFound = false;\n\n            for (var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n              if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                frameFound = true;\n                break;\n              }\n            }\n\n            var frameValue = data2[2].split(',');\n\n            switch (nowKeyType) {\n              case 0:\n                keyInfo.rot = new _three.Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                break;\n\n              case 1:\n                keyInfo.scl = new _three.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n\n              case 2:\n                keyInfo.pos = new _three.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n            }\n\n            if (!frameFound) {\n              this._currentAnimeFrames.keyFrames.push(keyInfo);\n            }\n          } else {\n            keyInfo.matrix = new _three.Matrix4();\n\n            this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));\n\n            this._currentAnimeFrames.keyFrames.push(keyInfo);\n          }\n        }\n      }\n    }, {\n      key: '_makeOutputAnimation',\n      value: function _makeOutputAnimation() {\n        var animationObj = new XAnimationObj(this.options);\n        animationObj.fps = this.animTicksPerSecond;\n        animationObj.name = this._currentAnime.name;\n        animationObj.make(this._currentAnime.AnimeFrames);\n        this.animations.push(animationObj);\n      }\n    }, {\n      key: 'assignAnimation',\n      value: function assignAnimation(_model, _animation) {\n        var model = _model;\n        var animation = _animation;\n\n        if (!model) {\n          model = this.Meshes[0];\n        }\n\n        if (!animation) {\n          animation = this.animations[0];\n        }\n\n        if (!model || !animation) {\n          return null;\n        }\n\n        var put = {};\n        put.fps = animation.fps;\n        put.name = animation.name;\n        put.length = animation.length;\n        put.hierarchy = [];\n\n        for (var b = 0; b < model.skeleton.bones.length; b++) {\n          var findAnimation = false;\n\n          for (var _i13 = 0; _i13 < animation.hierarchy.length; _i13++) {\n            if (model.skeleton.bones[b].name === animation.hierarchy[_i13].name) {\n              findAnimation = true;\n\n              var c_key = animation.hierarchy[_i13].copy();\n\n              c_key.parent = -1;\n\n              if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {\n                for (var bb = 0; bb < put.hierarchy.length; bb++) {\n                  if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                    c_key.parent = bb;\n                    c_key.parentName = model.skeleton.bones[b].parent.name;\n                  }\n                }\n              }\n\n              put.hierarchy.push(c_key);\n              break;\n            }\n          }\n\n          if (!findAnimation) {\n            var _c_key = animation.hierarchy[0].copy();\n\n            _c_key.name = model.skeleton.bones[b].name;\n            _c_key.parent = -1;\n\n            for (var k = 0; k < _c_key.keys.length; k++) {\n              if (_c_key.keys[k].pos) {\n                _c_key.keys[k].pos.set(0, 0, 0);\n              }\n\n              if (_c_key.keys[k].scl) {\n                _c_key.keys[k].scl.set(1, 1, 1);\n              }\n\n              if (_c_key.keys[k].rot) {\n                _c_key.keys[k].rot.set(0, 0, 0, 1);\n              }\n            }\n\n            put.hierarchy.push(_c_key);\n          }\n        }\n\n        if (!model.geometry.animations) {\n          model.geometry.animations = [];\n        }\n\n        model.geometry.animations.push(_three.AnimationClip.parseAnimation(put, model.skeleton.bones));\n\n        if (!model.animationMixer) {\n          model.animationMixer = new _three.AnimationMixer(model);\n        }\n\n        return put;\n      }\n    }, {\n      key: '_ParseMatrixData',\n      value: function _ParseMatrixData(targetMatrix, data) {\n        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n      }\n    }]);\n    return XLoader;\n  }();\n\n  return XLoader;\n}();\n\nexports.XLoader = XLoader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["GeometryData","baseFrame","lightMap","animeName","map","parentName","frameHierarchie","pos","url","_nowFrameName","keys","index","copy","Weights","putRot","skinning","_currentFrame","uvs","side","materialIndices","key","matrix","parent","children","__esModule","_currentObject","_data","VertexSetedBoneCount","frameStartLv","OffsetMatrix","Meshes","normalMap","keyType","bumpMap","IsUvYReverse","count","Materials","_nowMat","InverseMx","rot","_currentAnimeFrames","skinIndices","FrameTransformMatrix","texloader","normals","name","hierarchy","configurable","emissiveMap","_putMatLength","value","enumerable","vertices","materialIndex","putScl","initMatrix","start","putFlags","writable","debug","shininess","animationMixer","scl","time","refI","targetBone","length","skinWeights","BoneIndex","animations","type","b","r","normalVectors","g","keyFrames","fps","Frame","bumpScale","worked","onLoad","rotq","models","_currentAnime","endRead","Indeces","options","Hierarchies","HieStack","data","putBone","color","animTicksPerSecond","groups","boneName","XLoader","end","AnimeFrames","normalScale","_currentGeo","BoneInfs","indices","putPos","matrixWorld"]],"~:compiled-at",1630917515624,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$loaders$XLoader.js\",\n\"lineCount\":53,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/loaders/XLoader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$loaders$XLoader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.XLoader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar XLoader = function () {\\n  var classCallCheck = function classCallCheck(instance, Constructor) {\\n    if (!(instance instanceof Constructor)) {\\n      throw new TypeError('Cannot call a class as a function');\\n    }\\n  };\\n\\n  var createClass = function () {\\n    function defineProperties(target, props) {\\n      for (var _i2 = 0; _i2 < props.length; _i2++) {\\n        var descriptor = props[_i2];\\n        descriptor.enumerable = descriptor.enumerable || false;\\n        descriptor.configurable = true;\\n        if ('value' in descriptor) descriptor.writable = true;\\n        Object.defineProperty(target, descriptor.key, descriptor);\\n      }\\n    }\\n\\n    return function (Constructor, protoProps, staticProps) {\\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\\n      if (staticProps) defineProperties(Constructor, staticProps);\\n      return Constructor;\\n    };\\n  }();\\n\\n  var XboneInf = function XboneInf() {\\n    classCallCheck(this, XboneInf);\\n    this.boneName = '';\\n    this.BoneIndex = 0;\\n    this.Indeces = [];\\n    this.Weights = [];\\n    this.initMatrix = null;\\n    this.OffsetMatrix = null;\\n  };\\n\\n  var XAnimationInfo = function XAnimationInfo() {\\n    classCallCheck(this, XAnimationInfo);\\n    this.animeName = '';\\n    this.boneName = '';\\n    this.targetBone = null;\\n    this.keyType = 4;\\n    this.frameStartLv = 0;\\n    this.keyFrames = [];\\n    this.InverseMx = null;\\n  };\\n\\n  var XAnimationObj = function () {\\n    function XAnimationObj(_flags) {\\n      classCallCheck(this, XAnimationObj);\\n      this.fps = 30;\\n      this.name = 'xanimation';\\n      this.length = 0;\\n      this.hierarchy = [];\\n      this.putFlags = _flags;\\n\\n      if (this.putFlags.putPos === undefined) {\\n        this.putFlags.putPos = true;\\n      }\\n\\n      if (this.putFlags.putRot === undefined) {\\n        this.putFlags.putRot = true;\\n      }\\n\\n      if (this.putFlags.putScl === undefined) {\\n        this.putFlags.putScl = true;\\n      }\\n    }\\n\\n    createClass(XAnimationObj, [{\\n      key: 'make',\\n      value: function make(XAnimationInfoArray) {\\n        for (var _i3 = 0; _i3 < XAnimationInfoArray.length; _i3++) {\\n          this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[_i3]));\\n        }\\n\\n        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\\n      }\\n    }, {\\n      key: 'clone',\\n      value: function clone() {\\n        return Object.assign({}, this);\\n      }\\n    }, {\\n      key: 'makeBonekeys',\\n      value: function makeBonekeys(XAnimationInfo) {\\n        var refObj = {};\\n        refObj.name = XAnimationInfo.boneName;\\n        refObj.parent = '';\\n        refObj.keys = this.keyFrameRefactor(XAnimationInfo);\\n\\n        refObj.copy = function () {\\n          return Object.assign({}, this);\\n        };\\n\\n        return refObj;\\n      }\\n    }, {\\n      key: 'keyFrameRefactor',\\n      value: function keyFrameRefactor(XAnimationInfo) {\\n        var keys = [];\\n\\n        for (var _i4 = 0; _i4 < XAnimationInfo.keyFrames.length; _i4++) {\\n          var keyframe = {};\\n          keyframe.time = XAnimationInfo.keyFrames[_i4].time * this.fps;\\n\\n          if (XAnimationInfo.keyFrames[_i4].pos && this.putFlags.putPos) {\\n            keyframe.pos = XAnimationInfo.keyFrames[_i4].pos;\\n          }\\n\\n          if (XAnimationInfo.keyFrames[_i4].rot && this.putFlags.putRot) {\\n            keyframe.rot = XAnimationInfo.keyFrames[_i4].rot;\\n          }\\n\\n          if (XAnimationInfo.keyFrames[_i4].scl && this.putFlags.putScl) {\\n            keyframe.scl = XAnimationInfo.keyFrames[_i4].scl;\\n          }\\n\\n          if (XAnimationInfo.keyFrames[_i4].matrix) {\\n            keyframe.matrix = XAnimationInfo.keyFrames[_i4].matrix;\\n\\n            if (this.putFlags.putPos) {\\n              keyframe.pos = new _three.Vector3().setFromMatrixPosition(keyframe.matrix);\\n            }\\n\\n            if (this.putFlags.putRot) {\\n              keyframe.rot = new _three.Quaternion().setFromRotationMatrix(keyframe.matrix);\\n            }\\n\\n            if (this.putFlags.putScl) {\\n              keyframe.scl = new _three.Vector3().setFromMatrixScale(keyframe.matrix);\\n            }\\n          }\\n\\n          keys.push(keyframe);\\n        }\\n\\n        return keys;\\n      }\\n    }]);\\n    return XAnimationObj;\\n  }();\\n\\n  var XKeyFrameInfo = function XKeyFrameInfo() {\\n    classCallCheck(this, XKeyFrameInfo);\\n    this.index = 0;\\n    this.Frame = 0;\\n    this.time = 0.0;\\n    this.matrix = null;\\n  };\\n\\n  var XLoader = function () {\\n    function XLoader(manager) {\\n      _three.Loader.call(this, manager);\\n\\n      classCallCheck(this, XLoader);\\n      this.debug = false;\\n      this.texloader = new _three.TextureLoader(this.manager);\\n      this.url = '';\\n      this._putMatLength = 0;\\n      this._nowMat = null;\\n      this._nowFrameName = '';\\n      this.frameHierarchie = [];\\n      this.Hierarchies = {};\\n      this.HieStack = [];\\n      this._currentObject = {};\\n      this._currentFrame = {};\\n      this._data = null;\\n      this.onLoad = null;\\n      this.IsUvYReverse = true;\\n      this.Meshes = [];\\n      this.animations = [];\\n      this.animTicksPerSecond = 30;\\n      this._currentGeo = null;\\n      this._currentAnime = null;\\n      this._currentAnimeFrames = null;\\n    }\\n\\n    createClass(XLoader, [{\\n      key: '_setArgOption',\\n      value: function _setArgOption(_arg) {\\n        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n\\n        if (!_arg) {\\n          return;\\n        }\\n\\n        for (var _i5 = _start; _i5 < _arg.length; _i5++) {\\n          switch (_i5) {\\n            case 0:\\n              this.url = _arg[_i5];\\n              break;\\n\\n            case 1:\\n              this.options = _arg[_i5];\\n              break;\\n          }\\n        }\\n\\n        if (this.options === undefined) {\\n          this.options = {};\\n        }\\n      }\\n    }, {\\n      key: 'load',\\n      value: function load(_arg, onLoad, onProgress, onError) {\\n        var _this = this;\\n\\n        this._setArgOption(_arg);\\n\\n        var loader = new _three.FileLoader(this.manager);\\n        loader.setPath(this.path);\\n        loader.setResponseType('arraybuffer');\\n        loader.setRequestHeader(this.requestHeader);\\n        loader.setWithCredentials(this.withCredentials);\\n        loader.load(this.url, function (response) {\\n          try {\\n            _this.parse(response, onLoad);\\n          } catch (e) {\\n            if (onError) {\\n              onError(e);\\n            } else {\\n              console.error(e);\\n            }\\n\\n            _this.manager.itemError(_this.url);\\n          }\\n        }, onProgress, onError);\\n      }\\n    }, {\\n      key: '_readLine',\\n      value: function _readLine(line) {\\n        var readed = 0;\\n\\n        while (true) {\\n          var find = -1;\\n          find = line.indexOf('//', readed);\\n\\n          if (find === -1) {\\n            find = line.indexOf('#', readed);\\n          }\\n\\n          if (find > -1 && find < 2) {\\n            var foundNewLine = -1;\\n            foundNewLine = line.indexOf('\\\\r\\\\n', readed);\\n\\n            if (foundNewLine > 0) {\\n              readed = foundNewLine + 2;\\n            } else {\\n              foundNewLine = line.indexOf('\\\\r', readed);\\n\\n              if (foundNewLine > 0) {\\n                readed = foundNewLine + 1;\\n              } else {\\n                readed = line.indexOf('\\\\n', readed) + 1;\\n              }\\n            }\\n          } else {\\n            break;\\n          }\\n        }\\n\\n        return line.substr(readed);\\n      }\\n    }, {\\n      key: '_readLine',\\n      value: function _readLine(line) {\\n        var readed = 0;\\n\\n        while (true) {\\n          var find = -1;\\n          find = line.indexOf('//', readed);\\n\\n          if (find === -1) {\\n            find = line.indexOf('#', readed);\\n          }\\n\\n          if (find > -1 && find < 2) {\\n            var foundNewLine = -1;\\n            foundNewLine = line.indexOf('\\\\r\\\\n', readed);\\n\\n            if (foundNewLine > 0) {\\n              readed = foundNewLine + 2;\\n            } else {\\n              foundNewLine = line.indexOf('\\\\r', readed);\\n\\n              if (foundNewLine > 0) {\\n                readed = foundNewLine + 1;\\n              } else {\\n                readed = line.indexOf('\\\\n', readed) + 1;\\n              }\\n            }\\n          } else {\\n            break;\\n          }\\n        }\\n\\n        return line.substr(readed);\\n      }\\n    }, {\\n      key: '_isBinary',\\n      value: function _isBinary(binData) {\\n        var reader = new DataView(binData);\\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\\n        var n_faces = reader.getUint32(80, true);\\n        var expect = 80 + 32 / 8 + n_faces * face_size;\\n\\n        if (expect === reader.byteLength) {\\n          return true;\\n        }\\n\\n        var fileLength = reader.byteLength;\\n\\n        for (var index = 0; index < fileLength; index++) {\\n          if (reader.getUint8(index, false) > 127) {\\n            return true;\\n          }\\n        }\\n\\n        return false;\\n      }\\n    }, {\\n      key: '_ensureBinary',\\n      value: function _ensureBinary(buf) {\\n        if (typeof buf === 'string') {\\n          var array_buffer = new Uint8Array(buf.length);\\n\\n          for (var _i6 = 0; _i6 < buf.length; _i6++) {\\n            array_buffer[_i6] = buf.charCodeAt(_i6) & 0xff;\\n          }\\n\\n          return array_buffer.buffer || array_buffer;\\n        } else {\\n          return buf;\\n        }\\n      }\\n    }, {\\n      key: '_ensureString',\\n      value: function _ensureString(buf) {\\n        if (typeof buf !== 'string') {\\n          return _three.LoaderUtils.decodeText(new Uint8Array(buf));\\n        } else {\\n          return buf;\\n        }\\n      }\\n    }, {\\n      key: 'parse',\\n      value: function _parse(data, onLoad) {\\n        var binData = this._ensureBinary(data);\\n\\n        this._data = this._ensureString(data);\\n        this.onLoad = onLoad;\\n        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\\n      }\\n    }, {\\n      key: '_parseBinary',\\n      value: function _parseBinary(data) {\\n        return this._parseASCII(_three.LoaderUtils.decodeText(new Uint8Array(data)));\\n      }\\n    }, {\\n      key: '_parseASCII',\\n      value: function _parseASCII() {\\n        var path;\\n\\n        if (this.resourcePath !== '') {\\n          path = this.resourcePath;\\n        } else if (this.path !== '') {\\n          path = this.path;\\n        } else {\\n          path = _three.LoaderUtils.extractUrlBase(this.url);\\n        }\\n\\n        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\\n        var endRead = 16;\\n        this.Hierarchies.children = [];\\n\\n        this._hierarchieParse(this.Hierarchies, endRead);\\n\\n        this._changeRoot();\\n\\n        this._currentObject = this.Hierarchies.children.shift();\\n\\n        this._mainloop();\\n      }\\n    }, {\\n      key: '_hierarchieParse',\\n      value: function _hierarchieParse(_parent, _end) {\\n        var endRead = _end;\\n\\n        while (true) {\\n          var find1 = this._data.indexOf('{', endRead) + 1;\\n\\n          var findEnd = this._data.indexOf('}', endRead);\\n\\n          var findNext = this._data.indexOf('{', find1) + 1;\\n\\n          if (find1 > 0 && findEnd > find1) {\\n            var _currentObject = {};\\n            _currentObject.children = [];\\n\\n            var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\\n\\n            var word = nameData.split(/ /g);\\n\\n            if (word.length > 0) {\\n              _currentObject.type = word[0];\\n\\n              if (word.length >= 2) {\\n                _currentObject.name = word[1];\\n              } else {\\n                _currentObject.name = word[0] + this.Hierarchies.children.length;\\n              }\\n            } else {\\n              _currentObject.name = nameData;\\n              _currentObject.type = '';\\n            }\\n\\n            if (_currentObject.type === 'Animation') {\\n              _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\\n\\n              var refs = this._hierarchieParse(_currentObject, findEnd + 1);\\n\\n              endRead = refs.end;\\n              _currentObject.children = refs.parent.children;\\n            } else {\\n              var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\\n\\n              _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\\n\\n              if (findNext <= 0 || findEnd < findNext) {\\n                endRead = findEnd + 1;\\n              } else {\\n                var nextStart = Math.max(DataEnder + 1, find1);\\n\\n                var _refs = this._hierarchieParse(_currentObject, nextStart);\\n\\n                endRead = _refs.end;\\n                _currentObject.children = _refs.parent.children;\\n              }\\n            }\\n\\n            _currentObject.parent = _parent;\\n\\n            if (_currentObject.type != 'template') {\\n              _parent.children.push(_currentObject);\\n            }\\n          } else {\\n            endRead = find1 === -1 ? this._data.length : findEnd + 1;\\n            break;\\n          }\\n        }\\n\\n        return {\\n          parent: _parent,\\n          end: endRead\\n        };\\n      }\\n    }, {\\n      key: '_mainloop',\\n      value: function _mainloop() {\\n        var _this2 = this;\\n\\n        this._mainProc();\\n\\n        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\\n          setTimeout(function () {\\n            _this2._mainloop();\\n          }, 1);\\n        } else {\\n          setTimeout(function () {\\n            _this2.onLoad({\\n              models: _this2.Meshes,\\n              animations: _this2.animations\\n            });\\n          }, 1);\\n        }\\n      }\\n    }, {\\n      key: '_mainProc',\\n      value: function _mainProc() {\\n        var breakFlag = false;\\n\\n        while (true) {\\n          if (!this._currentObject.worked) {\\n            switch (this._currentObject.type) {\\n              case 'template':\\n                break;\\n\\n              case 'AnimTicksPerSecond':\\n                this.animTicksPerSecond = parseInt(this._currentObject.data);\\n                break;\\n\\n              case 'Frame':\\n                this._setFrame();\\n\\n                break;\\n\\n              case 'FrameTransformMatrix':\\n                this._setFrameTransformMatrix();\\n\\n                break;\\n\\n              case 'Mesh':\\n                this._changeRoot();\\n\\n                this._currentGeo = {};\\n                this._currentGeo.name = this._currentObject.name.trim();\\n                this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\\n                this._currentGeo.VertexSetedBoneCount = [];\\n                this._currentGeo.GeometryData = {\\n                  vertices: [],\\n                  normals: [],\\n                  uvs: [],\\n                  skinIndices: [],\\n                  skinWeights: [],\\n                  indices: [],\\n                  materialIndices: []\\n                };\\n                this._currentGeo.Materials = [];\\n                this._currentGeo.normalVectors = [];\\n                this._currentGeo.BoneInfs = [];\\n                this._currentGeo.baseFrame = this._currentFrame;\\n\\n                this._makeBoneFrom_CurrentFrame();\\n\\n                this._readVertexDatas();\\n\\n                breakFlag = true;\\n                break;\\n\\n              case 'MeshNormals':\\n                this._readVertexDatas();\\n\\n                break;\\n\\n              case 'MeshTextureCoords':\\n                this._setMeshTextureCoords();\\n\\n                break;\\n\\n              case 'VertexDuplicationIndices':\\n                break;\\n\\n              case 'MeshMaterialList':\\n                this._setMeshMaterialList();\\n\\n                break;\\n\\n              case 'Material':\\n                this._setMaterial();\\n\\n                break;\\n\\n              case 'SkinWeights':\\n                this._setSkinWeights();\\n\\n                break;\\n\\n              case 'AnimationSet':\\n                this._changeRoot();\\n\\n                this._currentAnime = {};\\n                this._currentAnime.name = this._currentObject.name.trim();\\n                this._currentAnime.AnimeFrames = [];\\n                break;\\n\\n              case 'Animation':\\n                if (this._currentAnimeFrames) {\\n                  this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\\n                }\\n\\n                this._currentAnimeFrames = new XAnimationInfo();\\n                this._currentAnimeFrames.boneName = this._currentObject.data.trim();\\n                break;\\n\\n              case 'AnimationKey':\\n                this._readAnimationKey();\\n\\n                breakFlag = true;\\n                break;\\n            }\\n\\n            this._currentObject.worked = true;\\n          }\\n\\n          if (this._currentObject.children.length > 0) {\\n            this._currentObject = this._currentObject.children.shift();\\n\\n            if (this.debug) {\\n              console.log('processing ' + this._currentObject.name);\\n            }\\n\\n            if (breakFlag) break;\\n          } else {\\n            if (this._currentObject.worked) {\\n              if (this._currentObject.parent && !this._currentObject.parent.parent) {\\n                this._changeRoot();\\n              }\\n            }\\n\\n            if (this._currentObject.parent) {\\n              this._currentObject = this._currentObject.parent;\\n            } else {\\n              breakFlag = true;\\n            }\\n\\n            if (breakFlag) break;\\n          }\\n        }\\n\\n        return;\\n      }\\n    }, {\\n      key: '_changeRoot',\\n      value: function _changeRoot() {\\n        if (this._currentGeo != null && this._currentGeo.name) {\\n          this._makeOutputGeometry();\\n        }\\n\\n        this._currentGeo = {};\\n\\n        if (this._currentAnime != null && this._currentAnime.name) {\\n          if (this._currentAnimeFrames) {\\n            this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\\n\\n            this._currentAnimeFrames = null;\\n          }\\n\\n          this._makeOutputAnimation();\\n        }\\n\\n        this._currentAnime = {};\\n      }\\n    }, {\\n      key: '_getParentName',\\n      value: function _getParentName(_obj) {\\n        if (_obj.parent) {\\n          if (_obj.parent.name) {\\n            return _obj.parent.name;\\n          } else {\\n            return this._getParentName(_obj.parent);\\n          }\\n        } else {\\n          return '';\\n        }\\n      }\\n    }, {\\n      key: '_setFrame',\\n      value: function _setFrame() {\\n        this._nowFrameName = this._currentObject.name.trim();\\n        this._currentFrame = {};\\n        this._currentFrame.name = this._nowFrameName;\\n        this._currentFrame.children = [];\\n\\n        if (this._currentObject.parent && this._currentObject.parent.name) {\\n          this._currentFrame.parentName = this._currentObject.parent.name;\\n        }\\n\\n        this.frameHierarchie.push(this._nowFrameName);\\n        this.HieStack[this._nowFrameName] = this._currentFrame;\\n      }\\n    }, {\\n      key: '_setFrameTransformMatrix',\\n      value: function _setFrameTransformMatrix() {\\n        this._currentFrame.FrameTransformMatrix = new _three.Matrix4();\\n\\n        var data = this._currentObject.data.split(',');\\n\\n        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\\n\\n        this._makeBoneFrom_CurrentFrame();\\n      }\\n    }, {\\n      key: '_makeBoneFrom_CurrentFrame',\\n      value: function _makeBoneFrom_CurrentFrame() {\\n        if (!this._currentFrame.FrameTransformMatrix) {\\n          return;\\n        }\\n\\n        var b = new _three.Bone();\\n        b.name = this._currentFrame.name;\\n        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\\n        b.matrixWorld = b.matrix;\\n        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\\n        this._currentFrame.putBone = b;\\n\\n        if (this._currentFrame.parentName) {\\n          for (var frame in this.HieStack) {\\n            if (this.HieStack[frame].name === this._currentFrame.parentName) {\\n              this.HieStack[frame].putBone.add(this._currentFrame.putBone);\\n            }\\n          }\\n        }\\n      }\\n    }, {\\n      key: '_readVertexDatas',\\n      value: function _readVertexDatas() {\\n        var endRead = 0;\\n        var mode = 0;\\n        var mode_local = 0;\\n        var maxLength = 0;\\n\\n        while (true) {\\n          var changeMode = false;\\n\\n          if (mode_local === 0) {\\n            var refO = this._readInt1(endRead);\\n\\n            endRead = refO.endRead;\\n            mode_local = 1;\\n            maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;\\n\\n            if (maxLength <= 0) {\\n              maxLength = this._currentObject.data.length;\\n            }\\n          } else {\\n            var find = 0;\\n\\n            switch (mode) {\\n              case 0:\\n                find = this._currentObject.data.indexOf(',', endRead) + 1;\\n                break;\\n\\n              case 1:\\n                find = this._currentObject.data.indexOf(';,', endRead) + 1;\\n                break;\\n            }\\n\\n            if (find === 0 || find > maxLength) {\\n              find = maxLength;\\n              mode_local = 0;\\n              changeMode = true;\\n            }\\n\\n            switch (this._currentObject.type) {\\n              case 'Mesh':\\n                switch (mode) {\\n                  case 0:\\n                    this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\\n\\n                    break;\\n\\n                  case 1:\\n                    this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\\n\\n                    break;\\n                }\\n\\n                break;\\n\\n              case 'MeshNormals':\\n                switch (mode) {\\n                  case 0:\\n                    this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\\n\\n                    break;\\n                }\\n\\n                break;\\n            }\\n\\n            endRead = find + 1;\\n\\n            if (changeMode) {\\n              mode++;\\n            }\\n          }\\n\\n          if (endRead >= this._currentObject.data.length) {\\n            break;\\n          }\\n        }\\n      }\\n    }, {\\n      key: '_readInt1',\\n      value: function _readInt1(start) {\\n        var find = this._currentObject.data.indexOf(';', start);\\n\\n        return {\\n          refI: parseInt(this._currentObject.data.substr(start, find - start)),\\n          endRead: find + 1\\n        };\\n      }\\n    }, {\\n      key: '_readVertex1',\\n      value: function _readVertex1(line) {\\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\\n\\n        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\\n\\n        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\\n\\n        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\\n\\n        this._currentGeo.VertexSetedBoneCount.push(0);\\n      }\\n    }, {\\n      key: '_readFace1',\\n      value: function _readFace1(line) {\\n        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');\\n\\n        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\\n      }\\n    }, {\\n      key: '_readNormalVector1',\\n      value: function _readNormalVector1(line) {\\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\\n\\n        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\\n      }\\n    }, {\\n      key: '_buildGeometry',\\n      value: function _buildGeometry() {\\n        var bufferGeometry = new _three.BufferGeometry();\\n        var position = [];\\n        var normals = [];\\n        var uvs = [];\\n        var skinIndices = [];\\n        var skinWeights = []; //\\n\\n        var data = this._currentGeo.GeometryData;\\n\\n        for (var _i7 = 0, l = data.indices.length; _i7 < l; _i7++) {\\n          var stride2 = data.indices[_i7] * 2;\\n          var stride3 = data.indices[_i7] * 3;\\n          var stride4 = data.indices[_i7] * 4;\\n          position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\\n          normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\\n          skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\\n          skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\\n          uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\\n        } //\\n\\n\\n        bufferGeometry.setAttribute('position', new _three.Float32BufferAttribute(position, 3));\\n        bufferGeometry.setAttribute('normal', new _three.Float32BufferAttribute(normals, 3));\\n        bufferGeometry.setAttribute('uv', new _three.Float32BufferAttribute(uvs, 2));\\n        bufferGeometry.setAttribute('skinIndex', new _three.Uint16BufferAttribute(skinIndices, 4));\\n        bufferGeometry.setAttribute('skinWeight', new _three.Float32BufferAttribute(skinWeights, 4));\\n\\n        this._computeGroups(bufferGeometry, data.materialIndices);\\n\\n        return bufferGeometry;\\n      }\\n    }, {\\n      key: '_computeGroups',\\n      value: function _computeGroups(bufferGeometry, materialIndices) {\\n        var group;\\n        var groups = [];\\n        var materialIndex = undefined;\\n\\n        for (var _i8 = 0; _i8 < materialIndices.length; _i8++) {\\n          var currentMaterialIndex = materialIndices[_i8];\\n\\n          if (currentMaterialIndex !== materialIndex) {\\n            materialIndex = currentMaterialIndex;\\n\\n            if (group !== undefined) {\\n              group.count = _i8 * 3 - group.start;\\n              groups.push(group);\\n            }\\n\\n            group = {\\n              start: _i8 * 3,\\n              materialIndex: materialIndex\\n            };\\n          }\\n        }\\n\\n        if (group !== undefined) {\\n          group.count = i * 3 - group.start;\\n          groups.push(group);\\n        }\\n\\n        bufferGeometry.groups = groups;\\n      }\\n    }, {\\n      key: '_setMeshTextureCoords',\\n      value: function _setMeshTextureCoords() {\\n        var endRead = 0;\\n        var mode = 0;\\n        var mode_local = 0;\\n\\n        while (true) {\\n          switch (mode) {\\n            case 0:\\n              if (mode_local === 0) {\\n                var refO = this._readInt1(0);\\n\\n                endRead = refO.endRead;\\n                mode_local = 1;\\n              } else {\\n                var find = this._currentObject.data.indexOf(',', endRead) + 1;\\n\\n                if (find === 0) {\\n                  find = this._currentObject.data.length;\\n                  mode = 2;\\n                  mode_local = 0;\\n                }\\n\\n                var line = this._currentObject.data.substr(endRead, find - endRead);\\n\\n                var data = this._readLine(line.trim()).split(';');\\n\\n                if (this.IsUvYReverse) {\\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\\n                } else {\\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\\n                }\\n\\n                endRead = find + 1;\\n              }\\n\\n              break;\\n          }\\n\\n          if (endRead >= this._currentObject.data.length) {\\n            break;\\n          }\\n        }\\n      }\\n    }, {\\n      key: '_setMeshMaterialList',\\n      value: function _setMeshMaterialList() {\\n        var endRead = 0;\\n        var mode = 0;\\n        var mode_local = 0;\\n\\n        while (true) {\\n          if (mode_local < 2) {\\n            var refO = this._readInt1(endRead);\\n\\n            endRead = refO.endRead;\\n            mode_local++;\\n          } else {\\n            var find = this._currentObject.data.indexOf(';', endRead);\\n\\n            if (find === -1) {\\n              find = this._currentObject.data.length;\\n              mode = 3;\\n              mode_local = 0;\\n            }\\n\\n            var line = this._currentObject.data.substr(endRead, find - endRead);\\n\\n            var data = this._readLine(line.trim()).split(',');\\n\\n            for (var _i9 = 0; _i9 < data.length; _i9++) {\\n              this._currentGeo.GeometryData.materialIndices[_i9] = parseInt(data[_i9]);\\n            }\\n\\n            endRead = this._currentObject.data.length;\\n          }\\n\\n          if (endRead >= this._currentObject.data.length || mode >= 3) {\\n            break;\\n          }\\n        }\\n      }\\n    }, {\\n      key: '_setMaterial',\\n      value: function _setMaterial() {\\n        var _nowMat = new _three.MeshPhongMaterial({\\n          color: Math.random() * 0xffffff\\n        });\\n\\n        _nowMat.side = _three.FrontSide;\\n        _nowMat.name = this._currentObject.name;\\n        var endRead = 0;\\n\\n        var find = this._currentObject.data.indexOf(';;', endRead);\\n\\n        var line = this._currentObject.data.substr(endRead, find - endRead);\\n\\n        var data = this._readLine(line.trim()).split(';');\\n\\n        _nowMat.color.r = parseFloat(data[0]);\\n        _nowMat.color.g = parseFloat(data[1]);\\n        _nowMat.color.b = parseFloat(data[2]);\\n        endRead = find + 2;\\n        find = this._currentObject.data.indexOf(';', endRead);\\n        line = this._currentObject.data.substr(endRead, find - endRead);\\n        _nowMat.shininess = parseFloat(this._readLine(line));\\n        endRead = find + 1;\\n        find = this._currentObject.data.indexOf(';;', endRead);\\n        line = this._currentObject.data.substr(endRead, find - endRead);\\n\\n        var data2 = this._readLine(line.trim()).split(';');\\n\\n        _nowMat.specular.r = parseFloat(data2[0]);\\n        _nowMat.specular.g = parseFloat(data2[1]);\\n        _nowMat.specular.b = parseFloat(data2[2]);\\n        endRead = find + 2;\\n        find = this._currentObject.data.indexOf(';;', endRead);\\n\\n        if (find === -1) {\\n          find = this._currentObject.data.length;\\n        }\\n\\n        line = this._currentObject.data.substr(endRead, find - endRead);\\n\\n        var data3 = this._readLine(line.trim()).split(';');\\n\\n        _nowMat.emissive.r = parseFloat(data3[0]);\\n        _nowMat.emissive.g = parseFloat(data3[1]);\\n        _nowMat.emissive.b = parseFloat(data3[2]);\\n        var localObject = null;\\n\\n        while (true) {\\n          if (this._currentObject.children.length > 0) {\\n            localObject = this._currentObject.children.shift();\\n\\n            if (this.debug) {\\n              console.log('processing ' + localObject.name);\\n            }\\n\\n            var fileName = localObject.data.substr(1, localObject.data.length - 2);\\n\\n            switch (localObject.type) {\\n              case 'TextureFilename':\\n                _nowMat.map = this.texloader.load(fileName);\\n                break;\\n\\n              case 'BumpMapFilename':\\n                _nowMat.bumpMap = this.texloader.load(fileName);\\n                _nowMat.bumpScale = 0.05;\\n                break;\\n\\n              case 'NormalMapFilename':\\n                _nowMat.normalMap = this.texloader.load(fileName);\\n                _nowMat.normalScale = new _three.Vector2(2, 2);\\n                break;\\n\\n              case 'EmissiveMapFilename':\\n                _nowMat.emissiveMap = this.texloader.load(fileName);\\n                break;\\n\\n              case 'LightMapFilename':\\n                _nowMat.lightMap = this.texloader.load(fileName);\\n                break;\\n            }\\n          } else {\\n            break;\\n          }\\n        }\\n\\n        this._currentGeo.Materials.push(_nowMat);\\n      }\\n    }, {\\n      key: '_setSkinWeights',\\n      value: function _setSkinWeights() {\\n        var boneInf = new XboneInf();\\n        var endRead = 0;\\n\\n        var find = this._currentObject.data.indexOf(';', endRead);\\n\\n        var line = this._currentObject.data.substr(endRead, find - endRead);\\n\\n        endRead = find + 1;\\n        boneInf.boneName = line.substr(1, line.length - 2);\\n        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\\n        find = this._currentObject.data.indexOf(';', endRead);\\n        endRead = find + 1;\\n        find = this._currentObject.data.indexOf(';', endRead);\\n        line = this._currentObject.data.substr(endRead, find - endRead);\\n\\n        var data = this._readLine(line.trim()).split(',');\\n\\n        for (var _i10 = 0; _i10 < data.length; _i10++) {\\n          boneInf.Indeces.push(parseInt(data[_i10]));\\n        }\\n\\n        endRead = find + 1;\\n        find = this._currentObject.data.indexOf(';', endRead);\\n        line = this._currentObject.data.substr(endRead, find - endRead);\\n\\n        var data2 = this._readLine(line.trim()).split(',');\\n\\n        for (var _i = 0; _i < data2.length; _i++) {\\n          boneInf.Weights.push(parseFloat(data2[_i]));\\n        }\\n\\n        endRead = find + 1;\\n        find = this._currentObject.data.indexOf(';', endRead);\\n\\n        if (find <= 0) {\\n          find = this._currentObject.data.length;\\n        }\\n\\n        line = this._currentObject.data.substr(endRead, find - endRead);\\n\\n        var data3 = this._readLine(line.trim()).split(',');\\n\\n        boneInf.OffsetMatrix = new _three.Matrix4();\\n\\n        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\\n\\n        this._currentGeo.BoneInfs.push(boneInf);\\n      }\\n    }, {\\n      key: '_makePutBoneList',\\n      value: function _makePutBoneList(_RootName, _bones) {\\n        var putting = false;\\n\\n        for (var frame in this.HieStack) {\\n          if (this.HieStack[frame].name === _RootName || putting) {\\n            putting = true;\\n            var b = new _three.Bone();\\n            b.name = this.HieStack[frame].name;\\n            b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\\n            b.matrixWorld = b.matrix;\\n            b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\\n            b.pos = new _three.Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray();\\n            b.rotq = new _three.Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray();\\n            b.scl = new _three.Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray();\\n\\n            if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\\n              for (var _i11 = 0; _i11 < _bones.length; _i11++) {\\n                if (this.HieStack[frame].parentName === _bones[_i11].name) {\\n                  _bones[_i11].add(b);\\n\\n                  b.parent = _i11;\\n                  break;\\n                }\\n              }\\n            }\\n\\n            _bones.push(b);\\n          }\\n        }\\n      }\\n    }, {\\n      key: '_makeOutputGeometry',\\n      value: function _makeOutputGeometry() {\\n        var mesh = null;\\n\\n        if (this._currentGeo.BoneInfs.length > 0) {\\n          var putBones = [];\\n\\n          this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\\n\\n          for (var bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\\n            var boneIndex = 0;\\n\\n            for (var bb = 0; bb < putBones.length; bb++) {\\n              if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\\n                boneIndex = bb;\\n                putBones[bb].OffsetMatrix = new _three.Matrix4();\\n                putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\\n                break;\\n              }\\n            }\\n\\n            for (var vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\\n              var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\\n              var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\\n              var stride = nowVertexID * 4;\\n\\n              switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\\n                case 0:\\n                  this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\\n                  this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\\n                  break;\\n\\n                case 1:\\n                  this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\\n                  this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\\n                  break;\\n\\n                case 2:\\n                  this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\\n                  this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\\n                  break;\\n\\n                case 3:\\n                  this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\\n                  this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\\n                  break;\\n              }\\n\\n              this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\\n\\n              if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\\n                console.log('warn! over 4 bone weight! :' + nowVertexID);\\n              }\\n            }\\n          }\\n\\n          for (var sk = 0; sk < this._currentGeo.Materials.length; sk++) {\\n            this._currentGeo.Materials[sk].skinning = true;\\n          }\\n\\n          var offsetList = [];\\n\\n          for (var _bi = 0; _bi < putBones.length; _bi++) {\\n            if (putBones[_bi].OffsetMatrix) {\\n              offsetList.push(putBones[_bi].OffsetMatrix);\\n            } else {\\n              offsetList.push(new _three.Matrix4());\\n            }\\n          }\\n\\n          var bufferGeometry = this._buildGeometry();\\n\\n          mesh = new _three.SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\\n\\n          this._initSkeleton(mesh, putBones, offsetList);\\n        } else {\\n          var _bufferGeometry = this._buildGeometry();\\n\\n          mesh = new _three.Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\\n        }\\n\\n        mesh.name = this._currentGeo.name;\\n        var worldBaseMx = new _three.Matrix4();\\n        var currentMxFrame = this._currentGeo.baseFrame.putBone;\\n\\n        if (currentMxFrame && currentMxFrame.parent) {\\n          while (true) {\\n            currentMxFrame = currentMxFrame.parent;\\n\\n            if (currentMxFrame) {\\n              worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\\n            } else {\\n              break;\\n            }\\n          }\\n\\n          mesh.applyMatrix4(worldBaseMx);\\n        }\\n\\n        this.Meshes.push(mesh);\\n      }\\n    }, {\\n      key: '_initSkeleton',\\n      value: function _initSkeleton(mesh, boneList, boneInverses) {\\n        var bones = [],\\n            bone,\\n            gbone;\\n        var i, il;\\n\\n        for (i = 0, il = boneList.length; i < il; i++) {\\n          gbone = boneList[i];\\n          bone = new _three.Bone();\\n          bones.push(bone);\\n          bone.name = gbone.name;\\n          bone.position.fromArray(gbone.pos);\\n          bone.quaternion.fromArray(gbone.rotq);\\n          if (gbone.scl !== undefined) bone.scale.fromArray(gbone.scl);\\n        }\\n\\n        for (i = 0, il = boneList.length; i < il; i++) {\\n          gbone = boneList[i];\\n\\n          if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\\n            bones[gbone.parent].add(bones[i]);\\n          } else {\\n            mesh.add(bones[i]);\\n          }\\n        }\\n\\n        mesh.updateMatrixWorld(true);\\n        var skeleton = new _three.Skeleton(bones, boneInverses);\\n        mesh.bind(skeleton, mesh.matrixWorld);\\n      }\\n    }, {\\n      key: '_readAnimationKey',\\n      value: function _readAnimationKey() {\\n        var endRead = 0;\\n\\n        var find = this._currentObject.data.indexOf(';', endRead);\\n\\n        var line = this._currentObject.data.substr(endRead, find - endRead);\\n\\n        endRead = find + 1;\\n        var nowKeyType = parseInt(this._readLine(line));\\n        find = this._currentObject.data.indexOf(';', endRead);\\n        endRead = find + 1;\\n        line = this._currentObject.data.substr(endRead);\\n\\n        var data = this._readLine(line.trim()).split(';;,');\\n\\n        for (var _i12 = 0; _i12 < data.length; _i12++) {\\n          var data2 = data[_i12].split(';');\\n\\n          var keyInfo = new XKeyFrameInfo();\\n          keyInfo.type = nowKeyType;\\n          keyInfo.Frame = parseInt(data2[0]);\\n          keyInfo.index = this._currentAnimeFrames.keyFrames.length;\\n          keyInfo.time = keyInfo.Frame;\\n\\n          if (nowKeyType != 4) {\\n            var frameFound = false;\\n\\n            for (var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\\n              if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\\n                keyInfo = this._currentAnimeFrames.keyFrames[mm];\\n                frameFound = true;\\n                break;\\n              }\\n            }\\n\\n            var frameValue = data2[2].split(',');\\n\\n            switch (nowKeyType) {\\n              case 0:\\n                keyInfo.rot = new _three.Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\\n                break;\\n\\n              case 1:\\n                keyInfo.scl = new _three.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\\n                break;\\n\\n              case 2:\\n                keyInfo.pos = new _three.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\\n                break;\\n            }\\n\\n            if (!frameFound) {\\n              this._currentAnimeFrames.keyFrames.push(keyInfo);\\n            }\\n          } else {\\n            keyInfo.matrix = new _three.Matrix4();\\n\\n            this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));\\n\\n            this._currentAnimeFrames.keyFrames.push(keyInfo);\\n          }\\n        }\\n      }\\n    }, {\\n      key: '_makeOutputAnimation',\\n      value: function _makeOutputAnimation() {\\n        var animationObj = new XAnimationObj(this.options);\\n        animationObj.fps = this.animTicksPerSecond;\\n        animationObj.name = this._currentAnime.name;\\n        animationObj.make(this._currentAnime.AnimeFrames);\\n        this.animations.push(animationObj);\\n      }\\n    }, {\\n      key: 'assignAnimation',\\n      value: function assignAnimation(_model, _animation) {\\n        var model = _model;\\n        var animation = _animation;\\n\\n        if (!model) {\\n          model = this.Meshes[0];\\n        }\\n\\n        if (!animation) {\\n          animation = this.animations[0];\\n        }\\n\\n        if (!model || !animation) {\\n          return null;\\n        }\\n\\n        var put = {};\\n        put.fps = animation.fps;\\n        put.name = animation.name;\\n        put.length = animation.length;\\n        put.hierarchy = [];\\n\\n        for (var b = 0; b < model.skeleton.bones.length; b++) {\\n          var findAnimation = false;\\n\\n          for (var _i13 = 0; _i13 < animation.hierarchy.length; _i13++) {\\n            if (model.skeleton.bones[b].name === animation.hierarchy[_i13].name) {\\n              findAnimation = true;\\n\\n              var c_key = animation.hierarchy[_i13].copy();\\n\\n              c_key.parent = -1;\\n\\n              if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {\\n                for (var bb = 0; bb < put.hierarchy.length; bb++) {\\n                  if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\\n                    c_key.parent = bb;\\n                    c_key.parentName = model.skeleton.bones[b].parent.name;\\n                  }\\n                }\\n              }\\n\\n              put.hierarchy.push(c_key);\\n              break;\\n            }\\n          }\\n\\n          if (!findAnimation) {\\n            var _c_key = animation.hierarchy[0].copy();\\n\\n            _c_key.name = model.skeleton.bones[b].name;\\n            _c_key.parent = -1;\\n\\n            for (var k = 0; k < _c_key.keys.length; k++) {\\n              if (_c_key.keys[k].pos) {\\n                _c_key.keys[k].pos.set(0, 0, 0);\\n              }\\n\\n              if (_c_key.keys[k].scl) {\\n                _c_key.keys[k].scl.set(1, 1, 1);\\n              }\\n\\n              if (_c_key.keys[k].rot) {\\n                _c_key.keys[k].rot.set(0, 0, 0, 1);\\n              }\\n            }\\n\\n            put.hierarchy.push(_c_key);\\n          }\\n        }\\n\\n        if (!model.geometry.animations) {\\n          model.geometry.animations = [];\\n        }\\n\\n        model.geometry.animations.push(_three.AnimationClip.parseAnimation(put, model.skeleton.bones));\\n\\n        if (!model.animationMixer) {\\n          model.animationMixer = new _three.AnimationMixer(model);\\n        }\\n\\n        return put;\\n      }\\n    }, {\\n      key: '_ParseMatrixData',\\n      value: function _ParseMatrixData(targetMatrix, data) {\\n        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\\n      }\\n    }]);\\n    return XLoader;\\n  }();\\n\\n  return XLoader;\\n}();\\n\\nexports.XLoader = XLoader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"XLoader\",\"_three\",\"classCallCheck\",\"instance\",\"Constructor\",\"TypeError\",\"createClass\",\"defineProperties\",\"target\",\"props\",\"_i2\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"key\",\"protoProps\",\"staticProps\",\"prototype\",\"XboneInf\",\"boneName\",\"BoneIndex\",\"Indeces\",\"Weights\",\"OffsetMatrix\",\"initMatrix\",\"XAnimationInfo\",\"animeName\",\"targetBone\",\"keyType\",\"frameStartLv\",\"keyFrames\",\"InverseMx\",\"XAnimationObj\",\"_flags\",\"fps\",\"name\",\"hierarchy\",\"putFlags\",\"undefined\",\"putPos\",\"putRot\",\"putScl\",\"make\",\"XAnimationInfoArray\",\"_i3\",\"push\",\"makeBonekeys\",\"keys\",\"time\",\"clone\",\"assign\",\"refObj\",\"parent\",\"keyFrameRefactor\",\"copy\",\"refObj.copy\",\"_i4\",\"keyframe\",\"pos\",\"rot\",\"scl\",\"matrix\",\"setFromMatrixPosition\",\"Vector3\",\"setFromRotationMatrix\",\"Quaternion\",\"setFromMatrixScale\",\"XKeyFrameInfo\",\"Frame\",\"index\",\"manager\",\"Loader\",\"call\",\"debug\",\"texloader\",\"TextureLoader\",\"url\",\"_putMatLength\",\"_nowMat\",\"_nowFrameName\",\"frameHierarchie\",\"Hierarchies\",\"HieStack\",\"_currentObject\",\"_currentFrame\",\"onLoad\",\"_data\",\"IsUvYReverse\",\"Meshes\",\"animations\",\"animTicksPerSecond\",\"_currentAnimeFrames\",\"_currentAnime\",\"_currentGeo\",\"_setArgOption\",\"_arg\",\"_i5\",\"_start\",\"arguments\",\"options\",\"load\",\"onProgress\",\"onError\",\"_this\",\"loader\",\"FileLoader\",\"setPath\",\"path\",\"setResponseType\",\"setRequestHeader\",\"requestHeader\",\"setWithCredentials\",\"withCredentials\",\"response\",\"parse\",\"e\",\"console\",\"error\",\"itemError\",\"_readLine\",\"line\",\"readed\",\"find\",\"indexOf\",\"foundNewLine\",\"substr\",\"_isBinary\",\"binData\",\"reader\",\"DataView\",\"face_size\",\"getUint32\",\"n_faces\",\"byteLength\",\"fileLength\",\"getUint8\",\"_ensureBinary\",\"buf\",\"array_buffer\",\"Uint8Array\",\"_i6\",\"charCodeAt\",\"buffer\",\"_ensureString\",\"LoaderUtils\",\"decodeText\",\"_parse\",\"data\",\"_parseBinary\",\"_parseASCII\",\"resourcePath\",\"extractUrlBase\",\"setCrossOrigin\",\"crossOrigin\",\"children\",\"_hierarchieParse\",\"endRead\",\"_changeRoot\",\"shift\",\"_mainloop\",\"_parent\",\"_end\",\"find1\",\"findEnd\",\"findNext\",\"nameData\",\"trim\",\"word\",\"split\",\"type\",\"refs\",\"end\",\"DataEnder\",\"lastIndexOf\",\"Math\",\"min\",\"_refs\",\"max\",\"nextStart\",\"_this2\",\"_mainProc\",\"worked\",\"setTimeout\",\"models\",\"breakFlag\",\"parseInt\",\"_setFrame\",\"_setFrameTransformMatrix\",\"parentName\",\"_getParentName\",\"VertexSetedBoneCount\",\"GeometryData\",\"vertices\",\"normals\",\"uvs\",\"skinIndices\",\"skinWeights\",\"indices\",\"materialIndices\",\"Materials\",\"normalVectors\",\"BoneInfs\",\"baseFrame\",\"_makeBoneFrom_CurrentFrame\",\"_readVertexDatas\",\"_setMeshTextureCoords\",\"_setMeshMaterialList\",\"_setMaterial\",\"_setSkinWeights\",\"AnimeFrames\",\"_readAnimationKey\",\"log\",\"_makeOutputGeometry\",\"_makeOutputAnimation\",\"_obj\",\"FrameTransformMatrix\",\"Matrix4\",\"_ParseMatrixData\",\"b\",\"Bone\",\"applyMatrix4\",\"matrixWorld\",\"putBone\",\"frame\",\"add\",\"mode\",\"mode_local\",\"maxLength\",\"changeMode\",\"_readInt1\",\"refO\",\"_readVertex1\",\"_readFace1\",\"_readNormalVector1\",\"start\",\"refI\",\"parseFloat\",\"_buildGeometry\",\"bufferGeometry\",\"BufferGeometry\",\"position\",\"_i7\",\"l\",\"stride2\",\"stride3\",\"stride4\",\"setAttribute\",\"Float32BufferAttribute\",\"Uint16BufferAttribute\",\"_computeGroups\",\"group\",\"groups\",\"materialIndex\",\"_i8\",\"currentMaterialIndex\",\"count\",\"i\",\"_i9\",\"MeshPhongMaterial\",\"color\",\"random\",\"side\",\"FrontSide\",\"r\",\"g\",\"shininess\",\"data2\",\"specular\",\"data3\",\"emissive\",\"localObject\",\"fileName\",\"map\",\"bumpMap\",\"bumpScale\",\"normalMap\",\"normalScale\",\"Vector2\",\"emissiveMap\",\"lightMap\",\"boneInf\",\"_i10\",\"_i\",\"_makePutBoneList\",\"_RootName\",\"_bones\",\"putting\",\"toArray\",\"rotq\",\"_i11\",\"mesh\",\"putBones\",\"bi\",\"boneIndex\",\"bb\",\"vi\",\"nowVertexID\",\"nowVal\",\"stride\",\"sk\",\"skinning\",\"offsetList\",\"_bi\",\"SkinnedMesh\",\"_initSkeleton\",\"_bufferGeometry\",\"Mesh\",\"worldBaseMx\",\"currentMxFrame\",\"multiply\",\"boneList\",\"boneInverses\",\"bones\",\"il\",\"gbone\",\"bone\",\"fromArray\",\"quaternion\",\"scale\",\"updateMatrixWorld\",\"skeleton\",\"Skeleton\",\"bind\",\"nowKeyType\",\"_i12\",\"keyInfo\",\"frameFound\",\"mm\",\"frameValue\",\"animationObj\",\"assignAnimation\",\"_model\",\"_animation\",\"model\",\"animation\",\"put\",\"findAnimation\",\"_i13\",\"c_key\",\"_c_key\",\"k\",\"set\",\"geometry\",\"AnimationClip\",\"parseAnimation\",\"animationMixer\",\"AnimationMixer\",\"targetMatrix\"]\n}\n"]