["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/renderers/Projector.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$renderers$Projector=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.RenderableVertex=exports.RenderableSprite=exports.RenderableObject=exports.RenderableLine=exports.RenderableFace=exports.Projector=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),RenderableObject=function(){this.id=0;this.object=null;this.renderOrder=this.z=0};exports.RenderableObject=RenderableObject;var RenderableFace=\nfunction(){this.id=0;this.v1=new RenderableVertex;this.v2=new RenderableVertex;this.v3=new RenderableVertex;this.normalModel=new _three.Vector3;this.vertexNormalsModel=[new _three.Vector3,new _three.Vector3,new _three.Vector3];this.vertexNormalsLength=0;this.color=new _three.Color;this.material=null;this.uvs=[new _three.Vector2,new _three.Vector2,new _three.Vector2];this.renderOrder=this.z=0};exports.RenderableFace=RenderableFace;var RenderableVertex=function(){this.position=new _three.Vector3;this.positionWorld=\nnew _three.Vector3;this.positionScreen=new _three.Vector4;this.visible=!0};exports.RenderableVertex=RenderableVertex;RenderableVertex.prototype.copy=function(vertex){this.positionWorld.copy(vertex.positionWorld);this.positionScreen.copy(vertex.positionScreen)};var RenderableLine=function(){this.id=0;this.v1=new RenderableVertex;this.v2=new RenderableVertex;this.vertexColors=[new _three.Color,new _three.Color];this.material=null;this.renderOrder=this.z=0};exports.RenderableLine=RenderableLine;var RenderableSprite=\nfunction(){this.id=0;this.object=null;this.rotation=this.z=this.y=this.x=0;this.scale=new _three.Vector2;this.material=null;this.renderOrder=0};exports.RenderableSprite=RenderableSprite;exports.Projector=function(){function projectObject(object){if(!1!==object.visible){if(object.isLight)_renderData.lights.push(object);else if(object.isMesh||object.isLine||object.isPoints){if(!1===object.material.visible||!0===object.frustumCulled&&!1===_frustum.intersectsObject(object))return;addObject(object)}else if(object.isSprite){if(!1===\nobject.material.visible||!0===object.frustumCulled&&!1===_frustum.intersectsSprite(object))return;addObject(object)}object=object.children;for(var i=0,l=object.length;i<l;i++)projectObject(object[i])}}function addObject(object$jscomp$0){if(_objectCount===_objectPoolLength){var object=new RenderableObject;_objectPool.push(object);_objectPoolLength++;_objectCount++;_object=object}else _object=_objectPool[_objectCount++];_object.id=object$jscomp$0.id;_object.object=object$jscomp$0;_vector3.setFromMatrixPosition(object$jscomp$0.matrixWorld);\n_vector3.applyMatrix4(_viewProjectionMatrix);_object.z=_vector3.z;_object.renderOrder=object$jscomp$0.renderOrder;_renderData.objects.push(_object)}function pushPoint(_vector4,object,camera){var invW=1/_vector4.w;_vector4.z*=invW;if(-1<=_vector4.z&&1>=_vector4.z){if(_spriteCount===_spritePoolLength){var sprite=new RenderableSprite;_spritePool.push(sprite);_spritePoolLength++;_spriteCount++;_sprite=sprite}else _sprite=_spritePool[_spriteCount++];_sprite.id=object.id;_sprite.x=_vector4.x*invW;_sprite.y=\n_vector4.y*invW;_sprite.z=_vector4.z;_sprite.renderOrder=object.renderOrder;_sprite.object=object;_sprite.rotation=object.rotation;_sprite.scale.x=object.scale.x*Math.abs(_sprite.x-(_vector4.x+camera.projectionMatrix.elements[0])/(_vector4.w+camera.projectionMatrix.elements[12]));_sprite.scale.y=object.scale.y*Math.abs(_sprite.y-(_vector4.y+camera.projectionMatrix.elements[5])/(_vector4.w+camera.projectionMatrix.elements[13]));_sprite.material=object.material;_renderData.elements.push(_sprite)}}function painterSort(a,\nb){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id!==b.id?a.id-b.id:0}function clipLine(s1,s2){var alpha1=0,alpha2=1,bc1near=s1.z+s1.w,bc2near=s2.z+s2.w,bc1far=-s1.z+s1.w,bc2far=-s2.z+s2.w;if(0<=bc1near&&0<=bc2near&&0<=bc1far&&0<=bc2far)return!0;if(0>bc1near&&0>bc2near||0>bc1far&&0>bc2far)return!1;0>bc1near?alpha1=Math.max(alpha1,bc1near/(bc1near-bc2near)):0>bc2near&&(alpha2=Math.min(alpha2,bc1near/(bc1near-bc2near)));0>bc1far?alpha1=Math.max(alpha1,bc1far/\n(bc1far-bc2far)):0>bc2far&&(alpha2=Math.min(alpha2,bc1far/(bc1far-bc2far)));if(alpha2<alpha1)return!1;s1.lerp(s2,alpha1);s2.lerp(s1,1-alpha2);return!0}var _object,_objectCount,_objectPool=[],_objectPoolLength=0,_vertex,_vertexCount,_vertexPool=[],_vertexPoolLength=0,_face,_faceCount,_facePool=[],_facePoolLength=0,_line,_lineCount,_linePool=[],_linePoolLength=0,_sprite,_spriteCount,_spritePool=[],_spritePoolLength=0,_renderData={objects:[],lights:[],elements:[]},_vector3=new _three.Vector3,_vector4=\nnew _three.Vector4,_clipBox=new _three.Box3(new _three.Vector3(-1,-1,-1),new _three.Vector3(1,1,1)),_boundingBox=new _three.Box3,_points3=Array(3),_viewMatrix=new _three.Matrix4,_viewProjectionMatrix=new _three.Matrix4,_modelMatrix,_modelViewProjectionMatrix=new _three.Matrix4,_frustum=new _three.Frustum;this.projectVector=function(vector,camera){console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");vector.project(camera)};this.unprojectVector=function(vector,camera){console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\nvector.unproject(camera)};this.pickingRay=function(){console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\")};var renderList=new function(){function projectVertex(vertex){var positionWorld=vertex.positionWorld,positionScreen=vertex.positionScreen;positionWorld.copy(vertex.position).applyMatrix4(_modelMatrix);positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);positionWorld=1/positionScreen.w;positionScreen.x*=positionWorld;positionScreen.y*=positionWorld;\npositionScreen.z*=positionWorld;vertex.visible=-1<=positionScreen.x&&1>=positionScreen.x&&-1<=positionScreen.y&&1>=positionScreen.y&&-1<=positionScreen.z&&1>=positionScreen.z}function checkTriangleVisibility(v1,v2,v3){if(!0===v1.visible||!0===v2.visible||!0===v3.visible)return!0;_points3[0]=v1.positionScreen;_points3[1]=v2.positionScreen;_points3[2]=v3.positionScreen;return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3))}function checkBackfaceCulling(v1,v2,v3){return 0>(v3.positionScreen.x-\nv1.positionScreen.x)*(v2.positionScreen.y-v1.positionScreen.y)-(v3.positionScreen.y-v1.positionScreen.y)*(v2.positionScreen.x-v1.positionScreen.x)}var normals=[],colors=[],uvs=[],object=null,normalMatrix=new _three.Matrix3;return{setObject:function(value){object=value;normalMatrix.getNormalMatrix(object.matrixWorld);normals.length=0;colors.length=0;uvs.length=0},projectVertex,checkTriangleVisibility,checkBackfaceCulling,pushVertex:function(x,y,z){if(_vertexCount===_vertexPoolLength){var vertex=new RenderableVertex;\n_vertexPool.push(vertex);_vertexPoolLength++;_vertexCount++;_vertex=vertex}else _vertex=_vertexPool[_vertexCount++];_vertex.position.set(x,y,z);projectVertex(_vertex)},pushNormal:function(x,y,z){normals.push(x,y,z)},pushColor:function(r,g,b){colors.push(r,g,b)},pushUv:function(x,y){uvs.push(x,y)},pushLine:function(a,b){var v1=_vertexPool[a],v2=_vertexPool[b];v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\nif(!0===clipLine(v1.positionScreen,v2.positionScreen)){v1.positionScreen.multiplyScalar(1/v1.positionScreen.w);v2.positionScreen.multiplyScalar(1/v2.positionScreen.w);if(_lineCount===_linePoolLength){var line=new RenderableLine;_linePool.push(line);_linePoolLength++;_lineCount++;_line=line}else _line=_linePool[_lineCount++];_line.id=object.id;_line.v1.copy(v1);_line.v2.copy(v2);_line.z=Math.max(v1.positionScreen.z,v2.positionScreen.z);_line.renderOrder=object.renderOrder;_line.material=object.material;\nobject.material.vertexColors&&(_line.vertexColors[0].fromArray(colors,3*a),_line.vertexColors[1].fromArray(colors,3*b));_renderData.elements.push(_line)}},pushTriangle:function(a,b,c,material){var v1=_vertexPool[a],v2=_vertexPool[b],v3=_vertexPool[c];if(!1!==checkTriangleVisibility(v1,v2,v3)&&(material.side===_three.DoubleSide||!0===checkBackfaceCulling(v1,v2,v3))){if(_faceCount===_facePoolLength){var face=new RenderableFace;_facePool.push(face);_facePoolLength++;_faceCount++;_face=face}else _face=\n_facePool[_faceCount++];_face.id=object.id;_face.v1.copy(v1);_face.v2.copy(v2);_face.v3.copy(v3);_face.z=(v1.positionScreen.z+v2.positionScreen.z+v3.positionScreen.z)/3;_face.renderOrder=object.renderOrder;_vector3.subVectors(v3.position,v2.position);_vector4.subVectors(v1.position,v2.position);_vector3.cross(_vector4);_face.normalModel.copy(_vector3);_face.normalModel.applyMatrix3(normalMatrix).normalize();for(v1=0;3>v1;v1++)v2=_face.vertexNormalsModel[v1],v2.fromArray(normals,3*arguments[v1]),v2.applyMatrix3(normalMatrix).normalize(),\n_face.uvs[v1].fromArray(uvs,2*arguments[v1]);_face.vertexNormalsLength=3;_face.material=material;material.vertexColors&&_face.color.fromArray(colors,3*a);_renderData.elements.push(_face)}}}};this.projectScene=function(scene,camera,sortObjects,sortElements){_spriteCount=_lineCount=_faceCount=0;_renderData.elements.length=0;!0===scene.autoUpdate&&scene.updateMatrixWorld();null===camera.parent&&camera.updateMatrixWorld();_viewMatrix.copy(camera.matrixWorldInverse);_viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix,\n_viewMatrix);_frustum.setFromProjectionMatrix(_viewProjectionMatrix);_objectCount=0;_renderData.objects.length=0;_renderData.lights.length=0;projectObject(scene);!0===sortObjects&&_renderData.objects.sort(painterSort);scene=_renderData.objects;sortObjects=0;for(var ol=scene.length;sortObjects<ol;sortObjects++){var object=scene[sortObjects].object,geometry=object.geometry;renderList.setObject(object);_modelMatrix=object.matrixWorld;_vertexCount=0;if(object.isMesh)if(geometry.isBufferGeometry){var material=\nobject.material,isMultiMaterial=Array.isArray(material),attributes=geometry.attributes,groups=geometry.groups;if(void 0!==attributes.position){for(var positions=attributes.position.array,i=0,l=positions.length;i<l;i+=3){var x=positions[i],y=positions[i+1],z=positions[i+2];if(!0===material.morphTargets)for(var morphTargets=geometry.morphAttributes.position,morphTargetsRelative=geometry.morphTargetsRelative,morphInfluences=object.morphTargetInfluences,t=0,tl=morphTargets.length;t<tl;t++){var influence=\nmorphInfluences[t];if(0!==influence){var target=morphTargets[t];morphTargetsRelative?(x+=target.getX(i/3)*influence,y+=target.getY(i/3)*influence,z+=target.getZ(i/3)*influence):(x+=(target.getX(i/3)-positions[i])*influence,y+=(target.getY(i/3)-positions[i+1])*influence,z+=(target.getZ(i/3)-positions[i+2])*influence)}}renderList.pushVertex(x,y,z)}if(void 0!==attributes.normal)for(i=attributes.normal.array,l=0,x=i.length;l<x;l+=3)renderList.pushNormal(i[l],i[l+1],i[l+2]);if(void 0!==attributes.color)for(i=\nattributes.color.array,l=0,x=i.length;l<x;l+=3)renderList.pushColor(i[l],i[l+1],i[l+2]);if(void 0!==attributes.uv)for(attributes=attributes.uv.array,i=0,l=attributes.length;i<l;i+=2)renderList.pushUv(attributes[i],attributes[i+1]);if(null!==geometry.index)if(positions=geometry.index.array,0<groups.length)for(attributes=0;attributes<groups.length;attributes++){if(geometry=groups[attributes],material=!0===isMultiMaterial?object.material[geometry.materialIndex]:object.material,void 0!==material)for(i=\ngeometry.start,geometry=geometry.start+geometry.count;i<geometry;i+=3)renderList.pushTriangle(positions[i],positions[i+1],positions[i+2],material)}else for(object=0,isMultiMaterial=positions.length;object<isMultiMaterial;object+=3)renderList.pushTriangle(positions[object],positions[object+1],positions[object+2],material);else if(0<groups.length)for(positions=0;positions<groups.length;positions++){if(geometry=groups[positions],material=!0===isMultiMaterial?object.material[geometry.materialIndex]:object.material,\nvoid 0!==material)for(attributes=geometry.start,geometry=geometry.start+geometry.count;attributes<geometry;attributes+=3)renderList.pushTriangle(attributes,attributes+1,attributes+2,material)}else for(object=0,positions=positions.length/3;object<positions;object+=3)renderList.pushTriangle(object,object+1,object+2,material)}}else{if(geometry.isGeometry){console.error(\"THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.\");return}}else if(object.isLine)if(_modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix,\n_modelMatrix),geometry.isBufferGeometry){if(attributes=geometry.attributes,void 0!==attributes.position){positions=attributes.position.array;material=0;for(isMultiMaterial=positions.length;material<isMultiMaterial;material+=3)renderList.pushVertex(positions[material],positions[material+1],positions[material+2]);if(void 0!==attributes.color)for(i=attributes.color.array,material=0,isMultiMaterial=i.length;material<isMultiMaterial;material+=3)renderList.pushColor(i[material],i[material+1],i[material+\n2]);if(null!==geometry.index)for(positions=geometry.index.array,object=0,material=positions.length;object<material;object+=2)renderList.pushLine(positions[object],positions[object+1]);else for(object=object.isLineSegments?2:1,material=0,positions=positions.length/3-1;material<positions;material+=object)renderList.pushLine(material,material+1)}}else{if(geometry.isGeometry){console.error(\"THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.\");return}}else if(object.isPoints){_modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix,\n_modelMatrix);if(geometry.isGeometry){console.error(\"THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.\");return}if(geometry.isBufferGeometry&&(attributes=geometry.attributes,void 0!==attributes.position))for(positions=attributes.position.array,material=0,isMultiMaterial=positions.length;material<isMultiMaterial;material+=3)_vector4.set(positions[material],positions[material+1],positions[material+2],1),_vector4.applyMatrix4(_modelViewProjectionMatrix),pushPoint(_vector4,\nobject,camera)}else object.isSprite&&(object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,object.matrixWorld),_vector4.set(_modelMatrix.elements[12],_modelMatrix.elements[13],_modelMatrix.elements[14],1),_vector4.applyMatrix4(_viewProjectionMatrix),pushPoint(_vector4,object,camera))}!0===sortElements&&_renderData.elements.sort(painterSort);return _renderData}}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$renderers$Projector\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RenderableVertex = exports.RenderableSprite = exports.RenderableObject = exports.RenderableLine = exports.RenderableFace = exports.Projector = void 0;\n\nvar _three = require(\"three\");\n\nvar RenderableObject = function RenderableObject() {\n  this.id = 0;\n  this.object = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nexports.RenderableObject = RenderableObject;\n\nvar RenderableFace = function RenderableFace() {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.v3 = new RenderableVertex();\n  this.normalModel = new _three.Vector3();\n  this.vertexNormalsModel = [new _three.Vector3(), new _three.Vector3(), new _three.Vector3()];\n  this.vertexNormalsLength = 0;\n  this.color = new _three.Color();\n  this.material = null;\n  this.uvs = [new _three.Vector2(), new _three.Vector2(), new _three.Vector2()];\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nexports.RenderableFace = RenderableFace;\n\nvar RenderableVertex = function RenderableVertex() {\n  this.position = new _three.Vector3();\n  this.positionWorld = new _three.Vector3();\n  this.positionScreen = new _three.Vector4();\n  this.visible = true;\n};\n\nexports.RenderableVertex = RenderableVertex;\n\nRenderableVertex.prototype.copy = function (vertex) {\n  this.positionWorld.copy(vertex.positionWorld);\n  this.positionScreen.copy(vertex.positionScreen);\n}; //\n\n\nvar RenderableLine = function RenderableLine() {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.vertexColors = [new _three.Color(), new _three.Color()];\n  this.material = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nexports.RenderableLine = RenderableLine;\n\nvar RenderableSprite = function RenderableSprite() {\n  this.id = 0;\n  this.object = null;\n  this.x = 0;\n  this.y = 0;\n  this.z = 0;\n  this.rotation = 0;\n  this.scale = new _three.Vector2();\n  this.material = null;\n  this.renderOrder = 0;\n}; //\n\n\nexports.RenderableSprite = RenderableSprite;\n\nvar Projector = function Projector() {\n  var _object,\n      _objectCount,\n      _objectPool = [],\n      _objectPoolLength = 0,\n      _vertex,\n      _vertexCount,\n      _vertexPool = [],\n      _vertexPoolLength = 0,\n      _face,\n      _faceCount,\n      _facePool = [],\n      _facePoolLength = 0,\n      _line,\n      _lineCount,\n      _linePool = [],\n      _linePoolLength = 0,\n      _sprite,\n      _spriteCount,\n      _spritePool = [],\n      _spritePoolLength = 0,\n      _renderData = {\n    objects: [],\n    lights: [],\n    elements: []\n  },\n      _vector3 = new _three.Vector3(),\n      _vector4 = new _three.Vector4(),\n      _clipBox = new _three.Box3(new _three.Vector3(-1, -1, -1), new _three.Vector3(1, 1, 1)),\n      _boundingBox = new _three.Box3(),\n      _points3 = new Array(3),\n      _viewMatrix = new _three.Matrix4(),\n      _viewProjectionMatrix = new _three.Matrix4(),\n      _modelMatrix,\n      _modelViewProjectionMatrix = new _three.Matrix4(),\n      _frustum = new _three.Frustum(); //\n\n\n  this.projectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .projectVector() is now vector.project().');\n    vector.project(camera);\n  };\n\n  this.unprojectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n    vector.unproject(camera);\n  };\n\n  this.pickingRay = function () {\n    console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n  }; //\n\n\n  var RenderList = function RenderList() {\n    var normals = [];\n    var colors = [];\n    var uvs = [];\n    var object = null;\n    var normalMatrix = new _three.Matrix3();\n\n    function setObject(value) {\n      object = value;\n      normalMatrix.getNormalMatrix(object.matrixWorld);\n      normals.length = 0;\n      colors.length = 0;\n      uvs.length = 0;\n    }\n\n    function projectVertex(vertex) {\n      var position = vertex.position;\n      var positionWorld = vertex.positionWorld;\n      var positionScreen = vertex.positionScreen;\n      positionWorld.copy(position).applyMatrix4(_modelMatrix);\n      positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n      var invW = 1 / positionScreen.w;\n      positionScreen.x *= invW;\n      positionScreen.y *= invW;\n      positionScreen.z *= invW;\n      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n    }\n\n    function pushVertex(x, y, z) {\n      _vertex = getNextVertexInPool();\n\n      _vertex.position.set(x, y, z);\n\n      projectVertex(_vertex);\n    }\n\n    function pushNormal(x, y, z) {\n      normals.push(x, y, z);\n    }\n\n    function pushColor(r, g, b) {\n      colors.push(r, g, b);\n    }\n\n    function pushUv(x, y) {\n      uvs.push(x, y);\n    }\n\n    function checkTriangleVisibility(v1, v2, v3) {\n      if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n      _points3[0] = v1.positionScreen;\n      _points3[1] = v2.positionScreen;\n      _points3[2] = v3.positionScreen;\n      return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n    }\n\n    function checkBackfaceCulling(v1, v2, v3) {\n      return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n    }\n\n    function pushLine(a, b) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b]; // Clip\n\n      v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n      v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n\n      if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n        // Perform the perspective divide\n        v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n        v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n        _line = getNextLineInPool();\n        _line.id = object.id;\n\n        _line.v1.copy(v1);\n\n        _line.v2.copy(v2);\n\n        _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n\n        if (object.material.vertexColors) {\n          _line.vertexColors[0].fromArray(colors, a * 3);\n\n          _line.vertexColors[1].fromArray(colors, b * 3);\n        }\n\n        _renderData.elements.push(_line);\n      }\n    }\n\n    function pushTriangle(a, b, c, material) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      var v3 = _vertexPool[c];\n      if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\n      if (material.side === _three.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n        _face = getNextFaceInPool();\n        _face.id = object.id;\n\n        _face.v1.copy(v1);\n\n        _face.v2.copy(v2);\n\n        _face.v3.copy(v3);\n\n        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n        _face.renderOrder = object.renderOrder; // face normal\n\n        _vector3.subVectors(v3.position, v2.position);\n\n        _vector4.subVectors(v1.position, v2.position);\n\n        _vector3.cross(_vector4);\n\n        _face.normalModel.copy(_vector3);\n\n        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\n        for (var i = 0; i < 3; i++) {\n          var normal = _face.vertexNormalsModel[i];\n          normal.fromArray(normals, arguments[i] * 3);\n          normal.applyMatrix3(normalMatrix).normalize();\n          var uv = _face.uvs[i];\n          uv.fromArray(uvs, arguments[i] * 2);\n        }\n\n        _face.vertexNormalsLength = 3;\n        _face.material = material;\n\n        if (material.vertexColors) {\n          _face.color.fromArray(colors, a * 3);\n        }\n\n        _renderData.elements.push(_face);\n      }\n    }\n\n    return {\n      setObject: setObject,\n      projectVertex: projectVertex,\n      checkTriangleVisibility: checkTriangleVisibility,\n      checkBackfaceCulling: checkBackfaceCulling,\n      pushVertex: pushVertex,\n      pushNormal: pushNormal,\n      pushColor: pushColor,\n      pushUv: pushUv,\n      pushLine: pushLine,\n      pushTriangle: pushTriangle\n    };\n  };\n\n  var renderList = new RenderList();\n\n  function projectObject(object) {\n    if (object.visible === false) return;\n\n    if (object.isLight) {\n      _renderData.lights.push(object);\n    } else if (object.isMesh || object.isLine || object.isPoints) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n      addObject(object);\n    } else if (object.isSprite) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n      addObject(object);\n    }\n\n    var children = object.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i]);\n    }\n  }\n\n  function addObject(object) {\n    _object = getNextObjectInPool();\n    _object.id = object.id;\n    _object.object = object;\n\n    _vector3.setFromMatrixPosition(object.matrixWorld);\n\n    _vector3.applyMatrix4(_viewProjectionMatrix);\n\n    _object.z = _vector3.z;\n    _object.renderOrder = object.renderOrder;\n\n    _renderData.objects.push(_object);\n  }\n\n  this.projectScene = function (scene, camera, sortObjects, sortElements) {\n    _faceCount = 0;\n    _lineCount = 0;\n    _spriteCount = 0;\n    _renderData.elements.length = 0;\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _frustum.setFromProjectionMatrix(_viewProjectionMatrix); //\n\n\n    _objectCount = 0;\n    _renderData.objects.length = 0;\n    _renderData.lights.length = 0;\n    projectObject(scene);\n\n    if (sortObjects === true) {\n      _renderData.objects.sort(painterSort);\n    } //\n\n\n    var objects = _renderData.objects;\n\n    for (var o = 0, ol = objects.length; o < ol; o++) {\n      var object = objects[o].object;\n      var geometry = object.geometry;\n      renderList.setObject(object);\n      _modelMatrix = object.matrixWorld;\n      _vertexCount = 0;\n\n      if (object.isMesh) {\n        if (geometry.isBufferGeometry) {\n          var material = object.material;\n          var isMultiMaterial = Array.isArray(material);\n          var attributes = geometry.attributes;\n          var groups = geometry.groups;\n          if (attributes.position === undefined) continue;\n          var positions = attributes.position.array;\n\n          for (var i = 0, l = positions.length; i < l; i += 3) {\n            var x = positions[i];\n            var y = positions[i + 1];\n            var z = positions[i + 2];\n\n            if (material.morphTargets === true) {\n              var morphTargets = geometry.morphAttributes.position;\n              var morphTargetsRelative = geometry.morphTargetsRelative;\n              var morphInfluences = object.morphTargetInfluences;\n\n              for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                var influence = morphInfluences[t];\n                if (influence === 0) continue;\n                var target = morphTargets[t];\n\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n\n            renderList.pushVertex(x, y, z);\n          }\n\n          if (attributes.normal !== undefined) {\n            var normals = attributes.normal.array;\n\n            for (var _i = 0, _l = normals.length; _i < _l; _i += 3) {\n              renderList.pushNormal(normals[_i], normals[_i + 1], normals[_i + 2]);\n            }\n          }\n\n          if (attributes.color !== undefined) {\n            var colors = attributes.color.array;\n\n            for (var _i2 = 0, _l2 = colors.length; _i2 < _l2; _i2 += 3) {\n              renderList.pushColor(colors[_i2], colors[_i2 + 1], colors[_i2 + 2]);\n            }\n          }\n\n          if (attributes.uv !== undefined) {\n            var uvs = attributes.uv.array;\n\n            for (var _i3 = 0, _l3 = uvs.length; _i3 < _l3; _i3 += 2) {\n              renderList.pushUv(uvs[_i3], uvs[_i3 + 1]);\n            }\n          }\n\n          if (geometry.index !== null) {\n            var indices = geometry.index.array;\n\n            if (groups.length > 0) {\n              for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (var _i4 = group.start, _l4 = group.start + group.count; _i4 < _l4; _i4 += 3) {\n                  renderList.pushTriangle(indices[_i4], indices[_i4 + 1], indices[_i4 + 2], material);\n                }\n              }\n            } else {\n              for (var _i5 = 0, _l5 = indices.length; _i5 < _l5; _i5 += 3) {\n                renderList.pushTriangle(indices[_i5], indices[_i5 + 1], indices[_i5 + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (var _g = 0; _g < groups.length; _g++) {\n                var group = groups[_g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (var _i6 = group.start, _l6 = group.start + group.count; _i6 < _l6; _i6 += 3) {\n                  renderList.pushTriangle(_i6, _i6 + 1, _i6 + 2, material);\n                }\n              }\n            } else {\n              for (var _i7 = 0, _l7 = positions.length / 3; _i7 < _l7; _i7 += 3) {\n                renderList.pushTriangle(_i7, _i7 + 1, _i7 + 2, material);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isLine) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (var _i8 = 0, _l8 = positions.length; _i8 < _l8; _i8 += 3) {\n              renderList.pushVertex(positions[_i8], positions[_i8 + 1], positions[_i8 + 2]);\n            }\n\n            if (attributes.color !== undefined) {\n              var colors = attributes.color.array;\n\n              for (var _i9 = 0, _l9 = colors.length; _i9 < _l9; _i9 += 3) {\n                renderList.pushColor(colors[_i9], colors[_i9 + 1], colors[_i9 + 2]);\n              }\n            }\n\n            if (geometry.index !== null) {\n              var indices = geometry.index.array;\n\n              for (var _i10 = 0, _l10 = indices.length; _i10 < _l10; _i10 += 2) {\n                renderList.pushLine(indices[_i10], indices[_i10 + 1]);\n              }\n            } else {\n              var step = object.isLineSegments ? 2 : 1;\n\n              for (var _i11 = 0, _l11 = positions.length / 3 - 1; _i11 < _l11; _i11 += step) {\n                renderList.pushLine(_i11, _i11 + 1);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isPoints) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        } else if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (var _i12 = 0, _l12 = positions.length; _i12 < _l12; _i12 += 3) {\n              _vector4.set(positions[_i12], positions[_i12 + 1], positions[_i12 + 2], 1);\n\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        }\n      } else if (object.isSprite) {\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\n        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\n        _vector4.applyMatrix4(_viewProjectionMatrix);\n\n        pushPoint(_vector4, object, camera);\n      }\n    }\n\n    if (sortElements === true) {\n      _renderData.elements.sort(painterSort);\n    }\n\n    return _renderData;\n  };\n\n  function pushPoint(_vector4, object, camera) {\n    var invW = 1 / _vector4.w;\n    _vector4.z *= invW;\n\n    if (_vector4.z >= -1 && _vector4.z <= 1) {\n      _sprite = getNextSpriteInPool();\n      _sprite.id = object.id;\n      _sprite.x = _vector4.x * invW;\n      _sprite.y = _vector4.y * invW;\n      _sprite.z = _vector4.z;\n      _sprite.renderOrder = object.renderOrder;\n      _sprite.object = object;\n      _sprite.rotation = object.rotation;\n      _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n      _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n      _sprite.material = object.material;\n\n      _renderData.elements.push(_sprite);\n    }\n  } // Pools\n\n\n  function getNextObjectInPool() {\n    if (_objectCount === _objectPoolLength) {\n      var object = new RenderableObject();\n\n      _objectPool.push(object);\n\n      _objectPoolLength++;\n      _objectCount++;\n      return object;\n    }\n\n    return _objectPool[_objectCount++];\n  }\n\n  function getNextVertexInPool() {\n    if (_vertexCount === _vertexPoolLength) {\n      var vertex = new RenderableVertex();\n\n      _vertexPool.push(vertex);\n\n      _vertexPoolLength++;\n      _vertexCount++;\n      return vertex;\n    }\n\n    return _vertexPool[_vertexCount++];\n  }\n\n  function getNextFaceInPool() {\n    if (_faceCount === _facePoolLength) {\n      var face = new RenderableFace();\n\n      _facePool.push(face);\n\n      _facePoolLength++;\n      _faceCount++;\n      return face;\n    }\n\n    return _facePool[_faceCount++];\n  }\n\n  function getNextLineInPool() {\n    if (_lineCount === _linePoolLength) {\n      var line = new RenderableLine();\n\n      _linePool.push(line);\n\n      _linePoolLength++;\n      _lineCount++;\n      return line;\n    }\n\n    return _linePool[_lineCount++];\n  }\n\n  function getNextSpriteInPool() {\n    if (_spriteCount === _spritePoolLength) {\n      var sprite = new RenderableSprite();\n\n      _spritePool.push(sprite);\n\n      _spritePoolLength++;\n      _spriteCount++;\n      return sprite;\n    }\n\n    return _spritePool[_spriteCount++];\n  } //\n\n\n  function painterSort(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else if (a.id !== b.id) {\n      return a.id - b.id;\n    } else {\n      return 0;\n    }\n  }\n\n  function clipLine(s1, s2) {\n    var alpha1 = 0,\n        alpha2 = 1,\n        // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n    // Z = -1 and Z = +1, respectively.\n    bc1near = s1.z + s1.w,\n        bc2near = s2.z + s2.w,\n        bc1far = -s1.z + s1.w,\n        bc2far = -s2.z + s2.w;\n\n    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n      // Both vertices lie entirely within all clip planes.\n      return true;\n    } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n      // Both vertices lie entirely outside one of the clip planes.\n      return false;\n    } else {\n      // The line segment spans at least one clip plane.\n      if (bc1near < 0) {\n        // v1 lies outside the near plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n      } else if (bc2near < 0) {\n        // v2 lies outside the near plane, v1 inside\n        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n      }\n\n      if (bc1far < 0) {\n        // v1 lies outside the far plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n      } else if (bc2far < 0) {\n        // v2 lies outside the far plane, v2 inside\n        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n      }\n\n      if (alpha2 < alpha1) {\n        // The line segment spans two boundaries, but is outside both of them.\n        // (This can't happen when we're only clipping against just near/far but good\n        //  to leave the check here for future usage if other clip planes are added.)\n        return false;\n      } else {\n        // Update the s1 and s2 vertices to match the clipped line segment.\n        s1.lerp(s2, alpha1);\n        s2.lerp(s1, 1 - alpha2);\n        return true;\n      }\n    }\n  }\n};\n\nexports.Projector = Projector;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["checkTriangleVisibility","object","z","positionScreen","projectVertex","vertexNormalsLength","normalModel","copy","v3","positionWorld","scale","pushUv","RenderableObject","uvs","lights","pushTriangle","Projector","x","__esModule","setObject","id","objects","renderOrder","position","value","visible","RenderableVertex","vertexColors","RenderableLine","projectScene","rotation","unprojectVector","length","pushColor","checkBackfaceCulling","pickingRay","y","pushNormal","vertexNormalsModel","RenderableFace","pushVertex","RenderableSprite","v1","color","elements","pushLine","v2","projectVector","material"]],"~:compiled-at",1630917515154,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$renderers$Projector.js\",\n\"lineCount\":28,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/renderers/Projector.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$renderers$Projector\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.RenderableVertex = exports.RenderableSprite = exports.RenderableObject = exports.RenderableLine = exports.RenderableFace = exports.Projector = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar RenderableObject = function RenderableObject() {\\n  this.id = 0;\\n  this.object = null;\\n  this.z = 0;\\n  this.renderOrder = 0;\\n}; //\\n\\n\\nexports.RenderableObject = RenderableObject;\\n\\nvar RenderableFace = function RenderableFace() {\\n  this.id = 0;\\n  this.v1 = new RenderableVertex();\\n  this.v2 = new RenderableVertex();\\n  this.v3 = new RenderableVertex();\\n  this.normalModel = new _three.Vector3();\\n  this.vertexNormalsModel = [new _three.Vector3(), new _three.Vector3(), new _three.Vector3()];\\n  this.vertexNormalsLength = 0;\\n  this.color = new _three.Color();\\n  this.material = null;\\n  this.uvs = [new _three.Vector2(), new _three.Vector2(), new _three.Vector2()];\\n  this.z = 0;\\n  this.renderOrder = 0;\\n}; //\\n\\n\\nexports.RenderableFace = RenderableFace;\\n\\nvar RenderableVertex = function RenderableVertex() {\\n  this.position = new _three.Vector3();\\n  this.positionWorld = new _three.Vector3();\\n  this.positionScreen = new _three.Vector4();\\n  this.visible = true;\\n};\\n\\nexports.RenderableVertex = RenderableVertex;\\n\\nRenderableVertex.prototype.copy = function (vertex) {\\n  this.positionWorld.copy(vertex.positionWorld);\\n  this.positionScreen.copy(vertex.positionScreen);\\n}; //\\n\\n\\nvar RenderableLine = function RenderableLine() {\\n  this.id = 0;\\n  this.v1 = new RenderableVertex();\\n  this.v2 = new RenderableVertex();\\n  this.vertexColors = [new _three.Color(), new _three.Color()];\\n  this.material = null;\\n  this.z = 0;\\n  this.renderOrder = 0;\\n}; //\\n\\n\\nexports.RenderableLine = RenderableLine;\\n\\nvar RenderableSprite = function RenderableSprite() {\\n  this.id = 0;\\n  this.object = null;\\n  this.x = 0;\\n  this.y = 0;\\n  this.z = 0;\\n  this.rotation = 0;\\n  this.scale = new _three.Vector2();\\n  this.material = null;\\n  this.renderOrder = 0;\\n}; //\\n\\n\\nexports.RenderableSprite = RenderableSprite;\\n\\nvar Projector = function Projector() {\\n  var _object,\\n      _objectCount,\\n      _objectPool = [],\\n      _objectPoolLength = 0,\\n      _vertex,\\n      _vertexCount,\\n      _vertexPool = [],\\n      _vertexPoolLength = 0,\\n      _face,\\n      _faceCount,\\n      _facePool = [],\\n      _facePoolLength = 0,\\n      _line,\\n      _lineCount,\\n      _linePool = [],\\n      _linePoolLength = 0,\\n      _sprite,\\n      _spriteCount,\\n      _spritePool = [],\\n      _spritePoolLength = 0,\\n      _renderData = {\\n    objects: [],\\n    lights: [],\\n    elements: []\\n  },\\n      _vector3 = new _three.Vector3(),\\n      _vector4 = new _three.Vector4(),\\n      _clipBox = new _three.Box3(new _three.Vector3(-1, -1, -1), new _three.Vector3(1, 1, 1)),\\n      _boundingBox = new _three.Box3(),\\n      _points3 = new Array(3),\\n      _viewMatrix = new _three.Matrix4(),\\n      _viewProjectionMatrix = new _three.Matrix4(),\\n      _modelMatrix,\\n      _modelViewProjectionMatrix = new _three.Matrix4(),\\n      _frustum = new _three.Frustum(); //\\n\\n\\n  this.projectVector = function (vector, camera) {\\n    console.warn('THREE.Projector: .projectVector() is now vector.project().');\\n    vector.project(camera);\\n  };\\n\\n  this.unprojectVector = function (vector, camera) {\\n    console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\\n    vector.unproject(camera);\\n  };\\n\\n  this.pickingRay = function () {\\n    console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\\n  }; //\\n\\n\\n  var RenderList = function RenderList() {\\n    var normals = [];\\n    var colors = [];\\n    var uvs = [];\\n    var object = null;\\n    var normalMatrix = new _three.Matrix3();\\n\\n    function setObject(value) {\\n      object = value;\\n      normalMatrix.getNormalMatrix(object.matrixWorld);\\n      normals.length = 0;\\n      colors.length = 0;\\n      uvs.length = 0;\\n    }\\n\\n    function projectVertex(vertex) {\\n      var position = vertex.position;\\n      var positionWorld = vertex.positionWorld;\\n      var positionScreen = vertex.positionScreen;\\n      positionWorld.copy(position).applyMatrix4(_modelMatrix);\\n      positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\\n      var invW = 1 / positionScreen.w;\\n      positionScreen.x *= invW;\\n      positionScreen.y *= invW;\\n      positionScreen.z *= invW;\\n      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\\n    }\\n\\n    function pushVertex(x, y, z) {\\n      _vertex = getNextVertexInPool();\\n\\n      _vertex.position.set(x, y, z);\\n\\n      projectVertex(_vertex);\\n    }\\n\\n    function pushNormal(x, y, z) {\\n      normals.push(x, y, z);\\n    }\\n\\n    function pushColor(r, g, b) {\\n      colors.push(r, g, b);\\n    }\\n\\n    function pushUv(x, y) {\\n      uvs.push(x, y);\\n    }\\n\\n    function checkTriangleVisibility(v1, v2, v3) {\\n      if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\\n      _points3[0] = v1.positionScreen;\\n      _points3[1] = v2.positionScreen;\\n      _points3[2] = v3.positionScreen;\\n      return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\\n    }\\n\\n    function checkBackfaceCulling(v1, v2, v3) {\\n      return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\\n    }\\n\\n    function pushLine(a, b) {\\n      var v1 = _vertexPool[a];\\n      var v2 = _vertexPool[b]; // Clip\\n\\n      v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\\n      v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\\n\\n      if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\\n        // Perform the perspective divide\\n        v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\\n        v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\\n        _line = getNextLineInPool();\\n        _line.id = object.id;\\n\\n        _line.v1.copy(v1);\\n\\n        _line.v2.copy(v2);\\n\\n        _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\\n        _line.renderOrder = object.renderOrder;\\n        _line.material = object.material;\\n\\n        if (object.material.vertexColors) {\\n          _line.vertexColors[0].fromArray(colors, a * 3);\\n\\n          _line.vertexColors[1].fromArray(colors, b * 3);\\n        }\\n\\n        _renderData.elements.push(_line);\\n      }\\n    }\\n\\n    function pushTriangle(a, b, c, material) {\\n      var v1 = _vertexPool[a];\\n      var v2 = _vertexPool[b];\\n      var v3 = _vertexPool[c];\\n      if (checkTriangleVisibility(v1, v2, v3) === false) return;\\n\\n      if (material.side === _three.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\\n        _face = getNextFaceInPool();\\n        _face.id = object.id;\\n\\n        _face.v1.copy(v1);\\n\\n        _face.v2.copy(v2);\\n\\n        _face.v3.copy(v3);\\n\\n        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\\n        _face.renderOrder = object.renderOrder; // face normal\\n\\n        _vector3.subVectors(v3.position, v2.position);\\n\\n        _vector4.subVectors(v1.position, v2.position);\\n\\n        _vector3.cross(_vector4);\\n\\n        _face.normalModel.copy(_vector3);\\n\\n        _face.normalModel.applyMatrix3(normalMatrix).normalize();\\n\\n        for (var i = 0; i < 3; i++) {\\n          var normal = _face.vertexNormalsModel[i];\\n          normal.fromArray(normals, arguments[i] * 3);\\n          normal.applyMatrix3(normalMatrix).normalize();\\n          var uv = _face.uvs[i];\\n          uv.fromArray(uvs, arguments[i] * 2);\\n        }\\n\\n        _face.vertexNormalsLength = 3;\\n        _face.material = material;\\n\\n        if (material.vertexColors) {\\n          _face.color.fromArray(colors, a * 3);\\n        }\\n\\n        _renderData.elements.push(_face);\\n      }\\n    }\\n\\n    return {\\n      setObject: setObject,\\n      projectVertex: projectVertex,\\n      checkTriangleVisibility: checkTriangleVisibility,\\n      checkBackfaceCulling: checkBackfaceCulling,\\n      pushVertex: pushVertex,\\n      pushNormal: pushNormal,\\n      pushColor: pushColor,\\n      pushUv: pushUv,\\n      pushLine: pushLine,\\n      pushTriangle: pushTriangle\\n    };\\n  };\\n\\n  var renderList = new RenderList();\\n\\n  function projectObject(object) {\\n    if (object.visible === false) return;\\n\\n    if (object.isLight) {\\n      _renderData.lights.push(object);\\n    } else if (object.isMesh || object.isLine || object.isPoints) {\\n      if (object.material.visible === false) return;\\n      if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\\n      addObject(object);\\n    } else if (object.isSprite) {\\n      if (object.material.visible === false) return;\\n      if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\\n      addObject(object);\\n    }\\n\\n    var children = object.children;\\n\\n    for (var i = 0, l = children.length; i < l; i++) {\\n      projectObject(children[i]);\\n    }\\n  }\\n\\n  function addObject(object) {\\n    _object = getNextObjectInPool();\\n    _object.id = object.id;\\n    _object.object = object;\\n\\n    _vector3.setFromMatrixPosition(object.matrixWorld);\\n\\n    _vector3.applyMatrix4(_viewProjectionMatrix);\\n\\n    _object.z = _vector3.z;\\n    _object.renderOrder = object.renderOrder;\\n\\n    _renderData.objects.push(_object);\\n  }\\n\\n  this.projectScene = function (scene, camera, sortObjects, sortElements) {\\n    _faceCount = 0;\\n    _lineCount = 0;\\n    _spriteCount = 0;\\n    _renderData.elements.length = 0;\\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\\n    if (camera.parent === null) camera.updateMatrixWorld();\\n\\n    _viewMatrix.copy(camera.matrixWorldInverse);\\n\\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\\n\\n    _frustum.setFromProjectionMatrix(_viewProjectionMatrix); //\\n\\n\\n    _objectCount = 0;\\n    _renderData.objects.length = 0;\\n    _renderData.lights.length = 0;\\n    projectObject(scene);\\n\\n    if (sortObjects === true) {\\n      _renderData.objects.sort(painterSort);\\n    } //\\n\\n\\n    var objects = _renderData.objects;\\n\\n    for (var o = 0, ol = objects.length; o < ol; o++) {\\n      var object = objects[o].object;\\n      var geometry = object.geometry;\\n      renderList.setObject(object);\\n      _modelMatrix = object.matrixWorld;\\n      _vertexCount = 0;\\n\\n      if (object.isMesh) {\\n        if (geometry.isBufferGeometry) {\\n          var material = object.material;\\n          var isMultiMaterial = Array.isArray(material);\\n          var attributes = geometry.attributes;\\n          var groups = geometry.groups;\\n          if (attributes.position === undefined) continue;\\n          var positions = attributes.position.array;\\n\\n          for (var i = 0, l = positions.length; i < l; i += 3) {\\n            var x = positions[i];\\n            var y = positions[i + 1];\\n            var z = positions[i + 2];\\n\\n            if (material.morphTargets === true) {\\n              var morphTargets = geometry.morphAttributes.position;\\n              var morphTargetsRelative = geometry.morphTargetsRelative;\\n              var morphInfluences = object.morphTargetInfluences;\\n\\n              for (var t = 0, tl = morphTargets.length; t < tl; t++) {\\n                var influence = morphInfluences[t];\\n                if (influence === 0) continue;\\n                var target = morphTargets[t];\\n\\n                if (morphTargetsRelative) {\\n                  x += target.getX(i / 3) * influence;\\n                  y += target.getY(i / 3) * influence;\\n                  z += target.getZ(i / 3) * influence;\\n                } else {\\n                  x += (target.getX(i / 3) - positions[i]) * influence;\\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\\n                }\\n              }\\n            }\\n\\n            renderList.pushVertex(x, y, z);\\n          }\\n\\n          if (attributes.normal !== undefined) {\\n            var normals = attributes.normal.array;\\n\\n            for (var _i = 0, _l = normals.length; _i < _l; _i += 3) {\\n              renderList.pushNormal(normals[_i], normals[_i + 1], normals[_i + 2]);\\n            }\\n          }\\n\\n          if (attributes.color !== undefined) {\\n            var colors = attributes.color.array;\\n\\n            for (var _i2 = 0, _l2 = colors.length; _i2 < _l2; _i2 += 3) {\\n              renderList.pushColor(colors[_i2], colors[_i2 + 1], colors[_i2 + 2]);\\n            }\\n          }\\n\\n          if (attributes.uv !== undefined) {\\n            var uvs = attributes.uv.array;\\n\\n            for (var _i3 = 0, _l3 = uvs.length; _i3 < _l3; _i3 += 2) {\\n              renderList.pushUv(uvs[_i3], uvs[_i3 + 1]);\\n            }\\n          }\\n\\n          if (geometry.index !== null) {\\n            var indices = geometry.index.array;\\n\\n            if (groups.length > 0) {\\n              for (var g = 0; g < groups.length; g++) {\\n                var group = groups[g];\\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\\n                if (material === undefined) continue;\\n\\n                for (var _i4 = group.start, _l4 = group.start + group.count; _i4 < _l4; _i4 += 3) {\\n                  renderList.pushTriangle(indices[_i4], indices[_i4 + 1], indices[_i4 + 2], material);\\n                }\\n              }\\n            } else {\\n              for (var _i5 = 0, _l5 = indices.length; _i5 < _l5; _i5 += 3) {\\n                renderList.pushTriangle(indices[_i5], indices[_i5 + 1], indices[_i5 + 2], material);\\n              }\\n            }\\n          } else {\\n            if (groups.length > 0) {\\n              for (var _g = 0; _g < groups.length; _g++) {\\n                var group = groups[_g];\\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\\n                if (material === undefined) continue;\\n\\n                for (var _i6 = group.start, _l6 = group.start + group.count; _i6 < _l6; _i6 += 3) {\\n                  renderList.pushTriangle(_i6, _i6 + 1, _i6 + 2, material);\\n                }\\n              }\\n            } else {\\n              for (var _i7 = 0, _l7 = positions.length / 3; _i7 < _l7; _i7 += 3) {\\n                renderList.pushTriangle(_i7, _i7 + 1, _i7 + 2, material);\\n              }\\n            }\\n          }\\n        } else if (geometry.isGeometry) {\\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\\n          return;\\n        }\\n      } else if (object.isLine) {\\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\\n\\n        if (geometry.isBufferGeometry) {\\n          var attributes = geometry.attributes;\\n\\n          if (attributes.position !== undefined) {\\n            var positions = attributes.position.array;\\n\\n            for (var _i8 = 0, _l8 = positions.length; _i8 < _l8; _i8 += 3) {\\n              renderList.pushVertex(positions[_i8], positions[_i8 + 1], positions[_i8 + 2]);\\n            }\\n\\n            if (attributes.color !== undefined) {\\n              var colors = attributes.color.array;\\n\\n              for (var _i9 = 0, _l9 = colors.length; _i9 < _l9; _i9 += 3) {\\n                renderList.pushColor(colors[_i9], colors[_i9 + 1], colors[_i9 + 2]);\\n              }\\n            }\\n\\n            if (geometry.index !== null) {\\n              var indices = geometry.index.array;\\n\\n              for (var _i10 = 0, _l10 = indices.length; _i10 < _l10; _i10 += 2) {\\n                renderList.pushLine(indices[_i10], indices[_i10 + 1]);\\n              }\\n            } else {\\n              var step = object.isLineSegments ? 2 : 1;\\n\\n              for (var _i11 = 0, _l11 = positions.length / 3 - 1; _i11 < _l11; _i11 += step) {\\n                renderList.pushLine(_i11, _i11 + 1);\\n              }\\n            }\\n          }\\n        } else if (geometry.isGeometry) {\\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\\n          return;\\n        }\\n      } else if (object.isPoints) {\\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\\n\\n        if (geometry.isGeometry) {\\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\\n          return;\\n        } else if (geometry.isBufferGeometry) {\\n          var attributes = geometry.attributes;\\n\\n          if (attributes.position !== undefined) {\\n            var positions = attributes.position.array;\\n\\n            for (var _i12 = 0, _l12 = positions.length; _i12 < _l12; _i12 += 3) {\\n              _vector4.set(positions[_i12], positions[_i12 + 1], positions[_i12 + 2], 1);\\n\\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\\n\\n              pushPoint(_vector4, object, camera);\\n            }\\n          }\\n        }\\n      } else if (object.isSprite) {\\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\\n\\n        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\\n\\n        _vector4.applyMatrix4(_viewProjectionMatrix);\\n\\n        pushPoint(_vector4, object, camera);\\n      }\\n    }\\n\\n    if (sortElements === true) {\\n      _renderData.elements.sort(painterSort);\\n    }\\n\\n    return _renderData;\\n  };\\n\\n  function pushPoint(_vector4, object, camera) {\\n    var invW = 1 / _vector4.w;\\n    _vector4.z *= invW;\\n\\n    if (_vector4.z >= -1 && _vector4.z <= 1) {\\n      _sprite = getNextSpriteInPool();\\n      _sprite.id = object.id;\\n      _sprite.x = _vector4.x * invW;\\n      _sprite.y = _vector4.y * invW;\\n      _sprite.z = _vector4.z;\\n      _sprite.renderOrder = object.renderOrder;\\n      _sprite.object = object;\\n      _sprite.rotation = object.rotation;\\n      _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\\n      _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\\n      _sprite.material = object.material;\\n\\n      _renderData.elements.push(_sprite);\\n    }\\n  } // Pools\\n\\n\\n  function getNextObjectInPool() {\\n    if (_objectCount === _objectPoolLength) {\\n      var object = new RenderableObject();\\n\\n      _objectPool.push(object);\\n\\n      _objectPoolLength++;\\n      _objectCount++;\\n      return object;\\n    }\\n\\n    return _objectPool[_objectCount++];\\n  }\\n\\n  function getNextVertexInPool() {\\n    if (_vertexCount === _vertexPoolLength) {\\n      var vertex = new RenderableVertex();\\n\\n      _vertexPool.push(vertex);\\n\\n      _vertexPoolLength++;\\n      _vertexCount++;\\n      return vertex;\\n    }\\n\\n    return _vertexPool[_vertexCount++];\\n  }\\n\\n  function getNextFaceInPool() {\\n    if (_faceCount === _facePoolLength) {\\n      var face = new RenderableFace();\\n\\n      _facePool.push(face);\\n\\n      _facePoolLength++;\\n      _faceCount++;\\n      return face;\\n    }\\n\\n    return _facePool[_faceCount++];\\n  }\\n\\n  function getNextLineInPool() {\\n    if (_lineCount === _linePoolLength) {\\n      var line = new RenderableLine();\\n\\n      _linePool.push(line);\\n\\n      _linePoolLength++;\\n      _lineCount++;\\n      return line;\\n    }\\n\\n    return _linePool[_lineCount++];\\n  }\\n\\n  function getNextSpriteInPool() {\\n    if (_spriteCount === _spritePoolLength) {\\n      var sprite = new RenderableSprite();\\n\\n      _spritePool.push(sprite);\\n\\n      _spritePoolLength++;\\n      _spriteCount++;\\n      return sprite;\\n    }\\n\\n    return _spritePool[_spriteCount++];\\n  } //\\n\\n\\n  function painterSort(a, b) {\\n    if (a.renderOrder !== b.renderOrder) {\\n      return a.renderOrder - b.renderOrder;\\n    } else if (a.z !== b.z) {\\n      return b.z - a.z;\\n    } else if (a.id !== b.id) {\\n      return a.id - b.id;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  function clipLine(s1, s2) {\\n    var alpha1 = 0,\\n        alpha2 = 1,\\n        // Calculate the boundary coordinate of each vertex for the near and far clip planes,\\n    // Z = -1 and Z = +1, respectively.\\n    bc1near = s1.z + s1.w,\\n        bc2near = s2.z + s2.w,\\n        bc1far = -s1.z + s1.w,\\n        bc2far = -s2.z + s2.w;\\n\\n    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\\n      // Both vertices lie entirely within all clip planes.\\n      return true;\\n    } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\\n      // Both vertices lie entirely outside one of the clip planes.\\n      return false;\\n    } else {\\n      // The line segment spans at least one clip plane.\\n      if (bc1near < 0) {\\n        // v1 lies outside the near plane, v2 inside\\n        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\\n      } else if (bc2near < 0) {\\n        // v2 lies outside the near plane, v1 inside\\n        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\\n      }\\n\\n      if (bc1far < 0) {\\n        // v1 lies outside the far plane, v2 inside\\n        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\\n      } else if (bc2far < 0) {\\n        // v2 lies outside the far plane, v2 inside\\n        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\\n      }\\n\\n      if (alpha2 < alpha1) {\\n        // The line segment spans two boundaries, but is outside both of them.\\n        // (This can't happen when we're only clipping against just near/far but good\\n        //  to leave the check here for future usage if other clip planes are added.)\\n        return false;\\n      } else {\\n        // Update the s1 and s2 vertices to match the clipped line segment.\\n        s1.lerp(s2, alpha1);\\n        s2.lerp(s1, 1 - alpha2);\\n        return true;\\n      }\\n    }\\n  }\\n};\\n\\nexports.Projector = Projector;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"RenderableVertex\",\"RenderableSprite\",\"RenderableObject\",\"RenderableLine\",\"RenderableFace\",\"Projector\",\"_three\",\"id\",\"object\",\"renderOrder\",\"z\",\"v1\",\"v2\",\"v3\",\"normalModel\",\"Vector3\",\"vertexNormalsModel\",\"vertexNormalsLength\",\"color\",\"Color\",\"material\",\"uvs\",\"Vector2\",\"position\",\"positionWorld\",\"positionScreen\",\"Vector4\",\"visible\",\"prototype\",\"copy\",\"RenderableVertex.prototype.copy\",\"vertex\",\"vertexColors\",\"rotation\",\"y\",\"x\",\"scale\",\"projectObject\",\"isLight\",\"_renderData\",\"lights\",\"push\",\"isMesh\",\"isLine\",\"isPoints\",\"frustumCulled\",\"_frustum\",\"intersectsObject\",\"addObject\",\"isSprite\",\"intersectsSprite\",\"children\",\"i\",\"l\",\"length\",\"_objectCount\",\"_objectPoolLength\",\"_objectPool\",\"_object\",\"_vector3\",\"setFromMatrixPosition\",\"matrixWorld\",\"applyMatrix4\",\"_viewProjectionMatrix\",\"objects\",\"pushPoint\",\"_vector4\",\"camera\",\"invW\",\"w\",\"_spriteCount\",\"_spritePoolLength\",\"sprite\",\"_spritePool\",\"_sprite\",\"Math\",\"abs\",\"projectionMatrix\",\"elements\",\"painterSort\",\"a\",\"b\",\"clipLine\",\"s1\",\"s2\",\"alpha1\",\"alpha2\",\"bc1near\",\"bc2near\",\"bc1far\",\"bc2far\",\"max\",\"min\",\"lerp\",\"_vertex\",\"_vertexCount\",\"_vertexPool\",\"_vertexPoolLength\",\"_face\",\"_faceCount\",\"_facePool\",\"_facePoolLength\",\"_line\",\"_lineCount\",\"_linePool\",\"_linePoolLength\",\"_clipBox\",\"Box3\",\"_boundingBox\",\"_points3\",\"Array\",\"_viewMatrix\",\"Matrix4\",\"_modelMatrix\",\"_modelViewProjectionMatrix\",\"Frustum\",\"projectVector\",\"this.projectVector\",\"vector\",\"console\",\"warn\",\"project\",\"unprojectVector\",\"this.unprojectVector\",\"unproject\",\"pickingRay\",\"this.pickingRay\",\"error\",\"renderList\",\"RenderList\",\"projectVertex\",\"checkTriangleVisibility\",\"intersectsBox\",\"setFromPoints\",\"checkBackfaceCulling\",\"normals\",\"colors\",\"normalMatrix\",\"Matrix3\",\"setObject\",\"getNormalMatrix\",\"pushVertex\",\"set\",\"pushNormal\",\"pushColor\",\"r\",\"g\",\"pushUv\",\"pushLine\",\"multiplyScalar\",\"line\",\"fromArray\",\"pushTriangle\",\"c\",\"side\",\"DoubleSide\",\"face\",\"subVectors\",\"cross\",\"applyMatrix3\",\"normalize\",\"normal\",\"arguments\",\"uv\",\"projectScene\",\"this.projectScene\",\"scene\",\"sortObjects\",\"sortElements\",\"autoUpdate\",\"updateMatrixWorld\",\"parent\",\"matrixWorldInverse\",\"multiplyMatrices\",\"setFromProjectionMatrix\",\"sort\",\"o\",\"ol\",\"geometry\",\"isBufferGeometry\",\"isMultiMaterial\",\"isArray\",\"attributes\",\"groups\",\"undefined\",\"positions\",\"array\",\"morphTargets\",\"morphAttributes\",\"morphTargetsRelative\",\"morphInfluences\",\"morphTargetInfluences\",\"t\",\"tl\",\"influence\",\"target\",\"getX\",\"getY\",\"getZ\",\"_l\",\"_i\",\"_l2\",\"_i2\",\"_l3\",\"_i3\",\"index\",\"indices\",\"group\",\"materialIndex\",\"_i4\",\"_l4\",\"start\",\"count\",\"_i5\",\"_l5\",\"_g\",\"_i6\",\"_l6\",\"_i7\",\"_l7\",\"isGeometry\",\"_i8\",\"_l8\",\"_l9\",\"_i9\",\"_l10\",\"_i10\",\"step\",\"_l11\",\"isLineSegments\",\"_i11\",\"_l12\",\"_i12\",\"modelViewMatrix\"]\n}\n"]