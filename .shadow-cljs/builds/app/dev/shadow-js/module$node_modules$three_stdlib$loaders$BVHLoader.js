["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/loaders/BVHLoader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$loaders$BVHLoader=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=\ndescriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);staticProps&&_defineProperties(Constructor,staticProps);return Constructor}function _getPrototypeOf(o$jscomp$0){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)};\nreturn _getPrototypeOf(o$jscomp$0)}function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&null!==superClass)throw new TypeError(\"Super expression must either be null or a function\");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}});superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o$jscomp$0,p$jscomp$0){_setPrototypeOf=Object.setPrototypeOf||function(o,p){o.__proto__=p;return o};\nreturn _setPrototypeOf(o$jscomp$0,p$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.BVHLoader=void 0;var _three=require(\"module$node_modules$three$build$three_module\");global=function(_Loader){function BVHLoader(manager){if(!(this instanceof BVHLoader))throw new TypeError(\"Cannot call a class as a function\");manager=_getPrototypeOf(BVHLoader).call(this,manager);if(!manager||\"object\"!==_typeof(manager)&&\"function\"!==typeof manager){if(void 0===this)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\nmanager=this}manager.animateBonePositions=!0;manager.animateBoneRotations=!0;return manager}_inherits(BVHLoader,_Loader);_createClass(BVHLoader,[{key:\"load\",value:function(url,onLoad,onProgress,onError){var scope=this,loader=new _three.FileLoader(scope.manager);loader.setPath(scope.path);loader.setRequestHeader(scope.requestHeader);loader.setWithCredentials(scope.withCredentials);loader.load(url,function(text){try{onLoad(scope.parse(text))}catch(e){onError?onError(e):console.error(e),scope.manager.itemError(url)}},\nonProgress,onError)}},{key:\"parse\",value:function(text){function readFrameData(data,frameTime,bone){if(\"ENDSITE\"!==bone.type){var keyframe={time:frameTime,position:new _three.Vector3,rotation:new _three.Quaternion};bone.frames.push(keyframe);for(var quat=new _three.Quaternion,vx=new _three.Vector3(1,0,0),vy=new _three.Vector3(0,1,0),vz=new _three.Vector3(0,0,1),i=0;i<bone.channels.length;i++)switch(bone.channels[i]){case \"Xposition\":keyframe.position.x=parseFloat(data.shift().trim());break;case \"Yposition\":keyframe.position.y=\nparseFloat(data.shift().trim());break;case \"Zposition\":keyframe.position.z=parseFloat(data.shift().trim());break;case \"Xrotation\":quat.setFromAxisAngle(vx,parseFloat(data.shift().trim())*Math.PI/180);keyframe.rotation.multiply(quat);break;case \"Yrotation\":quat.setFromAxisAngle(vy,parseFloat(data.shift().trim())*Math.PI/180);keyframe.rotation.multiply(quat);break;case \"Zrotation\":quat.setFromAxisAngle(vz,parseFloat(data.shift().trim())*Math.PI/180);keyframe.rotation.multiply(quat);break;default:console.warn(\"THREE.BVHLoader: Invalid channel type.\")}for(keyframe=\n0;keyframe<bone.children.length;keyframe++)readFrameData(data,frameTime,bone.children[keyframe])}}function readNode(lines,firstline,list){var node={name:\"\",type:\"\",frames:[]};list.push(node);firstline=firstline.split(/[\\s]+/);\"END\"===firstline[0].toUpperCase()&&\"SITE\"===firstline[1].toUpperCase()?(node.type=\"ENDSITE\",node.name=\"ENDSITE\"):(node.name=firstline[1],node.type=firstline[0].toUpperCase());\"{\"!==nextLine(lines)&&console.error(\"THREE.BVHLoader: Expected opening { after type \\x26 name\");firstline=\nnextLine(lines).split(/[\\s]+/);\"OFFSET\"!==firstline[0]&&console.error(\"THREE.BVHLoader: Expected OFFSET but got: \"+firstline[0]);4!==firstline.length&&console.error(\"THREE.BVHLoader: Invalid number of values for OFFSET.\");firstline=new _three.Vector3(parseFloat(firstline[1]),parseFloat(firstline[2]),parseFloat(firstline[3]));(isNaN(firstline.x)||isNaN(firstline.y)||isNaN(firstline.z))&&console.error(\"THREE.BVHLoader: Invalid values of OFFSET.\");node.offset=firstline;if(\"ENDSITE\"!==node.type){firstline=\nnextLine(lines).split(/[\\s]+/);\"CHANNELS\"!==firstline[0]&&console.error(\"THREE.BVHLoader: Expected CHANNELS definition.\");var numChannels=parseInt(firstline[1]);node.channels=firstline.splice(2,numChannels);node.children=[]}for(;;){firstline=nextLine(lines);if(\"}\"===firstline)return node;node.children.push(readNode(lines,firstline,list))}}function toTHREEBone(source,list){var bone=new _three.Bone;list.push(bone);bone.position.add(source.offset);bone.name=source.name;if(\"ENDSITE\"!==source.type)for(var i=\n0;i<source.children.length;i++)bone.add(toTHREEBone(source.children[i],list));return bone}function nextLine(lines){for(var line;0===(line=lines.shift().trim()).length;);return line}var scope=this,bones$jscomp$0=function(lines){\"HIERARCHY\"!==nextLine(lines)&&console.error(\"THREE.BVHLoader: HIERARCHY expected.\");var list=[],root=readNode(lines,nextLine(lines),list);\"MOTION\"!==nextLine(lines)&&console.error(\"THREE.BVHLoader: MOTION expected.\");var tokens=nextLine(lines).split(/[\\s]+/),numFrames=parseInt(tokens[1]);\nisNaN(numFrames)&&console.error(\"THREE.BVHLoader: Failed to read number of frames.\");tokens=nextLine(lines).split(/[\\s]+/);var frameTime=parseFloat(tokens[2]);isNaN(frameTime)&&console.error(\"THREE.BVHLoader: Failed to read frame time.\");for(var i=0;i<numFrames;i++)tokens=nextLine(lines).split(/[\\s]+/),readFrameData(tokens,i*frameTime,root);return list}(text.split(/[\\r\\n]+/g));text=[];toTHREEBone(bones$jscomp$0[0],text);bones$jscomp$0=function(bones){for(var tracks=[],i=0;i<bones.length;i++){var bone=\nbones[i];if(\"ENDSITE\"!==bone.type){for(var times=[],positions=[],rotations=[],j=0;j<bone.frames.length;j++){var frame=bone.frames[j];times.push(frame.time);positions.push(frame.position.x+bone.offset.x);positions.push(frame.position.y+bone.offset.y);positions.push(frame.position.z+bone.offset.z);rotations.push(frame.rotation.x);rotations.push(frame.rotation.y);rotations.push(frame.rotation.z);rotations.push(frame.rotation.w)}scope.animateBonePositions&&tracks.push(new _three.VectorKeyframeTrack(\".bones[\"+\nbone.name+\"].position\",times,positions));scope.animateBoneRotations&&tracks.push(new _three.QuaternionKeyframeTrack(\".bones[\"+bone.name+\"].quaternion\",times,rotations))}}return new _three.AnimationClip(\"animation\",-1,tracks)}(bones$jscomp$0);return{skeleton:new _three.Skeleton(text),clip:bones$jscomp$0}}}]);return BVHLoader}(_three.Loader);exports.BVHLoader=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$loaders$BVHLoader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BVHLoader = void 0;\n\nvar _three = require(\"three\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * Description: reads BVH files and outputs a single Skeleton and an AnimationClip\n *\n * Currently only supports bvh files containing a single root.\n *\n */\nvar BVHLoader =\n/*#__PURE__*/\nfunction (_Loader) {\n  _inherits(BVHLoader, _Loader);\n\n  function BVHLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, BVHLoader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BVHLoader).call(this, manager));\n    _this.animateBonePositions = true;\n    _this.animateBoneRotations = true;\n    return _this;\n  }\n\n  _createClass(BVHLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new _three.FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      /*\n      reads a string array (lines) from a BVH file\n      and outputs a skeleton structure including motion data\n      returns thee root node:\n      { name: '', channels: [], children: [] }\n      */\n      function readBvh(lines) {\n        // read model structure\n        if (nextLine(lines) !== 'HIERARCHY') {\n          console.error('THREE.BVHLoader: HIERARCHY expected.');\n        }\n\n        var list = []; // collects flat array of all bones\n\n        var root = readNode(lines, nextLine(lines), list); // read motion data\n\n        if (nextLine(lines) !== 'MOTION') {\n          console.error('THREE.BVHLoader: MOTION expected.');\n        } // number of frames\n\n\n        var tokens = nextLine(lines).split(/[\\s]+/);\n        var numFrames = parseInt(tokens[1]);\n\n        if (isNaN(numFrames)) {\n          console.error('THREE.BVHLoader: Failed to read number of frames.');\n        } // frame time\n\n\n        tokens = nextLine(lines).split(/[\\s]+/);\n        var frameTime = parseFloat(tokens[2]);\n\n        if (isNaN(frameTime)) {\n          console.error('THREE.BVHLoader: Failed to read frame time.');\n        } // read frame data line by line\n\n\n        for (var i = 0; i < numFrames; i++) {\n          tokens = nextLine(lines).split(/[\\s]+/);\n          readFrameData(tokens, i * frameTime, root);\n        }\n\n        return list;\n      }\n      /*\n      Recursively reads data from a single frame into the bone hierarchy.\n      The passed bone hierarchy has to be structured in the same order as the BVH file.\n      keyframe data is stored in bone.frames.\n      - data: splitted string array (frame values), values are shift()ed so\n      this should be empty after parsing the whole hierarchy.\n      - frameTime: playback time for this keyframe.\n      - bone: the bone to read frame data from.\n      */\n\n\n      function readFrameData(data, frameTime, bone) {\n        // end sites have no motion data\n        if (bone.type === 'ENDSITE') return; // add keyframe\n\n        var keyframe = {\n          time: frameTime,\n          position: new _three.Vector3(),\n          rotation: new _three.Quaternion()\n        };\n        bone.frames.push(keyframe);\n        var quat = new _three.Quaternion();\n        var vx = new _three.Vector3(1, 0, 0);\n        var vy = new _three.Vector3(0, 1, 0);\n        var vz = new _three.Vector3(0, 0, 1); // parse values for each channel in node\n\n        for (var i = 0; i < bone.channels.length; i++) {\n          switch (bone.channels[i]) {\n            case 'Xposition':\n              keyframe.position.x = parseFloat(data.shift().trim());\n              break;\n\n            case 'Yposition':\n              keyframe.position.y = parseFloat(data.shift().trim());\n              break;\n\n            case 'Zposition':\n              keyframe.position.z = parseFloat(data.shift().trim());\n              break;\n\n            case 'Xrotation':\n              quat.setFromAxisAngle(vx, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n\n            case 'Yrotation':\n              quat.setFromAxisAngle(vy, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n\n            case 'Zrotation':\n              quat.setFromAxisAngle(vz, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n\n            default:\n              console.warn('THREE.BVHLoader: Invalid channel type.');\n          }\n        } // parse child nodes\n\n\n        for (var _i = 0; _i < bone.children.length; _i++) {\n          readFrameData(data, frameTime, bone.children[_i]);\n        }\n      }\n      /*\n      Recursively parses the HIERACHY section of the BVH file\n      - lines: all lines of the file. lines are consumed as we go along.\n      - firstline: line containing the node type and name e.g. 'JOINT hip'\n      - list: collects a flat list of nodes\n      returns: a BVH node including children\n      */\n\n\n      function readNode(lines, firstline, list) {\n        var node = {\n          name: '',\n          type: '',\n          frames: []\n        };\n        list.push(node); // parse node type and name\n\n        var tokens = firstline.split(/[\\s]+/);\n\n        if (tokens[0].toUpperCase() === 'END' && tokens[1].toUpperCase() === 'SITE') {\n          node.type = 'ENDSITE';\n          node.name = 'ENDSITE'; // bvh end sites have no name\n        } else {\n          node.name = tokens[1];\n          node.type = tokens[0].toUpperCase();\n        }\n\n        if (nextLine(lines) !== '{') {\n          console.error('THREE.BVHLoader: Expected opening { after type & name');\n        } // parse OFFSET\n\n\n        tokens = nextLine(lines).split(/[\\s]+/);\n\n        if (tokens[0] !== 'OFFSET') {\n          console.error('THREE.BVHLoader: Expected OFFSET but got: ' + tokens[0]);\n        }\n\n        if (tokens.length !== 4) {\n          console.error('THREE.BVHLoader: Invalid number of values for OFFSET.');\n        }\n\n        var offset = new _three.Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n\n        if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n          console.error('THREE.BVHLoader: Invalid values of OFFSET.');\n        }\n\n        node.offset = offset; // parse CHANNELS definitions\n\n        if (node.type !== 'ENDSITE') {\n          tokens = nextLine(lines).split(/[\\s]+/);\n\n          if (tokens[0] !== 'CHANNELS') {\n            console.error('THREE.BVHLoader: Expected CHANNELS definition.');\n          }\n\n          var numChannels = parseInt(tokens[1]);\n          node.channels = tokens.splice(2, numChannels);\n          node.children = [];\n        } // read children\n\n\n        while (true) {\n          var line = nextLine(lines);\n\n          if (line === '}') {\n            return node;\n          } else {\n            node.children.push(readNode(lines, line, list));\n          }\n        }\n      }\n      /*\n      recursively converts the internal bvh node structure to a Bone hierarchy\n      source: the bvh root node\n      list: pass an empty array, collects a flat list of all converted THREE.Bones\n      returns the root Bone\n      */\n\n\n      function toTHREEBone(source, list) {\n        var bone = new _three.Bone();\n        list.push(bone);\n        bone.position.add(source.offset);\n        bone.name = source.name;\n\n        if (source.type !== 'ENDSITE') {\n          for (var i = 0; i < source.children.length; i++) {\n            bone.add(toTHREEBone(source.children[i], list));\n          }\n        }\n\n        return bone;\n      }\n      /*\n      builds a AnimationClip from the keyframe data saved in each bone.\n      bone: bvh root node\n      returns: a AnimationClip containing position and quaternion tracks\n      */\n\n\n      function toTHREEAnimation(bones) {\n        var tracks = []; // create a position and quaternion animation track for each node\n\n        for (var i = 0; i < bones.length; i++) {\n          var bone = bones[i];\n          if (bone.type === 'ENDSITE') continue; // track data\n\n          var times = [];\n          var positions = [];\n          var rotations = [];\n\n          for (var j = 0; j < bone.frames.length; j++) {\n            var frame = bone.frames[j];\n            times.push(frame.time); // the animation system animates the position property,\n            // so we have to add the joint offset to all values\n\n            positions.push(frame.position.x + bone.offset.x);\n            positions.push(frame.position.y + bone.offset.y);\n            positions.push(frame.position.z + bone.offset.z);\n            rotations.push(frame.rotation.x);\n            rotations.push(frame.rotation.y);\n            rotations.push(frame.rotation.z);\n            rotations.push(frame.rotation.w);\n          }\n\n          if (scope.animateBonePositions) {\n            tracks.push(new _three.VectorKeyframeTrack('.bones[' + bone.name + '].position', times, positions));\n          }\n\n          if (scope.animateBoneRotations) {\n            tracks.push(new _three.QuaternionKeyframeTrack('.bones[' + bone.name + '].quaternion', times, rotations));\n          }\n        }\n\n        return new _three.AnimationClip('animation', -1, tracks);\n      }\n      /*\n      returns the next non-empty line in lines\n      */\n\n\n      function nextLine(lines) {\n        var line; // skip empty lines\n\n        while ((line = lines.shift().trim()).length === 0) {}\n\n        return line;\n      }\n\n      var scope = this;\n      var lines = text.split(/[\\r\\n]+/g);\n      var bones = readBvh(lines);\n      var threeBones = [];\n      toTHREEBone(bones[0], threeBones);\n      var threeClip = toTHREEAnimation(bones);\n      return {\n        skeleton: new _three.Skeleton(threeBones),\n        clip: threeClip\n      };\n    }\n  }]);\n\n  return BVHLoader;\n}(_three.Loader);\n\nexports.BVHLoader = BVHLoader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["z","offset","prototype","clip","key","children","skeleton","x","__esModule","frames","animateBonePositions","position","name","configurable","value","enumerable","writable","time","rotation","BVHLoader","type","y","__proto__","animateBoneRotations","constructor","channels"]],"~:compiled-at",1630917515627,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$loaders$BVHLoader.js\",\n\"lineCount\":14,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/loaders/BVHLoader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$loaders$BVHLoader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.BVHLoader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/**\\n * Description: reads BVH files and outputs a single Skeleton and an AnimationClip\\n *\\n * Currently only supports bvh files containing a single root.\\n *\\n */\\nvar BVHLoader =\\n/*#__PURE__*/\\nfunction (_Loader) {\\n  _inherits(BVHLoader, _Loader);\\n\\n  function BVHLoader(manager) {\\n    var _this;\\n\\n    _classCallCheck(this, BVHLoader);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BVHLoader).call(this, manager));\\n    _this.animateBonePositions = true;\\n    _this.animateBoneRotations = true;\\n    return _this;\\n  }\\n\\n  _createClass(BVHLoader, [{\\n    key: \\\"load\\\",\\n    value: function load(url, onLoad, onProgress, onError) {\\n      var scope = this;\\n      var loader = new _three.FileLoader(scope.manager);\\n      loader.setPath(scope.path);\\n      loader.setRequestHeader(scope.requestHeader);\\n      loader.setWithCredentials(scope.withCredentials);\\n      loader.load(url, function (text) {\\n        try {\\n          onLoad(scope.parse(text));\\n        } catch (e) {\\n          if (onError) {\\n            onError(e);\\n          } else {\\n            console.error(e);\\n          }\\n\\n          scope.manager.itemError(url);\\n        }\\n      }, onProgress, onError);\\n    }\\n  }, {\\n    key: \\\"parse\\\",\\n    value: function parse(text) {\\n      /*\\n      reads a string array (lines) from a BVH file\\n      and outputs a skeleton structure including motion data\\n      returns thee root node:\\n      { name: '', channels: [], children: [] }\\n      */\\n      function readBvh(lines) {\\n        // read model structure\\n        if (nextLine(lines) !== 'HIERARCHY') {\\n          console.error('THREE.BVHLoader: HIERARCHY expected.');\\n        }\\n\\n        var list = []; // collects flat array of all bones\\n\\n        var root = readNode(lines, nextLine(lines), list); // read motion data\\n\\n        if (nextLine(lines) !== 'MOTION') {\\n          console.error('THREE.BVHLoader: MOTION expected.');\\n        } // number of frames\\n\\n\\n        var tokens = nextLine(lines).split(/[\\\\s]+/);\\n        var numFrames = parseInt(tokens[1]);\\n\\n        if (isNaN(numFrames)) {\\n          console.error('THREE.BVHLoader: Failed to read number of frames.');\\n        } // frame time\\n\\n\\n        tokens = nextLine(lines).split(/[\\\\s]+/);\\n        var frameTime = parseFloat(tokens[2]);\\n\\n        if (isNaN(frameTime)) {\\n          console.error('THREE.BVHLoader: Failed to read frame time.');\\n        } // read frame data line by line\\n\\n\\n        for (var i = 0; i < numFrames; i++) {\\n          tokens = nextLine(lines).split(/[\\\\s]+/);\\n          readFrameData(tokens, i * frameTime, root);\\n        }\\n\\n        return list;\\n      }\\n      /*\\n      Recursively reads data from a single frame into the bone hierarchy.\\n      The passed bone hierarchy has to be structured in the same order as the BVH file.\\n      keyframe data is stored in bone.frames.\\n      - data: splitted string array (frame values), values are shift()ed so\\n      this should be empty after parsing the whole hierarchy.\\n      - frameTime: playback time for this keyframe.\\n      - bone: the bone to read frame data from.\\n      */\\n\\n\\n      function readFrameData(data, frameTime, bone) {\\n        // end sites have no motion data\\n        if (bone.type === 'ENDSITE') return; // add keyframe\\n\\n        var keyframe = {\\n          time: frameTime,\\n          position: new _three.Vector3(),\\n          rotation: new _three.Quaternion()\\n        };\\n        bone.frames.push(keyframe);\\n        var quat = new _three.Quaternion();\\n        var vx = new _three.Vector3(1, 0, 0);\\n        var vy = new _three.Vector3(0, 1, 0);\\n        var vz = new _three.Vector3(0, 0, 1); // parse values for each channel in node\\n\\n        for (var i = 0; i < bone.channels.length; i++) {\\n          switch (bone.channels[i]) {\\n            case 'Xposition':\\n              keyframe.position.x = parseFloat(data.shift().trim());\\n              break;\\n\\n            case 'Yposition':\\n              keyframe.position.y = parseFloat(data.shift().trim());\\n              break;\\n\\n            case 'Zposition':\\n              keyframe.position.z = parseFloat(data.shift().trim());\\n              break;\\n\\n            case 'Xrotation':\\n              quat.setFromAxisAngle(vx, parseFloat(data.shift().trim()) * Math.PI / 180);\\n              keyframe.rotation.multiply(quat);\\n              break;\\n\\n            case 'Yrotation':\\n              quat.setFromAxisAngle(vy, parseFloat(data.shift().trim()) * Math.PI / 180);\\n              keyframe.rotation.multiply(quat);\\n              break;\\n\\n            case 'Zrotation':\\n              quat.setFromAxisAngle(vz, parseFloat(data.shift().trim()) * Math.PI / 180);\\n              keyframe.rotation.multiply(quat);\\n              break;\\n\\n            default:\\n              console.warn('THREE.BVHLoader: Invalid channel type.');\\n          }\\n        } // parse child nodes\\n\\n\\n        for (var _i = 0; _i < bone.children.length; _i++) {\\n          readFrameData(data, frameTime, bone.children[_i]);\\n        }\\n      }\\n      /*\\n      Recursively parses the HIERACHY section of the BVH file\\n      - lines: all lines of the file. lines are consumed as we go along.\\n      - firstline: line containing the node type and name e.g. 'JOINT hip'\\n      - list: collects a flat list of nodes\\n      returns: a BVH node including children\\n      */\\n\\n\\n      function readNode(lines, firstline, list) {\\n        var node = {\\n          name: '',\\n          type: '',\\n          frames: []\\n        };\\n        list.push(node); // parse node type and name\\n\\n        var tokens = firstline.split(/[\\\\s]+/);\\n\\n        if (tokens[0].toUpperCase() === 'END' && tokens[1].toUpperCase() === 'SITE') {\\n          node.type = 'ENDSITE';\\n          node.name = 'ENDSITE'; // bvh end sites have no name\\n        } else {\\n          node.name = tokens[1];\\n          node.type = tokens[0].toUpperCase();\\n        }\\n\\n        if (nextLine(lines) !== '{') {\\n          console.error('THREE.BVHLoader: Expected opening { after type & name');\\n        } // parse OFFSET\\n\\n\\n        tokens = nextLine(lines).split(/[\\\\s]+/);\\n\\n        if (tokens[0] !== 'OFFSET') {\\n          console.error('THREE.BVHLoader: Expected OFFSET but got: ' + tokens[0]);\\n        }\\n\\n        if (tokens.length !== 4) {\\n          console.error('THREE.BVHLoader: Invalid number of values for OFFSET.');\\n        }\\n\\n        var offset = new _three.Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\\n\\n        if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\\n          console.error('THREE.BVHLoader: Invalid values of OFFSET.');\\n        }\\n\\n        node.offset = offset; // parse CHANNELS definitions\\n\\n        if (node.type !== 'ENDSITE') {\\n          tokens = nextLine(lines).split(/[\\\\s]+/);\\n\\n          if (tokens[0] !== 'CHANNELS') {\\n            console.error('THREE.BVHLoader: Expected CHANNELS definition.');\\n          }\\n\\n          var numChannels = parseInt(tokens[1]);\\n          node.channels = tokens.splice(2, numChannels);\\n          node.children = [];\\n        } // read children\\n\\n\\n        while (true) {\\n          var line = nextLine(lines);\\n\\n          if (line === '}') {\\n            return node;\\n          } else {\\n            node.children.push(readNode(lines, line, list));\\n          }\\n        }\\n      }\\n      /*\\n      recursively converts the internal bvh node structure to a Bone hierarchy\\n      source: the bvh root node\\n      list: pass an empty array, collects a flat list of all converted THREE.Bones\\n      returns the root Bone\\n      */\\n\\n\\n      function toTHREEBone(source, list) {\\n        var bone = new _three.Bone();\\n        list.push(bone);\\n        bone.position.add(source.offset);\\n        bone.name = source.name;\\n\\n        if (source.type !== 'ENDSITE') {\\n          for (var i = 0; i < source.children.length; i++) {\\n            bone.add(toTHREEBone(source.children[i], list));\\n          }\\n        }\\n\\n        return bone;\\n      }\\n      /*\\n      builds a AnimationClip from the keyframe data saved in each bone.\\n      bone: bvh root node\\n      returns: a AnimationClip containing position and quaternion tracks\\n      */\\n\\n\\n      function toTHREEAnimation(bones) {\\n        var tracks = []; // create a position and quaternion animation track for each node\\n\\n        for (var i = 0; i < bones.length; i++) {\\n          var bone = bones[i];\\n          if (bone.type === 'ENDSITE') continue; // track data\\n\\n          var times = [];\\n          var positions = [];\\n          var rotations = [];\\n\\n          for (var j = 0; j < bone.frames.length; j++) {\\n            var frame = bone.frames[j];\\n            times.push(frame.time); // the animation system animates the position property,\\n            // so we have to add the joint offset to all values\\n\\n            positions.push(frame.position.x + bone.offset.x);\\n            positions.push(frame.position.y + bone.offset.y);\\n            positions.push(frame.position.z + bone.offset.z);\\n            rotations.push(frame.rotation.x);\\n            rotations.push(frame.rotation.y);\\n            rotations.push(frame.rotation.z);\\n            rotations.push(frame.rotation.w);\\n          }\\n\\n          if (scope.animateBonePositions) {\\n            tracks.push(new _three.VectorKeyframeTrack('.bones[' + bone.name + '].position', times, positions));\\n          }\\n\\n          if (scope.animateBoneRotations) {\\n            tracks.push(new _three.QuaternionKeyframeTrack('.bones[' + bone.name + '].quaternion', times, rotations));\\n          }\\n        }\\n\\n        return new _three.AnimationClip('animation', -1, tracks);\\n      }\\n      /*\\n      returns the next non-empty line in lines\\n      */\\n\\n\\n      function nextLine(lines) {\\n        var line; // skip empty lines\\n\\n        while ((line = lines.shift().trim()).length === 0) {}\\n\\n        return line;\\n      }\\n\\n      var scope = this;\\n      var lines = text.split(/[\\\\r\\\\n]+/g);\\n      var bones = readBvh(lines);\\n      var threeBones = [];\\n      toTHREEBone(bones[0], threeBones);\\n      var threeClip = toTHREEAnimation(bones);\\n      return {\\n        skeleton: new _three.Skeleton(threeBones),\\n        clip: threeClip\\n      };\\n    }\\n  }]);\\n\\n  return BVHLoader;\\n}(_three.Loader);\\n\\nexports.BVHLoader = BVHLoader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"_getPrototypeOf\",\"o\",\"setPrototypeOf\",\"getPrototypeOf\",\"__proto__\",\"_inherits\",\"subClass\",\"superClass\",\"TypeError\",\"create\",\"value\",\"_setPrototypeOf\",\"p\",\"BVHLoader\",\"_three\",\"_Loader\",\"manager\",\"instance\",\"call\",\"self\",\"ReferenceError\",\"_this\",\"animateBonePositions\",\"animateBoneRotations\",\"load\",\"url\",\"onLoad\",\"onProgress\",\"onError\",\"scope\",\"loader\",\"FileLoader\",\"setPath\",\"path\",\"setRequestHeader\",\"requestHeader\",\"setWithCredentials\",\"withCredentials\",\"text\",\"parse\",\"e\",\"console\",\"error\",\"itemError\",\"readFrameData\",\"data\",\"frameTime\",\"bone\",\"type\",\"keyframe\",\"time\",\"position\",\"Vector3\",\"rotation\",\"Quaternion\",\"frames\",\"push\",\"quat\",\"vx\",\"vy\",\"vz\",\"channels\",\"x\",\"parseFloat\",\"shift\",\"trim\",\"y\",\"z\",\"setFromAxisAngle\",\"Math\",\"PI\",\"multiply\",\"warn\",\"_i\",\"children\",\"readNode\",\"lines\",\"firstline\",\"list\",\"node\",\"name\",\"tokens\",\"split\",\"toUpperCase\",\"nextLine\",\"offset\",\"isNaN\",\"numChannels\",\"parseInt\",\"splice\",\"line\",\"toTHREEBone\",\"source\",\"Bone\",\"add\",\"bones\",\"readBvh\",\"root\",\"numFrames\",\"threeBones\",\"threeClip\",\"toTHREEAnimation\",\"tracks\",\"times\",\"positions\",\"rotations\",\"j\",\"frame\",\"w\",\"VectorKeyframeTrack\",\"QuaternionKeyframeTrack\",\"AnimationClip\",\"skeleton\",\"Skeleton\",\"clip\",\"Loader\"]\n}\n"]