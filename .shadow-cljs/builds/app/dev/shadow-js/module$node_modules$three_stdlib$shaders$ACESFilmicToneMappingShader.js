["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/ACESFilmicToneMappingShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$ACESFilmicToneMappingShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.ACESFilmicToneMappingShader=void 0;exports.ACESFilmicToneMappingShader={uniforms:{tDiffuse:{value:null},exposure:{value:1}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform sampler2D tDiffuse;\\nuniform float exposure;\\nvarying vec2 vUv;\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a \\x3d v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b \\x3d v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat \\x3d mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\n\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat \\x3d mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\n\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor \\x3d ACESInputMat * color;\\n\\tcolor \\x3d RRTAndODTFit( color );\\n\\tcolor \\x3d ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvoid main() {\\n\\tvec4 tex \\x3d texture2D( tDiffuse, vUv );\\n\\ttex.rgb *\\x3d exposure / 0.6;\\n\\tgl_FragColor \\x3d vec4( ACESFilmicToneMapping( tex.rgb ), tex.a );\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$ACESFilmicToneMappingShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ACESFilmicToneMappingShader = void 0;\n\n/**\n * ACES Filmic Tone Mapping Shader by Stephen Hill\n * source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\n *\n * this implementation of ACES is modified to accommodate a brighter viewing environment.\n * the scale factor of 1/0.6 is subjective. see discussion in #19621.\n */\nvar ACESFilmicToneMappingShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    exposure: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#define saturate(a) clamp( a, 0.0, 1.0 )', 'uniform sampler2D tDiffuse;', 'uniform float exposure;', 'varying vec2 vUv;', 'vec3 RRTAndODTFit( vec3 v ) {', '\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;', '\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;', '\treturn a / b;', '}', 'vec3 ACESFilmicToneMapping( vec3 color ) {', // sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n  '\tconst mat3 ACESInputMat = mat3(', '\t\tvec3( 0.59719, 0.07600, 0.02840 ),', // transposed from source\n  '\t\tvec3( 0.35458, 0.90834, 0.13383 ),', '\t\tvec3( 0.04823, 0.01566, 0.83777 )', '\t);', // ODT_SAT => XYZ => D60_2_D65 => sRGB\n  '\tconst mat3 ACESOutputMat = mat3(', '\t\tvec3(  1.60475, -0.10208, -0.00327 ),', // transposed from source\n  '\t\tvec3( -0.53108,  1.10813, -0.07276 ),', '\t\tvec3( -0.07367, -0.00605,  1.07602 )', '\t);', '\tcolor = ACESInputMat * color;', // Apply RRT and ODT\n  '\tcolor = RRTAndODTFit( color );', '\tcolor = ACESOutputMat * color;', // Clamp to [0, 1]\n  '\treturn saturate( color );', '}', 'void main() {', '\tvec4 tex = texture2D( tDiffuse, vUv );', '\ttex.rgb *= exposure / 0.6;', // pre-exposed, outside of the tone mapping function\n  '\tgl_FragColor = vec4( ACESFilmicToneMapping( tex.rgb ), tex.a );', '}'].join('\\n')\n};\nexports.ACESFilmicToneMappingShader = ACESFilmicToneMappingShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","ACESFilmicToneMappingShader","__esModule","tDiffuse","vertexShader","value","exposure","uniforms"]],"~:compiled-at",1630917515579,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$ACESFilmicToneMappingShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,2BAAR,CAAsC,IAAK,EA4B3CJ,QAAQI,CAAAA,2BAAR,CAnBkCA,CAChCC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,SAAU,CACRJ,MAAO,CADC,CAJF,CADsBC,CAShCI,aAAiJ,qIATjHJ,CAUhCK,eAOoE,s8BAjBpCL,CAf+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/ACESFilmicToneMappingShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$ACESFilmicToneMappingShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.ACESFilmicToneMappingShader = void 0;\\n\\n/**\\n * ACES Filmic Tone Mapping Shader by Stephen Hill\\n * source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\\n *\\n * this implementation of ACES is modified to accommodate a brighter viewing environment.\\n * the scale factor of 1/0.6 is subjective. see discussion in #19621.\\n */\\nvar ACESFilmicToneMappingShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    exposure: {\\n      value: 1.0\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['#define saturate(a) clamp( a, 0.0, 1.0 )', 'uniform sampler2D tDiffuse;', 'uniform float exposure;', 'varying vec2 vUv;', 'vec3 RRTAndODTFit( vec3 v ) {', '\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;', '\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;', '\\treturn a / b;', '}', 'vec3 ACESFilmicToneMapping( vec3 color ) {', // sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\\n  '\\tconst mat3 ACESInputMat = mat3(', '\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),', // transposed from source\\n  '\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),', '\\t\\tvec3( 0.04823, 0.01566, 0.83777 )', '\\t);', // ODT_SAT => XYZ => D60_2_D65 => sRGB\\n  '\\tconst mat3 ACESOutputMat = mat3(', '\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),', // transposed from source\\n  '\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),', '\\t\\tvec3( -0.07367, -0.00605,  1.07602 )', '\\t);', '\\tcolor = ACESInputMat * color;', // Apply RRT and ODT\\n  '\\tcolor = RRTAndODTFit( color );', '\\tcolor = ACESOutputMat * color;', // Clamp to [0, 1]\\n  '\\treturn saturate( color );', '}', 'void main() {', '\\tvec4 tex = texture2D( tDiffuse, vUv );', '\\ttex.rgb *= exposure / 0.6;', // pre-exposed, outside of the tone mapping function\\n  '\\tgl_FragColor = vec4( ACESFilmicToneMapping( tex.rgb ), tex.a );', '}'].join('\\\\n')\\n};\\nexports.ACESFilmicToneMappingShader = ACESFilmicToneMappingShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"ACESFilmicToneMappingShader\",\"uniforms\",\"tDiffuse\",\"exposure\",\"vertexShader\",\"fragmentShader\"]\n}\n"]