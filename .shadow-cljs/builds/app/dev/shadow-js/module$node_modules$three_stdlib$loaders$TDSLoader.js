["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/loaders/TDSLoader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$loaders$TDSLoader=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=\ndescriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);staticProps&&_defineProperties(Constructor,staticProps);return Constructor}function _getPrototypeOf(o$jscomp$0){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)};\nreturn _getPrototypeOf(o$jscomp$0)}function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&null!==superClass)throw new TypeError(\"Super expression must either be null or a function\");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}});superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o$jscomp$0,p$jscomp$0){_setPrototypeOf=Object.setPrototypeOf||function(o,p){o.__proto__=p;return o};\nreturn _setPrototypeOf(o$jscomp$0,p$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.TDSLoader=void 0;var _three=require(\"module$node_modules$three$build$three_module\");global=function(_Loader){function TDSLoader(manager){if(!(this instanceof TDSLoader))throw new TypeError(\"Cannot call a class as a function\");manager=_getPrototypeOf(TDSLoader).call(this,manager);if(!manager||\"object\"!==_typeof(manager)&&\"function\"!==typeof manager){if(void 0===this)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\nmanager=this}manager.debug=!1;manager.group=null;manager.position=0;manager.materials=[];manager.meshes=[];return manager}_inherits(TDSLoader,_Loader);_createClass(TDSLoader,[{key:\"load\",value:function(url,onLoad,onProgress,onError){var scope=this,path=\"\"===this.path?_three.LoaderUtils.extractUrlBase(url):this.path,loader=new _three.FileLoader(this.manager);loader.setPath(this.path);loader.setResponseType(\"arraybuffer\");loader.setRequestHeader(this.requestHeader);loader.setWithCredentials(this.withCredentials);\nloader.load(url,function(data){try{onLoad(scope.parse(data,path))}catch(e){onError?onError(e):console.error(e),scope.manager.itemError(url)}},onProgress,onError)}},{key:\"parse\",value:function(arraybuffer,path){this.group=new _three.Group;this.position=0;this.materials=[];this.meshes=[];this.readFile(arraybuffer,path);for(arraybuffer=0;arraybuffer<this.meshes.length;arraybuffer++)this.group.add(this.meshes[arraybuffer]);return this.group}},{key:\"readFile\",value:function(arraybuffer,path){arraybuffer=\nnew DataView(arraybuffer);var chunk=this.readChunk(arraybuffer);if(chunk.id===MLIBMAGIC||chunk.id===CMAGIC||chunk.id===M3DMAGIC)for(var next=this.nextChunk(arraybuffer,chunk);0!==next;)next===M3D_VERSION?(next=this.readDWord(arraybuffer),this.debugMessage(\"3DS file version: \"+next)):next===MDATA?(this.resetPosition(arraybuffer),this.readMeshData(arraybuffer,path)):this.debugMessage(\"Unknown main chunk: \"+next.toString(16)),next=this.nextChunk(arraybuffer,chunk);this.debugMessage(\"Parsed \"+this.meshes.length+\n\" meshes\")}},{key:\"readMeshData\",value:function(data,path){for(var chunk=this.readChunk(data),next=this.nextChunk(data,chunk);0!==next;)next===MESH_VERSION?(next=+this.readDWord(data),this.debugMessage(\"Mesh Version: \"+next)):next===MASTER_SCALE?(next=this.readFloat(data),this.debugMessage(\"Master scale: \"+next),this.group.scale.set(next,next,next)):next===NAMED_OBJECT?(this.debugMessage(\"Named Object\"),this.resetPosition(data),this.readNamedObject(data)):next===MAT_ENTRY?(this.debugMessage(\"Material\"),\nthis.resetPosition(data),this.readMaterialEntry(data,path)):this.debugMessage(\"Unknown MDATA chunk: \"+next.toString(16)),next=this.nextChunk(data,chunk)}},{key:\"readNamedObject\",value:function(data){var chunk=this.readChunk(data),name=this.readString(data,64);chunk.cur=this.position;for(var next=this.nextChunk(data,chunk);0!==next;)next===N_TRI_OBJECT?(this.resetPosition(data),next=this.readMesh(data),next.name=name,this.meshes.push(next)):this.debugMessage(\"Unknown named object chunk: \"+next.toString(16)),\nnext=this.nextChunk(data,chunk);this.endChunk(chunk)}},{key:\"readMaterialEntry\",value:function(data,path){for(var chunk=this.readChunk(data),next=this.nextChunk(data,chunk),material=new _three.MeshPhongMaterial;0!==next;)next===MAT_NAME?(material.name=this.readString(data,64),this.debugMessage(\"   Name: \"+material.name)):next===MAT_WIRE?(this.debugMessage(\"   Wireframe\"),material.wireframe=!0):next===MAT_WIRE_SIZE?(next=this.readByte(data),material.wireframeLinewidth=next,this.debugMessage(\"   Wireframe Thickness: \"+\nnext)):next===MAT_TWO_SIDE?(material.side=_three.DoubleSide,this.debugMessage(\"   DoubleSided\")):next===MAT_ADDITIVE?(this.debugMessage(\"   Additive Blending\"),material.blending=_three.AdditiveBlending):next===MAT_DIFFUSE?(this.debugMessage(\"   Diffuse Color\"),material.color=this.readColor(data)):next===MAT_SPECULAR?(this.debugMessage(\"   Specular Color\"),material.specular=this.readColor(data)):next===MAT_AMBIENT?(this.debugMessage(\"   Ambient color\"),material.color=this.readColor(data)):next===MAT_SHININESS?\n(next=this.readPercentage(data),material.shininess=100*next,this.debugMessage(\"   Shininess : \"+next)):next===MAT_TRANSPARENCY?(next=this.readPercentage(data),material.opacity=1-next,this.debugMessage(\"  Transparency : \"+next),material.transparent=1>material.opacity?!0:!1):next===MAT_TEXMAP?(this.debugMessage(\"   ColorMap\"),this.resetPosition(data),material.map=this.readMap(data,path)):next===MAT_BUMPMAP?(this.debugMessage(\"   BumpMap\"),this.resetPosition(data),material.bumpMap=this.readMap(data,\npath)):next===MAT_OPACMAP?(this.debugMessage(\"   OpacityMap\"),this.resetPosition(data),material.alphaMap=this.readMap(data,path)):next===MAT_SPECMAP?(this.debugMessage(\"   SpecularMap\"),this.resetPosition(data),material.specularMap=this.readMap(data,path)):this.debugMessage(\"   Unknown material chunk: \"+next.toString(16)),next=this.nextChunk(data,chunk);this.endChunk(chunk);this.materials[material.name]=material}},{key:\"readMesh\",value:function(data){var chunk=this.readChunk(data),next=this.nextChunk(data,\nchunk),geometry=new _three.BufferGeometry,material=new _three.MeshPhongMaterial;material=new _three.Mesh(geometry,material);for(material.name=\"mesh\";0!==next;){if(next===POINT_ARRAY){next=this.readWord(data);this.debugMessage(\"   Vertex: \"+next);for(var vertices=[],i=0;i<next;i++)vertices.push(this.readFloat(data)),vertices.push(this.readFloat(data)),vertices.push(this.readFloat(data));geometry.setAttribute(\"position\",new _three.Float32BufferAttribute(vertices,3))}else if(next===FACE_ARRAY)this.resetPosition(data),\nthis.readFaceArray(data,material);else if(next===TEX_VERTS){next=this.readWord(data);this.debugMessage(\"   UV: \"+next);vertices=[];for(i=0;i<next;i++)vertices.push(this.readFloat(data)),vertices.push(this.readFloat(data));geometry.setAttribute(\"uv\",new _three.Float32BufferAttribute(vertices,2))}else if(next===MESH_MATRIX){this.debugMessage(\"   Tranformation Matrix (TODO)\");next=[];for(vertices=0;12>vertices;vertices++)next[vertices]=this.readFloat(data);vertices=new _three.Matrix4;vertices.elements[0]=\nnext[0];vertices.elements[1]=next[6];vertices.elements[2]=next[3];vertices.elements[3]=next[9];vertices.elements[4]=next[2];vertices.elements[5]=next[8];vertices.elements[6]=next[5];vertices.elements[7]=next[11];vertices.elements[8]=next[1];vertices.elements[9]=next[7];vertices.elements[10]=next[4];vertices.elements[11]=next[10];vertices.elements[12]=0;vertices.elements[13]=0;vertices.elements[14]=0;vertices.elements[15]=1;vertices.transpose();next=new _three.Matrix4;next.copy(vertices).invert();\ngeometry.applyMatrix4(next);vertices.decompose(material.position,material.quaternion,material.scale)}else this.debugMessage(\"   Unknown mesh chunk: \"+next.toString(16));next=this.nextChunk(data,chunk)}this.endChunk(chunk);geometry.computeVertexNormals();return material}},{key:\"readFaceArray\",value:function(data,mesh){var chunk=this.readChunk(data),faces=this.readWord(data);this.debugMessage(\"   Faces: \"+faces);for(var index=[],i=0;i<faces;++i)index.push(this.readWord(data),this.readWord(data),this.readWord(data)),\nthis.readWord(data);mesh.geometry.setIndex(index);for(index=faces=0;this.position<chunk.end;){i=this.readChunk(data);if(i.id===MSH_MAT_GROUP){this.debugMessage(\"      Material Group\");this.resetPosition(data);var group=this.readMaterialGroup(data),count=3*group.index.length;mesh.geometry.addGroup(index,count,faces);index+=count;faces++;group=this.materials[group.name];!1===Array.isArray(mesh.material)&&(mesh.material=[]);void 0!==group&&mesh.material.push(group)}else this.debugMessage(\"      Unknown face array chunk: \"+\ni.toString(16));this.endChunk(i)}1===mesh.material.length&&(mesh.material=mesh.material[0]);this.endChunk(chunk)}},{key:\"readMap\",value:function(data,path){var chunk=this.readChunk(data),next=this.nextChunk(data,chunk),texture={},loader=new _three.TextureLoader(this.manager);for(loader.setPath(this.resourcePath||path).setCrossOrigin(this.crossOrigin);0!==next;)next===MAT_MAPNAME?(next=this.readString(data,128),texture=loader.load(next),this.debugMessage(\"      File: \"+path+next)):next===MAT_MAP_UOFFSET?\n(texture.offset.x=this.readFloat(data),this.debugMessage(\"      OffsetX: \"+texture.offset.x)):next===MAT_MAP_VOFFSET?(texture.offset.y=this.readFloat(data),this.debugMessage(\"      OffsetY: \"+texture.offset.y)):next===MAT_MAP_USCALE?(texture.repeat.x=this.readFloat(data),this.debugMessage(\"      RepeatX: \"+texture.repeat.x)):next===MAT_MAP_VSCALE?(texture.repeat.y=this.readFloat(data),this.debugMessage(\"      RepeatY: \"+texture.repeat.y)):this.debugMessage(\"      Unknown map chunk: \"+next.toString(16)),\nnext=this.nextChunk(data,chunk);this.endChunk(chunk);return texture}},{key:\"readMaterialGroup\",value:function(data){this.readChunk(data);var name=this.readString(data,64),numFaces=this.readWord(data);this.debugMessage(\"         Name: \"+name);this.debugMessage(\"         Faces: \"+numFaces);for(var index=[],i=0;i<numFaces;++i)index.push(this.readWord(data));return{name,index}}},{key:\"readColor\",value:function(data){var chunk=this.readChunk(data),color=new _three.Color;if(chunk.id===COLOR_24||chunk.id===\nLIN_COLOR_24){var r=this.readByte(data),g=this.readByte(data);data=this.readByte(data);color.setRGB(r/255,g/255,data/255);this.debugMessage(\"      Color: \"+color.r+\", \"+color.g+\", \"+color.b)}else chunk.id===COLOR_F||chunk.id===LIN_COLOR_F?(r=this.readFloat(data),g=this.readFloat(data),data=this.readFloat(data),color.setRGB(r,g,data),this.debugMessage(\"      Color: \"+color.r+\", \"+color.g+\", \"+color.b)):this.debugMessage(\"      Unknown color chunk: \"+chunk.toString(16));this.endChunk(chunk);return color}},\n{key:\"readChunk\",value:function(data){var chunk={};chunk.cur=this.position;chunk.id=this.readWord(data);chunk.size=this.readDWord(data);chunk.end=chunk.cur+chunk.size;chunk.cur+=6;return chunk}},{key:\"endChunk\",value:function(chunk){this.position=chunk.end}},{key:\"nextChunk\",value:function(data,chunk){if(chunk.cur>=chunk.end)return 0;this.position=chunk.cur;try{var next=this.readChunk(data);chunk.cur+=next.size;return next.id}catch(e){return this.debugMessage(\"Unable to read chunk at \"+this.position),\n0}}},{key:\"resetPosition\",value:function(){this.position-=6}},{key:\"readByte\",value:function(data){data=data.getUint8(this.position,!0);this.position+=1;return data}},{key:\"readFloat\",value:function(data){try{var v=data.getFloat32(this.position,!0);this.position+=4;return v}catch(e){this.debugMessage(e+\" \"+this.position+\" \"+data.byteLength)}}},{key:\"readInt\",value:function(data){data=data.getInt32(this.position,!0);this.position+=4;return data}},{key:\"readShort\",value:function(data){data=data.getInt16(this.position,\n!0);this.position+=2;return data}},{key:\"readDWord\",value:function(data){data=data.getUint32(this.position,!0);this.position+=4;return data}},{key:\"readWord\",value:function(data){data=data.getUint16(this.position,!0);this.position+=2;return data}},{key:\"readString\",value:function(data,maxLength){for(var s=\"\",i=0;i<maxLength;i++){var c=this.readByte(data);if(!c)break;s+=String.fromCharCode(c)}return s}},{key:\"readPercentage\",value:function(data){var chunk=this.readChunk(data);switch(chunk.id){case INT_PERCENTAGE:var value=\nthis.readShort(data)/100;break;case FLOAT_PERCENTAGE:value=this.readFloat(data);break;default:this.debugMessage(\"      Unknown percentage chunk: \"+chunk.toString(16))}this.endChunk(chunk);return value}},{key:\"debugMessage\",value:function(message){this.debug&&console.log(message)}}]);return TDSLoader}(_three.Loader);exports.TDSLoader=global;var M3DMAGIC=19789,MLIBMAGIC=15786,CMAGIC=49725,M3D_VERSION=2,COLOR_F=16,COLOR_24=17,LIN_COLOR_24=18,LIN_COLOR_F=19,INT_PERCENTAGE=48,FLOAT_PERCENTAGE=49,MDATA=\n15677,MESH_VERSION=15678,MASTER_SCALE=256,MAT_ENTRY=45055,MAT_NAME=40960,MAT_AMBIENT=40976,MAT_DIFFUSE=40992,MAT_SPECULAR=41008,MAT_SHININESS=41024,MAT_TRANSPARENCY=41040,MAT_TWO_SIDE=41089,MAT_ADDITIVE=41091,MAT_WIRE=41093,MAT_WIRE_SIZE=41095,MAT_TEXMAP=41472,MAT_OPACMAP=41488,MAT_BUMPMAP=41520,MAT_SPECMAP=41476,MAT_MAPNAME=41728,MAT_MAP_USCALE=41812,MAT_MAP_VSCALE=41814,MAT_MAP_UOFFSET=41816,MAT_MAP_VOFFSET=41818,NAMED_OBJECT=16384,N_TRI_OBJECT=16640,POINT_ARRAY=16656,FACE_ARRAY=16672,MSH_MAT_GROUP=\n16688,TEX_VERTS=16704,MESH_MATRIX=16736}","~:source","shadow$provide[\"module$node_modules$three_stdlib$loaders$TDSLoader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TDSLoader = void 0;\n\nvar _three = require(\"three\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @class TDSLoader\n * @constructor\n */\nvar TDSLoader =\n/*#__PURE__*/\nfunction (_Loader) {\n  _inherits(TDSLoader, _Loader);\n\n  function TDSLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, TDSLoader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TDSLoader).call(this, manager));\n    _this.debug = false;\n    _this.group = null;\n    _this.position = 0;\n    _this.materials = [];\n    _this.meshes = [];\n    return _this;\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n\n\n  _createClass(TDSLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = this.path === '' ? _three.LoaderUtils.extractUrlBase(url) : this.path;\n      var loader = new _three.FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (data) {\n        try {\n          onLoad(scope.parse(data, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n    /**\n     * Parse arraybuffer data and load 3ds file.\n     *\n     * @method parse\n     * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n     * @param {String} path Path for external resources.\n     * @return {Group} Group loaded from 3ds file.\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(arraybuffer, path) {\n      this.group = new _three.Group();\n      this.position = 0;\n      this.materials = [];\n      this.meshes = [];\n      this.readFile(arraybuffer, path);\n\n      for (var i = 0; i < this.meshes.length; i++) {\n        this.group.add(this.meshes[i]);\n      }\n\n      return this.group;\n    }\n    /**\n     * Decode file content to read 3ds data.\n     *\n     * @method readFile\n     * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n     * @param {String} path Path for external resources.\n     */\n\n  }, {\n    key: \"readFile\",\n    value: function readFile(arraybuffer, path) {\n      var data = new DataView(arraybuffer);\n      var chunk = this.readChunk(data);\n\n      if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n        var next = this.nextChunk(data, chunk);\n\n        while (next !== 0) {\n          if (next === M3D_VERSION) {\n            var version = this.readDWord(data);\n            this.debugMessage('3DS file version: ' + version);\n          } else if (next === MDATA) {\n            this.resetPosition(data);\n            this.readMeshData(data, path);\n          } else {\n            this.debugMessage('Unknown main chunk: ' + next.toString(16));\n          }\n\n          next = this.nextChunk(data, chunk);\n        }\n      }\n\n      this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n    }\n    /**\n     * Read mesh data chunk.\n     *\n     * @method readMeshData\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     */\n\n  }, {\n    key: \"readMeshData\",\n    value: function readMeshData(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n\n      while (next !== 0) {\n        if (next === MESH_VERSION) {\n          var version = +this.readDWord(data);\n          this.debugMessage('Mesh Version: ' + version);\n        } else if (next === MASTER_SCALE) {\n          var scale = this.readFloat(data);\n          this.debugMessage('Master scale: ' + scale);\n          this.group.scale.set(scale, scale, scale);\n        } else if (next === NAMED_OBJECT) {\n          this.debugMessage('Named Object');\n          this.resetPosition(data);\n          this.readNamedObject(data);\n        } else if (next === MAT_ENTRY) {\n          this.debugMessage('Material');\n          this.resetPosition(data);\n          this.readMaterialEntry(data, path);\n        } else {\n          this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n    }\n    /**\n     * Read named object chunk.\n     *\n     * @method readNamedObject\n     * @param {Dataview} data Dataview in use.\n     */\n\n  }, {\n    key: \"readNamedObject\",\n    value: function readNamedObject(data) {\n      var chunk = this.readChunk(data);\n      var name = this.readString(data, 64);\n      chunk.cur = this.position;\n      var next = this.nextChunk(data, chunk);\n\n      while (next !== 0) {\n        if (next === N_TRI_OBJECT) {\n          this.resetPosition(data);\n          var mesh = this.readMesh(data);\n          mesh.name = name;\n          this.meshes.push(mesh);\n        } else {\n          this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n\n      this.endChunk(chunk);\n    }\n    /**\n     * Read material data chunk and add it to the material list.\n     *\n     * @method readMaterialEntry\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     */\n\n  }, {\n    key: \"readMaterialEntry\",\n    value: function readMaterialEntry(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var material = new _three.MeshPhongMaterial();\n\n      while (next !== 0) {\n        if (next === MAT_NAME) {\n          material.name = this.readString(data, 64);\n          this.debugMessage('   Name: ' + material.name);\n        } else if (next === MAT_WIRE) {\n          this.debugMessage('   Wireframe');\n          material.wireframe = true;\n        } else if (next === MAT_WIRE_SIZE) {\n          var value = this.readByte(data);\n          material.wireframeLinewidth = value;\n          this.debugMessage('   Wireframe Thickness: ' + value);\n        } else if (next === MAT_TWO_SIDE) {\n          material.side = _three.DoubleSide;\n          this.debugMessage('   DoubleSided');\n        } else if (next === MAT_ADDITIVE) {\n          this.debugMessage('   Additive Blending');\n          material.blending = _three.AdditiveBlending;\n        } else if (next === MAT_DIFFUSE) {\n          this.debugMessage('   Diffuse Color');\n          material.color = this.readColor(data);\n        } else if (next === MAT_SPECULAR) {\n          this.debugMessage('   Specular Color');\n          material.specular = this.readColor(data);\n        } else if (next === MAT_AMBIENT) {\n          this.debugMessage('   Ambient color');\n          material.color = this.readColor(data);\n        } else if (next === MAT_SHININESS) {\n          var shininess = this.readPercentage(data);\n          material.shininess = shininess * 100;\n          this.debugMessage('   Shininess : ' + shininess);\n        } else if (next === MAT_TRANSPARENCY) {\n          var transparency = this.readPercentage(data);\n          material.opacity = 1 - transparency;\n          this.debugMessage('  Transparency : ' + transparency);\n          material.transparent = material.opacity < 1 ? true : false;\n        } else if (next === MAT_TEXMAP) {\n          this.debugMessage('   ColorMap');\n          this.resetPosition(data);\n          material.map = this.readMap(data, path);\n        } else if (next === MAT_BUMPMAP) {\n          this.debugMessage('   BumpMap');\n          this.resetPosition(data);\n          material.bumpMap = this.readMap(data, path);\n        } else if (next === MAT_OPACMAP) {\n          this.debugMessage('   OpacityMap');\n          this.resetPosition(data);\n          material.alphaMap = this.readMap(data, path);\n        } else if (next === MAT_SPECMAP) {\n          this.debugMessage('   SpecularMap');\n          this.resetPosition(data);\n          material.specularMap = this.readMap(data, path);\n        } else {\n          this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n\n      this.endChunk(chunk);\n      this.materials[material.name] = material;\n    }\n    /**\n     * Read mesh data chunk.\n     *\n     * @method readMesh\n     * @param {Dataview} data Dataview in use.\n     * @return {Mesh} The parsed mesh.\n     */\n\n  }, {\n    key: \"readMesh\",\n    value: function readMesh(data) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var geometry = new _three.BufferGeometry();\n      var material = new _three.MeshPhongMaterial();\n      var mesh = new _three.Mesh(geometry, material);\n      mesh.name = 'mesh';\n\n      while (next !== 0) {\n        if (next === POINT_ARRAY) {\n          var points = this.readWord(data);\n          this.debugMessage('   Vertex: ' + points); //BufferGeometry\n\n          var vertices = [];\n\n          for (var i = 0; i < points; i++) {\n            vertices.push(this.readFloat(data));\n            vertices.push(this.readFloat(data));\n            vertices.push(this.readFloat(data));\n          }\n\n          geometry.setAttribute('position', new _three.Float32BufferAttribute(vertices, 3));\n        } else if (next === FACE_ARRAY) {\n          this.resetPosition(data);\n          this.readFaceArray(data, mesh);\n        } else if (next === TEX_VERTS) {\n          var texels = this.readWord(data);\n          this.debugMessage('   UV: ' + texels); //BufferGeometry\n\n          var uvs = [];\n\n          for (var _i = 0; _i < texels; _i++) {\n            uvs.push(this.readFloat(data));\n            uvs.push(this.readFloat(data));\n          }\n\n          geometry.setAttribute('uv', new _three.Float32BufferAttribute(uvs, 2));\n        } else if (next === MESH_MATRIX) {\n          this.debugMessage('   Tranformation Matrix (TODO)');\n          var values = [];\n\n          for (var _i2 = 0; _i2 < 12; _i2++) {\n            values[_i2] = this.readFloat(data);\n          }\n\n          var matrix = new _three.Matrix4(); //X Line\n\n          matrix.elements[0] = values[0];\n          matrix.elements[1] = values[6];\n          matrix.elements[2] = values[3];\n          matrix.elements[3] = values[9]; //Y Line\n\n          matrix.elements[4] = values[2];\n          matrix.elements[5] = values[8];\n          matrix.elements[6] = values[5];\n          matrix.elements[7] = values[11]; //Z Line\n\n          matrix.elements[8] = values[1];\n          matrix.elements[9] = values[7];\n          matrix.elements[10] = values[4];\n          matrix.elements[11] = values[10]; //W Line\n\n          matrix.elements[12] = 0;\n          matrix.elements[13] = 0;\n          matrix.elements[14] = 0;\n          matrix.elements[15] = 1;\n          matrix.transpose();\n          var inverse = new _three.Matrix4();\n          inverse.copy(matrix).invert();\n          geometry.applyMatrix4(inverse);\n          matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n        } else {\n          this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n\n      this.endChunk(chunk);\n      geometry.computeVertexNormals();\n      return mesh;\n    }\n    /**\n     * Read face array data chunk.\n     *\n     * @method readFaceArray\n     * @param {Dataview} data Dataview in use.\n     * @param {Mesh} mesh Mesh to be filled with the data read.\n     */\n\n  }, {\n    key: \"readFaceArray\",\n    value: function readFaceArray(data, mesh) {\n      var chunk = this.readChunk(data);\n      var faces = this.readWord(data);\n      this.debugMessage('   Faces: ' + faces);\n      var index = [];\n\n      for (var i = 0; i < faces; ++i) {\n        index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n        this.readWord(data); // visibility\n      }\n\n      mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\n\n      var materialIndex = 0;\n      var start = 0;\n\n      while (this.position < chunk.end) {\n        var subchunk = this.readChunk(data);\n\n        if (subchunk.id === MSH_MAT_GROUP) {\n          this.debugMessage('      Material Group');\n          this.resetPosition(data);\n          var group = this.readMaterialGroup(data);\n          var count = group.index.length * 3; // assuming successive indices\n\n          mesh.geometry.addGroup(start, count, materialIndex);\n          start += count;\n          materialIndex++;\n          var material = this.materials[group.name];\n          if (Array.isArray(mesh.material) === false) mesh.material = [];\n\n          if (material !== undefined) {\n            mesh.material.push(material);\n          }\n        } else {\n          this.debugMessage('      Unknown face array chunk: ' + subchunk.toString(16));\n        }\n\n        this.endChunk(subchunk);\n      }\n\n      if (mesh.material.length === 1) mesh.material = mesh.material[0]; // for backwards compatibility\n\n      this.endChunk(chunk);\n    }\n    /**\n     * Read texture map data chunk.\n     *\n     * @method readMap\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     * @return {Texture} Texture read from this data chunk.\n     */\n\n  }, {\n    key: \"readMap\",\n    value: function readMap(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var texture = {};\n      var loader = new _three.TextureLoader(this.manager);\n      loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n\n      while (next !== 0) {\n        if (next === MAT_MAPNAME) {\n          var name = this.readString(data, 128);\n          texture = loader.load(name);\n          this.debugMessage('      File: ' + path + name);\n        } else if (next === MAT_MAP_UOFFSET) {\n          texture.offset.x = this.readFloat(data);\n          this.debugMessage('      OffsetX: ' + texture.offset.x);\n        } else if (next === MAT_MAP_VOFFSET) {\n          texture.offset.y = this.readFloat(data);\n          this.debugMessage('      OffsetY: ' + texture.offset.y);\n        } else if (next === MAT_MAP_USCALE) {\n          texture.repeat.x = this.readFloat(data);\n          this.debugMessage('      RepeatX: ' + texture.repeat.x);\n        } else if (next === MAT_MAP_VSCALE) {\n          texture.repeat.y = this.readFloat(data);\n          this.debugMessage('      RepeatY: ' + texture.repeat.y);\n        } else {\n          this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n\n      this.endChunk(chunk);\n      return texture;\n    }\n    /**\n     * Read material group data chunk.\n     *\n     * @method readMaterialGroup\n     * @param {Dataview} data Dataview in use.\n     * @return {Object} Object with name and index of the object.\n     */\n\n  }, {\n    key: \"readMaterialGroup\",\n    value: function readMaterialGroup(data) {\n      this.readChunk(data);\n      var name = this.readString(data, 64);\n      var numFaces = this.readWord(data);\n      this.debugMessage('         Name: ' + name);\n      this.debugMessage('         Faces: ' + numFaces);\n      var index = [];\n\n      for (var i = 0; i < numFaces; ++i) {\n        index.push(this.readWord(data));\n      }\n\n      return {\n        name: name,\n        index: index\n      };\n    }\n    /**\n     * Read a color value.\n     *\n     * @method readColor\n     * @param {DataView} data Dataview.\n     * @return {Color} Color value read..\n     */\n\n  }, {\n    key: \"readColor\",\n    value: function readColor(data) {\n      var chunk = this.readChunk(data);\n      var color = new _three.Color();\n\n      if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n        var r = this.readByte(data);\n        var g = this.readByte(data);\n        var b = this.readByte(data);\n        color.setRGB(r / 255, g / 255, b / 255);\n        this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n      } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n        var _r = this.readFloat(data);\n\n        var _g = this.readFloat(data);\n\n        var _b = this.readFloat(data);\n\n        color.setRGB(_r, _g, _b);\n        this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n      } else {\n        this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n      }\n\n      this.endChunk(chunk);\n      return color;\n    }\n    /**\n     * Read next chunk of data.\n     *\n     * @method readChunk\n     * @param {DataView} data Dataview.\n     * @return {Object} Chunk of data read.\n     */\n\n  }, {\n    key: \"readChunk\",\n    value: function readChunk(data) {\n      var chunk = {};\n      chunk.cur = this.position;\n      chunk.id = this.readWord(data);\n      chunk.size = this.readDWord(data);\n      chunk.end = chunk.cur + chunk.size;\n      chunk.cur += 6;\n      return chunk;\n    }\n    /**\n     * Set position to the end of the current chunk of data.\n     *\n     * @method endChunk\n     * @param {Object} chunk Data chunk.\n     */\n\n  }, {\n    key: \"endChunk\",\n    value: function endChunk(chunk) {\n      this.position = chunk.end;\n    }\n    /**\n     * Move to the next data chunk.\n     *\n     * @method nextChunk\n     * @param {DataView} data Dataview.\n     * @param {Object} chunk Data chunk.\n     */\n\n  }, {\n    key: \"nextChunk\",\n    value: function nextChunk(data, chunk) {\n      if (chunk.cur >= chunk.end) {\n        return 0;\n      }\n\n      this.position = chunk.cur;\n\n      try {\n        var next = this.readChunk(data);\n        chunk.cur += next.size;\n        return next.id;\n      } catch (e) {\n        this.debugMessage('Unable to read chunk at ' + this.position);\n        return 0;\n      }\n    }\n    /**\n     * Reset dataview position.\n     *\n     * @method resetPosition\n     */\n\n  }, {\n    key: \"resetPosition\",\n    value: function resetPosition() {\n      this.position -= 6;\n    }\n    /**\n     * Read byte value.\n     *\n     * @method readByte\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readByte\",\n    value: function readByte(data) {\n      var v = data.getUint8(this.position, true);\n      this.position += 1;\n      return v;\n    }\n    /**\n     * Read 32 bit float value.\n     *\n     * @method readFloat\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readFloat\",\n    value: function readFloat(data) {\n      try {\n        var v = data.getFloat32(this.position, true);\n        this.position += 4;\n        return v;\n      } catch (e) {\n        this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n      }\n    }\n    /**\n     * Read 32 bit signed integer value.\n     *\n     * @method readInt\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readInt\",\n    value: function readInt(data) {\n      var v = data.getInt32(this.position, true);\n      this.position += 4;\n      return v;\n    }\n    /**\n     * Read 16 bit signed integer value.\n     *\n     * @method readShort\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readShort\",\n    value: function readShort(data) {\n      var v = data.getInt16(this.position, true);\n      this.position += 2;\n      return v;\n    }\n    /**\n     * Read 64 bit unsigned integer value.\n     *\n     * @method readDWord\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readDWord\",\n    value: function readDWord(data) {\n      var v = data.getUint32(this.position, true);\n      this.position += 4;\n      return v;\n    }\n    /**\n     * Read 32 bit unsigned integer value.\n     *\n     * @method readWord\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readWord\",\n    value: function readWord(data) {\n      var v = data.getUint16(this.position, true);\n      this.position += 2;\n      return v;\n    }\n    /**\n     * Read string value.\n     *\n     * @method readString\n     * @param {DataView} data Dataview to read data from.\n     * @param {Number} maxLength Max size of the string to be read.\n     * @return {String} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readString\",\n    value: function readString(data, maxLength) {\n      var s = '';\n\n      for (var i = 0; i < maxLength; i++) {\n        var c = this.readByte(data);\n\n        if (!c) {\n          break;\n        }\n\n        s += String.fromCharCode(c);\n      }\n\n      return s;\n    }\n    /**\n     * Read percentage value.\n     *\n     * @method readPercentage\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n\n  }, {\n    key: \"readPercentage\",\n    value: function readPercentage(data) {\n      var chunk = this.readChunk(data);\n      var value;\n\n      switch (chunk.id) {\n        case INT_PERCENTAGE:\n          value = this.readShort(data) / 100;\n          break;\n\n        case FLOAT_PERCENTAGE:\n          value = this.readFloat(data);\n          break;\n\n        default:\n          this.debugMessage('      Unknown percentage chunk: ' + chunk.toString(16));\n      }\n\n      this.endChunk(chunk);\n      return value;\n    }\n    /**\n     * Print debug message to the console.\n     *\n     * Is controlled by a flag to show or hide debug messages.\n     *\n     * @method debugMessage\n     * @param {Object} message Debug message to print to the console.\n     */\n\n  }, {\n    key: \"debugMessage\",\n    value: function debugMessage(message) {\n      if (this.debug) {\n        console.log(message);\n      }\n    }\n  }]);\n\n  return TDSLoader;\n}(_three.Loader); // const NULL_CHUNK = 0x0000;\n\n\nexports.TDSLoader = TDSLoader;\nvar M3DMAGIC = 0x4d4d; // const SMAGIC = 0x2D2D;\n// const LMAGIC = 0x2D3D;\n\nvar MLIBMAGIC = 0x3daa; // const MATMAGIC = 0x3DFF;\n\nvar CMAGIC = 0xc23d;\nvar M3D_VERSION = 0x0002; // const M3D_KFVERSION = 0x0005;\n\nvar COLOR_F = 0x0010;\nvar COLOR_24 = 0x0011;\nvar LIN_COLOR_24 = 0x0012;\nvar LIN_COLOR_F = 0x0013;\nvar INT_PERCENTAGE = 0x0030;\nvar FLOAT_PERCENTAGE = 0x0031;\nvar MDATA = 0x3d3d;\nvar MESH_VERSION = 0x3d3e;\nvar MASTER_SCALE = 0x0100; // const LO_SHADOW_BIAS = 0x1400;\n// const HI_SHADOW_BIAS = 0x1410;\n// const SHADOW_MAP_SIZE = 0x1420;\n// const SHADOW_SAMPLES = 0x1430;\n// const SHADOW_RANGE = 0x1440;\n// const SHADOW_FILTER = 0x1450;\n// const RAY_BIAS = 0x1460;\n// const O_CONSTS = 0x1500;\n// const AMBIENT_LIGHT = 0x2100;\n// const BIT_MAP = 0x1100;\n// const SOLID_BGND = 0x1200;\n// const V_GRADIENT = 0x1300;\n// const USE_BIT_MAP = 0x1101;\n// const USE_SOLID_BGND = 0x1201;\n// const USE_V_GRADIENT = 0x1301;\n// const FOG = 0x2200;\n// const FOG_BGND = 0x2210;\n// const LAYER_FOG = 0x2302;\n// const DISTANCE_CUE = 0x2300;\n// const DCUE_BGND = 0x2310;\n// const USE_FOG = 0x2201;\n// const USE_LAYER_FOG = 0x2303;\n// const USE_DISTANCE_CUE = 0x2301;\n\nvar MAT_ENTRY = 0xafff;\nvar MAT_NAME = 0xa000;\nvar MAT_AMBIENT = 0xa010;\nvar MAT_DIFFUSE = 0xa020;\nvar MAT_SPECULAR = 0xa030;\nvar MAT_SHININESS = 0xa040; // const MAT_SHIN2PCT = 0xA041;\n\nvar MAT_TRANSPARENCY = 0xa050; // const MAT_XPFALL = 0xA052;\n// const MAT_USE_XPFALL = 0xA240;\n// const MAT_REFBLUR = 0xA053;\n// const MAT_SHADING = 0xA100;\n// const MAT_USE_REFBLUR = 0xA250;\n// const MAT_SELF_ILLUM = 0xA084;\n\nvar MAT_TWO_SIDE = 0xa081; // const MAT_DECAL = 0xA082;\n\nvar MAT_ADDITIVE = 0xa083;\nvar MAT_WIRE = 0xa085; // const MAT_FACEMAP = 0xA088;\n// const MAT_TRANSFALLOFF_IN = 0xA08A;\n// const MAT_PHONGSOFT = 0xA08C;\n// const MAT_WIREABS = 0xA08E;\n\nvar MAT_WIRE_SIZE = 0xa087;\nvar MAT_TEXMAP = 0xa200; // const MAT_SXP_TEXT_DATA = 0xA320;\n// const MAT_TEXMASK = 0xA33E;\n// const MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// const MAT_TEX2MAP = 0xA33A;\n// const MAT_SXP_TEXT2_DATA = 0xA321;\n// const MAT_TEX2MASK = 0xA340;\n// const MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\nvar MAT_OPACMAP = 0xa210; // const MAT_SXP_OPAC_DATA = 0xA322;\n// const MAT_OPACMASK = 0xA342;\n// const MAT_SXP_OPACMASK_DATA = 0xA32E;\n\nvar MAT_BUMPMAP = 0xa230; // const MAT_SXP_BUMP_DATA = 0xA324;\n// const MAT_BUMPMASK = 0xA344;\n// const MAT_SXP_BUMPMASK_DATA = 0xA330;\n\nvar MAT_SPECMAP = 0xa204; // const MAT_SXP_SPEC_DATA = 0xA325;\n// const MAT_SPECMASK = 0xA348;\n// const MAT_SXP_SPECMASK_DATA = 0xA332;\n// const MAT_SHINMAP = 0xA33C;\n// const MAT_SXP_SHIN_DATA = 0xA326;\n// const MAT_SHINMASK = 0xA346;\n// const MAT_SXP_SHINMASK_DATA = 0xA334;\n// const MAT_SELFIMAP = 0xA33D;\n// const MAT_SXP_SELFI_DATA = 0xA328;\n// const MAT_SELFIMASK = 0xA34A;\n// const MAT_SXP_SELFIMASK_DATA = 0xA336;\n// const MAT_REFLMAP = 0xA220;\n// const MAT_REFLMASK = 0xA34C;\n// const MAT_SXP_REFLMASK_DATA = 0xA338;\n// const MAT_ACUBIC = 0xA310;\n\nvar MAT_MAPNAME = 0xa300; // const MAT_MAP_TILING = 0xA351;\n// const MAT_MAP_TEXBLUR = 0xA353;\n\nvar MAT_MAP_USCALE = 0xa354;\nvar MAT_MAP_VSCALE = 0xa356;\nvar MAT_MAP_UOFFSET = 0xa358;\nvar MAT_MAP_VOFFSET = 0xa35a; // const MAT_MAP_ANG = 0xA35C;\n// const MAT_MAP_COL1 = 0xA360;\n// const MAT_MAP_COL2 = 0xA362;\n// const MAT_MAP_RCOL = 0xA364;\n// const MAT_MAP_GCOL = 0xA366;\n// const MAT_MAP_BCOL = 0xA368;\n\nvar NAMED_OBJECT = 0x4000; // const N_DIRECT_LIGHT = 0x4600;\n// const DL_OFF = 0x4620;\n// const DL_OUTER_RANGE = 0x465A;\n// const DL_INNER_RANGE = 0x4659;\n// const DL_MULTIPLIER = 0x465B;\n// const DL_EXCLUDE = 0x4654;\n// const DL_ATTENUATE = 0x4625;\n// const DL_SPOTLIGHT = 0x4610;\n// const DL_SPOT_ROLL = 0x4656;\n// const DL_SHADOWED = 0x4630;\n// const DL_LOCAL_SHADOW2 = 0x4641;\n// const DL_SEE_CONE = 0x4650;\n// const DL_SPOT_RECTANGULAR = 0x4651;\n// const DL_SPOT_ASPECT = 0x4657;\n// const DL_SPOT_PROJECTOR = 0x4653;\n// const DL_SPOT_OVERSHOOT = 0x4652;\n// const DL_RAY_BIAS = 0x4658;\n// const DL_RAYSHAD = 0x4627;\n// const N_CAMERA = 0x4700;\n// const CAM_SEE_CONE = 0x4710;\n// const CAM_RANGES = 0x4720;\n// const OBJ_HIDDEN = 0x4010;\n// const OBJ_VIS_LOFTER = 0x4011;\n// const OBJ_DOESNT_CAST = 0x4012;\n// const OBJ_DONT_RECVSHADOW = 0x4017;\n// const OBJ_MATTE = 0x4013;\n// const OBJ_FAST = 0x4014;\n// const OBJ_PROCEDURAL = 0x4015;\n// const OBJ_FROZEN = 0x4016;\n\nvar N_TRI_OBJECT = 0x4100;\nvar POINT_ARRAY = 0x4110; // const POINT_FLAG_ARRAY = 0x4111;\n\nvar FACE_ARRAY = 0x4120;\nvar MSH_MAT_GROUP = 0x4130; // const SMOOTH_GROUP = 0x4150;\n// const MSH_BOXMAP = 0x4190;\n\nvar TEX_VERTS = 0x4140;\nvar MESH_MATRIX = 0x4160; // const MESH_COLOR = 0x4165;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js"]],"~:properties",["^5",["map","wireframeLinewidth","blending","index","prototype","transparent","side","group","key","x","__esModule","alphaMap","id","bumpMap","materials","specular","position","name","configurable","value","wireframe","enumerable","writable","debug","shininess","y","TDSLoader","__proto__","cur","specularMap","meshes","size","color","opacity","end","constructor","material"]],"~:compiled-at",1630917515890,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$loaders$TDSLoader.js\",\n\"lineCount\":28,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/loaders/TDSLoader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$loaders$TDSLoader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.TDSLoader = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/**\\n * Autodesk 3DS three.js file loader, based on lib3ds.\\n *\\n * Loads geometry with uv and materials basic properties with texture support.\\n *\\n * @class TDSLoader\\n * @constructor\\n */\\nvar TDSLoader =\\n/*#__PURE__*/\\nfunction (_Loader) {\\n  _inherits(TDSLoader, _Loader);\\n\\n  function TDSLoader(manager) {\\n    var _this;\\n\\n    _classCallCheck(this, TDSLoader);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TDSLoader).call(this, manager));\\n    _this.debug = false;\\n    _this.group = null;\\n    _this.position = 0;\\n    _this.materials = [];\\n    _this.meshes = [];\\n    return _this;\\n  }\\n  /**\\n   * Load 3ds file from url.\\n   *\\n   * @method load\\n   * @param {[type]} url URL for the file.\\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\\n   * @param {Function} onProgress onProgress callback.\\n   * @param {Function} onError onError callback.\\n   */\\n\\n\\n  _createClass(TDSLoader, [{\\n    key: \\\"load\\\",\\n    value: function load(url, onLoad, onProgress, onError) {\\n      var scope = this;\\n      var path = this.path === '' ? _three.LoaderUtils.extractUrlBase(url) : this.path;\\n      var loader = new _three.FileLoader(this.manager);\\n      loader.setPath(this.path);\\n      loader.setResponseType('arraybuffer');\\n      loader.setRequestHeader(this.requestHeader);\\n      loader.setWithCredentials(this.withCredentials);\\n      loader.load(url, function (data) {\\n        try {\\n          onLoad(scope.parse(data, path));\\n        } catch (e) {\\n          if (onError) {\\n            onError(e);\\n          } else {\\n            console.error(e);\\n          }\\n\\n          scope.manager.itemError(url);\\n        }\\n      }, onProgress, onError);\\n    }\\n    /**\\n     * Parse arraybuffer data and load 3ds file.\\n     *\\n     * @method parse\\n     * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\\n     * @param {String} path Path for external resources.\\n     * @return {Group} Group loaded from 3ds file.\\n     */\\n\\n  }, {\\n    key: \\\"parse\\\",\\n    value: function parse(arraybuffer, path) {\\n      this.group = new _three.Group();\\n      this.position = 0;\\n      this.materials = [];\\n      this.meshes = [];\\n      this.readFile(arraybuffer, path);\\n\\n      for (var i = 0; i < this.meshes.length; i++) {\\n        this.group.add(this.meshes[i]);\\n      }\\n\\n      return this.group;\\n    }\\n    /**\\n     * Decode file content to read 3ds data.\\n     *\\n     * @method readFile\\n     * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\\n     * @param {String} path Path for external resources.\\n     */\\n\\n  }, {\\n    key: \\\"readFile\\\",\\n    value: function readFile(arraybuffer, path) {\\n      var data = new DataView(arraybuffer);\\n      var chunk = this.readChunk(data);\\n\\n      if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\\n        var next = this.nextChunk(data, chunk);\\n\\n        while (next !== 0) {\\n          if (next === M3D_VERSION) {\\n            var version = this.readDWord(data);\\n            this.debugMessage('3DS file version: ' + version);\\n          } else if (next === MDATA) {\\n            this.resetPosition(data);\\n            this.readMeshData(data, path);\\n          } else {\\n            this.debugMessage('Unknown main chunk: ' + next.toString(16));\\n          }\\n\\n          next = this.nextChunk(data, chunk);\\n        }\\n      }\\n\\n      this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\\n    }\\n    /**\\n     * Read mesh data chunk.\\n     *\\n     * @method readMeshData\\n     * @param {Dataview} data Dataview in use.\\n     * @param {String} path Path for external resources.\\n     */\\n\\n  }, {\\n    key: \\\"readMeshData\\\",\\n    value: function readMeshData(data, path) {\\n      var chunk = this.readChunk(data);\\n      var next = this.nextChunk(data, chunk);\\n\\n      while (next !== 0) {\\n        if (next === MESH_VERSION) {\\n          var version = +this.readDWord(data);\\n          this.debugMessage('Mesh Version: ' + version);\\n        } else if (next === MASTER_SCALE) {\\n          var scale = this.readFloat(data);\\n          this.debugMessage('Master scale: ' + scale);\\n          this.group.scale.set(scale, scale, scale);\\n        } else if (next === NAMED_OBJECT) {\\n          this.debugMessage('Named Object');\\n          this.resetPosition(data);\\n          this.readNamedObject(data);\\n        } else if (next === MAT_ENTRY) {\\n          this.debugMessage('Material');\\n          this.resetPosition(data);\\n          this.readMaterialEntry(data, path);\\n        } else {\\n          this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\\n        }\\n\\n        next = this.nextChunk(data, chunk);\\n      }\\n    }\\n    /**\\n     * Read named object chunk.\\n     *\\n     * @method readNamedObject\\n     * @param {Dataview} data Dataview in use.\\n     */\\n\\n  }, {\\n    key: \\\"readNamedObject\\\",\\n    value: function readNamedObject(data) {\\n      var chunk = this.readChunk(data);\\n      var name = this.readString(data, 64);\\n      chunk.cur = this.position;\\n      var next = this.nextChunk(data, chunk);\\n\\n      while (next !== 0) {\\n        if (next === N_TRI_OBJECT) {\\n          this.resetPosition(data);\\n          var mesh = this.readMesh(data);\\n          mesh.name = name;\\n          this.meshes.push(mesh);\\n        } else {\\n          this.debugMessage('Unknown named object chunk: ' + next.toString(16));\\n        }\\n\\n        next = this.nextChunk(data, chunk);\\n      }\\n\\n      this.endChunk(chunk);\\n    }\\n    /**\\n     * Read material data chunk and add it to the material list.\\n     *\\n     * @method readMaterialEntry\\n     * @param {Dataview} data Dataview in use.\\n     * @param {String} path Path for external resources.\\n     */\\n\\n  }, {\\n    key: \\\"readMaterialEntry\\\",\\n    value: function readMaterialEntry(data, path) {\\n      var chunk = this.readChunk(data);\\n      var next = this.nextChunk(data, chunk);\\n      var material = new _three.MeshPhongMaterial();\\n\\n      while (next !== 0) {\\n        if (next === MAT_NAME) {\\n          material.name = this.readString(data, 64);\\n          this.debugMessage('   Name: ' + material.name);\\n        } else if (next === MAT_WIRE) {\\n          this.debugMessage('   Wireframe');\\n          material.wireframe = true;\\n        } else if (next === MAT_WIRE_SIZE) {\\n          var value = this.readByte(data);\\n          material.wireframeLinewidth = value;\\n          this.debugMessage('   Wireframe Thickness: ' + value);\\n        } else if (next === MAT_TWO_SIDE) {\\n          material.side = _three.DoubleSide;\\n          this.debugMessage('   DoubleSided');\\n        } else if (next === MAT_ADDITIVE) {\\n          this.debugMessage('   Additive Blending');\\n          material.blending = _three.AdditiveBlending;\\n        } else if (next === MAT_DIFFUSE) {\\n          this.debugMessage('   Diffuse Color');\\n          material.color = this.readColor(data);\\n        } else if (next === MAT_SPECULAR) {\\n          this.debugMessage('   Specular Color');\\n          material.specular = this.readColor(data);\\n        } else if (next === MAT_AMBIENT) {\\n          this.debugMessage('   Ambient color');\\n          material.color = this.readColor(data);\\n        } else if (next === MAT_SHININESS) {\\n          var shininess = this.readPercentage(data);\\n          material.shininess = shininess * 100;\\n          this.debugMessage('   Shininess : ' + shininess);\\n        } else if (next === MAT_TRANSPARENCY) {\\n          var transparency = this.readPercentage(data);\\n          material.opacity = 1 - transparency;\\n          this.debugMessage('  Transparency : ' + transparency);\\n          material.transparent = material.opacity < 1 ? true : false;\\n        } else if (next === MAT_TEXMAP) {\\n          this.debugMessage('   ColorMap');\\n          this.resetPosition(data);\\n          material.map = this.readMap(data, path);\\n        } else if (next === MAT_BUMPMAP) {\\n          this.debugMessage('   BumpMap');\\n          this.resetPosition(data);\\n          material.bumpMap = this.readMap(data, path);\\n        } else if (next === MAT_OPACMAP) {\\n          this.debugMessage('   OpacityMap');\\n          this.resetPosition(data);\\n          material.alphaMap = this.readMap(data, path);\\n        } else if (next === MAT_SPECMAP) {\\n          this.debugMessage('   SpecularMap');\\n          this.resetPosition(data);\\n          material.specularMap = this.readMap(data, path);\\n        } else {\\n          this.debugMessage('   Unknown material chunk: ' + next.toString(16));\\n        }\\n\\n        next = this.nextChunk(data, chunk);\\n      }\\n\\n      this.endChunk(chunk);\\n      this.materials[material.name] = material;\\n    }\\n    /**\\n     * Read mesh data chunk.\\n     *\\n     * @method readMesh\\n     * @param {Dataview} data Dataview in use.\\n     * @return {Mesh} The parsed mesh.\\n     */\\n\\n  }, {\\n    key: \\\"readMesh\\\",\\n    value: function readMesh(data) {\\n      var chunk = this.readChunk(data);\\n      var next = this.nextChunk(data, chunk);\\n      var geometry = new _three.BufferGeometry();\\n      var material = new _three.MeshPhongMaterial();\\n      var mesh = new _three.Mesh(geometry, material);\\n      mesh.name = 'mesh';\\n\\n      while (next !== 0) {\\n        if (next === POINT_ARRAY) {\\n          var points = this.readWord(data);\\n          this.debugMessage('   Vertex: ' + points); //BufferGeometry\\n\\n          var vertices = [];\\n\\n          for (var i = 0; i < points; i++) {\\n            vertices.push(this.readFloat(data));\\n            vertices.push(this.readFloat(data));\\n            vertices.push(this.readFloat(data));\\n          }\\n\\n          geometry.setAttribute('position', new _three.Float32BufferAttribute(vertices, 3));\\n        } else if (next === FACE_ARRAY) {\\n          this.resetPosition(data);\\n          this.readFaceArray(data, mesh);\\n        } else if (next === TEX_VERTS) {\\n          var texels = this.readWord(data);\\n          this.debugMessage('   UV: ' + texels); //BufferGeometry\\n\\n          var uvs = [];\\n\\n          for (var _i = 0; _i < texels; _i++) {\\n            uvs.push(this.readFloat(data));\\n            uvs.push(this.readFloat(data));\\n          }\\n\\n          geometry.setAttribute('uv', new _three.Float32BufferAttribute(uvs, 2));\\n        } else if (next === MESH_MATRIX) {\\n          this.debugMessage('   Tranformation Matrix (TODO)');\\n          var values = [];\\n\\n          for (var _i2 = 0; _i2 < 12; _i2++) {\\n            values[_i2] = this.readFloat(data);\\n          }\\n\\n          var matrix = new _three.Matrix4(); //X Line\\n\\n          matrix.elements[0] = values[0];\\n          matrix.elements[1] = values[6];\\n          matrix.elements[2] = values[3];\\n          matrix.elements[3] = values[9]; //Y Line\\n\\n          matrix.elements[4] = values[2];\\n          matrix.elements[5] = values[8];\\n          matrix.elements[6] = values[5];\\n          matrix.elements[7] = values[11]; //Z Line\\n\\n          matrix.elements[8] = values[1];\\n          matrix.elements[9] = values[7];\\n          matrix.elements[10] = values[4];\\n          matrix.elements[11] = values[10]; //W Line\\n\\n          matrix.elements[12] = 0;\\n          matrix.elements[13] = 0;\\n          matrix.elements[14] = 0;\\n          matrix.elements[15] = 1;\\n          matrix.transpose();\\n          var inverse = new _three.Matrix4();\\n          inverse.copy(matrix).invert();\\n          geometry.applyMatrix4(inverse);\\n          matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\\n        } else {\\n          this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\\n        }\\n\\n        next = this.nextChunk(data, chunk);\\n      }\\n\\n      this.endChunk(chunk);\\n      geometry.computeVertexNormals();\\n      return mesh;\\n    }\\n    /**\\n     * Read face array data chunk.\\n     *\\n     * @method readFaceArray\\n     * @param {Dataview} data Dataview in use.\\n     * @param {Mesh} mesh Mesh to be filled with the data read.\\n     */\\n\\n  }, {\\n    key: \\\"readFaceArray\\\",\\n    value: function readFaceArray(data, mesh) {\\n      var chunk = this.readChunk(data);\\n      var faces = this.readWord(data);\\n      this.debugMessage('   Faces: ' + faces);\\n      var index = [];\\n\\n      for (var i = 0; i < faces; ++i) {\\n        index.push(this.readWord(data), this.readWord(data), this.readWord(data));\\n        this.readWord(data); // visibility\\n      }\\n\\n      mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\\n\\n      var materialIndex = 0;\\n      var start = 0;\\n\\n      while (this.position < chunk.end) {\\n        var subchunk = this.readChunk(data);\\n\\n        if (subchunk.id === MSH_MAT_GROUP) {\\n          this.debugMessage('      Material Group');\\n          this.resetPosition(data);\\n          var group = this.readMaterialGroup(data);\\n          var count = group.index.length * 3; // assuming successive indices\\n\\n          mesh.geometry.addGroup(start, count, materialIndex);\\n          start += count;\\n          materialIndex++;\\n          var material = this.materials[group.name];\\n          if (Array.isArray(mesh.material) === false) mesh.material = [];\\n\\n          if (material !== undefined) {\\n            mesh.material.push(material);\\n          }\\n        } else {\\n          this.debugMessage('      Unknown face array chunk: ' + subchunk.toString(16));\\n        }\\n\\n        this.endChunk(subchunk);\\n      }\\n\\n      if (mesh.material.length === 1) mesh.material = mesh.material[0]; // for backwards compatibility\\n\\n      this.endChunk(chunk);\\n    }\\n    /**\\n     * Read texture map data chunk.\\n     *\\n     * @method readMap\\n     * @param {Dataview} data Dataview in use.\\n     * @param {String} path Path for external resources.\\n     * @return {Texture} Texture read from this data chunk.\\n     */\\n\\n  }, {\\n    key: \\\"readMap\\\",\\n    value: function readMap(data, path) {\\n      var chunk = this.readChunk(data);\\n      var next = this.nextChunk(data, chunk);\\n      var texture = {};\\n      var loader = new _three.TextureLoader(this.manager);\\n      loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\\n\\n      while (next !== 0) {\\n        if (next === MAT_MAPNAME) {\\n          var name = this.readString(data, 128);\\n          texture = loader.load(name);\\n          this.debugMessage('      File: ' + path + name);\\n        } else if (next === MAT_MAP_UOFFSET) {\\n          texture.offset.x = this.readFloat(data);\\n          this.debugMessage('      OffsetX: ' + texture.offset.x);\\n        } else if (next === MAT_MAP_VOFFSET) {\\n          texture.offset.y = this.readFloat(data);\\n          this.debugMessage('      OffsetY: ' + texture.offset.y);\\n        } else if (next === MAT_MAP_USCALE) {\\n          texture.repeat.x = this.readFloat(data);\\n          this.debugMessage('      RepeatX: ' + texture.repeat.x);\\n        } else if (next === MAT_MAP_VSCALE) {\\n          texture.repeat.y = this.readFloat(data);\\n          this.debugMessage('      RepeatY: ' + texture.repeat.y);\\n        } else {\\n          this.debugMessage('      Unknown map chunk: ' + next.toString(16));\\n        }\\n\\n        next = this.nextChunk(data, chunk);\\n      }\\n\\n      this.endChunk(chunk);\\n      return texture;\\n    }\\n    /**\\n     * Read material group data chunk.\\n     *\\n     * @method readMaterialGroup\\n     * @param {Dataview} data Dataview in use.\\n     * @return {Object} Object with name and index of the object.\\n     */\\n\\n  }, {\\n    key: \\\"readMaterialGroup\\\",\\n    value: function readMaterialGroup(data) {\\n      this.readChunk(data);\\n      var name = this.readString(data, 64);\\n      var numFaces = this.readWord(data);\\n      this.debugMessage('         Name: ' + name);\\n      this.debugMessage('         Faces: ' + numFaces);\\n      var index = [];\\n\\n      for (var i = 0; i < numFaces; ++i) {\\n        index.push(this.readWord(data));\\n      }\\n\\n      return {\\n        name: name,\\n        index: index\\n      };\\n    }\\n    /**\\n     * Read a color value.\\n     *\\n     * @method readColor\\n     * @param {DataView} data Dataview.\\n     * @return {Color} Color value read..\\n     */\\n\\n  }, {\\n    key: \\\"readColor\\\",\\n    value: function readColor(data) {\\n      var chunk = this.readChunk(data);\\n      var color = new _three.Color();\\n\\n      if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\\n        var r = this.readByte(data);\\n        var g = this.readByte(data);\\n        var b = this.readByte(data);\\n        color.setRGB(r / 255, g / 255, b / 255);\\n        this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\\n      } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\\n        var _r = this.readFloat(data);\\n\\n        var _g = this.readFloat(data);\\n\\n        var _b = this.readFloat(data);\\n\\n        color.setRGB(_r, _g, _b);\\n        this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\\n      } else {\\n        this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\\n      }\\n\\n      this.endChunk(chunk);\\n      return color;\\n    }\\n    /**\\n     * Read next chunk of data.\\n     *\\n     * @method readChunk\\n     * @param {DataView} data Dataview.\\n     * @return {Object} Chunk of data read.\\n     */\\n\\n  }, {\\n    key: \\\"readChunk\\\",\\n    value: function readChunk(data) {\\n      var chunk = {};\\n      chunk.cur = this.position;\\n      chunk.id = this.readWord(data);\\n      chunk.size = this.readDWord(data);\\n      chunk.end = chunk.cur + chunk.size;\\n      chunk.cur += 6;\\n      return chunk;\\n    }\\n    /**\\n     * Set position to the end of the current chunk of data.\\n     *\\n     * @method endChunk\\n     * @param {Object} chunk Data chunk.\\n     */\\n\\n  }, {\\n    key: \\\"endChunk\\\",\\n    value: function endChunk(chunk) {\\n      this.position = chunk.end;\\n    }\\n    /**\\n     * Move to the next data chunk.\\n     *\\n     * @method nextChunk\\n     * @param {DataView} data Dataview.\\n     * @param {Object} chunk Data chunk.\\n     */\\n\\n  }, {\\n    key: \\\"nextChunk\\\",\\n    value: function nextChunk(data, chunk) {\\n      if (chunk.cur >= chunk.end) {\\n        return 0;\\n      }\\n\\n      this.position = chunk.cur;\\n\\n      try {\\n        var next = this.readChunk(data);\\n        chunk.cur += next.size;\\n        return next.id;\\n      } catch (e) {\\n        this.debugMessage('Unable to read chunk at ' + this.position);\\n        return 0;\\n      }\\n    }\\n    /**\\n     * Reset dataview position.\\n     *\\n     * @method resetPosition\\n     */\\n\\n  }, {\\n    key: \\\"resetPosition\\\",\\n    value: function resetPosition() {\\n      this.position -= 6;\\n    }\\n    /**\\n     * Read byte value.\\n     *\\n     * @method readByte\\n     * @param {DataView} data Dataview to read data from.\\n     * @return {Number} Data read from the dataview.\\n     */\\n\\n  }, {\\n    key: \\\"readByte\\\",\\n    value: function readByte(data) {\\n      var v = data.getUint8(this.position, true);\\n      this.position += 1;\\n      return v;\\n    }\\n    /**\\n     * Read 32 bit float value.\\n     *\\n     * @method readFloat\\n     * @param {DataView} data Dataview to read data from.\\n     * @return {Number} Data read from the dataview.\\n     */\\n\\n  }, {\\n    key: \\\"readFloat\\\",\\n    value: function readFloat(data) {\\n      try {\\n        var v = data.getFloat32(this.position, true);\\n        this.position += 4;\\n        return v;\\n      } catch (e) {\\n        this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\\n      }\\n    }\\n    /**\\n     * Read 32 bit signed integer value.\\n     *\\n     * @method readInt\\n     * @param {DataView} data Dataview to read data from.\\n     * @return {Number} Data read from the dataview.\\n     */\\n\\n  }, {\\n    key: \\\"readInt\\\",\\n    value: function readInt(data) {\\n      var v = data.getInt32(this.position, true);\\n      this.position += 4;\\n      return v;\\n    }\\n    /**\\n     * Read 16 bit signed integer value.\\n     *\\n     * @method readShort\\n     * @param {DataView} data Dataview to read data from.\\n     * @return {Number} Data read from the dataview.\\n     */\\n\\n  }, {\\n    key: \\\"readShort\\\",\\n    value: function readShort(data) {\\n      var v = data.getInt16(this.position, true);\\n      this.position += 2;\\n      return v;\\n    }\\n    /**\\n     * Read 64 bit unsigned integer value.\\n     *\\n     * @method readDWord\\n     * @param {DataView} data Dataview to read data from.\\n     * @return {Number} Data read from the dataview.\\n     */\\n\\n  }, {\\n    key: \\\"readDWord\\\",\\n    value: function readDWord(data) {\\n      var v = data.getUint32(this.position, true);\\n      this.position += 4;\\n      return v;\\n    }\\n    /**\\n     * Read 32 bit unsigned integer value.\\n     *\\n     * @method readWord\\n     * @param {DataView} data Dataview to read data from.\\n     * @return {Number} Data read from the dataview.\\n     */\\n\\n  }, {\\n    key: \\\"readWord\\\",\\n    value: function readWord(data) {\\n      var v = data.getUint16(this.position, true);\\n      this.position += 2;\\n      return v;\\n    }\\n    /**\\n     * Read string value.\\n     *\\n     * @method readString\\n     * @param {DataView} data Dataview to read data from.\\n     * @param {Number} maxLength Max size of the string to be read.\\n     * @return {String} Data read from the dataview.\\n     */\\n\\n  }, {\\n    key: \\\"readString\\\",\\n    value: function readString(data, maxLength) {\\n      var s = '';\\n\\n      for (var i = 0; i < maxLength; i++) {\\n        var c = this.readByte(data);\\n\\n        if (!c) {\\n          break;\\n        }\\n\\n        s += String.fromCharCode(c);\\n      }\\n\\n      return s;\\n    }\\n    /**\\n     * Read percentage value.\\n     *\\n     * @method readPercentage\\n     * @param {DataView} data Dataview to read data from.\\n     * @return {Number} Data read from the dataview.\\n     */\\n\\n  }, {\\n    key: \\\"readPercentage\\\",\\n    value: function readPercentage(data) {\\n      var chunk = this.readChunk(data);\\n      var value;\\n\\n      switch (chunk.id) {\\n        case INT_PERCENTAGE:\\n          value = this.readShort(data) / 100;\\n          break;\\n\\n        case FLOAT_PERCENTAGE:\\n          value = this.readFloat(data);\\n          break;\\n\\n        default:\\n          this.debugMessage('      Unknown percentage chunk: ' + chunk.toString(16));\\n      }\\n\\n      this.endChunk(chunk);\\n      return value;\\n    }\\n    /**\\n     * Print debug message to the console.\\n     *\\n     * Is controlled by a flag to show or hide debug messages.\\n     *\\n     * @method debugMessage\\n     * @param {Object} message Debug message to print to the console.\\n     */\\n\\n  }, {\\n    key: \\\"debugMessage\\\",\\n    value: function debugMessage(message) {\\n      if (this.debug) {\\n        console.log(message);\\n      }\\n    }\\n  }]);\\n\\n  return TDSLoader;\\n}(_three.Loader); // const NULL_CHUNK = 0x0000;\\n\\n\\nexports.TDSLoader = TDSLoader;\\nvar M3DMAGIC = 0x4d4d; // const SMAGIC = 0x2D2D;\\n// const LMAGIC = 0x2D3D;\\n\\nvar MLIBMAGIC = 0x3daa; // const MATMAGIC = 0x3DFF;\\n\\nvar CMAGIC = 0xc23d;\\nvar M3D_VERSION = 0x0002; // const M3D_KFVERSION = 0x0005;\\n\\nvar COLOR_F = 0x0010;\\nvar COLOR_24 = 0x0011;\\nvar LIN_COLOR_24 = 0x0012;\\nvar LIN_COLOR_F = 0x0013;\\nvar INT_PERCENTAGE = 0x0030;\\nvar FLOAT_PERCENTAGE = 0x0031;\\nvar MDATA = 0x3d3d;\\nvar MESH_VERSION = 0x3d3e;\\nvar MASTER_SCALE = 0x0100; // const LO_SHADOW_BIAS = 0x1400;\\n// const HI_SHADOW_BIAS = 0x1410;\\n// const SHADOW_MAP_SIZE = 0x1420;\\n// const SHADOW_SAMPLES = 0x1430;\\n// const SHADOW_RANGE = 0x1440;\\n// const SHADOW_FILTER = 0x1450;\\n// const RAY_BIAS = 0x1460;\\n// const O_CONSTS = 0x1500;\\n// const AMBIENT_LIGHT = 0x2100;\\n// const BIT_MAP = 0x1100;\\n// const SOLID_BGND = 0x1200;\\n// const V_GRADIENT = 0x1300;\\n// const USE_BIT_MAP = 0x1101;\\n// const USE_SOLID_BGND = 0x1201;\\n// const USE_V_GRADIENT = 0x1301;\\n// const FOG = 0x2200;\\n// const FOG_BGND = 0x2210;\\n// const LAYER_FOG = 0x2302;\\n// const DISTANCE_CUE = 0x2300;\\n// const DCUE_BGND = 0x2310;\\n// const USE_FOG = 0x2201;\\n// const USE_LAYER_FOG = 0x2303;\\n// const USE_DISTANCE_CUE = 0x2301;\\n\\nvar MAT_ENTRY = 0xafff;\\nvar MAT_NAME = 0xa000;\\nvar MAT_AMBIENT = 0xa010;\\nvar MAT_DIFFUSE = 0xa020;\\nvar MAT_SPECULAR = 0xa030;\\nvar MAT_SHININESS = 0xa040; // const MAT_SHIN2PCT = 0xA041;\\n\\nvar MAT_TRANSPARENCY = 0xa050; // const MAT_XPFALL = 0xA052;\\n// const MAT_USE_XPFALL = 0xA240;\\n// const MAT_REFBLUR = 0xA053;\\n// const MAT_SHADING = 0xA100;\\n// const MAT_USE_REFBLUR = 0xA250;\\n// const MAT_SELF_ILLUM = 0xA084;\\n\\nvar MAT_TWO_SIDE = 0xa081; // const MAT_DECAL = 0xA082;\\n\\nvar MAT_ADDITIVE = 0xa083;\\nvar MAT_WIRE = 0xa085; // const MAT_FACEMAP = 0xA088;\\n// const MAT_TRANSFALLOFF_IN = 0xA08A;\\n// const MAT_PHONGSOFT = 0xA08C;\\n// const MAT_WIREABS = 0xA08E;\\n\\nvar MAT_WIRE_SIZE = 0xa087;\\nvar MAT_TEXMAP = 0xa200; // const MAT_SXP_TEXT_DATA = 0xA320;\\n// const MAT_TEXMASK = 0xA33E;\\n// const MAT_SXP_TEXTMASK_DATA = 0xA32A;\\n// const MAT_TEX2MAP = 0xA33A;\\n// const MAT_SXP_TEXT2_DATA = 0xA321;\\n// const MAT_TEX2MASK = 0xA340;\\n// const MAT_SXP_TEXT2MASK_DATA = 0xA32C;\\n\\nvar MAT_OPACMAP = 0xa210; // const MAT_SXP_OPAC_DATA = 0xA322;\\n// const MAT_OPACMASK = 0xA342;\\n// const MAT_SXP_OPACMASK_DATA = 0xA32E;\\n\\nvar MAT_BUMPMAP = 0xa230; // const MAT_SXP_BUMP_DATA = 0xA324;\\n// const MAT_BUMPMASK = 0xA344;\\n// const MAT_SXP_BUMPMASK_DATA = 0xA330;\\n\\nvar MAT_SPECMAP = 0xa204; // const MAT_SXP_SPEC_DATA = 0xA325;\\n// const MAT_SPECMASK = 0xA348;\\n// const MAT_SXP_SPECMASK_DATA = 0xA332;\\n// const MAT_SHINMAP = 0xA33C;\\n// const MAT_SXP_SHIN_DATA = 0xA326;\\n// const MAT_SHINMASK = 0xA346;\\n// const MAT_SXP_SHINMASK_DATA = 0xA334;\\n// const MAT_SELFIMAP = 0xA33D;\\n// const MAT_SXP_SELFI_DATA = 0xA328;\\n// const MAT_SELFIMASK = 0xA34A;\\n// const MAT_SXP_SELFIMASK_DATA = 0xA336;\\n// const MAT_REFLMAP = 0xA220;\\n// const MAT_REFLMASK = 0xA34C;\\n// const MAT_SXP_REFLMASK_DATA = 0xA338;\\n// const MAT_ACUBIC = 0xA310;\\n\\nvar MAT_MAPNAME = 0xa300; // const MAT_MAP_TILING = 0xA351;\\n// const MAT_MAP_TEXBLUR = 0xA353;\\n\\nvar MAT_MAP_USCALE = 0xa354;\\nvar MAT_MAP_VSCALE = 0xa356;\\nvar MAT_MAP_UOFFSET = 0xa358;\\nvar MAT_MAP_VOFFSET = 0xa35a; // const MAT_MAP_ANG = 0xA35C;\\n// const MAT_MAP_COL1 = 0xA360;\\n// const MAT_MAP_COL2 = 0xA362;\\n// const MAT_MAP_RCOL = 0xA364;\\n// const MAT_MAP_GCOL = 0xA366;\\n// const MAT_MAP_BCOL = 0xA368;\\n\\nvar NAMED_OBJECT = 0x4000; // const N_DIRECT_LIGHT = 0x4600;\\n// const DL_OFF = 0x4620;\\n// const DL_OUTER_RANGE = 0x465A;\\n// const DL_INNER_RANGE = 0x4659;\\n// const DL_MULTIPLIER = 0x465B;\\n// const DL_EXCLUDE = 0x4654;\\n// const DL_ATTENUATE = 0x4625;\\n// const DL_SPOTLIGHT = 0x4610;\\n// const DL_SPOT_ROLL = 0x4656;\\n// const DL_SHADOWED = 0x4630;\\n// const DL_LOCAL_SHADOW2 = 0x4641;\\n// const DL_SEE_CONE = 0x4650;\\n// const DL_SPOT_RECTANGULAR = 0x4651;\\n// const DL_SPOT_ASPECT = 0x4657;\\n// const DL_SPOT_PROJECTOR = 0x4653;\\n// const DL_SPOT_OVERSHOOT = 0x4652;\\n// const DL_RAY_BIAS = 0x4658;\\n// const DL_RAYSHAD = 0x4627;\\n// const N_CAMERA = 0x4700;\\n// const CAM_SEE_CONE = 0x4710;\\n// const CAM_RANGES = 0x4720;\\n// const OBJ_HIDDEN = 0x4010;\\n// const OBJ_VIS_LOFTER = 0x4011;\\n// const OBJ_DOESNT_CAST = 0x4012;\\n// const OBJ_DONT_RECVSHADOW = 0x4017;\\n// const OBJ_MATTE = 0x4013;\\n// const OBJ_FAST = 0x4014;\\n// const OBJ_PROCEDURAL = 0x4015;\\n// const OBJ_FROZEN = 0x4016;\\n\\nvar N_TRI_OBJECT = 0x4100;\\nvar POINT_ARRAY = 0x4110; // const POINT_FLAG_ARRAY = 0x4111;\\n\\nvar FACE_ARRAY = 0x4120;\\nvar MSH_MAT_GROUP = 0x4130; // const SMOOTH_GROUP = 0x4150;\\n// const MSH_BOXMAP = 0x4190;\\n\\nvar TEX_VERTS = 0x4140;\\nvar MESH_MATRIX = 0x4160; // const MESH_COLOR = 0x4165;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"_getPrototypeOf\",\"o\",\"setPrototypeOf\",\"getPrototypeOf\",\"__proto__\",\"_inherits\",\"subClass\",\"superClass\",\"TypeError\",\"create\",\"value\",\"_setPrototypeOf\",\"p\",\"TDSLoader\",\"_three\",\"_Loader\",\"manager\",\"instance\",\"call\",\"self\",\"ReferenceError\",\"_this\",\"debug\",\"group\",\"position\",\"materials\",\"meshes\",\"load\",\"url\",\"onLoad\",\"onProgress\",\"onError\",\"scope\",\"path\",\"LoaderUtils\",\"extractUrlBase\",\"loader\",\"FileLoader\",\"setPath\",\"setResponseType\",\"setRequestHeader\",\"requestHeader\",\"setWithCredentials\",\"withCredentials\",\"data\",\"parse\",\"e\",\"console\",\"error\",\"itemError\",\"arraybuffer\",\"Group\",\"readFile\",\"add\",\"DataView\",\"chunk\",\"readChunk\",\"id\",\"MLIBMAGIC\",\"CMAGIC\",\"M3DMAGIC\",\"next\",\"nextChunk\",\"M3D_VERSION\",\"version\",\"readDWord\",\"debugMessage\",\"MDATA\",\"resetPosition\",\"readMeshData\",\"toString\",\"MESH_VERSION\",\"MASTER_SCALE\",\"scale\",\"readFloat\",\"set\",\"NAMED_OBJECT\",\"readNamedObject\",\"MAT_ENTRY\",\"readMaterialEntry\",\"name\",\"readString\",\"cur\",\"N_TRI_OBJECT\",\"mesh\",\"readMesh\",\"push\",\"endChunk\",\"material\",\"MeshPhongMaterial\",\"MAT_NAME\",\"MAT_WIRE\",\"wireframe\",\"MAT_WIRE_SIZE\",\"readByte\",\"wireframeLinewidth\",\"MAT_TWO_SIDE\",\"side\",\"DoubleSide\",\"MAT_ADDITIVE\",\"blending\",\"AdditiveBlending\",\"MAT_DIFFUSE\",\"color\",\"readColor\",\"MAT_SPECULAR\",\"specular\",\"MAT_AMBIENT\",\"MAT_SHININESS\",\"shininess\",\"readPercentage\",\"MAT_TRANSPARENCY\",\"transparency\",\"opacity\",\"transparent\",\"MAT_TEXMAP\",\"map\",\"readMap\",\"MAT_BUMPMAP\",\"bumpMap\",\"MAT_OPACMAP\",\"alphaMap\",\"MAT_SPECMAP\",\"specularMap\",\"geometry\",\"BufferGeometry\",\"Mesh\",\"POINT_ARRAY\",\"points\",\"readWord\",\"vertices\",\"setAttribute\",\"Float32BufferAttribute\",\"FACE_ARRAY\",\"readFaceArray\",\"TEX_VERTS\",\"texels\",\"uvs\",\"_i\",\"MESH_MATRIX\",\"values\",\"_i2\",\"matrix\",\"Matrix4\",\"elements\",\"transpose\",\"inverse\",\"copy\",\"invert\",\"applyMatrix4\",\"decompose\",\"quaternion\",\"computeVertexNormals\",\"faces\",\"index\",\"setIndex\",\"start\",\"materialIndex\",\"end\",\"subchunk\",\"MSH_MAT_GROUP\",\"readMaterialGroup\",\"count\",\"addGroup\",\"Array\",\"isArray\",\"undefined\",\"texture\",\"TextureLoader\",\"resourcePath\",\"setCrossOrigin\",\"crossOrigin\",\"MAT_MAPNAME\",\"MAT_MAP_UOFFSET\",\"offset\",\"x\",\"MAT_MAP_VOFFSET\",\"y\",\"MAT_MAP_USCALE\",\"repeat\",\"MAT_MAP_VSCALE\",\"numFaces\",\"Color\",\"COLOR_24\",\"LIN_COLOR_24\",\"r\",\"g\",\"b\",\"setRGB\",\"COLOR_F\",\"LIN_COLOR_F\",\"_r\",\"_g\",\"_b\",\"size\",\"v\",\"getUint8\",\"getFloat32\",\"byteLength\",\"readInt\",\"getInt32\",\"readShort\",\"getInt16\",\"getUint32\",\"getUint16\",\"maxLength\",\"s\",\"c\",\"String\",\"fromCharCode\",\"INT_PERCENTAGE\",\"FLOAT_PERCENTAGE\",\"message\",\"log\",\"Loader\"]\n}\n"]