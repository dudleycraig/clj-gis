["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/HorizontalBlurShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$HorizontalBlurShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.HorizontalBlurShader=void 0;exports.HorizontalBlurShader={uniforms:{tDiffuse:{value:null},h:{value:1/512}},vertexShader:\"\\n      varying vec2 vUv;\\n\\n      void main() {\\n\\n        vUv \\x3d uv;\\n        gl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n      }\\n  \",fragmentShader:\"\\n    uniform sampler2D tDiffuse;\\n    uniform float h;\\n\\n    varying vec2 vUv;\\n\\n    void main() {\\n\\n    \\tvec4 sum \\x3d vec4( 0.0 );\\n\\n    \\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\\n    \\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\\n    \\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\\n    \\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\\n    \\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\\n    \\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\\n    \\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\\n    \\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\\n    \\tsum +\\x3d texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\\n\\n    \\tgl_FragColor \\x3d sum;\\n\\n    }\\n  \"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$HorizontalBlurShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HorizontalBlurShader = void 0;\n\n/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nvar HorizontalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    h: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n      varying vec2 vUv;\\n\\n      void main() {\\n\\n        vUv = uv;\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n      }\\n  \",\n  fragmentShader:\n  /* glsl */\n  \"\\n    uniform sampler2D tDiffuse;\\n    uniform float h;\\n\\n    varying vec2 vUv;\\n\\n    void main() {\\n\\n    \\tvec4 sum = vec4( 0.0 );\\n\\n    \\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\\n    \\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\\n    \\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\\n    \\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\\n    \\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\\n    \\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\\n    \\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\\n    \\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\\n    \\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\\n\\n    \\tgl_FragColor = sum;\\n\\n    }\\n  \"\n};\nexports.HorizontalBlurShader = HorizontalBlurShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","__esModule","tDiffuse","vertexShader","value","HorizontalBlurShader","uniforms","h"]],"~:compiled-at",1630917515591,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$HorizontalBlurShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,oBAAR,CAA+B,IAAK,EA2BpCJ,QAAQI,CAAAA,oBAAR,CAhB2BA,CACzBC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,EAAG,CACDJ,MAAO,CAAPA,CAAa,GADZ,CAJK,CADeC,CASzBI,aAEA,+KAXyBJ,CAYzBK,eAEA,y4BAdyBL,CAjB+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/HorizontalBlurShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$HorizontalBlurShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.HorizontalBlurShader = void 0;\\n\\n/**\\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\\n *\\n * - 9 samples per pass\\n * - standard deviation 2.7\\n * - \\\"h\\\" and \\\"v\\\" parameters should be set to \\\"1 / width\\\" and \\\"1 / height\\\"\\n */\\nvar HorizontalBlurShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    h: {\\n      value: 1.0 / 512.0\\n    }\\n  },\\n  vertexShader:\\n  /* glsl */\\n  \\\"\\\\n      varying vec2 vUv;\\\\n\\\\n      void main() {\\\\n\\\\n        vUv = uv;\\\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\\\n\\\\n      }\\\\n  \\\",\\n  fragmentShader:\\n  /* glsl */\\n  \\\"\\\\n    uniform sampler2D tDiffuse;\\\\n    uniform float h;\\\\n\\\\n    varying vec2 vUv;\\\\n\\\\n    void main() {\\\\n\\\\n    \\\\tvec4 sum = vec4( 0.0 );\\\\n\\\\n    \\\\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\\\\n    \\\\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\\\\n    \\\\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\\\\n    \\\\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\\\\n    \\\\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\\\\n    \\\\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\\\\n    \\\\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\\\\n    \\\\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\\\\n    \\\\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\\\\n\\\\n    \\\\tgl_FragColor = sum;\\\\n\\\\n    }\\\\n  \\\"\\n};\\nexports.HorizontalBlurShader = HorizontalBlurShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"HorizontalBlurShader\",\"uniforms\",\"tDiffuse\",\"h\",\"vertexShader\",\"fragmentShader\"]\n}\n"]