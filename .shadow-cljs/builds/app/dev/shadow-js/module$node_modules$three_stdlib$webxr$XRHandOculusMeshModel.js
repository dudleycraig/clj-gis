["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/webxr/XRHandOculusMeshModel.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$webxr$XRHandOculusMeshModel=function(global,require,module,exports){function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,\nprotoProps);staticProps&&_defineProperties(Constructor,staticProps);return Constructor}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.XRHandOculusMeshModel=void 0;var _FBXLoader=require(\"module$node_modules$three_stdlib$loaders$FBXLoader\");global=function(){function XRHandOculusMeshModel(handModel,controller,path,handedness,options){var _this=this;if(!(this instanceof XRHandOculusMeshModel))throw new TypeError(\"Cannot call a class as a function\");this.controller=controller;this.handModel=\nhandModel;this.bones=[];handModel=new _FBXLoader.FBXLoader;options=options&&\"lowpoly\"===options.model?\"_low\":\"\";handModel.setPath(path);handModel.load(\"OculusHand_\".concat(\"right\"===handedness?\"R\":\"L\").concat(options,\".fbx\"),function(object){_this.handModel.add(object);object.scale.setScalar(.01);var mesh=object.getObjectByProperty(\"type\",\"SkinnedMesh\");mesh.frustumCulled=!1;mesh.castShadow=!0;mesh.receiveShadow=!0;var joints=\"wrist thumb-metacarpal thumb-phalanx-proximal thumb-phalanx-distal thumb-tip index-finger-metacarpal index-finger-phalanx-proximal index-finger-phalanx-intermediate index-finger-phalanx-distal index-finger-tip middle-finger-metacarpal middle-finger-phalanx-proximal middle-finger-phalanx-intermediate middle-finger-phalanx-distal middle-finger-tip ring-finger-metacarpal ring-finger-phalanx-proximal ring-finger-phalanx-intermediate ring-finger-phalanx-distal ring-finger-tip pinky-finger-metacarpal pinky-finger-phalanx-proximal pinky-finger-phalanx-intermediate pinky-finger-phalanx-distal pinky-finger-tip\".split(\" \"),\ni=0;[\"b_%_wrist\",\"b_%_thumb1\",\"b_%_thumb2\",\"b_%_thumb3\",\"b_%_thumb_null\",null,\"b_%_index1\",\"b_%_index2\",\"b_%_index3\",\"b_%_index_null\",null,\"b_%_middle1\",\"b_%_middle2\",\"b_%_middle3\",\"b_%_middlenull\",null,\"b_%_ring1\",\"b_%_ring2\",\"b_%_ring3\",\"b_%_ring_inull\",\"b_%_pinky0\",\"b_%_pinky1\",\"b_%_pinky2\",\"b_%_pinky3\",\"b_%_pinkynull\"].forEach(function(boneName){boneName?(boneName=object.getObjectByName(boneName.replace(/%/g,\"right\"===handedness?\"r\":\"l\")),void 0!==boneName&&(boneName.jointName=joints[i]),_this.bones.push(boneName)):\n_this.bones.push(null);i++})})}_createClass(XRHandOculusMeshModel,[{key:\"updateMesh\",value:function(){for(var XRJoints=this.controller.joints,i=0;i<this.bones.length;i++){var bone=this.bones[i];if(bone){var XRJoint=XRJoints[bone.jointName];if(XRJoint.visible){var position=XRJoint.position;bone&&(bone.position.copy(position.clone().multiplyScalar(100)),bone.quaternion.copy(XRJoint.quaternion))}}}}}]);return XRHandOculusMeshModel}();exports.XRHandOculusMeshModel=global}","~:source","shadow$provide[\"module$node_modules$three_stdlib$webxr$XRHandOculusMeshModel\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XRHandOculusMeshModel = void 0;\n\nvar _FBXLoader = require(\"../loaders/FBXLoader.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar XRHandOculusMeshModel =\n/*#__PURE__*/\nfunction () {\n  function XRHandOculusMeshModel(handModel, controller, path, handedness, options) {\n    var _this = this;\n\n    _classCallCheck(this, XRHandOculusMeshModel);\n\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    var loader = new _FBXLoader.FBXLoader();\n    var low = options && options.model === 'lowpoly' ? '_low' : '';\n    loader.setPath(path);\n    loader.load(\"OculusHand_\".concat(handedness === 'right' ? 'R' : 'L').concat(low, \".fbx\"), function (object) {\n      _this.handModel.add(object); // Hack because of the scale of the skinnedmesh\n\n\n      object.scale.setScalar(0.01);\n      var mesh = object.getObjectByProperty('type', 'SkinnedMesh');\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      var bonesMapping = ['b_%_wrist', // XRHand.WRIST,\n      'b_%_thumb1', // XRHand.THUMB_METACARPAL,\n      'b_%_thumb2', // XRHand.THUMB_PHALANX_PROXIMAL,\n      'b_%_thumb3', // XRHand.THUMB_PHALANX_DISTAL,\n      'b_%_thumb_null', // XRHand.THUMB_PHALANX_TIP,\n      null, //'b_%_index1', // XRHand.INDEX_METACARPAL,\n      'b_%_index1', // XRHand.INDEX_PHALANX_PROXIMAL,\n      'b_%_index2', // XRHand.INDEX_PHALANX_INTERMEDIATE,\n      'b_%_index3', // XRHand.INDEX_PHALANX_DISTAL,\n      'b_%_index_null', // XRHand.INDEX_PHALANX_TIP,\n      null, //'b_%_middle1', // XRHand.MIDDLE_METACARPAL,\n      'b_%_middle1', // XRHand.MIDDLE_PHALANX_PROXIMAL,\n      'b_%_middle2', // XRHand.MIDDLE_PHALANX_INTERMEDIATE,\n      'b_%_middle3', // XRHand.MIDDLE_PHALANX_DISTAL,\n      'b_%_middlenull', // XRHand.MIDDLE_PHALANX_TIP,\n      null, //'b_%_ring1', // XRHand.RING_METACARPAL,\n      'b_%_ring1', // XRHand.RING_PHALANX_PROXIMAL,\n      'b_%_ring2', // XRHand.RING_PHALANX_INTERMEDIATE,\n      'b_%_ring3', // XRHand.RING_PHALANX_DISTAL,\n      'b_%_ring_inull', // XRHand.RING_PHALANX_TIP,\n      'b_%_pinky0', // XRHand.LITTLE_METACARPAL,\n      'b_%_pinky1', // XRHand.LITTLE_PHALANX_PROXIMAL,\n      'b_%_pinky2', // XRHand.LITTLE_PHALANX_INTERMEDIATE,\n      'b_%_pinky3', // XRHand.LITTLE_PHALANX_DISTAL,\n      'b_%_pinkynull' // XRHand.LITTLE_PHALANX_TIP\n      ];\n      var joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n      var i = 0;\n      bonesMapping.forEach(function (boneName) {\n        if (boneName) {\n          var bone = object.getObjectByName(boneName.replace(/%/g, handedness === 'right' ? 'r' : 'l'));\n\n          if (bone !== undefined) {\n            bone.jointName = joints[i];\n          }\n\n          _this.bones.push(bone);\n        } else {\n          _this.bones.push(null);\n        }\n\n        i++;\n      });\n    });\n  }\n\n  _createClass(XRHandOculusMeshModel, [{\n    key: \"updateMesh\",\n    value: function updateMesh() {\n      // XR Joints\n      var XRJoints = this.controller.joints;\n\n      for (var i = 0; i < this.bones.length; i++) {\n        var bone = this.bones[i];\n\n        if (bone) {\n          var XRJoint = XRJoints[bone.jointName];\n\n          if (XRJoint.visible) {\n            var position = XRJoint.position;\n\n            if (bone) {\n              bone.position.copy(position.clone().multiplyScalar(100));\n              bone.quaternion.copy(XRJoint.quaternion); // bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return XRHandOculusMeshModel;\n}();\n\nexports.XRHandOculusMeshModel = XRHandOculusMeshModel;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three_stdlib$loaders$FBXLoader","~$shadow.js"]],"~:properties",["^5",["frustumCulled","receiveShadow","jointName","castShadow","key","__esModule","handModel","configurable","value","XRHandOculusMeshModel","enumerable","writable","bones","controller"]],"~:compiled-at",1630917515558,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$webxr$XRHandOculusMeshModel.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/webxr/XRHandOculusMeshModel.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$webxr$XRHandOculusMeshModel\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.XRHandOculusMeshModel = void 0;\\n\\nvar _FBXLoader = require(\\\"../loaders/FBXLoader.js\\\");\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nvar XRHandOculusMeshModel =\\n/*#__PURE__*/\\nfunction () {\\n  function XRHandOculusMeshModel(handModel, controller, path, handedness, options) {\\n    var _this = this;\\n\\n    _classCallCheck(this, XRHandOculusMeshModel);\\n\\n    this.controller = controller;\\n    this.handModel = handModel;\\n    this.bones = [];\\n    var loader = new _FBXLoader.FBXLoader();\\n    var low = options && options.model === 'lowpoly' ? '_low' : '';\\n    loader.setPath(path);\\n    loader.load(\\\"OculusHand_\\\".concat(handedness === 'right' ? 'R' : 'L').concat(low, \\\".fbx\\\"), function (object) {\\n      _this.handModel.add(object); // Hack because of the scale of the skinnedmesh\\n\\n\\n      object.scale.setScalar(0.01);\\n      var mesh = object.getObjectByProperty('type', 'SkinnedMesh');\\n      mesh.frustumCulled = false;\\n      mesh.castShadow = true;\\n      mesh.receiveShadow = true;\\n      var bonesMapping = ['b_%_wrist', // XRHand.WRIST,\\n      'b_%_thumb1', // XRHand.THUMB_METACARPAL,\\n      'b_%_thumb2', // XRHand.THUMB_PHALANX_PROXIMAL,\\n      'b_%_thumb3', // XRHand.THUMB_PHALANX_DISTAL,\\n      'b_%_thumb_null', // XRHand.THUMB_PHALANX_TIP,\\n      null, //'b_%_index1', // XRHand.INDEX_METACARPAL,\\n      'b_%_index1', // XRHand.INDEX_PHALANX_PROXIMAL,\\n      'b_%_index2', // XRHand.INDEX_PHALANX_INTERMEDIATE,\\n      'b_%_index3', // XRHand.INDEX_PHALANX_DISTAL,\\n      'b_%_index_null', // XRHand.INDEX_PHALANX_TIP,\\n      null, //'b_%_middle1', // XRHand.MIDDLE_METACARPAL,\\n      'b_%_middle1', // XRHand.MIDDLE_PHALANX_PROXIMAL,\\n      'b_%_middle2', // XRHand.MIDDLE_PHALANX_INTERMEDIATE,\\n      'b_%_middle3', // XRHand.MIDDLE_PHALANX_DISTAL,\\n      'b_%_middlenull', // XRHand.MIDDLE_PHALANX_TIP,\\n      null, //'b_%_ring1', // XRHand.RING_METACARPAL,\\n      'b_%_ring1', // XRHand.RING_PHALANX_PROXIMAL,\\n      'b_%_ring2', // XRHand.RING_PHALANX_INTERMEDIATE,\\n      'b_%_ring3', // XRHand.RING_PHALANX_DISTAL,\\n      'b_%_ring_inull', // XRHand.RING_PHALANX_TIP,\\n      'b_%_pinky0', // XRHand.LITTLE_METACARPAL,\\n      'b_%_pinky1', // XRHand.LITTLE_PHALANX_PROXIMAL,\\n      'b_%_pinky2', // XRHand.LITTLE_PHALANX_INTERMEDIATE,\\n      'b_%_pinky3', // XRHand.LITTLE_PHALANX_DISTAL,\\n      'b_%_pinkynull' // XRHand.LITTLE_PHALANX_TIP\\n      ];\\n      var joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\\n      var i = 0;\\n      bonesMapping.forEach(function (boneName) {\\n        if (boneName) {\\n          var bone = object.getObjectByName(boneName.replace(/%/g, handedness === 'right' ? 'r' : 'l'));\\n\\n          if (bone !== undefined) {\\n            bone.jointName = joints[i];\\n          }\\n\\n          _this.bones.push(bone);\\n        } else {\\n          _this.bones.push(null);\\n        }\\n\\n        i++;\\n      });\\n    });\\n  }\\n\\n  _createClass(XRHandOculusMeshModel, [{\\n    key: \\\"updateMesh\\\",\\n    value: function updateMesh() {\\n      // XR Joints\\n      var XRJoints = this.controller.joints;\\n\\n      for (var i = 0; i < this.bones.length; i++) {\\n        var bone = this.bones[i];\\n\\n        if (bone) {\\n          var XRJoint = XRJoints[bone.jointName];\\n\\n          if (XRJoint.visible) {\\n            var position = XRJoint.position;\\n\\n            if (bone) {\\n              bone.position.copy(position.clone().multiplyScalar(100));\\n              bone.quaternion.copy(XRJoint.quaternion); // bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }]);\\n\\n  return XRHandOculusMeshModel;\\n}();\\n\\nexports.XRHandOculusMeshModel = XRHandOculusMeshModel;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"prototype\",\"value\",\"XRHandOculusMeshModel\",\"_FBXLoader\",\"handModel\",\"controller\",\"path\",\"handedness\",\"options\",\"_this\",\"instance\",\"TypeError\",\"bones\",\"loader\",\"FBXLoader\",\"low\",\"model\",\"setPath\",\"load\",\"concat\",\"object\",\"add\",\"scale\",\"setScalar\",\"mesh\",\"getObjectByProperty\",\"frustumCulled\",\"castShadow\",\"receiveShadow\",\"joints\",\"bonesMapping\",\"forEach\",\"boneName\",\"bone\",\"getObjectByName\",\"replace\",\"undefined\",\"jointName\",\"push\",\"updateMesh\",\"XRJoints\",\"XRJoint\",\"visible\",\"position\",\"copy\",\"clone\",\"multiplyScalar\",\"quaternion\"]\n}\n"]