["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-mesh-bvh/src/Utils/SeparatingAxisTriangle.js"],"~:js","shadow$provide.module$node_modules$three_mesh_bvh$src$Utils$SeparatingAxisTriangle=function(global,require,module,exports){function _typeof(obj$jscomp$0){_typeof=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&\"function\"===typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj};return _typeof(obj$jscomp$0)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];\ndescriptor.enumerable=descriptor.enumerable||!1;descriptor.configurable=!0;\"value\"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){protoProps&&_defineProperties(Constructor.prototype,protoProps);staticProps&&_defineProperties(Constructor,staticProps);return Constructor}function _possibleConstructorReturn(self,call){if(call&&(\"object\"===_typeof(call)||\"function\"===typeof call))return call;if(void 0===\nself)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return self}function _getPrototypeOf(o$jscomp$0){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)};return _getPrototypeOf(o$jscomp$0)}function _inherits(subClass,superClass){if(\"function\"!==typeof superClass&&null!==superClass)throw new TypeError(\"Super expression must either be null or a function\");subClass.prototype=Object.create(superClass&&\nsuperClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}});superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o$jscomp$0,p$jscomp$0){_setPrototypeOf=Object.setPrototypeOf||function(o,p){o.__proto__=p;return o};return _setPrototypeOf(o$jscomp$0,p$jscomp$0)}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.SeparatingAxisTriangle=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_SeparatingAxisBounds=require(\"module$node_modules$three_mesh_bvh$src$Utils$SeparatingAxisBounds\"),\n_MathUtilities=require(\"module$node_modules$three_mesh_bvh$src$Utils$MathUtilities\"),SeparatingAxisTriangle=function(_Triangle){function SeparatingAxisTriangle(){var _getPrototypeOf2;if(!(this instanceof SeparatingAxisTriangle))throw new TypeError(\"Cannot call a class as a function\");var _this=arguments.length;for(var args=Array(_this),_key=0;_key<_this;_key++)args[_key]=arguments[_key];_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(SeparatingAxisTriangle)).call.apply(_getPrototypeOf2,\n[this].concat(args)));_this.isSeparatingAxisTriangle=!0;_this.satAxes=Array(4).fill().map(function(){return new _three.Vector3});_this.satBounds=Array(4).fill().map(function(){return new _SeparatingAxisBounds.SeparatingAxisBounds});_this.points=[_this.a,_this.b,_this.c];_this.sphere=new _three.Sphere;_this.needsUpdate=!1;return _this}_inherits(SeparatingAxisTriangle,_Triangle);_createClass(SeparatingAxisTriangle,[{key:\"intersectsSphere\",value:function(sphere){return(0,_MathUtilities.sphereIntersectTriangle)(sphere,\nthis)}},{key:\"update\",value:function(){var a=this.a,b=this.b,c=this.c,points=this.points,satAxes=this.satAxes,satBounds=this.satBounds,axis0=satAxes[0],sab0=satBounds[0];this.getNormal(axis0);sab0.setFromPoints(axis0,points);axis0=satAxes[1];sab0=satBounds[1];axis0.subVectors(a,b);sab0.setFromPoints(axis0,points);axis0=satAxes[2];sab0=satBounds[2];axis0.subVectors(b,c);sab0.setFromPoints(axis0,points);b=satAxes[3];satBounds=satBounds[3];b.subVectors(c,a);satBounds.setFromPoints(b,points);this.sphere.setFromPoints(this.points);\nthis.needsUpdate=!1}}]);return SeparatingAxisTriangle}(_three.Triangle);exports.SeparatingAxisTriangle=SeparatingAxisTriangle;SeparatingAxisTriangle.prototype.closestPointToSegment=function(){var point1=new _three.Vector3,point2=new _three.Vector3,edge=new _three.Line3;return function(segment){for(var target1=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,target2=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,start=segment.start,end=segment.end,points=this.points,distSq,\nclosestDistanceSq=Infinity,i=0;3>i;i++)distSq=(i+1)%3,edge.start.copy(points[i]),edge.end.copy(points[distSq]),(0,_MathUtilities.closestPointsSegmentToSegment)(edge,segment,point1,point2),distSq=point1.distanceToSquared(point2),distSq<closestDistanceSq&&(closestDistanceSq=distSq,target1&&target1.copy(point1),target2&&target2.copy(point2));this.closestPointToPoint(start,point1);distSq=start.distanceToSquared(point1);distSq<closestDistanceSq&&(closestDistanceSq=distSq,target1&&target1.copy(point1),\ntarget2&&target2.copy(start));this.closestPointToPoint(end,point1);distSq=end.distanceToSquared(point1);distSq<closestDistanceSq&&(closestDistanceSq=distSq,target1&&target1.copy(point1),target2&&target2.copy(end));return Math.sqrt(closestDistanceSq)}}();SeparatingAxisTriangle.prototype.intersectsTriangle=function(){var saTri2=new SeparatingAxisTriangle,arr1=Array(3),arr2=Array(3),cachedSatBounds=new _SeparatingAxisBounds.SeparatingAxisBounds,cachedSatBounds2=new _SeparatingAxisBounds.SeparatingAxisBounds,\ncachedAxis=new _three.Vector3;return function(other){this.needsUpdate&&this.update();other.isSeparatingAxisTriangle?other.needsUpdate&&other.update():(saTri2.copy(other),saTri2.update(),other=saTri2);var satBounds1=this.satBounds,satAxes1=this.satAxes;arr2[0]=other.a;arr2[1]=other.b;arr2[2]=other.c;for(var i=0;4>i;i++){var sb=satBounds1[i];cachedSatBounds.setFromPoints(satAxes1[i],arr2);if(sb.isSeparated(cachedSatBounds))return!1}satBounds1=other.satBounds;other=other.satAxes;arr1[0]=this.a;arr1[1]=\nthis.b;arr1[2]=this.c;for(i=0;4>i;i++)if(sb=satBounds1[i],cachedSatBounds.setFromPoints(other[i],arr1),sb.isSeparated(cachedSatBounds))return!1;for(satBounds1=0;4>satBounds1;satBounds1++)for(i=satAxes1[satBounds1],sb=0;4>sb;sb++)if(cachedAxis.crossVectors(i,other[sb]),cachedSatBounds.setFromPoints(cachedAxis,arr1),cachedSatBounds2.setFromPoints(cachedAxis,arr2),cachedSatBounds.isSeparated(cachedSatBounds2))return!1;return!0}}();SeparatingAxisTriangle.prototype.distanceToPoint=function(){var target=\nnew _three.Vector3;return function(point){this.closestPointToPoint(point,target);return point.distanceTo(target)}}();SeparatingAxisTriangle.prototype.distanceToTriangle=function(){var point=new _three.Vector3,point2=new _three.Vector3,cornerFields=[\"a\",\"b\",\"c\"],line1=new _three.Line3,line2=new _three.Line3;return function(other){var target1=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,target2=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(this.intersectsTriangle(other)){if(target1||\ntarget2)this.getMidpoint(point),other.closestPointToPoint(point,point2),this.closestPointToPoint(point2,point),target1&&target1.copy(point),target2&&target2.copy(point2);return 0}for(var closestDistanceSq=Infinity,i=0;3>i;i++){var field=cornerFields[i],otherVec=other[field];this.closestPointToPoint(otherVec,point);var dist=otherVec.distanceToSquared(point);dist<closestDistanceSq&&(closestDistanceSq=dist,target1&&target1.copy(point),target2&&target2.copy(otherVec));field=this[field];other.closestPointToPoint(field,\npoint);dist=field.distanceToSquared(point);dist<closestDistanceSq&&(closestDistanceSq=dist,target1&&target1.copy(field),target2&&target2.copy(point))}for(i=0;3>i;i++)for(line1.set(this[cornerFields[i]],this[cornerFields[(i+1)%3]]),dist=0;3>dist;dist++)line2.set(other[cornerFields[dist]],other[cornerFields[(dist+1)%3]]),(0,_MathUtilities.closestPointsSegmentToSegment)(line1,line2,point,point2),field=point.distanceToSquared(point2),field<closestDistanceSq&&(closestDistanceSq=field,target1&&target1.copy(point),\ntarget2&&target2.copy(point2));return Math.sqrt(closestDistanceSq)}}()}","~:source","shadow$provide[\"module$node_modules$three_mesh_bvh$src$Utils$SeparatingAxisTriangle\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SeparatingAxisTriangle = void 0;\n\nvar _three = require(\"three\");\n\nvar _SeparatingAxisBounds = require(\"./SeparatingAxisBounds.js\");\n\nvar _MathUtilities = require(\"./MathUtilities.js\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nvar SeparatingAxisTriangle =\n/*#__PURE__*/\nfunction (_Triangle) {\n  _inherits(SeparatingAxisTriangle, _Triangle);\n\n  function SeparatingAxisTriangle() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SeparatingAxisTriangle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SeparatingAxisTriangle)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.isSeparatingAxisTriangle = true;\n    _this.satAxes = new Array(4).fill().map(function () {\n      return new _three.Vector3();\n    });\n    _this.satBounds = new Array(4).fill().map(function () {\n      return new _SeparatingAxisBounds.SeparatingAxisBounds();\n    });\n    _this.points = [_this.a, _this.b, _this.c];\n    _this.sphere = new _three.Sphere();\n    _this.needsUpdate = false;\n    return _this;\n  }\n\n  _createClass(SeparatingAxisTriangle, [{\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere) {\n      return (0, _MathUtilities.sphereIntersectTriangle)(sphere, this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var a = this.a;\n      var b = this.b;\n      var c = this.c;\n      var points = this.points;\n      var satAxes = this.satAxes;\n      var satBounds = this.satBounds;\n      var axis0 = satAxes[0];\n      var sab0 = satBounds[0];\n      this.getNormal(axis0);\n      sab0.setFromPoints(axis0, points);\n      var axis1 = satAxes[1];\n      var sab1 = satBounds[1];\n      axis1.subVectors(a, b);\n      sab1.setFromPoints(axis1, points);\n      var axis2 = satAxes[2];\n      var sab2 = satBounds[2];\n      axis2.subVectors(b, c);\n      sab2.setFromPoints(axis2, points);\n      var axis3 = satAxes[3];\n      var sab3 = satBounds[3];\n      axis3.subVectors(c, a);\n      sab3.setFromPoints(axis3, points);\n      this.sphere.setFromPoints(this.points);\n      this.needsUpdate = false;\n    }\n  }]);\n\n  return SeparatingAxisTriangle;\n}(_three.Triangle);\n\nexports.SeparatingAxisTriangle = SeparatingAxisTriangle;\n\nSeparatingAxisTriangle.prototype.closestPointToSegment = function () {\n  var point1 = new _three.Vector3();\n  var point2 = new _three.Vector3();\n  var edge = new _three.Line3();\n  return function distanceToSegment(segment) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var start = segment.start,\n        end = segment.end;\n    var points = this.points;\n    var distSq;\n    var closestDistanceSq = Infinity; // check the triangle edges\n\n    for (var i = 0; i < 3; i++) {\n      var nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      (0, _MathUtilities.closestPointsSegmentToSegment)(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n    } // check end points\n\n\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(start);\n    }\n\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(end);\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.intersectsTriangle = function () {\n  var saTri2 = new SeparatingAxisTriangle();\n  var arr1 = new Array(3);\n  var arr2 = new Array(3);\n  var cachedSatBounds = new _SeparatingAxisBounds.SeparatingAxisBounds();\n  var cachedSatBounds2 = new _SeparatingAxisBounds.SeparatingAxisBounds();\n  var cachedAxis = new _three.Vector3();\n  return function intersectsTriangle(other) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (!other.isSeparatingAxisTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    } else if (other.needsUpdate) {\n      other.update();\n    }\n\n    var satBounds1 = this.satBounds;\n    var satAxes1 = this.satAxes;\n    arr2[0] = other.a;\n    arr2[1] = other.b;\n    arr2[2] = other.c;\n\n    for (var i = 0; i < 4; i++) {\n      var sb = satBounds1[i];\n      var sa = satAxes1[i];\n      cachedSatBounds.setFromPoints(sa, arr2);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    var satBounds2 = other.satBounds;\n    var satAxes2 = other.satAxes;\n    arr1[0] = this.a;\n    arr1[1] = this.b;\n    arr1[2] = this.c;\n\n    for (var _i = 0; _i < 4; _i++) {\n      var _sb = satBounds2[_i];\n      var _sa = satAxes2[_i];\n      cachedSatBounds.setFromPoints(_sa, arr1);\n      if (_sb.isSeparated(cachedSatBounds)) return false;\n    } // check crossed axes\n\n\n    for (var _i2 = 0; _i2 < 4; _i2++) {\n      var sa1 = satAxes1[_i2];\n\n      for (var i2 = 0; i2 < 4; i2++) {\n        var sa2 = satAxes2[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, arr1);\n        cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n\n    return true;\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToPoint = function () {\n  var target = new _three.Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\n\nSeparatingAxisTriangle.prototype.distanceToTriangle = function () {\n  var point = new _three.Vector3();\n  var point2 = new _three.Vector3();\n  var cornerFields = ['a', 'b', 'c'];\n  var line1 = new _three.Line3();\n  var line2 = new _three.Line3();\n  return function distanceToTriangle(other) {\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (this.intersectsTriangle(other)) {\n      // TODO: This will not result in a point that lies on\n      // the intersection line of the triangles\n      if (target1 || target2) {\n        this.getMidpoint(point);\n        other.closestPointToPoint(point, point2);\n        this.closestPointToPoint(point2, point);\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(point2);\n      }\n\n      return 0;\n    }\n\n    var closestDistanceSq = Infinity; // check all point distances\n\n    for (var i = 0; i < 3; i++) {\n      var dist = void 0;\n      var field = cornerFields[i];\n      var otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(otherVec);\n      }\n\n      var thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(thisVec);\n        if (target2) target2.copy(point);\n      }\n    }\n\n    for (var _i3 = 0; _i3 < 3; _i3++) {\n      var f11 = cornerFields[_i3];\n      var f12 = cornerFields[(_i3 + 1) % 3];\n      line1.set(this[f11], this[f12]);\n\n      for (var i2 = 0; i2 < 3; i2++) {\n        var f21 = cornerFields[i2];\n        var f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        (0, _MathUtilities.closestPointsSegmentToSegment)(line1, line2, point, point2);\n\n        var _dist = point.distanceToSquared(point2);\n\n        if (_dist < closestDistanceSq) {\n          closestDistanceSq = _dist;\n          if (target1) target1.copy(point);\n          if (target2) target2.copy(point2);\n        }\n      }\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$module$node_modules$three_mesh_bvh$src$Utils$MathUtilities","~$module$node_modules$three_mesh_bvh$src$Utils$SeparatingAxisBounds","~$shadow.js"]],"~:properties",["^5",["closestPointToSegment","intersectsTriangle","needsUpdate","prototype","satBounds","SeparatingAxisTriangle","distanceToPoint","points","key","__esModule","satAxes","isSeparatingAxisTriangle","configurable","distanceToTriangle","value","enumerable","writable","__proto__","sphere","constructor"]],"~:compiled-at",1630917516177,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_mesh_bvh$src$Utils$SeparatingAxisTriangle.js\",\n\"lineCount\":16,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-mesh-bvh/src/Utils/SeparatingAxisTriangle.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_mesh_bvh$src$Utils$SeparatingAxisTriangle\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.SeparatingAxisTriangle = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _SeparatingAxisBounds = require(\\\"./SeparatingAxisBounds.js\\\");\\n\\nvar _MathUtilities = require(\\\"./MathUtilities.js\\\");\\n\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nvar SeparatingAxisTriangle =\\n/*#__PURE__*/\\nfunction (_Triangle) {\\n  _inherits(SeparatingAxisTriangle, _Triangle);\\n\\n  function SeparatingAxisTriangle() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, SeparatingAxisTriangle);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SeparatingAxisTriangle)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.isSeparatingAxisTriangle = true;\\n    _this.satAxes = new Array(4).fill().map(function () {\\n      return new _three.Vector3();\\n    });\\n    _this.satBounds = new Array(4).fill().map(function () {\\n      return new _SeparatingAxisBounds.SeparatingAxisBounds();\\n    });\\n    _this.points = [_this.a, _this.b, _this.c];\\n    _this.sphere = new _three.Sphere();\\n    _this.needsUpdate = false;\\n    return _this;\\n  }\\n\\n  _createClass(SeparatingAxisTriangle, [{\\n    key: \\\"intersectsSphere\\\",\\n    value: function intersectsSphere(sphere) {\\n      return (0, _MathUtilities.sphereIntersectTriangle)(sphere, this);\\n    }\\n  }, {\\n    key: \\\"update\\\",\\n    value: function update() {\\n      var a = this.a;\\n      var b = this.b;\\n      var c = this.c;\\n      var points = this.points;\\n      var satAxes = this.satAxes;\\n      var satBounds = this.satBounds;\\n      var axis0 = satAxes[0];\\n      var sab0 = satBounds[0];\\n      this.getNormal(axis0);\\n      sab0.setFromPoints(axis0, points);\\n      var axis1 = satAxes[1];\\n      var sab1 = satBounds[1];\\n      axis1.subVectors(a, b);\\n      sab1.setFromPoints(axis1, points);\\n      var axis2 = satAxes[2];\\n      var sab2 = satBounds[2];\\n      axis2.subVectors(b, c);\\n      sab2.setFromPoints(axis2, points);\\n      var axis3 = satAxes[3];\\n      var sab3 = satBounds[3];\\n      axis3.subVectors(c, a);\\n      sab3.setFromPoints(axis3, points);\\n      this.sphere.setFromPoints(this.points);\\n      this.needsUpdate = false;\\n    }\\n  }]);\\n\\n  return SeparatingAxisTriangle;\\n}(_three.Triangle);\\n\\nexports.SeparatingAxisTriangle = SeparatingAxisTriangle;\\n\\nSeparatingAxisTriangle.prototype.closestPointToSegment = function () {\\n  var point1 = new _three.Vector3();\\n  var point2 = new _three.Vector3();\\n  var edge = new _three.Line3();\\n  return function distanceToSegment(segment) {\\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\\n    var start = segment.start,\\n        end = segment.end;\\n    var points = this.points;\\n    var distSq;\\n    var closestDistanceSq = Infinity; // check the triangle edges\\n\\n    for (var i = 0; i < 3; i++) {\\n      var nexti = (i + 1) % 3;\\n      edge.start.copy(points[i]);\\n      edge.end.copy(points[nexti]);\\n      (0, _MathUtilities.closestPointsSegmentToSegment)(edge, segment, point1, point2);\\n      distSq = point1.distanceToSquared(point2);\\n\\n      if (distSq < closestDistanceSq) {\\n        closestDistanceSq = distSq;\\n        if (target1) target1.copy(point1);\\n        if (target2) target2.copy(point2);\\n      }\\n    } // check end points\\n\\n\\n    this.closestPointToPoint(start, point1);\\n    distSq = start.distanceToSquared(point1);\\n\\n    if (distSq < closestDistanceSq) {\\n      closestDistanceSq = distSq;\\n      if (target1) target1.copy(point1);\\n      if (target2) target2.copy(start);\\n    }\\n\\n    this.closestPointToPoint(end, point1);\\n    distSq = end.distanceToSquared(point1);\\n\\n    if (distSq < closestDistanceSq) {\\n      closestDistanceSq = distSq;\\n      if (target1) target1.copy(point1);\\n      if (target2) target2.copy(end);\\n    }\\n\\n    return Math.sqrt(closestDistanceSq);\\n  };\\n}();\\n\\nSeparatingAxisTriangle.prototype.intersectsTriangle = function () {\\n  var saTri2 = new SeparatingAxisTriangle();\\n  var arr1 = new Array(3);\\n  var arr2 = new Array(3);\\n  var cachedSatBounds = new _SeparatingAxisBounds.SeparatingAxisBounds();\\n  var cachedSatBounds2 = new _SeparatingAxisBounds.SeparatingAxisBounds();\\n  var cachedAxis = new _three.Vector3();\\n  return function intersectsTriangle(other) {\\n    if (this.needsUpdate) {\\n      this.update();\\n    }\\n\\n    if (!other.isSeparatingAxisTriangle) {\\n      saTri2.copy(other);\\n      saTri2.update();\\n      other = saTri2;\\n    } else if (other.needsUpdate) {\\n      other.update();\\n    }\\n\\n    var satBounds1 = this.satBounds;\\n    var satAxes1 = this.satAxes;\\n    arr2[0] = other.a;\\n    arr2[1] = other.b;\\n    arr2[2] = other.c;\\n\\n    for (var i = 0; i < 4; i++) {\\n      var sb = satBounds1[i];\\n      var sa = satAxes1[i];\\n      cachedSatBounds.setFromPoints(sa, arr2);\\n      if (sb.isSeparated(cachedSatBounds)) return false;\\n    }\\n\\n    var satBounds2 = other.satBounds;\\n    var satAxes2 = other.satAxes;\\n    arr1[0] = this.a;\\n    arr1[1] = this.b;\\n    arr1[2] = this.c;\\n\\n    for (var _i = 0; _i < 4; _i++) {\\n      var _sb = satBounds2[_i];\\n      var _sa = satAxes2[_i];\\n      cachedSatBounds.setFromPoints(_sa, arr1);\\n      if (_sb.isSeparated(cachedSatBounds)) return false;\\n    } // check crossed axes\\n\\n\\n    for (var _i2 = 0; _i2 < 4; _i2++) {\\n      var sa1 = satAxes1[_i2];\\n\\n      for (var i2 = 0; i2 < 4; i2++) {\\n        var sa2 = satAxes2[i2];\\n        cachedAxis.crossVectors(sa1, sa2);\\n        cachedSatBounds.setFromPoints(cachedAxis, arr1);\\n        cachedSatBounds2.setFromPoints(cachedAxis, arr2);\\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\\n      }\\n    }\\n\\n    return true;\\n  };\\n}();\\n\\nSeparatingAxisTriangle.prototype.distanceToPoint = function () {\\n  var target = new _three.Vector3();\\n  return function distanceToPoint(point) {\\n    this.closestPointToPoint(point, target);\\n    return point.distanceTo(target);\\n  };\\n}();\\n\\nSeparatingAxisTriangle.prototype.distanceToTriangle = function () {\\n  var point = new _three.Vector3();\\n  var point2 = new _three.Vector3();\\n  var cornerFields = ['a', 'b', 'c'];\\n  var line1 = new _three.Line3();\\n  var line2 = new _three.Line3();\\n  return function distanceToTriangle(other) {\\n    var target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\\n    var target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\\n\\n    if (this.intersectsTriangle(other)) {\\n      // TODO: This will not result in a point that lies on\\n      // the intersection line of the triangles\\n      if (target1 || target2) {\\n        this.getMidpoint(point);\\n        other.closestPointToPoint(point, point2);\\n        this.closestPointToPoint(point2, point);\\n        if (target1) target1.copy(point);\\n        if (target2) target2.copy(point2);\\n      }\\n\\n      return 0;\\n    }\\n\\n    var closestDistanceSq = Infinity; // check all point distances\\n\\n    for (var i = 0; i < 3; i++) {\\n      var dist = void 0;\\n      var field = cornerFields[i];\\n      var otherVec = other[field];\\n      this.closestPointToPoint(otherVec, point);\\n      dist = otherVec.distanceToSquared(point);\\n\\n      if (dist < closestDistanceSq) {\\n        closestDistanceSq = dist;\\n        if (target1) target1.copy(point);\\n        if (target2) target2.copy(otherVec);\\n      }\\n\\n      var thisVec = this[field];\\n      other.closestPointToPoint(thisVec, point);\\n      dist = thisVec.distanceToSquared(point);\\n\\n      if (dist < closestDistanceSq) {\\n        closestDistanceSq = dist;\\n        if (target1) target1.copy(thisVec);\\n        if (target2) target2.copy(point);\\n      }\\n    }\\n\\n    for (var _i3 = 0; _i3 < 3; _i3++) {\\n      var f11 = cornerFields[_i3];\\n      var f12 = cornerFields[(_i3 + 1) % 3];\\n      line1.set(this[f11], this[f12]);\\n\\n      for (var i2 = 0; i2 < 3; i2++) {\\n        var f21 = cornerFields[i2];\\n        var f22 = cornerFields[(i2 + 1) % 3];\\n        line2.set(other[f21], other[f22]);\\n        (0, _MathUtilities.closestPointsSegmentToSegment)(line1, line2, point, point2);\\n\\n        var _dist = point.distanceToSquared(point2);\\n\\n        if (_dist < closestDistanceSq) {\\n          closestDistanceSq = _dist;\\n          if (target1) target1.copy(point);\\n          if (target2) target2.copy(point2);\\n        }\\n      }\\n    }\\n\\n    return Math.sqrt(closestDistanceSq);\\n  };\\n}();\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_typeof\",\"obj\",\"Symbol\",\"iterator\",\"constructor\",\"prototype\",\"_defineProperties\",\"target\",\"props\",\"i\",\"length\",\"descriptor\",\"enumerable\",\"configurable\",\"writable\",\"Object\",\"defineProperty\",\"key\",\"_createClass\",\"Constructor\",\"protoProps\",\"staticProps\",\"_possibleConstructorReturn\",\"self\",\"call\",\"ReferenceError\",\"_getPrototypeOf\",\"o\",\"setPrototypeOf\",\"getPrototypeOf\",\"__proto__\",\"_inherits\",\"subClass\",\"superClass\",\"TypeError\",\"create\",\"value\",\"_setPrototypeOf\",\"p\",\"SeparatingAxisTriangle\",\"_three\",\"_SeparatingAxisBounds\",\"_MathUtilities\",\"_Triangle\",\"_getPrototypeOf2\",\"instance\",\"_len\",\"arguments\",\"args\",\"Array\",\"_key\",\"_this\",\"apply\",\"concat\",\"isSeparatingAxisTriangle\",\"satAxes\",\"fill\",\"map\",\"Vector3\",\"satBounds\",\"SeparatingAxisBounds\",\"points\",\"a\",\"b\",\"c\",\"sphere\",\"Sphere\",\"needsUpdate\",\"intersectsSphere\",\"sphereIntersectTriangle\",\"update\",\"axis0\",\"sab0\",\"getNormal\",\"setFromPoints\",\"axis1\",\"sab1\",\"subVectors\",\"axis2\",\"sab2\",\"axis3\",\"sab3\",\"Triangle\",\"closestPointToSegment\",\"point1\",\"point2\",\"edge\",\"Line3\",\"distanceToSegment\",\"segment\",\"target1\",\"undefined\",\"target2\",\"start\",\"end\",\"distSq\",\"closestDistanceSq\",\"Infinity\",\"nexti\",\"copy\",\"closestPointsSegmentToSegment\",\"distanceToSquared\",\"closestPointToPoint\",\"Math\",\"sqrt\",\"intersectsTriangle\",\"saTri2\",\"arr1\",\"arr2\",\"cachedSatBounds\",\"cachedSatBounds2\",\"cachedAxis\",\"other\",\"satBounds1\",\"satAxes1\",\"sb\",\"sa\",\"isSeparated\",\"satBounds2\",\"satAxes2\",\"_i\",\"_sb\",\"_sa\",\"_i2\",\"sa1\",\"i2\",\"crossVectors\",\"sa2\",\"distanceToPoint\",\"point\",\"distanceTo\",\"distanceToTriangle\",\"cornerFields\",\"line1\",\"line2\",\"getMidpoint\",\"field\",\"otherVec\",\"dist\",\"thisVec\",\"_i3\",\"set\",\"f11\",\"f12\",\"f21\",\"f22\",\"_dist\"]\n}\n"]