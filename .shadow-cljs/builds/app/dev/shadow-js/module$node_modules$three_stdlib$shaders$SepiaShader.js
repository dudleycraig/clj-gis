["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/shaders/SepiaShader.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$shaders$SepiaShader=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.SepiaShader=void 0;exports.SepiaShader={uniforms:{tDiffuse:{value:null},amount:{value:1}},vertexShader:\"varying vec2 vUv;\\nvoid main() {\\n\\tvUv \\x3d uv;\\n\\tgl_Position \\x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform float amount;\\nuniform sampler2D tDiffuse;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 color \\x3d texture2D( tDiffuse, vUv );\\n\\tvec3 c \\x3d color.rgb;\\n\\tcolor.r \\x3d dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\\n\\tcolor.g \\x3d dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\\n\\tcolor.b \\x3d dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\\n\\tgl_FragColor \\x3d vec4( min( vec3( 1.0 ), color.rgb ), color.a );\\n}\"}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$shaders$SepiaShader\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SepiaShader = void 0;\n\n/**\n * Sepia tone shader\n * based on glfx.js sepia shader\n * https://github.com/evanw/glfx.js\n */\nvar SepiaShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    amount: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float amount;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 color = texture2D( tDiffuse, vUv );', '\tvec3 c = color.rgb;', '\tcolor.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );', '\tcolor.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );', '\tcolor.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );', '\tgl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );', '}'].join('\\n')\n};\nexports.SepiaShader = SepiaShader;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["fragmentShader","__esModule","SepiaShader","tDiffuse","vertexShader","value","amount","uniforms"]],"~:compiled-at",1630917515581,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$shaders$SepiaShader.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGjHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAmB3BJ,QAAQI,CAAAA,WAAR,CAZkBA,CAChBC,SAAU,CACRC,SAAU,CACRH,MAAO,IADC,CADF,CAIRI,OAAQ,CACNJ,MAAO,CADD,CAJA,CADMC,CAShBI,aAAiJ,qIATjIJ,CAUhBK,eAAyf,+eAVzeL,CAb+F;\",\n\"sources\":[\"node_modules/three-stdlib/shaders/SepiaShader.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$shaders$SepiaShader\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.SepiaShader = void 0;\\n\\n/**\\n * Sepia tone shader\\n * based on glfx.js sepia shader\\n * https://github.com/evanw/glfx.js\\n */\\nvar SepiaShader = {\\n  uniforms: {\\n    tDiffuse: {\\n      value: null\\n    },\\n    amount: {\\n      value: 1.0\\n    }\\n  },\\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\\tvUv = uv;', '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\\\n'),\\n  fragmentShader: ['uniform float amount;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\\tvec4 color = texture2D( tDiffuse, vUv );', '\\tvec3 c = color.rgb;', '\\tcolor.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );', '\\tcolor.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );', '\\tcolor.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );', '\\tgl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );', '}'].join('\\\\n')\\n};\\nexports.SepiaShader = SepiaShader;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"SepiaShader\",\"uniforms\",\"tDiffuse\",\"amount\",\"vertexShader\",\"fragmentShader\"]\n}\n"]