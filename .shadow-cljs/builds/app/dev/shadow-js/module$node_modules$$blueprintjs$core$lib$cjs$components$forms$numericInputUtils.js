["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@blueprintjs/core/lib/cjs/components/forms/numericInputUtils.js"],"~:js","shadow$provide.module$node_modules$$blueprintjs$core$lib$cjs$components$forms$numericInputUtils=function(global,require,module,exports){function getDecimalSeparator(locale){var testText=(1.9).toLocaleString(locale),one=(1).toLocaleString(locale);locale=(9).toLocaleString(locale);return(testText=(new RegExp(one+\"(.+)\"+locale)).exec(testText))&&testText[1]||\".\"}function transformLocalizedNumberToStringNumber(character,locale){var jsNumber=[0,1,2,3,4,5,6,7,8,9].map(function(value){return value.toLocaleString(locale)}).indexOf(character);\nreturn-1!==jsNumber?jsNumber:character}function parseStringToStringNumber(value,locale){var valueAsString=\"\"+value;return parseFloat(valueAsString).toString()===value.toString()?value.toString():void 0!==locale?(value=getDecimalSeparator(locale),sanitizeNumericInput(valueAsString,locale).split(\"\").map(function(character){return transformLocalizedNumberToStringNumber(character,locale)}).join(\"\").replace(value,\".\")):value.toString()}function isFloatingPointNumericCharacter(character,locale){if(void 0!==\nlocale){var decimalSeparator=getDecimalSeparator(locale).replace(\".\",\"\\\\.\"),numbers=[0,1,2,3,4,5,6,7,8,9].map(function(value){return value.toLocaleString(locale)}).join(\"\");return(new RegExp(\"^[Ee\"+numbers+\"\\\\+\\\\-\"+decimalSeparator+\"]$\")).test(character)}return/^[Ee0-9\\+\\-\\.]$/.test(character)}function convertFullWidthNumbersToAscii(value){return value.replace(/[\\uFF10-\\uFF19]/g,function(m){return String.fromCharCode(m.charCodeAt(0)-65248)})}function sanitizeNumericInput(value,locale){return convertFullWidthNumbersToAscii(value).split(\"\").filter(function(valueChar){return isFloatingPointNumericCharacter(valueChar,\nlocale)}).join(\"\")}Object.defineProperty(exports,\"__esModule\",{value:!0});exports.sanitizeNumericInput=exports.toMaxPrecision=exports.isValidNumericKeyboardEvent=exports.isValueNumeric=exports.parseStringToStringNumber=exports.getValueOrEmptyValue=exports.clampValue=exports.toLocaleString=void 0;var utils_1=require(\"module$node_modules$$blueprintjs$core$lib$cjs$common$utils$index\");exports.toLocaleString=function(num,locale){void 0===locale&&(locale=\"en-US\");return sanitizeNumericInput(num.toLocaleString(locale),\nlocale)};exports.clampValue=function(value,min,max){return utils_1.clamp(value,null!=min?min:-Infinity,null!=max?max:Infinity)};exports.getValueOrEmptyValue=function(value){void 0===value&&(value=\"\");return value.toString()};exports.parseStringToStringNumber=parseStringToStringNumber;exports.isValueNumeric=function(value,locale){locale=parseStringToStringNumber(value,locale);return null!=value&&0<=locale-parseFloat(locale)+1};exports.isValidNumericKeyboardEvent=function(e,locale){return null==e.key||\ne.ctrlKey||e.altKey||e.metaKey||1!==e.key.length?!0:isFloatingPointNumericCharacter(e.key,locale)};exports.toMaxPrecision=function(value,maxPrecision){maxPrecision=Math.pow(10,maxPrecision);return Math.round(value*maxPrecision)/maxPrecision};exports.sanitizeNumericInput=sanitizeNumericInput}","~:source","shadow$provide[\"module$node_modules$$blueprintjs$core$lib$cjs$components$forms$numericInputUtils\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sanitizeNumericInput = exports.toMaxPrecision = exports.isValidNumericKeyboardEvent = exports.isValueNumeric = exports.parseStringToStringNumber = exports.getValueOrEmptyValue = exports.clampValue = exports.toLocaleString = void 0;\nvar utils_1 = require(\"../../common/utils\");\n/** Returns the `decimal` number separator based on locale */\nfunction getDecimalSeparator(locale) {\n    var testNumber = 1.9;\n    var testText = testNumber.toLocaleString(locale);\n    var one = (1).toLocaleString(locale);\n    var nine = (9).toLocaleString(locale);\n    var pattern = one + \"(.+)\" + nine;\n    var result = new RegExp(pattern).exec(testText);\n    return (result && result[1]) || \".\";\n}\nfunction toLocaleString(num, locale) {\n    if (locale === void 0) { locale = \"en-US\"; }\n    return sanitizeNumericInput(num.toLocaleString(locale), locale);\n}\nexports.toLocaleString = toLocaleString;\nfunction clampValue(value, min, max) {\n    // defaultProps won't work if the user passes in null, so just default\n    // to +/- infinity here instead, as a catch-all.\n    var adjustedMin = min != null ? min : -Infinity;\n    var adjustedMax = max != null ? max : Infinity;\n    return utils_1.clamp(value, adjustedMin, adjustedMax);\n}\nexports.clampValue = clampValue;\nfunction getValueOrEmptyValue(value) {\n    if (value === void 0) { value = \"\"; }\n    return value.toString();\n}\nexports.getValueOrEmptyValue = getValueOrEmptyValue;\n/** Transform the localized character (ex. \"\") to a javascript recognizable string number (ex. \"10.99\")  */\nfunction transformLocalizedNumberToStringNumber(character, locale) {\n    var charactersMap = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (value) { return value.toLocaleString(locale); });\n    var jsNumber = charactersMap.indexOf(character);\n    if (jsNumber !== -1) {\n        return jsNumber;\n    }\n    else {\n        return character;\n    }\n}\n/** Transforms the localized number (ex. \"10,99\") to a javascript recognizable string number (ex. \"10.99\")  */\nfunction parseStringToStringNumber(value, locale) {\n    var valueAsString = \"\" + value;\n    if (parseFloat(valueAsString).toString() === value.toString()) {\n        return value.toString();\n    }\n    if (locale !== undefined) {\n        var decimalSeparator = getDecimalSeparator(locale);\n        var sanitizedString = sanitizeNumericInput(valueAsString, locale);\n        return sanitizedString\n            .split(\"\")\n            .map(function (character) { return transformLocalizedNumberToStringNumber(character, locale); })\n            .join(\"\")\n            .replace(decimalSeparator, \".\");\n    }\n    return value.toString();\n}\nexports.parseStringToStringNumber = parseStringToStringNumber;\n/** Returns `true` if the string represents a valid numeric value, like \"1e6\". */\nfunction isValueNumeric(value, locale) {\n    // checking if a string is numeric in Typescript is a big pain, because\n    // we can't simply toss a string parameter to isFinite. below is the\n    // essential approach that jQuery uses, which involves subtracting a\n    // parsed numeric value from the string representation of the value. we\n    // need to cast the value to the `any` type to allow this operation\n    // between dissimilar types.\n    var stringToStringNumber = parseStringToStringNumber(value, locale);\n    return value != null && stringToStringNumber - parseFloat(stringToStringNumber) + 1 >= 0;\n}\nexports.isValueNumeric = isValueNumeric;\nfunction isValidNumericKeyboardEvent(e, locale) {\n    // unit tests may not include e.key. don't bother disabling those events.\n    if (e.key == null) {\n        return true;\n    }\n    // allow modified key strokes that may involve letters and other\n    // non-numeric/invalid characters (Cmd + A, Cmd + C, Cmd + V, Cmd + X).\n    if (e.ctrlKey || e.altKey || e.metaKey) {\n        return true;\n    }\n    // keys that print a single character when pressed have a `key` name of\n    // length 1. every other key has a longer `key` name (e.g. \"Backspace\",\n    // \"ArrowUp\", \"Shift\"). since none of those keys can print a character\n    // to the field--and since they may have important native behaviors\n    // beyond printing a character--we don't want to disable their effects.\n    var isSingleCharKey = e.key.length === 1;\n    if (!isSingleCharKey) {\n        return true;\n    }\n    // now we can simply check that the single character that wants to be printed\n    // is a floating-point number character that we're allowed to print.\n    return isFloatingPointNumericCharacter(e.key, locale);\n}\nexports.isValidNumericKeyboardEvent = isValidNumericKeyboardEvent;\n/**\n * A regex that matches a string of length 1 (i.e. a standalone character)\n * if and only if it is a floating-point number character as defined by W3C:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n *\n * Floating-point number characters are the only characters that can be\n * printed within a default input[type=\"number\"]. This component should\n * behave the same way when this.props.allowNumericCharactersOnly = true.\n * See here for the input[type=\"number\"].value spec:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/input.number.html#input.number.attrs.value\n */\nfunction isFloatingPointNumericCharacter(character, locale) {\n    if (locale !== undefined) {\n        var decimalSeparator = getDecimalSeparator(locale).replace(\".\", \"\\\\.\");\n        var numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (value) { return value.toLocaleString(locale); }).join(\"\");\n        var localeFloatingPointNumericCharacterRegex = new RegExp(\"^[Ee\" + numbers + \"\\\\+\\\\-\" + decimalSeparator + \"]$\");\n        return localeFloatingPointNumericCharacterRegex.test(character);\n    }\n    else {\n        var floatingPointNumericCharacterRegex = /^[Ee0-9\\+\\-\\.]$/;\n        return floatingPointNumericCharacterRegex.test(character);\n    }\n}\n/**\n * Round the value to have _up to_ the specified maximum precision.\n *\n * This differs from `toFixed(5)` in that trailing zeroes are not added on\n * more precise values, resulting in shorter strings.\n */\nfunction toMaxPrecision(value, maxPrecision) {\n    // round the value to have the specified maximum precision (toFixed is the wrong choice,\n    // because it would show trailing zeros in the decimal part out to the specified precision)\n    // source: http://stackoverflow.com/a/18358056/5199574\n    var scaleFactor = Math.pow(10, maxPrecision);\n    return Math.round(value * scaleFactor) / scaleFactor;\n}\nexports.toMaxPrecision = toMaxPrecision;\n/**\n * Convert Japanese full-width numbers, e.g. '５', to ASCII, e.g. '5'\n * This should be called before performing any other numeric string input validation.\n */\nfunction convertFullWidthNumbersToAscii(value) {\n    return value.replace(/[\\uFF10-\\uFF19]/g, function (m) { return String.fromCharCode(m.charCodeAt(0) - 0xfee0); });\n}\n/**\n * Convert full-width (Japanese) numbers to ASCII, and strip all characters that are not valid floating-point numeric characters\n */\nfunction sanitizeNumericInput(value, locale) {\n    var valueChars = convertFullWidthNumbersToAscii(value).split(\"\");\n    var sanitizedValueChars = valueChars.filter(function (valueChar) { return isFloatingPointNumericCharacter(valueChar, locale); });\n    return sanitizedValueChars.join(\"\");\n}\nexports.sanitizeNumericInput = sanitizeNumericInput;\n//# sourceMappingURL=numericInputUtils.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$$blueprintjs$core$lib$cjs$common$utils$index"]],"~:properties",["^5",["toMaxPrecision","toLocaleString","parseStringToStringNumber","isValueNumeric","__esModule","clampValue","sanitizeNumericInput","isValidNumericKeyboardEvent","value","getValueOrEmptyValue"]],"~:compiled-at",1630405505178,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$blueprintjs$core$lib$cjs$components$forms$numericInputUtils.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@blueprintjs/core/lib/cjs/components/forms/numericInputUtils.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$blueprintjs$core$lib$cjs$components$forms$numericInputUtils\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n/*\\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.sanitizeNumericInput = exports.toMaxPrecision = exports.isValidNumericKeyboardEvent = exports.isValueNumeric = exports.parseStringToStringNumber = exports.getValueOrEmptyValue = exports.clampValue = exports.toLocaleString = void 0;\\nvar utils_1 = require(\\\"../../common/utils\\\");\\n/** Returns the `decimal` number separator based on locale */\\nfunction getDecimalSeparator(locale) {\\n    var testNumber = 1.9;\\n    var testText = testNumber.toLocaleString(locale);\\n    var one = (1).toLocaleString(locale);\\n    var nine = (9).toLocaleString(locale);\\n    var pattern = one + \\\"(.+)\\\" + nine;\\n    var result = new RegExp(pattern).exec(testText);\\n    return (result && result[1]) || \\\".\\\";\\n}\\nfunction toLocaleString(num, locale) {\\n    if (locale === void 0) { locale = \\\"en-US\\\"; }\\n    return sanitizeNumericInput(num.toLocaleString(locale), locale);\\n}\\nexports.toLocaleString = toLocaleString;\\nfunction clampValue(value, min, max) {\\n    // defaultProps won't work if the user passes in null, so just default\\n    // to +/- infinity here instead, as a catch-all.\\n    var adjustedMin = min != null ? min : -Infinity;\\n    var adjustedMax = max != null ? max : Infinity;\\n    return utils_1.clamp(value, adjustedMin, adjustedMax);\\n}\\nexports.clampValue = clampValue;\\nfunction getValueOrEmptyValue(value) {\\n    if (value === void 0) { value = \\\"\\\"; }\\n    return value.toString();\\n}\\nexports.getValueOrEmptyValue = getValueOrEmptyValue;\\n/** Transform the localized character (ex. \\\"\\\") to a javascript recognizable string number (ex. \\\"10.99\\\")  */\\nfunction transformLocalizedNumberToStringNumber(character, locale) {\\n    var charactersMap = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (value) { return value.toLocaleString(locale); });\\n    var jsNumber = charactersMap.indexOf(character);\\n    if (jsNumber !== -1) {\\n        return jsNumber;\\n    }\\n    else {\\n        return character;\\n    }\\n}\\n/** Transforms the localized number (ex. \\\"10,99\\\") to a javascript recognizable string number (ex. \\\"10.99\\\")  */\\nfunction parseStringToStringNumber(value, locale) {\\n    var valueAsString = \\\"\\\" + value;\\n    if (parseFloat(valueAsString).toString() === value.toString()) {\\n        return value.toString();\\n    }\\n    if (locale !== undefined) {\\n        var decimalSeparator = getDecimalSeparator(locale);\\n        var sanitizedString = sanitizeNumericInput(valueAsString, locale);\\n        return sanitizedString\\n            .split(\\\"\\\")\\n            .map(function (character) { return transformLocalizedNumberToStringNumber(character, locale); })\\n            .join(\\\"\\\")\\n            .replace(decimalSeparator, \\\".\\\");\\n    }\\n    return value.toString();\\n}\\nexports.parseStringToStringNumber = parseStringToStringNumber;\\n/** Returns `true` if the string represents a valid numeric value, like \\\"1e6\\\". */\\nfunction isValueNumeric(value, locale) {\\n    // checking if a string is numeric in Typescript is a big pain, because\\n    // we can't simply toss a string parameter to isFinite. below is the\\n    // essential approach that jQuery uses, which involves subtracting a\\n    // parsed numeric value from the string representation of the value. we\\n    // need to cast the value to the `any` type to allow this operation\\n    // between dissimilar types.\\n    var stringToStringNumber = parseStringToStringNumber(value, locale);\\n    return value != null && stringToStringNumber - parseFloat(stringToStringNumber) + 1 >= 0;\\n}\\nexports.isValueNumeric = isValueNumeric;\\nfunction isValidNumericKeyboardEvent(e, locale) {\\n    // unit tests may not include e.key. don't bother disabling those events.\\n    if (e.key == null) {\\n        return true;\\n    }\\n    // allow modified key strokes that may involve letters and other\\n    // non-numeric/invalid characters (Cmd + A, Cmd + C, Cmd + V, Cmd + X).\\n    if (e.ctrlKey || e.altKey || e.metaKey) {\\n        return true;\\n    }\\n    // keys that print a single character when pressed have a `key` name of\\n    // length 1. every other key has a longer `key` name (e.g. \\\"Backspace\\\",\\n    // \\\"ArrowUp\\\", \\\"Shift\\\"). since none of those keys can print a character\\n    // to the field--and since they may have important native behaviors\\n    // beyond printing a character--we don't want to disable their effects.\\n    var isSingleCharKey = e.key.length === 1;\\n    if (!isSingleCharKey) {\\n        return true;\\n    }\\n    // now we can simply check that the single character that wants to be printed\\n    // is a floating-point number character that we're allowed to print.\\n    return isFloatingPointNumericCharacter(e.key, locale);\\n}\\nexports.isValidNumericKeyboardEvent = isValidNumericKeyboardEvent;\\n/**\\n * A regex that matches a string of length 1 (i.e. a standalone character)\\n * if and only if it is a floating-point number character as defined by W3C:\\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\\n *\\n * Floating-point number characters are the only characters that can be\\n * printed within a default input[type=\\\"number\\\"]. This component should\\n * behave the same way when this.props.allowNumericCharactersOnly = true.\\n * See here for the input[type=\\\"number\\\"].value spec:\\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/input.number.html#input.number.attrs.value\\n */\\nfunction isFloatingPointNumericCharacter(character, locale) {\\n    if (locale !== undefined) {\\n        var decimalSeparator = getDecimalSeparator(locale).replace(\\\".\\\", \\\"\\\\\\\\.\\\");\\n        var numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (value) { return value.toLocaleString(locale); }).join(\\\"\\\");\\n        var localeFloatingPointNumericCharacterRegex = new RegExp(\\\"^[Ee\\\" + numbers + \\\"\\\\\\\\+\\\\\\\\-\\\" + decimalSeparator + \\\"]$\\\");\\n        return localeFloatingPointNumericCharacterRegex.test(character);\\n    }\\n    else {\\n        var floatingPointNumericCharacterRegex = /^[Ee0-9\\\\+\\\\-\\\\.]$/;\\n        return floatingPointNumericCharacterRegex.test(character);\\n    }\\n}\\n/**\\n * Round the value to have _up to_ the specified maximum precision.\\n *\\n * This differs from `toFixed(5)` in that trailing zeroes are not added on\\n * more precise values, resulting in shorter strings.\\n */\\nfunction toMaxPrecision(value, maxPrecision) {\\n    // round the value to have the specified maximum precision (toFixed is the wrong choice,\\n    // because it would show trailing zeros in the decimal part out to the specified precision)\\n    // source: http://stackoverflow.com/a/18358056/5199574\\n    var scaleFactor = Math.pow(10, maxPrecision);\\n    return Math.round(value * scaleFactor) / scaleFactor;\\n}\\nexports.toMaxPrecision = toMaxPrecision;\\n/**\\n * Convert Japanese full-width numbers, e.g. '\\uff15', to ASCII, e.g. '5'\\n * This should be called before performing any other numeric string input validation.\\n */\\nfunction convertFullWidthNumbersToAscii(value) {\\n    return value.replace(/[\\\\uFF10-\\\\uFF19]/g, function (m) { return String.fromCharCode(m.charCodeAt(0) - 0xfee0); });\\n}\\n/**\\n * Convert full-width (Japanese) numbers to ASCII, and strip all characters that are not valid floating-point numeric characters\\n */\\nfunction sanitizeNumericInput(value, locale) {\\n    var valueChars = convertFullWidthNumbersToAscii(value).split(\\\"\\\");\\n    var sanitizedValueChars = valueChars.filter(function (valueChar) { return isFloatingPointNumericCharacter(valueChar, locale); });\\n    return sanitizedValueChars.join(\\\"\\\");\\n}\\nexports.sanitizeNumericInput = sanitizeNumericInput;\\n//# sourceMappingURL=numericInputUtils.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"getDecimalSeparator\",\"locale\",\"testText\",\"toLocaleString\",\"testNumber\",\"one\",\"nine\",\"result\",\"exec\",\"RegExp\",\"transformLocalizedNumberToStringNumber\",\"character\",\"jsNumber\",\"map\",\"charactersMap\",\"value\",\"indexOf\",\"parseStringToStringNumber\",\"valueAsString\",\"parseFloat\",\"toString\",\"undefined\",\"decimalSeparator\",\"sanitizeNumericInput\",\"sanitizedString\",\"split\",\"join\",\"replace\",\"isFloatingPointNumericCharacter\",\"numbers\",\"test\",\"localeFloatingPointNumericCharacterRegex\",\"floatingPointNumericCharacterRegex\",\"convertFullWidthNumbersToAscii\",\"m\",\"String\",\"fromCharCode\",\"charCodeAt\",\"valueChars\",\"filter\",\"sanitizedValueChars\",\"valueChar\",\"Object\",\"defineProperty\",\"toMaxPrecision\",\"isValidNumericKeyboardEvent\",\"isValueNumeric\",\"getValueOrEmptyValue\",\"clampValue\",\"utils_1\",\"num\",\"min\",\"max\",\"clamp\",\"adjustedMin\",\"Infinity\",\"adjustedMax\",\"stringToStringNumber\",\"e\",\"key\",\"ctrlKey\",\"altKey\",\"metaKey\",\"length\",\"maxPrecision\",\"scaleFactor\",\"Math\",\"pow\",\"round\"]\n}\n"]