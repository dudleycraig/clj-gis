["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/three-stdlib/renderers/SVGRenderer.js"],"~:js","shadow$provide.module$node_modules$three_stdlib$renderers$SVGRenderer=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.SVGRenderer=exports.SVGObject=void 0;var _three=require(\"module$node_modules$three$build$three_module\"),_Projector=require(\"module$node_modules$three_stdlib$renderers$Projector\"),SVGObject=function(node){_three.Object3D.call(this);this.node=node};exports.SVGObject=SVGObject;SVGObject.prototype=Object.create(_three.Object3D.prototype);\nSVGObject.prototype.constructor=SVGObject;exports.SVGRenderer=function(){function removeChildNodes(){for(_pathCount=0;0<_svg.childNodes.length;)_svg.removeChild(_svg.childNodes[0])}function convert(c){return null!==_precision?c.toFixed(_precision):c}function calculateLights(lights){_ambientLight.setRGB(0,0,0);_directionalLights.setRGB(0,0,0);_pointLights.setRGB(0,0,0);for(var l=0,ll=lights.length;l<ll;l++){var light=lights[l],lightColor=light.color;light.isAmbientLight?(_ambientLight.r+=lightColor.r,\n_ambientLight.g+=lightColor.g,_ambientLight.b+=lightColor.b):light.isDirectionalLight?(_directionalLights.r+=lightColor.r,_directionalLights.g+=lightColor.g,_directionalLights.b+=lightColor.b):light.isPointLight&&(_pointLights.r+=lightColor.r,_pointLights.g+=lightColor.g,_pointLights.b+=lightColor.b)}}function renderSprite(v1,element,material){var scaleX=element.scale.x*_svgWidthHalf;element=element.scale.y*_svgHeightHalf;material.isPointsMaterial&&(scaleX*=material.size,element*=material.size);v1=\n\"M\"+convert(v1.x-.5*scaleX)+\",\"+convert(v1.y-.5*element)+\"h\"+convert(scaleX)+\"v\"+convert(element)+\"h\"+convert(-scaleX)+\"z\";scaleX=\"\";if(material.isSpriteMaterial||material.isPointsMaterial)scaleX=\"fill:\"+material.color.getStyle()+\";fill-opacity:\"+material.opacity;addPath(scaleX,v1)}function renderLine(v1,v2,element,material){v1=\"M\"+convert(v1.positionScreen.x)+\",\"+convert(v1.positionScreen.y)+\"L\"+convert(v2.positionScreen.x)+\",\"+convert(v2.positionScreen.y);material.isLineBasicMaterial&&(v2=\"fill:none;stroke:\"+\nmaterial.color.getStyle()+\";stroke-opacity:\"+material.opacity+\";stroke-width:\"+material.linewidth+\";stroke-linecap:\"+material.linecap,material.isLineDashedMaterial&&(v2=v2+\";stroke-dasharray:\"+material.dashSize+\",\"+material.gapSize),addPath(v2,v1))}function renderFace3(v1,v2,v3,element,material){_this.info.render.vertices+=3;_this.info.render.faces++;var path=\"M\"+convert(v1.positionScreen.x)+\",\"+convert(v1.positionScreen.y)+\"L\"+convert(v2.positionScreen.x)+\",\"+convert(v2.positionScreen.y)+\"L\"+convert(v3.positionScreen.x)+\n\",\"+convert(v3.positionScreen.y)+\"z\";if(material.isMeshBasicMaterial)_color.copy(material.color),material.vertexColors&&_color.multiply(element.color);else if(material.isMeshLambertMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial){_diffuseColor.copy(material.color);material.vertexColors&&_diffuseColor.multiply(element.color);_color.copy(_ambientLight);_centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);v1=_lights;v2=_centroid;element=\nelement.normalModel;v3=_color;for(var l=0,ll=v1.length;l<ll;l++){var light=v1[l],lightColor=light.color;if(light.isDirectionalLight){var lightPosition=_vector3.setFromMatrixPosition(light.matrixWorld).normalize(),amount=element.dot(lightPosition);0>=amount||(amount*=light.intensity,v3.r+=lightColor.r*amount,v3.g+=lightColor.g*amount,v3.b+=lightColor.b*amount)}else light.isPointLight&&(lightPosition=_vector3.setFromMatrixPosition(light.matrixWorld),amount=element.dot(_vector3.subVectors(lightPosition,\nv2).normalize()),0>=amount||(amount*=0==light.distance?1:1-Math.min(v2.distanceTo(lightPosition)/light.distance,1),0!=amount&&(amount*=light.intensity,v3.r+=lightColor.r*amount,v3.g+=lightColor.g*amount,v3.b+=lightColor.b*amount)))}_color.multiply(_diffuseColor).add(material.emissive)}else material.isMeshNormalMaterial&&(_normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize(),_color.setRGB(_normal.x,_normal.y,_normal.z).multiplyScalar(.5).addScalar(.5));material=material.wireframe?\n\"fill:none;stroke:\"+_color.getStyle()+\";stroke-opacity:\"+material.opacity+\";stroke-width:\"+material.wireframeLinewidth+\";stroke-linecap:\"+material.wireframeLinecap+\";stroke-linejoin:\"+material.wireframeLinejoin:\"fill:\"+_color.getStyle()+\";fill-opacity:\"+material.opacity;addPath(material,path)}function expand(v1,v2,pixels){var x=v2.x-v1.x,y=v2.y-v1.y,det=x*x+y*y;0!==det&&(pixels/=Math.sqrt(det),x*=pixels,y*=pixels,v2.x+=x,v2.y+=y,v1.x-=x,v1.y-=y)}function addPath(style,path){_currentStyle===style?\n_currentPath+=path:(flushPath(),_currentStyle=style,_currentPath=path)}function flushPath(){if(_currentPath){var id=_pathCount++;null==_svgPathPool[id]&&(_svgPathPool[id]=document.createElementNS(\"http://www.w3.org/2000/svg\",\"path\"),0==_quality&&_svgPathPool[id].setAttribute(\"shape-rendering\",\"crispEdges\"));_svgNode=_svgPathPool[id];_svgNode.setAttribute(\"d\",_currentPath);_svgNode.setAttribute(\"style\",_currentStyle);_svg.appendChild(_svgNode)}_currentStyle=_currentPath=\"\"}var _this=this,_renderData,\n_elements,_lights,_projector=new _Projector.Projector,_svg=document.createElementNS(\"http://www.w3.org/2000/svg\",\"svg\"),_svgWidth,_svgHeight,_svgWidthHalf,_svgHeightHalf,_v1,_v2,_v3,_clipBox=new _three.Box2,_elemBox=new _three.Box2,_color=new _three.Color,_diffuseColor=new _three.Color,_ambientLight=new _three.Color,_directionalLights=new _three.Color,_pointLights=new _three.Color,_clearColor=new _three.Color,_vector3=new _three.Vector3,_centroid=new _three.Vector3,_normal=new _three.Vector3,_normalViewMatrix=\nnew _three.Matrix3,_viewMatrix=new _three.Matrix4,_viewProjectionMatrix=new _three.Matrix4,_svgPathPool=[],_svgNode,_pathCount=0,_currentPath,_currentStyle,_quality=1,_precision=null;this.domElement=_svg;this.sortElements=this.sortObjects=this.autoClear=!0;this.overdraw=.5;this.info={render:{vertices:0,faces:0}};this.setQuality=function(quality){switch(quality){case \"high\":_quality=1;break;case \"low\":_quality=0}};this.setClearColor=function(color){_clearColor.set(color)};this.setPixelRatio=function(){};\nthis.setSize=function(width,height){_svgWidth=width;_svgHeight=height;_svgWidthHalf=_svgWidth/2;_svgHeightHalf=_svgHeight/2;_svg.setAttribute(\"viewBox\",-_svgWidthHalf+\" \"+-_svgHeightHalf+\" \"+_svgWidth+\" \"+_svgHeight);_svg.setAttribute(\"width\",_svgWidth);_svg.setAttribute(\"height\",_svgHeight);_clipBox.min.set(-_svgWidthHalf,-_svgHeightHalf);_clipBox.max.set(_svgWidthHalf,_svgHeightHalf)};this.getSize=function(){return{width:_svgWidth,height:_svgHeight}};this.setPrecision=function(precision){_precision=\nprecision};this.clear=function(){removeChildNodes();_svg.style.backgroundColor=_clearColor.getStyle()};this.render=function(scene,camera){if(!1===camera instanceof _three.Camera)console.error(\"THREE.SVGRenderer.render: camera is not an instance of Camera.\");else{var background=scene.background;background&&background.isColor?(removeChildNodes(),_svg.style.backgroundColor=background.getStyle()):!0===this.autoClear&&this.clear();_this.info.render.vertices=0;_this.info.render.faces=0;_viewMatrix.copy(camera.matrixWorldInverse);\n_viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix,_viewMatrix);_renderData=_projector.projectScene(scene,camera,this.sortObjects,this.sortElements);_elements=_renderData.elements;_lights=_renderData.lights;_normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);calculateLights(_lights);_currentStyle=_currentPath=\"\";camera=0;for(background=_elements.length;camera<background;camera++){var element=_elements[camera],material=element.material;void 0!==material&&0!==material.opacity&&\n(_elemBox.makeEmpty(),element instanceof _Projector.RenderableSprite?(_v1=element,_v1.x*=_svgWidthHalf,_v1.y*=-_svgHeightHalf,renderSprite(_v1,element,material)):element instanceof _Projector.RenderableLine?(_v1=element.v1,_v2=element.v2,_v1.positionScreen.x*=_svgWidthHalf,_v1.positionScreen.y*=-_svgHeightHalf,_v2.positionScreen.x*=_svgWidthHalf,_v2.positionScreen.y*=-_svgHeightHalf,_elemBox.setFromPoints([_v1.positionScreen,_v2.positionScreen]),!0===_clipBox.intersectsBox(_elemBox)&&renderLine(_v1,\n_v2,element,material)):element instanceof _Projector.RenderableFace&&(_v1=element.v1,_v2=element.v2,_v3=element.v3,-1>_v1.positionScreen.z||1<_v1.positionScreen.z||-1>_v2.positionScreen.z||1<_v2.positionScreen.z||-1>_v3.positionScreen.z||1<_v3.positionScreen.z||(_v1.positionScreen.x*=_svgWidthHalf,_v1.positionScreen.y*=-_svgHeightHalf,_v2.positionScreen.x*=_svgWidthHalf,_v2.positionScreen.y*=-_svgHeightHalf,_v3.positionScreen.x*=_svgWidthHalf,_v3.positionScreen.y*=-_svgHeightHalf,0<this.overdraw&&\n(expand(_v1.positionScreen,_v2.positionScreen,this.overdraw),expand(_v2.positionScreen,_v3.positionScreen,this.overdraw),expand(_v3.positionScreen,_v1.positionScreen,this.overdraw)),_elemBox.setFromPoints([_v1.positionScreen,_v2.positionScreen,_v3.positionScreen]),!0===_clipBox.intersectsBox(_elemBox)&&renderFace3(_v1,_v2,_v3,element,material))))}flushPath();scene.traverseVisible(function(object){object instanceof SVGObject&&(_vector3.setFromMatrixPosition(object.matrixWorld),_vector3.applyMatrix4(_viewProjectionMatrix),\n-1>_vector3.z||1<_vector3.z||(object=object.node,object.setAttribute(\"transform\",\"translate(\"+_vector3.x*_svgWidthHalf+\",\"+-_vector3.y*_svgHeightHalf+\")\"),_svg.appendChild(object)))})}}}}","~:source","shadow$provide[\"module$node_modules$three_stdlib$renderers$SVGRenderer\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SVGRenderer = exports.SVGObject = void 0;\n\nvar _three = require(\"three\");\n\nvar _Projector = require(\"./Projector.js\");\n\nvar SVGObject = function SVGObject(node) {\n  _three.Object3D.call(this);\n\n  this.node = node;\n};\n\nexports.SVGObject = SVGObject;\nSVGObject.prototype = Object.create(_three.Object3D.prototype);\nSVGObject.prototype.constructor = SVGObject;\n\nvar SVGRenderer = function SVGRenderer() {\n  var _this = this,\n      _renderData,\n      _elements,\n      _lights,\n      _projector = new _Projector.Projector(),\n      _svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),\n      _svgWidth,\n      _svgHeight,\n      _svgWidthHalf,\n      _svgHeightHalf,\n      _v1,\n      _v2,\n      _v3,\n      _clipBox = new _three.Box2(),\n      _elemBox = new _three.Box2(),\n      _color = new _three.Color(),\n      _diffuseColor = new _three.Color(),\n      _ambientLight = new _three.Color(),\n      _directionalLights = new _three.Color(),\n      _pointLights = new _three.Color(),\n      _clearColor = new _three.Color(),\n      _vector3 = new _three.Vector3(),\n      // Needed for PointLight\n  _centroid = new _three.Vector3(),\n      _normal = new _three.Vector3(),\n      _normalViewMatrix = new _three.Matrix3(),\n      _viewMatrix = new _three.Matrix4(),\n      _viewProjectionMatrix = new _three.Matrix4(),\n      _svgPathPool = [],\n      _svgNode,\n      _pathCount = 0,\n      _currentPath,\n      _currentStyle,\n      _quality = 1,\n      _precision = null;\n\n  this.domElement = _svg;\n  this.autoClear = true;\n  this.sortObjects = true;\n  this.sortElements = true;\n  this.overdraw = 0.5;\n  this.info = {\n    render: {\n      vertices: 0,\n      faces: 0\n    }\n  };\n\n  this.setQuality = function (quality) {\n    switch (quality) {\n      case 'high':\n        _quality = 1;\n        break;\n\n      case 'low':\n        _quality = 0;\n        break;\n    }\n  };\n\n  this.setClearColor = function (color) {\n    _clearColor.set(color);\n  };\n\n  this.setPixelRatio = function () {};\n\n  this.setSize = function (width, height) {\n    _svgWidth = width;\n    _svgHeight = height;\n    _svgWidthHalf = _svgWidth / 2;\n    _svgHeightHalf = _svgHeight / 2;\n\n    _svg.setAttribute('viewBox', -_svgWidthHalf + ' ' + -_svgHeightHalf + ' ' + _svgWidth + ' ' + _svgHeight);\n\n    _svg.setAttribute('width', _svgWidth);\n\n    _svg.setAttribute('height', _svgHeight);\n\n    _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\n\n    _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\n  };\n\n  this.getSize = function () {\n    return {\n      width: _svgWidth,\n      height: _svgHeight\n    };\n  };\n\n  this.setPrecision = function (precision) {\n    _precision = precision;\n  };\n\n  function removeChildNodes() {\n    _pathCount = 0;\n\n    while (_svg.childNodes.length > 0) {\n      _svg.removeChild(_svg.childNodes[0]);\n    }\n  }\n\n  function convert(c) {\n    return _precision !== null ? c.toFixed(_precision) : c;\n  }\n\n  this.clear = function () {\n    removeChildNodes();\n    _svg.style.backgroundColor = _clearColor.getStyle();\n  };\n\n  this.render = function (scene, camera) {\n    if (camera instanceof _three.Camera === false) {\n      console.error('THREE.SVGRenderer.render: camera is not an instance of Camera.');\n      return;\n    }\n\n    var background = scene.background;\n\n    if (background && background.isColor) {\n      removeChildNodes();\n      _svg.style.backgroundColor = background.getStyle();\n    } else if (this.autoClear === true) {\n      this.clear();\n    }\n\n    _this.info.render.vertices = 0;\n    _this.info.render.faces = 0;\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n    _elements = _renderData.elements;\n    _lights = _renderData.lights;\n\n    _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\n    calculateLights(_lights); // reset accumulated path\n\n    _currentPath = '';\n    _currentStyle = '';\n\n    for (var e = 0, el = _elements.length; e < el; e++) {\n      var element = _elements[e];\n      var material = element.material;\n      if (material === undefined || material.opacity === 0) continue;\n\n      _elemBox.makeEmpty();\n\n      if (element instanceof _Projector.RenderableSprite) {\n        _v1 = element;\n        _v1.x *= _svgWidthHalf;\n        _v1.y *= -_svgHeightHalf;\n        renderSprite(_v1, element, material);\n      } else if (element instanceof _Projector.RenderableLine) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderLine(_v1, _v2, element, material);\n        }\n      } else if (element instanceof _Projector.RenderableFace) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v3 = element.v3;\n        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n        _v3.positionScreen.x *= _svgWidthHalf;\n        _v3.positionScreen.y *= -_svgHeightHalf;\n\n        if (this.overdraw > 0) {\n          expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\n          expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\n          expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\n        }\n\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderFace3(_v1, _v2, _v3, element, material);\n        }\n      }\n    }\n\n    flushPath(); // just to flush last svg:path\n\n    scene.traverseVisible(function (object) {\n      if (object instanceof SVGObject) {\n        _vector3.setFromMatrixPosition(object.matrixWorld);\n\n        _vector3.applyMatrix4(_viewProjectionMatrix);\n\n        if (_vector3.z < -1 || _vector3.z > 1) return;\n        var x = _vector3.x * _svgWidthHalf;\n        var y = -_vector3.y * _svgHeightHalf;\n        var node = object.node;\n        node.setAttribute('transform', 'translate(' + x + ',' + y + ')');\n\n        _svg.appendChild(node);\n      }\n    });\n  };\n\n  function calculateLights(lights) {\n    _ambientLight.setRGB(0, 0, 0);\n\n    _directionalLights.setRGB(0, 0, 0);\n\n    _pointLights.setRGB(0, 0, 0);\n\n    for (var l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n\n      if (light.isAmbientLight) {\n        _ambientLight.r += lightColor.r;\n        _ambientLight.g += lightColor.g;\n        _ambientLight.b += lightColor.b;\n      } else if (light.isDirectionalLight) {\n        _directionalLights.r += lightColor.r;\n        _directionalLights.g += lightColor.g;\n        _directionalLights.b += lightColor.b;\n      } else if (light.isPointLight) {\n        _pointLights.r += lightColor.r;\n        _pointLights.g += lightColor.g;\n        _pointLights.b += lightColor.b;\n      }\n    }\n  }\n\n  function calculateLight(lights, position, normal, color) {\n    for (var l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n\n      if (light.isDirectionalLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\n        var amount = normal.dot(lightPosition);\n        if (amount <= 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      } else if (light.isPointLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\n        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n        if (amount <= 0) continue;\n        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n        if (amount == 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      }\n    }\n  }\n\n  function renderSprite(v1, element, material) {\n    var scaleX = element.scale.x * _svgWidthHalf;\n    var scaleY = element.scale.y * _svgHeightHalf;\n\n    if (material.isPointsMaterial) {\n      scaleX *= material.size;\n      scaleY *= material.size;\n    }\n\n    var path = 'M' + convert(v1.x - scaleX * 0.5) + ',' + convert(v1.y - scaleY * 0.5) + 'h' + convert(scaleX) + 'v' + convert(scaleY) + 'h' + convert(-scaleX) + 'z';\n    var style = '';\n\n    if (material.isSpriteMaterial || material.isPointsMaterial) {\n      style = 'fill:' + material.color.getStyle() + ';fill-opacity:' + material.opacity;\n    }\n\n    addPath(style, path);\n  }\n\n  function renderLine(v1, v2, element, material) {\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y);\n\n    if (material.isLineBasicMaterial) {\n      var style = 'fill:none;stroke:' + material.color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.linewidth + ';stroke-linecap:' + material.linecap;\n\n      if (material.isLineDashedMaterial) {\n        style = style + ';stroke-dasharray:' + material.dashSize + ',' + material.gapSize;\n      }\n\n      addPath(style, path);\n    }\n  }\n\n  function renderFace3(v1, v2, v3, element, material) {\n    _this.info.render.vertices += 3;\n    _this.info.render.faces++;\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y) + 'L' + convert(v3.positionScreen.x) + ',' + convert(v3.positionScreen.y) + 'z';\n    var style = '';\n\n    if (material.isMeshBasicMaterial) {\n      _color.copy(material.color);\n\n      if (material.vertexColors) {\n        _color.multiply(element.color);\n      }\n    } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\n      _diffuseColor.copy(material.color);\n\n      if (material.vertexColors) {\n        _diffuseColor.multiply(element.color);\n      }\n\n      _color.copy(_ambientLight);\n\n      _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\n      calculateLight(_lights, _centroid, element.normalModel, _color);\n\n      _color.multiply(_diffuseColor).add(material.emissive);\n    } else if (material.isMeshNormalMaterial) {\n      _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\n\n      _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n    }\n\n    if (material.wireframe) {\n      style = 'fill:none;stroke:' + _color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.wireframeLinewidth + ';stroke-linecap:' + material.wireframeLinecap + ';stroke-linejoin:' + material.wireframeLinejoin;\n    } else {\n      style = 'fill:' + _color.getStyle() + ';fill-opacity:' + material.opacity;\n    }\n\n    addPath(style, path);\n  } // Hide anti-alias gaps\n\n\n  function expand(v1, v2, pixels) {\n    var x = v2.x - v1.x,\n        y = v2.y - v1.y,\n        det = x * x + y * y,\n        idet;\n    if (det === 0) return;\n    idet = pixels / Math.sqrt(det);\n    x *= idet;\n    y *= idet;\n    v2.x += x;\n    v2.y += y;\n    v1.x -= x;\n    v1.y -= y;\n  }\n\n  function addPath(style, path) {\n    if (_currentStyle === style) {\n      _currentPath += path;\n    } else {\n      flushPath();\n      _currentStyle = style;\n      _currentPath = path;\n    }\n  }\n\n  function flushPath() {\n    if (_currentPath) {\n      _svgNode = getPathNode(_pathCount++);\n\n      _svgNode.setAttribute('d', _currentPath);\n\n      _svgNode.setAttribute('style', _currentStyle);\n\n      _svg.appendChild(_svgNode);\n    }\n\n    _currentPath = '';\n    _currentStyle = '';\n  }\n\n  function getPathNode(id) {\n    if (_svgPathPool[id] == null) {\n      _svgPathPool[id] = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n      if (_quality == 0) {\n        _svgPathPool[id].setAttribute('shape-rendering', 'crispEdges'); //optimizeSpeed\n\n      }\n\n      return _svgPathPool[id];\n    }\n\n    return _svgPathPool[id];\n  }\n};\n\nexports.SVGRenderer = SVGRenderer;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$three$build$three_module","~$shadow.js","~$module$node_modules$three_stdlib$renderers$Projector"]],"~:properties",["^5",["backgroundColor","sortObjects","setPrecision","width","sortElements","prototype","height","setClearColor","SVGRenderer","x","__esModule","info","setQuality","SVGObject","value","vertices","faces","autoClear","setPixelRatio","b","render","r","y","setSize","g","clear","getSize","node","domElement","overdraw","constructor"]],"~:compiled-at",1630917515160,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$three_stdlib$renderers$SVGRenderer.js\",\n\"lineCount\":19,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/three-stdlib/renderers/SVGRenderer.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$three_stdlib$renderers$SVGRenderer\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.SVGRenderer = exports.SVGObject = void 0;\\n\\nvar _three = require(\\\"three\\\");\\n\\nvar _Projector = require(\\\"./Projector.js\\\");\\n\\nvar SVGObject = function SVGObject(node) {\\n  _three.Object3D.call(this);\\n\\n  this.node = node;\\n};\\n\\nexports.SVGObject = SVGObject;\\nSVGObject.prototype = Object.create(_three.Object3D.prototype);\\nSVGObject.prototype.constructor = SVGObject;\\n\\nvar SVGRenderer = function SVGRenderer() {\\n  var _this = this,\\n      _renderData,\\n      _elements,\\n      _lights,\\n      _projector = new _Projector.Projector(),\\n      _svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),\\n      _svgWidth,\\n      _svgHeight,\\n      _svgWidthHalf,\\n      _svgHeightHalf,\\n      _v1,\\n      _v2,\\n      _v3,\\n      _clipBox = new _three.Box2(),\\n      _elemBox = new _three.Box2(),\\n      _color = new _three.Color(),\\n      _diffuseColor = new _three.Color(),\\n      _ambientLight = new _three.Color(),\\n      _directionalLights = new _three.Color(),\\n      _pointLights = new _three.Color(),\\n      _clearColor = new _three.Color(),\\n      _vector3 = new _three.Vector3(),\\n      // Needed for PointLight\\n  _centroid = new _three.Vector3(),\\n      _normal = new _three.Vector3(),\\n      _normalViewMatrix = new _three.Matrix3(),\\n      _viewMatrix = new _three.Matrix4(),\\n      _viewProjectionMatrix = new _three.Matrix4(),\\n      _svgPathPool = [],\\n      _svgNode,\\n      _pathCount = 0,\\n      _currentPath,\\n      _currentStyle,\\n      _quality = 1,\\n      _precision = null;\\n\\n  this.domElement = _svg;\\n  this.autoClear = true;\\n  this.sortObjects = true;\\n  this.sortElements = true;\\n  this.overdraw = 0.5;\\n  this.info = {\\n    render: {\\n      vertices: 0,\\n      faces: 0\\n    }\\n  };\\n\\n  this.setQuality = function (quality) {\\n    switch (quality) {\\n      case 'high':\\n        _quality = 1;\\n        break;\\n\\n      case 'low':\\n        _quality = 0;\\n        break;\\n    }\\n  };\\n\\n  this.setClearColor = function (color) {\\n    _clearColor.set(color);\\n  };\\n\\n  this.setPixelRatio = function () {};\\n\\n  this.setSize = function (width, height) {\\n    _svgWidth = width;\\n    _svgHeight = height;\\n    _svgWidthHalf = _svgWidth / 2;\\n    _svgHeightHalf = _svgHeight / 2;\\n\\n    _svg.setAttribute('viewBox', -_svgWidthHalf + ' ' + -_svgHeightHalf + ' ' + _svgWidth + ' ' + _svgHeight);\\n\\n    _svg.setAttribute('width', _svgWidth);\\n\\n    _svg.setAttribute('height', _svgHeight);\\n\\n    _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\\n\\n    _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\\n  };\\n\\n  this.getSize = function () {\\n    return {\\n      width: _svgWidth,\\n      height: _svgHeight\\n    };\\n  };\\n\\n  this.setPrecision = function (precision) {\\n    _precision = precision;\\n  };\\n\\n  function removeChildNodes() {\\n    _pathCount = 0;\\n\\n    while (_svg.childNodes.length > 0) {\\n      _svg.removeChild(_svg.childNodes[0]);\\n    }\\n  }\\n\\n  function convert(c) {\\n    return _precision !== null ? c.toFixed(_precision) : c;\\n  }\\n\\n  this.clear = function () {\\n    removeChildNodes();\\n    _svg.style.backgroundColor = _clearColor.getStyle();\\n  };\\n\\n  this.render = function (scene, camera) {\\n    if (camera instanceof _three.Camera === false) {\\n      console.error('THREE.SVGRenderer.render: camera is not an instance of Camera.');\\n      return;\\n    }\\n\\n    var background = scene.background;\\n\\n    if (background && background.isColor) {\\n      removeChildNodes();\\n      _svg.style.backgroundColor = background.getStyle();\\n    } else if (this.autoClear === true) {\\n      this.clear();\\n    }\\n\\n    _this.info.render.vertices = 0;\\n    _this.info.render.faces = 0;\\n\\n    _viewMatrix.copy(camera.matrixWorldInverse);\\n\\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\\n\\n    _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\\n    _elements = _renderData.elements;\\n    _lights = _renderData.lights;\\n\\n    _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\\n\\n    calculateLights(_lights); // reset accumulated path\\n\\n    _currentPath = '';\\n    _currentStyle = '';\\n\\n    for (var e = 0, el = _elements.length; e < el; e++) {\\n      var element = _elements[e];\\n      var material = element.material;\\n      if (material === undefined || material.opacity === 0) continue;\\n\\n      _elemBox.makeEmpty();\\n\\n      if (element instanceof _Projector.RenderableSprite) {\\n        _v1 = element;\\n        _v1.x *= _svgWidthHalf;\\n        _v1.y *= -_svgHeightHalf;\\n        renderSprite(_v1, element, material);\\n      } else if (element instanceof _Projector.RenderableLine) {\\n        _v1 = element.v1;\\n        _v2 = element.v2;\\n        _v1.positionScreen.x *= _svgWidthHalf;\\n        _v1.positionScreen.y *= -_svgHeightHalf;\\n        _v2.positionScreen.x *= _svgWidthHalf;\\n        _v2.positionScreen.y *= -_svgHeightHalf;\\n\\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\\n\\n        if (_clipBox.intersectsBox(_elemBox) === true) {\\n          renderLine(_v1, _v2, element, material);\\n        }\\n      } else if (element instanceof _Projector.RenderableFace) {\\n        _v1 = element.v1;\\n        _v2 = element.v2;\\n        _v3 = element.v3;\\n        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\\n        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\\n        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\\n        _v1.positionScreen.x *= _svgWidthHalf;\\n        _v1.positionScreen.y *= -_svgHeightHalf;\\n        _v2.positionScreen.x *= _svgWidthHalf;\\n        _v2.positionScreen.y *= -_svgHeightHalf;\\n        _v3.positionScreen.x *= _svgWidthHalf;\\n        _v3.positionScreen.y *= -_svgHeightHalf;\\n\\n        if (this.overdraw > 0) {\\n          expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\\n          expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\\n          expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\\n        }\\n\\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\\n\\n        if (_clipBox.intersectsBox(_elemBox) === true) {\\n          renderFace3(_v1, _v2, _v3, element, material);\\n        }\\n      }\\n    }\\n\\n    flushPath(); // just to flush last svg:path\\n\\n    scene.traverseVisible(function (object) {\\n      if (object instanceof SVGObject) {\\n        _vector3.setFromMatrixPosition(object.matrixWorld);\\n\\n        _vector3.applyMatrix4(_viewProjectionMatrix);\\n\\n        if (_vector3.z < -1 || _vector3.z > 1) return;\\n        var x = _vector3.x * _svgWidthHalf;\\n        var y = -_vector3.y * _svgHeightHalf;\\n        var node = object.node;\\n        node.setAttribute('transform', 'translate(' + x + ',' + y + ')');\\n\\n        _svg.appendChild(node);\\n      }\\n    });\\n  };\\n\\n  function calculateLights(lights) {\\n    _ambientLight.setRGB(0, 0, 0);\\n\\n    _directionalLights.setRGB(0, 0, 0);\\n\\n    _pointLights.setRGB(0, 0, 0);\\n\\n    for (var l = 0, ll = lights.length; l < ll; l++) {\\n      var light = lights[l];\\n      var lightColor = light.color;\\n\\n      if (light.isAmbientLight) {\\n        _ambientLight.r += lightColor.r;\\n        _ambientLight.g += lightColor.g;\\n        _ambientLight.b += lightColor.b;\\n      } else if (light.isDirectionalLight) {\\n        _directionalLights.r += lightColor.r;\\n        _directionalLights.g += lightColor.g;\\n        _directionalLights.b += lightColor.b;\\n      } else if (light.isPointLight) {\\n        _pointLights.r += lightColor.r;\\n        _pointLights.g += lightColor.g;\\n        _pointLights.b += lightColor.b;\\n      }\\n    }\\n  }\\n\\n  function calculateLight(lights, position, normal, color) {\\n    for (var l = 0, ll = lights.length; l < ll; l++) {\\n      var light = lights[l];\\n      var lightColor = light.color;\\n\\n      if (light.isDirectionalLight) {\\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\\n\\n        var amount = normal.dot(lightPosition);\\n        if (amount <= 0) continue;\\n        amount *= light.intensity;\\n        color.r += lightColor.r * amount;\\n        color.g += lightColor.g * amount;\\n        color.b += lightColor.b * amount;\\n      } else if (light.isPointLight) {\\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\\n\\n        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\\n        if (amount <= 0) continue;\\n        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\\n        if (amount == 0) continue;\\n        amount *= light.intensity;\\n        color.r += lightColor.r * amount;\\n        color.g += lightColor.g * amount;\\n        color.b += lightColor.b * amount;\\n      }\\n    }\\n  }\\n\\n  function renderSprite(v1, element, material) {\\n    var scaleX = element.scale.x * _svgWidthHalf;\\n    var scaleY = element.scale.y * _svgHeightHalf;\\n\\n    if (material.isPointsMaterial) {\\n      scaleX *= material.size;\\n      scaleY *= material.size;\\n    }\\n\\n    var path = 'M' + convert(v1.x - scaleX * 0.5) + ',' + convert(v1.y - scaleY * 0.5) + 'h' + convert(scaleX) + 'v' + convert(scaleY) + 'h' + convert(-scaleX) + 'z';\\n    var style = '';\\n\\n    if (material.isSpriteMaterial || material.isPointsMaterial) {\\n      style = 'fill:' + material.color.getStyle() + ';fill-opacity:' + material.opacity;\\n    }\\n\\n    addPath(style, path);\\n  }\\n\\n  function renderLine(v1, v2, element, material) {\\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y);\\n\\n    if (material.isLineBasicMaterial) {\\n      var style = 'fill:none;stroke:' + material.color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.linewidth + ';stroke-linecap:' + material.linecap;\\n\\n      if (material.isLineDashedMaterial) {\\n        style = style + ';stroke-dasharray:' + material.dashSize + ',' + material.gapSize;\\n      }\\n\\n      addPath(style, path);\\n    }\\n  }\\n\\n  function renderFace3(v1, v2, v3, element, material) {\\n    _this.info.render.vertices += 3;\\n    _this.info.render.faces++;\\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y) + 'L' + convert(v3.positionScreen.x) + ',' + convert(v3.positionScreen.y) + 'z';\\n    var style = '';\\n\\n    if (material.isMeshBasicMaterial) {\\n      _color.copy(material.color);\\n\\n      if (material.vertexColors) {\\n        _color.multiply(element.color);\\n      }\\n    } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\\n      _diffuseColor.copy(material.color);\\n\\n      if (material.vertexColors) {\\n        _diffuseColor.multiply(element.color);\\n      }\\n\\n      _color.copy(_ambientLight);\\n\\n      _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\\n\\n      calculateLight(_lights, _centroid, element.normalModel, _color);\\n\\n      _color.multiply(_diffuseColor).add(material.emissive);\\n    } else if (material.isMeshNormalMaterial) {\\n      _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\\n\\n      _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\\n    }\\n\\n    if (material.wireframe) {\\n      style = 'fill:none;stroke:' + _color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.wireframeLinewidth + ';stroke-linecap:' + material.wireframeLinecap + ';stroke-linejoin:' + material.wireframeLinejoin;\\n    } else {\\n      style = 'fill:' + _color.getStyle() + ';fill-opacity:' + material.opacity;\\n    }\\n\\n    addPath(style, path);\\n  } // Hide anti-alias gaps\\n\\n\\n  function expand(v1, v2, pixels) {\\n    var x = v2.x - v1.x,\\n        y = v2.y - v1.y,\\n        det = x * x + y * y,\\n        idet;\\n    if (det === 0) return;\\n    idet = pixels / Math.sqrt(det);\\n    x *= idet;\\n    y *= idet;\\n    v2.x += x;\\n    v2.y += y;\\n    v1.x -= x;\\n    v1.y -= y;\\n  }\\n\\n  function addPath(style, path) {\\n    if (_currentStyle === style) {\\n      _currentPath += path;\\n    } else {\\n      flushPath();\\n      _currentStyle = style;\\n      _currentPath = path;\\n    }\\n  }\\n\\n  function flushPath() {\\n    if (_currentPath) {\\n      _svgNode = getPathNode(_pathCount++);\\n\\n      _svgNode.setAttribute('d', _currentPath);\\n\\n      _svgNode.setAttribute('style', _currentStyle);\\n\\n      _svg.appendChild(_svgNode);\\n    }\\n\\n    _currentPath = '';\\n    _currentStyle = '';\\n  }\\n\\n  function getPathNode(id) {\\n    if (_svgPathPool[id] == null) {\\n      _svgPathPool[id] = document.createElementNS('http://www.w3.org/2000/svg', 'path');\\n\\n      if (_quality == 0) {\\n        _svgPathPool[id].setAttribute('shape-rendering', 'crispEdges'); //optimizeSpeed\\n\\n      }\\n\\n      return _svgPathPool[id];\\n    }\\n\\n    return _svgPathPool[id];\\n  }\\n};\\n\\nexports.SVGRenderer = SVGRenderer;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"SVGRenderer\",\"SVGObject\",\"_three\",\"_Projector\",\"node\",\"Object3D\",\"call\",\"prototype\",\"create\",\"constructor\",\"removeChildNodes\",\"_pathCount\",\"_svg\",\"childNodes\",\"length\",\"removeChild\",\"convert\",\"c\",\"_precision\",\"toFixed\",\"calculateLights\",\"lights\",\"_ambientLight\",\"setRGB\",\"_directionalLights\",\"_pointLights\",\"l\",\"ll\",\"light\",\"lightColor\",\"color\",\"isAmbientLight\",\"r\",\"g\",\"b\",\"isDirectionalLight\",\"isPointLight\",\"renderSprite\",\"v1\",\"element\",\"material\",\"scaleX\",\"scale\",\"x\",\"_svgWidthHalf\",\"scaleY\",\"y\",\"_svgHeightHalf\",\"isPointsMaterial\",\"size\",\"path\",\"style\",\"isSpriteMaterial\",\"getStyle\",\"opacity\",\"addPath\",\"renderLine\",\"v2\",\"positionScreen\",\"isLineBasicMaterial\",\"linewidth\",\"linecap\",\"isLineDashedMaterial\",\"dashSize\",\"gapSize\",\"renderFace3\",\"v3\",\"_this\",\"info\",\"render\",\"vertices\",\"faces\",\"isMeshBasicMaterial\",\"_color\",\"copy\",\"vertexColors\",\"multiply\",\"isMeshLambertMaterial\",\"isMeshPhongMaterial\",\"isMeshStandardMaterial\",\"_diffuseColor\",\"_centroid\",\"positionWorld\",\"add\",\"divideScalar\",\"_lights\",\"normalModel\",\"lightPosition\",\"_vector3\",\"setFromMatrixPosition\",\"matrixWorld\",\"normalize\",\"amount\",\"normal\",\"dot\",\"intensity\",\"subVectors\",\"position\",\"distance\",\"Math\",\"min\",\"distanceTo\",\"emissive\",\"isMeshNormalMaterial\",\"_normal\",\"applyMatrix3\",\"_normalViewMatrix\",\"z\",\"multiplyScalar\",\"addScalar\",\"wireframe\",\"wireframeLinewidth\",\"wireframeLinecap\",\"wireframeLinejoin\",\"expand\",\"pixels\",\"det\",\"sqrt\",\"idet\",\"_currentStyle\",\"_currentPath\",\"flushPath\",\"_svgPathPool\",\"id\",\"document\",\"createElementNS\",\"_quality\",\"setAttribute\",\"_svgNode\",\"appendChild\",\"_renderData\",\"_elements\",\"_projector\",\"Projector\",\"_svgWidth\",\"_svgHeight\",\"_v1\",\"_v2\",\"_v3\",\"_clipBox\",\"Box2\",\"_elemBox\",\"Color\",\"_clearColor\",\"Vector3\",\"Matrix3\",\"_viewMatrix\",\"Matrix4\",\"_viewProjectionMatrix\",\"domElement\",\"sortElements\",\"sortObjects\",\"autoClear\",\"overdraw\",\"setQuality\",\"this.setQuality\",\"quality\",\"setClearColor\",\"this.setClearColor\",\"set\",\"setPixelRatio\",\"this.setPixelRatio\",\"setSize\",\"this.setSize\",\"width\",\"height\",\"max\",\"getSize\",\"this.getSize\",\"setPrecision\",\"this.setPrecision\",\"precision\",\"clear\",\"this.clear\",\"backgroundColor\",\"this.render\",\"scene\",\"camera\",\"Camera\",\"console\",\"error\",\"background\",\"isColor\",\"matrixWorldInverse\",\"multiplyMatrices\",\"projectionMatrix\",\"projectScene\",\"elements\",\"getNormalMatrix\",\"e\",\"el\",\"undefined\",\"makeEmpty\",\"RenderableSprite\",\"RenderableLine\",\"setFromPoints\",\"intersectsBox\",\"RenderableFace\",\"traverseVisible\",\"object\",\"applyMatrix4\"]\n}\n"]