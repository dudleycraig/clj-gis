["^ ","~:output",["^ ","~:js","goog.provide('utilities.form');\nutilities.form.rules = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"word\",\"word\",-420123725),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"is-valid\",\"is-valid\",-1195643145),(function (value){\nreturn cljs.core.re_matches((utilities.regex.validation.cljs$core$IFn$_invoke$arity$1 ? utilities.regex.validation.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"word\",\"word\",-420123725)) : utilities.regex.validation.call(null,new cljs.core.Keyword(null,\"word\",\"word\",-420123725))),value);\n}),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),\"word\",new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),(new Date()),new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),\"error\",new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),\"Field requires 3 to 32 alphabetic characters.\"], null)], null),new cljs.core.Keyword(null,\"words\",\"words\",1924933001),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"is-valid\",\"is-valid\",-1195643145),(function (value){\nreturn cljs.core.re_matches((utilities.regex.validation.cljs$core$IFn$_invoke$arity$1 ? utilities.regex.validation.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"words\",\"words\",1924933001)) : utilities.regex.validation.call(null,new cljs.core.Keyword(null,\"words\",\"words\",1924933001))),value);\n}),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),\"word\",new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),(new Date()),new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),\"error\",new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),\"Field requires 3 to 32 alphabetic characters, incl space.\"], null)], null),new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"is-valid\",\"is-valid\",-1195643145),(function (value){\nreturn cljs.core.re_matches((utilities.regex.validation.cljs$core$IFn$_invoke$arity$1 ? utilities.regex.validation.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709)) : utilities.regex.validation.call(null,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))),value);\n}),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),\"paragraph\",new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),(new Date()),new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),\"error\",new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),\"Field requires 3 to 256 alpha-numeric characters, incl space and punctuation.\"], null)], null),new cljs.core.Keyword(null,\"email\",\"email\",1415816706),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"is-valid\",\"is-valid\",-1195643145),(function (value){\nreturn cljs.core.re_matches((utilities.regex.validation.cljs$core$IFn$_invoke$arity$1 ? utilities.regex.validation.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"email\",\"email\",1415816706)) : utilities.regex.validation.call(null,new cljs.core.Keyword(null,\"email\",\"email\",1415816706))),value);\n}),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),\"email\",new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),(new Date()),new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),\"error\",new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),\"Field requires a valid email address.\"], null)], null),new cljs.core.Keyword(null,\"nope\",\"nope\",430233535),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"is-valid\",\"is-valid\",-1195643145),(function (value){\nreturn cljs.core.not(cljs.core.re_matches((utilities.regex.validation.cljs$core$IFn$_invoke$arity$1 ? utilities.regex.validation.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"nope\",\"nope\",430233535)) : utilities.regex.validation.call(null,new cljs.core.Keyword(null,\"nope\",\"nope\",430233535))),value));\n}),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),\"nope\",new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),(new Date()),new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),\"error\",new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),\" ... nope.\"], null)], null),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"is-valid\",\"is-valid\",-1195643145),(function (value){\nreturn (cljs.core.count(value) > (0));\n}),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),\"required\",new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),(new Date()),new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),\"error\",new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),\"Field is Required.\"], null)], null)], null);\n/**\n * search in field {:field-name {:messages {:message-id {:id \"message-id\" :status \"status\"} ...} ...} ...}\n *   for message status \"error\"\n *   returning truthy\n */\nutilities.form.has_field_errors = (function utilities$form$has_field_errors(p__55737){\nvar map__55738 = p__55737;\nvar map__55738__$1 = cljs.core.__destructure_map(map__55738);\nvar messages = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55738__$1,new cljs.core.Keyword(null,\"messages\",\"messages\",345434482));\nif((cljs.core.count(messages) > (0))){\nreturn cljs.core.some((function (p__55739){\nvar vec__55740 = p__55739;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55740,(0),null);\nvar message = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55740,(1),null);\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((message.cljs$core$IFn$_invoke$arity$1 ? message.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"status\",\"status\",-1997798413)) : message.call(null,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413))),\"error\");\n}),messages);\n} else {\nreturn null;\n}\n});\n/**\n * search in fields {:field-name {:messages {:message-id {:status \"status\" ...}} ...}}\n *   for message status \"error\"\n *   returning truthy\n */\nutilities.form.has_form_errors = (function utilities$form$has_form_errors(fields){\nreturn cljs.core.some((function (p__55743){\nvar vec__55744 = p__55743;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55744,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55744,(1),null);\nreturn utilities.form.has_field_errors(field);\n}),fields);\n});\n/**\n * update fields {:field-name {:name \"field-name\" :value \"current-field-value\" ...}}\n *   from data {:field-name \"updated-field-value\" ...}\n *   returning {:field-name {:name \"field-name\" :value \"updated-field-value\" ...}}\n */\nutilities.form.set_field_data = (function utilities$form$set_field_data(fields,data){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (accumulator,p__55747){\nvar vec__55748 = p__55747;\nvar field_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55748,(0),null);\nvar field_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55748,(1),null);\nreturn cljs.core.assoc_in(accumulator,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(field_key),new cljs.core.Keyword(null,\"value\",\"value\",305978217)], null),field_value);\n}),fields,data);\n});\n/**\n * get in fields {:field-name {:name \"field-name\" :value \"field-value\" ...} ...}\n *   returning {:field-name \"field-value\" ...}\n */\nutilities.form.get_field_data = (function utilities$form$get_field_data(fields){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (data,p__55751){\nvar vec__55752 = p__55751;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55752,(0),null);\nvar map__55755 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55752,(1),null);\nvar map__55755__$1 = cljs.core.__destructure_map(map__55755);\nvar name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55755__$1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177));\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55755__$1,new cljs.core.Keyword(null,\"value\",\"value\",305978217));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(data,cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(name),value);\n}),cljs.core.PersistentArrayMap.EMPTY,fields);\n});\n/**\n * test from rule {:is-valid (fn [\"field-value\"] (test \"field-value\")) :message {:id \"rule-id\" :date [js/Date] ...} ...}\n *   on value \"field-value\"\n *   adding to accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] ...} ...}\n *   returning accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] \n *                                :rule-id {:id \"rule-id\" :date [js/Date] ...} ...}}\n */\nutilities.form.validate_rule = (function utilities$form$validate_rule(p__55756,value,messages){\nvar map__55757 = p__55756;\nvar map__55757__$1 = cljs.core.__destructure_map(map__55757);\nvar is_valid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55757__$1,new cljs.core.Keyword(null,\"is-valid\",\"is-valid\",-1195643145));\nvar message = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55757__$1,new cljs.core.Keyword(null,\"message\",\"message\",-406056002));\nif(cljs.core.not((is_valid.cljs$core$IFn$_invoke$arity$1 ? is_valid.cljs$core$IFn$_invoke$arity$1(value) : is_valid.call(null,value)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(messages,cljs.core.keyword.cljs$core$IFn$_invoke$arity$1((message.cljs$core$IFn$_invoke$arity$1 ? message.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"id\",\"id\",-1388402092)) : message.call(null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092)))),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([message,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),(new Date())], null)], 0)));\n} else {\nreturn messages;\n}\n});\n/**\n * test from rules {:rule-id {:is-valid (fn [\"field-value\"] (test \"field-value\")) :message {:id \"rule-id\" :date [js/Date] ...} ...}}\n *   on value \"field-value\"\n *   adding to accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] ...} ...}\n *   returning accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] \n *                                :rule-id {:id \"rule-id\" :date [js/Date] ...} ...}}\n */\nutilities.form.validate_field = (function utilities$form$validate_field(var_args){\nvar G__55759 = arguments.length;\nswitch (G__55759) {\ncase 2:\nreturn utilities.form.validate_field.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn utilities.form.validate_field.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(utilities.form.validate_field.cljs$core$IFn$_invoke$arity$2 = (function (field,value){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (messages,rule){\nreturn utilities.form.validate_rule(rule,value,messages);\n}),cljs.core.PersistentArrayMap.EMPTY,(field.cljs$core$IFn$_invoke$arity$1 ? field.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"rules\",\"rules\",1198912366)) : field.call(null,new cljs.core.Keyword(null,\"rules\",\"rules\",1198912366))));\n}));\n\n(utilities.form.validate_field.cljs$core$IFn$_invoke$arity$3 = (function (field,value,event){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (messages,rule){\nif(cljs.core.truth_(cljs.core.some((function (rule_event){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(rule_event,event);\n}),(field.cljs$core$IFn$_invoke$arity$1 ? field.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"events\",\"events\",1792552201)) : field.call(null,new cljs.core.Keyword(null,\"events\",\"events\",1792552201)))))){\nreturn utilities.form.validate_rule(rule,value,messages);\n} else {\nreturn messages;\n}\n}),cljs.core.PersistentArrayMap.EMPTY,(field.cljs$core$IFn$_invoke$arity$1 ? field.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"rules\",\"rules\",1198912366)) : field.call(null,new cljs.core.Keyword(null,\"rules\",\"rules\",1198912366))));\n}));\n\n(utilities.form.validate_field.cljs$lang$maxFixedArity = 3);\n\n/**\n * test all fields\n *   {:field-name \n * {:name \"field-name\" \n *  :value \"field-value\" \n *  :rules {:rule-id {:is-valid (fn [\"field-value\"] (test \"field-value\")) :message {:id \"rule-id\" ...} ...} ...}\n *  :messages {} \n *  ...}\n *   ...}\n *   returning fields with updated field messages\n */\nutilities.form.validate_form = (function utilities$form$validate_form(fields){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (accumulator,p__55760){\nvar vec__55761 = p__55760;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55761,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55761,(1),null);\nvar messages = utilities.form.validate_field.cljs$core$IFn$_invoke$arity$2(field,(field.cljs$core$IFn$_invoke$arity$1 ? field.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"value\",\"value\",305978217)) : field.call(null,new cljs.core.Keyword(null,\"value\",\"value\",305978217))));\nvar status = (cljs.core.truth_(utilities.form.has_field_errors(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"messages\",\"messages\",345434482),messages], null)))?\"error\":\"inert\");\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(accumulator,cljs.core.keyword.cljs$core$IFn$_invoke$arity$1((field.cljs$core$IFn$_invoke$arity$1 ? field.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"name\",\"name\",1843675177)) : field.call(null,new cljs.core.Keyword(null,\"name\",\"name\",1843675177)))),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([field,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"messages\",\"messages\",345434482),messages,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),status], null)], 0)));\n}),cljs.core.PersistentArrayMap.EMPTY,fields);\n});\n/**\n * set and validate field {:name \"field-name\" :value \"field-value\" :messages {} :status \"field-status\" ...}\n *   from event js/Event\n *   returning updated field\n */\nutilities.form.get_field_for_event = (function utilities$form$get_field_for_event(field,event){\nvar value = event.target.value;\nvar event_type = event.type;\nvar messages = utilities.form.validate_field.cljs$core$IFn$_invoke$arity$3(field,value,event_type);\nvar status = (cljs.core.truth_(utilities.form.has_field_errors(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"messages\",\"messages\",345434482),messages], null)))?\"error\":\"inert\");\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([field,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),value,new cljs.core.Keyword(null,\"messages\",\"messages\",345434482),messages,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),status], null)], 0));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","utilities/form.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$utilities.form","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$utilities.regex","^O","~$regex","^O","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^Q","^Q"],"~:form",["~#list",["~$ns","^J",["^X",["^T",["^O","~:as","^P"]]]]],"~:flags",["^ ","^T",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","utilities/form.cljs"],"~:compiled-at",1636103181572,"~:resource-name","utilities/form.cljs","~:warnings",[],"~:source","(ns utilities.form\n  (:require [utilities.regex :as regex]))\n\n(def rules {:word {:is-valid (fn [value] (re-matches (regex/validation :word) value))\n                   :message {:id \"word\"\n                             :date (js/Date.)\n                             :status \"error\"\n                             :text \"Field requires 3 to 32 alphabetic characters.\"}}\n\n            :words {:is-valid (fn [value] (re-matches (regex/validation :words) value)) \n                   :message {:id \"word\"\n                             :date (js/Date.)\n                             :status \"error\"\n                             :text \"Field requires 3 to 32 alphabetic characters, incl space.\"}}\n\n            :paragraph {:is-valid (fn [value] (re-matches (regex/validation :paragraph) value)) \n                   :message {:id \"paragraph\"\n                             :date (js/Date.)\n                             :status \"error\"\n                             :text \"Field requires 3 to 256 alpha-numeric characters, incl space and punctuation.\"}}\n\n            :email {:is-valid (fn [value] (re-matches (regex/validation :email) value))  \n                    :message {:id \"email\"\n                              :date (js/Date.)\n                              :status \"error\"\n                              :text \"Field requires a valid email address.\"}}\n\n            :nope {:is-valid (fn [value] (not (re-matches (regex/validation :nope) value))) ;; words I don't want\n                   :message {:id \"nope\"\n                             :date (js/Date.)\n                             :status \"error\"\n                             :text \" ... nope.\"}}\n\n            :required {:is-valid (fn [value] (> (count value) 0))\n                       :message {:id \"required\"\n                                 :date (js/Date.)\n                                 :status \"error\"\n                                 :text \"Field is Required.\"}}})\n\n(defn has-field-errors\n  \"search in field {:field-name {:messages {:message-id {:id \\\"message-id\\\" :status \\\"status\\\"} ...} ...} ...}\n  for message status \\\"error\\\"\n  returning truthy\"\n  [{:keys [messages]}]\n  (if\n   (> (count messages) 0) \n    (some\n     (fn [[_ message]]\n       (= (message :status) \"error\"))\n     messages)))\n\n(defn has-form-errors\n  \"search in fields {:field-name {:messages {:message-id {:status \\\"status\\\" ...}} ...}}\n  for message status \\\"error\\\"\n  returning truthy\"\n  [fields]\n  (some \n    (fn \n      [[_ field]] \n      (has-field-errors field)) \n    fields))\n\n(defn set-field-data\n  \"update fields {:field-name {:name \\\"field-name\\\" :value \\\"current-field-value\\\" ...}}\n  from data {:field-name \\\"updated-field-value\\\" ...}\n  returning {:field-name {:name \\\"field-name\\\" :value \\\"updated-field-value\\\" ...}}\"\n  [fields data]\n  (reduce \n    (fn \n      [accumulator [field-key field-value]] \n      (assoc-in accumulator [(keyword field-key) :value] field-value)) \n    fields \n    data))\n\n(defn get-field-data\n  \"get in fields {:field-name {:name \\\"field-name\\\" :value \\\"field-value\\\" ...} ...}\n  returning {:field-name \\\"field-value\\\" ...}\"\n  [fields]\n  (reduce\n   (fn\n     [data [_ {:keys [name value]}]]\n     (assoc data (keyword name) value))\n   {}\n   fields))\n\n(defn validate-rule\n  \"test from rule {:is-valid (fn [\\\"field-value\\\"] (test \\\"field-value\\\")) :message {:id \\\"rule-id\\\" :date [js/Date] ...} ...}\n  on value \\\"field-value\\\"\n  adding to accumulator messages {:rule-id {:id \\\"rule-id\\\" :date [js/Date] ...} ...}\n  returning accumulator messages {:rule-id {:id \\\"rule-id\\\" :date [js/Date] \n                                  :rule-id {:id \\\"rule-id\\\" :date [js/Date] ...} ...}}\"\n  [{:keys [is-valid message]} value messages]\n  (if-not \n    (is-valid value)\n    (assoc messages (keyword (message :id)) (merge message {:date (js/Date.)}))\n    messages))\n\n(defn validate-field\n  \"test from rules {:rule-id {:is-valid (fn [\\\"field-value\\\"] (test \\\"field-value\\\")) :message {:id \\\"rule-id\\\" :date [js/Date] ...} ...}}\n  on value \\\"field-value\\\"\n  adding to accumulator messages {:rule-id {:id \\\"rule-id\\\" :date [js/Date] ...} ...}\n  returning accumulator messages {:rule-id {:id \\\"rule-id\\\" :date [js/Date] \n                                  :rule-id {:id \\\"rule-id\\\" :date [js/Date] ...} ...}}\"\n  ([field value]\n   (reduce \n     (fn [messages rule] (validate-rule rule value messages)) \n     {}\n     (field :rules)))\n\n  ([field value event]\n   (reduce \n     (fn [messages rule]\n       (if \n         (some (fn [rule-event] (= rule-event event)) (field :events))\n         (validate-rule rule value messages)\n         messages)) \n     {} \n     (field :rules))))\n\n(defn validate-form \n  \"test all fields\n  {:field-name \n   {:name \\\"field-name\\\" \n    :value \\\"field-value\\\" \n    :rules {:rule-id {:is-valid (fn [\\\"field-value\\\"] (test \\\"field-value\\\")) :message {:id \\\"rule-id\\\" ...} ...} ...}\n    :messages {} \n    ...}\n  ...}\n  returning fields with updated field messages\"\n  [fields]\n  (reduce \n    (fn\n      [accumulator [_ field]] \n      (let [messages (validate-field field (field :value))\n            status (if (has-field-errors {:messages messages}) \"error\" \"inert\")]\n        (assoc \n          accumulator \n          (keyword (field :name)) \n          (merge field {:messages messages :status status}))))\n    {}\n    fields))\n\n(defn get-field-for-event\n  \"set and validate field {:name \\\"field-name\\\" :value \\\"field-value\\\" :messages {} :status \\\"field-status\\\" ...}\n  from event js/Event\n  returning updated field\"\n  [field event]\n  (let [value (-> event .-target .-value)\n        event-type (-> event .-type)\n        messages (validate-field field value event-type)\n        status (if (has-field-errors {:messages messages}) \"error\" \"inert\")]\n    (merge field {:value value :messages messages :status status})))\n\n\n\n\n\n\n\n\n\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["utilities.form/rules","value","cljs.core/re-matches","utilities.regex/validation","js/Date","cljs.core/not","cljs.core/count","p__55737","map__55738","cljs.core/--destructure-map","cljs.core.get","utilities.form/has-field-errors","messages","cljs.core/some","p__55739","vec__55740","cljs.core.nth","_","message","cljs.core._EQ_","utilities.form/has-form-errors","fields","p__55743","vec__55744","field","utilities.form/set-field-data","data","cljs.core.reduce","p__55747","vec__55748","accumulator","field-key","field-value","cljs.core/assoc-in","cljs.core.keyword","utilities.form/get-field-data","p__55751","vec__55752","map__55755","name","cljs.core.assoc","p__55756","map__55757","utilities.form/validate-rule","is-valid","cljs.core.merge","var_args","G__55759","utilities.form/validate-field","js/Error","rule","event","rule-event","utilities.form/validate-form","p__55760","vec__55761","utilities.form.validate_field","status","utilities.form/get-field-for-event","event-type"]],"~:used-vars",["^H",["~$cljs.core/--destructure-map","~$utilities.form/has-field-errors","~$cljs.core/keyword","~$cljs.core/=","~$js/Date","~$cljs.core/re-matches","~$cljs.core/count","~$cljs.core/reduce","~$utilities.form/validate-rule","~$utilities.form/validate-form","~$utilities.form/rules","~$utilities.regex/validation","~$cljs.core/get","~$utilities.form/has-form-errors","~$cljs.core/nth","~$cljs.core/not","~$utilities.form/get-field-for-event","~$cljs.core/assoc","~$cljs.core/assoc-in","~$utilities.form/get-field-data","~$utilities.form/set-field-data","~$cljs.core/merge","~$js/Error","~$cljs.core/some","~$utilities.form/validate-field"]]],"~:cache-keys",["~#cmap",[["^13","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^R","~$goog.dom.HtmlElement"]]],["^13","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","~$goog.array","~$goog.asserts"]]],["^13","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^23","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^13","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^24","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^27"]]],["^13","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^24"]]],["^13","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^24"]]],"~:SHADOW-TIMESTAMP",[1630418006000,1630418006000,1627026917000],["^13","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^24","~$goog.reflect"]]],["^13","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^24","~$goog.fs.blob","^28","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2:","^2;","^2<","^2="]]],["^13","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","utilities/form.cljs"],["db761dac76b29f572eaa886110f3d62fb5d402b6","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^Q","^O"]]],["^13","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^23","^24","~$goog.html.SafeUrl","^2<","^2=","^27"]]],["^13","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^24","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2A","~$goog.html.SafeStyle","^2C","^29","~$goog.html.uncheckedconversions","^2<","^27"]]],["^13","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^13","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^23","^24","~$goog.dom.TagName","~$goog.dom.tags","^2A","^2G","~$goog.html.SafeStyleSheet","^2C","^29","^2B","^2:","^2;","~$goog.labs.userAgent.browser","^26","^2<","^2=","^27"]]],["^13","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^26"]]],["^13","utilities/regex.cljs"],["aa4c51285bad0a88042518e7272495f0aa57ab62","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^Q"]]],["^13","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^23"]]],["^13","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^13","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^23","^24","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^13","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",[]]],["^13","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^23","^26"]]],["^13","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","~$goog.dom.safe","^2H","^2<","^27"]]],["^13","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^27"]]],["^13","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^23","^24","^2E","~$goog.math"]]],["^13","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^24","^2F","^2A","^2G","^2M","^2C","^29","^2<","^27","^2:"]]],["^13","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R"]]],["^13","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","~$goog.math.Long","~$goog.math.Integer","^2Q","^26","^23","~$goog.Uri","~$goog.string.StringBuffer"]]],["^13","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^2<","^2=","^2B","^24"]]],["^13","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^2<","^2G","^2=","^23","^26","^24","^27"]]],["^13","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^2?"]]],["^13","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^24","^2Q"]]],["^13","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1Z",["^ ","^1[",null,"^20",["^H",[]],"^21",["^R","^24","^2="]]]]],"~:clj-info",["^ ","jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1627026915000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","utilities/form.cljs","^7",1,"^8",5,"^9",1,"^:",19],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^R"],"^S",["^H",["^T"]],"~:shadow/js-access-global",["^H",["Date","Error"]],"^U",null,"~:defs",["^ ","~$set-field-data",["^ ","~:protocol-inline",null,"^5",["^ ","^6","utilities/form.cljs","^7",63,"^8",7,"^9",63,"^:",21,"~:arglists",["^X",["~$quote",["^X",[["~$fields","~$data"]]]]],"~:doc","update fields {:field-name {:name \"field-name\" :value \"current-field-value\" ...}}\n  from data {:field-name \"updated-field-value\" ...}\n  returning {:field-name {:name \"field-name\" :value \"updated-field-value\" ...}}"],"^I","^1S","^6","utilities/form.cljs","^:",21,"~:method-params",["^X",[["^3U","^3V"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^8",1,"~:variadic?",false,"^7",63,"~:ret-tag",["^H",[null,"~$any"]],"^9",63,"~:max-fixed-arity",2,"~:fn-var",true,"^3S",["^X",["^3T",["^X",[["^3U","^3V"]]]]],"^3W","update fields {:field-name {:name \"field-name\" :value \"current-field-value\" ...}}\n  from data {:field-name \"updated-field-value\" ...}\n  returning {:field-name {:name \"field-name\" :value \"updated-field-value\" ...}}"],"~$has-field-errors",["^ ","^3R",null,"^5",["^ ","^6","utilities/form.cljs","^7",40,"^8",7,"^9",40,"^:",23,"^3S",["^X",["^3T",["^X",[[["^ ","~:keys",["~$messages"]]]]]]],"^3W","search in field {:field-name {:messages {:message-id {:id \"message-id\" :status \"status\"} ...} ...} ...}\n  for message status \"error\"\n  returning truthy"],"^I","^1@","^6","utilities/form.cljs","^:",23,"^3X",["^X",[["~$p__55737"]]],"^3Y",null,"^3Z",["^X",[null,null]],"^8",1,"^3[",false,"^7",40,"^40",["^H",["^41","~$clj-nil"]],"^9",40,"^42",1,"^43",true,"^3S",["^X",["^3T",["^X",[[["^ ","^45",["^46"]]]]]]],"^3W","search in field {:field-name {:messages {:message-id {:id \"message-id\" :status \"status\"} ...} ...} ...}\n  for message status \"error\"\n  returning truthy"],"~$has-form-errors",["^ ","^3R",null,"^5",["^ ","^6","utilities/form.cljs","^7",52,"^8",7,"^9",52,"^:",22,"^3S",["^X",["^3T",["^X",[["^3U"]]]]],"^3W","search in fields {:field-name {:messages {:message-id {:status \"status\" ...}} ...}}\n  for message status \"error\"\n  returning truthy"],"^I","^1L","^6","utilities/form.cljs","^:",22,"^3X",["^X",[["^3U"]]],"^3Y",null,"^3Z",["^X",[null,null]],"^8",1,"^3[",false,"^7",52,"^40",["^H",["^41","^48"]],"^9",52,"^42",1,"^43",true,"^3S",["^X",["^3T",["^X",[["^3U"]]]]],"^3W","search in fields {:field-name {:messages {:message-id {:status \"status\" ...}} ...}}\n  for message status \"error\"\n  returning truthy"],"~$get-field-for-event",["^ ","^3R",null,"^5",["^ ","^6","utilities/form.cljs","^7",143,"^8",7,"^9",143,"^:",26,"^3S",["^X",["^3T",["^X",[["~$field","~$event"]]]]],"^3W","set and validate field {:name \"field-name\" :value \"field-value\" :messages {} :status \"field-status\" ...}\n  from event js/Event\n  returning updated field"],"^I","^1O","^6","utilities/form.cljs","^:",26,"^3X",["^X",[["^4;","^4<"]]],"^3Y",null,"^3Z",["^X",[null,null]],"^8",1,"^3[",false,"^7",143,"^40",["^H",["^41","^48"]],"^9",143,"^42",2,"^43",true,"^3S",["^X",["^3T",["^X",[["^4;","^4<"]]]]],"^3W","set and validate field {:name \"field-name\" :value \"field-value\" :messages {} :status \"field-status\" ...}\n  from event js/Event\n  returning updated field"],"~$get-field-data",["^ ","^3R",null,"^5",["^ ","^6","utilities/form.cljs","^7",75,"^8",7,"^9",75,"^:",21,"^3S",["^X",["^3T",["^X",[["^3U"]]]]],"^3W","get in fields {:field-name {:name \"field-name\" :value \"field-value\" ...} ...}\n  returning {:field-name \"field-value\" ...}"],"^I","^1R","^6","utilities/form.cljs","^:",21,"^3X",["^X",[["^3U"]]],"^3Y",null,"^3Z",["^X",[null,null]],"^8",1,"^3[",false,"^7",75,"^40",["^H",[null,"^41"]],"^9",75,"^42",1,"^43",true,"^3S",["^X",["^3T",["^X",[["^3U"]]]]],"^3W","get in fields {:field-name {:name \"field-name\" :value \"field-value\" ...} ...}\n  returning {:field-name \"field-value\" ...}"],"~$validate-rule",["^ ","^3R",null,"^5",["^ ","^6","utilities/form.cljs","^7",86,"^8",7,"^9",86,"^:",20,"^3S",["^X",["^3T",["^X",[[["^ ","^45",["~$is-valid","~$message"]],"~$value","^46"]]]]],"^3W","test from rule {:is-valid (fn [\"field-value\"] (test \"field-value\")) :message {:id \"rule-id\" :date [js/Date] ...} ...}\n  on value \"field-value\"\n  adding to accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] ...} ...}\n  returning accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] \n                                  :rule-id {:id \"rule-id\" :date [js/Date] ...} ...}}"],"^I","^1G","^6","utilities/form.cljs","^:",20,"^3X",["^X",[["~$p__55756","^4A","^46"]]],"^3Y",null,"^3Z",["^X",[null,null]],"^8",1,"^3[",false,"^7",86,"^40",["^H",[null,"~$clj","^41"]],"^9",86,"^42",3,"^43",true,"^3S",["^X",["^3T",["^X",[[["^ ","^45",["^4?","^4@"]],"^4A","^46"]]]]],"^3W","test from rule {:is-valid (fn [\"field-value\"] (test \"field-value\")) :message {:id \"rule-id\" :date [js/Date] ...} ...}\n  on value \"field-value\"\n  adding to accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] ...} ...}\n  returning accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] \n                                  :rule-id {:id \"rule-id\" :date [js/Date] ...} ...}}"],"~$rules",["^ ","^I","^1I","^6","utilities/form.cljs","^7",4,"^8",1,"^9",4,"^:",11,"^5",["^ ","^6","utilities/form.cljs","^7",4,"^8",6,"^9",4,"^:",11],"~:tag","~$cljs.core/IMap"],"~$validate-form",["^ ","^3R",null,"^5",["^ ","^6","utilities/form.cljs","^7",120,"^8",7,"^9",120,"^:",20,"^3S",["^X",["^3T",["^X",[["^3U"]]]]],"^3W","test all fields\n  {:field-name \n   {:name \"field-name\" \n    :value \"field-value\" \n    :rules {:rule-id {:is-valid (fn [\"field-value\"] (test \"field-value\")) :message {:id \"rule-id\" ...} ...} ...}\n    :messages {} \n    ...}\n  ...}\n  returning fields with updated field messages"],"^I","^1H","^6","utilities/form.cljs","^:",20,"^3X",["^X",[["^3U"]]],"^3Y",null,"^3Z",["^X",[null,null]],"^8",1,"^3[",false,"^7",120,"^40",["^H",[null,"^41"]],"^9",120,"^42",1,"^43",true,"^3S",["^X",["^3T",["^X",[["^3U"]]]]],"^3W","test all fields\n  {:field-name \n   {:name \"field-name\" \n    :value \"field-value\" \n    :rules {:rule-id {:is-valid (fn [\"field-value\"] (test \"field-value\")) :message {:id \"rule-id\" ...} ...} ...}\n    :messages {} \n    ...}\n  ...}\n  returning fields with updated field messages"],"~$validate-field",["^ ","^3R",null,"^5",["^ ","^6","utilities/form.cljs","^7",98,"^8",7,"^9",98,"^:",21,"^3S",["^X",["^3T",["^X",[["^4;","^4A"],["^4;","^4A","^4<"]]]]],"^3W","test from rules {:rule-id {:is-valid (fn [\"field-value\"] (test \"field-value\")) :message {:id \"rule-id\" :date [js/Date] ...} ...}}\n  on value \"field-value\"\n  adding to accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] ...} ...}\n  returning accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] \n                                  :rule-id {:id \"rule-id\" :date [js/Date] ...} ...}}","~:top-fn",["^ ","^3[",false,"~:fixed-arity",3,"^42",3,"^3X",[["^4;","^4A"],["^4;","^4A","^4<"]],"^3S",["^X",[["^4;","^4A"],["^4;","^4A","^4<"]]],"^3Z",["^X",[null,null]]]],"^I","^1W","^6","utilities/form.cljs","^:",21,"^4I",["^ ","^3[",false,"^4J",3,"^42",3,"^3X",[["^4;","^4A"],["^4;","^4A","^4<"]],"^3S",["^X",[["^4;","^4A"],["^4;","^4A","^4<"]]],"^3Z",["^X",[null,null]]],"^3X",[["^4;","^4A"],["^4;","^4A","^4<"]],"^3Y",null,"^4J",3,"^3Z",["^X",[null,null]],"^8",1,"^3[",false,"~:methods",[["^ ","^4J",2,"^3[",false,"^4E",["^H",[null,"^41"]]],["^ ","^4J",3,"^3[",false,"^4E",["^H",[null,"^41"]]]],"^7",98,"^9",98,"^42",3,"^43",true,"^3S",["^X",[["^4;","^4A"],["^4;","^4A","^4<"]]],"^3W","test from rules {:rule-id {:is-valid (fn [\"field-value\"] (test \"field-value\")) :message {:id \"rule-id\" :date [js/Date] ...} ...}}\n  on value \"field-value\"\n  adding to accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] ...} ...}\n  returning accumulator messages {:rule-id {:id \"rule-id\" :date [js/Date] \n                                  :rule-id {:id \"rule-id\" :date [js/Date] ...} ...}}"]],"^V",["^ ","^Q","^Q"],"~:cljs.analyzer/constants",["^ ","^S",["^H",["~:email","~:date","^I","~:events","~:words","~:value","~:rules","~:messages","~:word","~:status","~:id","~:is-valid","~:paragraph","~:required","~:message","~:text","~:nope"]],"~:order",["^4T","^4P","^4X","^4M","^50","^4Y","^4W","^4Z","^4V","^4N","^4U","^4[","^4S","^4Q","^I","^4R","^4O"]],"^[",["^ ","^T",["^H",[]]],"^10",["^ "],"^11",["^R","^Q","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^1Y",[["^54","~:static-fns"],true,["^54","~:shadow-tweaks"],null,["^54","~:source-map-inline"],null,["^54","~:elide-asserts"],false,["^54","~:optimize-constants"],null,["^54","^16"],null,["^54","~:external-config"],null,["^54","~:tooling-config"],null,["^54","~:emit-constants"],null,["^54","~:load-tests"],null,["^54","~:form-size-threshold"],null,["^54","~:data-readers"],null,["^54","~:infer-externs"],"~:auto",["^54","^18"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^54","~:fn-invoke-direct"],null,["^54","~:source-map"],"/dev/null"]]]