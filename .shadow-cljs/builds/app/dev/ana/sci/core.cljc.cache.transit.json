["^ ","~:output",["^ ","~:js","goog.provide('sci.core');\n/**\n * Returns a new sci var.\n */\nsci.core.new_var = (function sci$core$new_var(var_args){\nvar G__61562 = arguments.length;\nswitch (G__61562) {\ncase 1:\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.new_var.cljs$core$IFn$_invoke$arity$1 = (function (name){\nvar G__61563 = sci.core.new_var.cljs$core$IFn$_invoke$arity$3(name,null,null);\nsci.impl.vars.unbind(G__61563);\n\nreturn G__61563;\n}));\n\n(sci.core.new_var.cljs$core$IFn$_invoke$arity$2 = (function (name,init_val){\nreturn sci.core.new_var.cljs$core$IFn$_invoke$arity$3(name,init_val,cljs.core.meta(name));\n}));\n\n(sci.core.new_var.cljs$core$IFn$_invoke$arity$3 = (function (name,init_val,meta){\nreturn (new sci.impl.vars.SciVar(init_val,name,meta,false));\n}));\n\n(sci.core.new_var.cljs$lang$maxFixedArity = 3);\n\n/**\n * Same as new-var but adds :dynamic true to meta.\n */\nsci.core.new_dynamic_var = (function sci$core$new_dynamic_var(var_args){\nvar G__61565 = arguments.length;\nswitch (G__61565) {\ncase 1:\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$1 = (function (name){\nvar G__61566 = sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3(name,null,null);\nsci.impl.vars.unbind(G__61566);\n\nreturn G__61566;\n}));\n\n(sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$2 = (function (name,init_val){\nreturn sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3(name,init_val,cljs.core.meta(name));\n}));\n\n(sci.core.new_dynamic_var.cljs$core$IFn$_invoke$arity$3 = (function (name,init_val,meta){\nreturn (new sci.impl.vars.SciVar(init_val,name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(meta,new cljs.core.Keyword(null,\"dynamic\",\"dynamic\",704819571),true),false));\n}));\n\n(sci.core.new_dynamic_var.cljs$lang$maxFixedArity = 3);\n\n/**\n * Establish thread local binding of dynamic var\n */\nsci.core.set_BANG_ = (function sci$core$set_BANG_(dynamic_var,v){\nreturn sci.impl.types.setVal(dynamic_var,v);\n});\n/**\n * Same as new-var but adds :macro true to meta as well\n *   as :sci/macro true to meta of the fn itself.\n */\nsci.core.new_macro_var = (function sci$core$new_macro_var(var_args){\nvar G__61568 = arguments.length;\nswitch (G__61568) {\ncase 2:\nreturn sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$2 = (function (name,init_val){\nreturn sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$3(name,init_val,cljs.core.meta(name));\n}));\n\n(sci.core.new_macro_var.cljs$core$IFn$_invoke$arity$3 = (function (name,init_val,meta){\nreturn (new sci.impl.vars.SciVar(cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(init_val,cljs.core.assoc,new cljs.core.Keyword(\"sci\",\"macro\",\"sci/macro\",-868536151),true),name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(meta,new cljs.core.Keyword(null,\"macro\",\"macro\",-867863404),true),false));\n}));\n\n(sci.core.new_macro_var.cljs$lang$maxFixedArity = 3);\n\n/**\n * Sci var that represents sci's `clojure.core/*in*`\n */\nsci.core.in$ = sci.impl.io.in$;\n/**\n * Sci var that represents sci's `clojure.core/*out*`\n */\nsci.core.out = sci.impl.io.out;\n/**\n * Sci var that represents sci's `clojure.core/*err*`\n */\nsci.core.err = sci.impl.io.err;\n/**\n * Sci var that represents sci's `clojure.core/*ns*`\n */\nsci.core.ns = sci.impl.vars.current_ns;\n/**\n * Sci var that represents sci's `clojure.core/*file*`\n */\nsci.core.file = sci.impl.vars.current_file;\n/**\n * Sci var that represents sci's `clojure.core/*print-length*`\n */\nsci.core.print_length = sci.impl.io.print_length;\n/**\n * Sci var that represents sci's `clojure.core/*print-level*`\n */\nsci.core.print_level = sci.impl.io.print_level;\n/**\n * Sci var that represents sci's `clojure.core/*print-meta*`\n */\nsci.core.print_meta = sci.impl.io.print_meta;\nsci.core._STAR_1 = sci.impl.namespaces._STAR_1;\nsci.core._STAR_2 = sci.impl.namespaces._STAR_2;\nsci.core._STAR_3 = sci.impl.namespaces._STAR_3;\nsci.core._STAR_e = sci.impl.namespaces._STAR_e;\n/**\n * Atomically alters the root binding of sci var v by applying f to its\n *   current value plus any args.\n */\nsci.core.alter_var_root = (function sci$core$alter_var_root(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___61647 = arguments.length;\nvar i__4819__auto___61648 = (0);\nwhile(true){\nif((i__4819__auto___61648 < len__4818__auto___61647)){\nargs__4824__auto__.push((arguments[i__4819__auto___61648]));\n\nvar G__61657 = (i__4819__auto___61648 + (1));\ni__4819__auto___61648 = G__61657;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((2) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((2)),(0),null)):null);\nreturn sci.core.alter_var_root.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4825__auto__);\n});\n\n(sci.core.alter_var_root.cljs$core$IFn$_invoke$arity$variadic = (function (v,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(sci.impl.vars.alter_var_root,v,f,args);\n}));\n\n(sci.core.alter_var_root.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(sci.core.alter_var_root.cljs$lang$applyTo = (function (seq61596){\nvar G__61597 = cljs.core.first(seq61596);\nvar seq61596__$1 = cljs.core.next(seq61596);\nvar G__61598 = cljs.core.first(seq61596__$1);\nvar seq61596__$2 = cljs.core.next(seq61596__$1);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__61597,G__61598,seq61596__$2);\n}));\n\n/**\n * Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n * \n *   The map `opts` may contain the following:\n * \n *   - `:namespaces`: a map of symbols to namespaces, where a namespace\n *   is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n *   namespaces can be used with `require`.\n * \n *   - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n * \n *   - `:allow`: a seqable of allowed symbols. All symbols, even those\n *   brought in via `:bindings` or `:namespaces` have to be explicitly\n *   enumerated.\n * \n *   - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n *   recur]`.\n * \n *   - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n * \n *   - `:env`: an atom with a map in which state from the\n *   evaluation (defined namespaced and vars) will be persisted for\n *   re-use over multiple calls.\n * \n *   - `:disable-arity-checks`: disables arity checks for single-arity\n *   functions.\n */\nsci.core.eval_string = (function sci$core$eval_string(var_args){\nvar G__61600 = arguments.length;\nswitch (G__61600) {\ncase 1:\nreturn sci.core.eval_string.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.eval_string.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.eval_string.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn sci.core.eval_string.cljs$core$IFn$_invoke$arity$2(s,null);\n}));\n\n(sci.core.eval_string.cljs$core$IFn$_invoke$arity$2 = (function (s,opts){\nreturn sci.impl.interpreter.eval_string.cljs$core$IFn$_invoke$arity$2(s,opts);\n}));\n\n(sci.core.eval_string.cljs$lang$maxFixedArity = 2);\n\n/**\n * Creates an initial sci context from given options `opts`. The context\n *   can be used with `eval-string*`. See `eval-string` for available\n *   options. The internal organization of the context is implementation\n *   detail and may change in the future.\n */\nsci.core.init = (function sci$core$init(opts){\nreturn sci.impl.opts.init(opts);\n});\n/**\n * Forks a context (as produced with `init`) into a new context. Any new\n *   vars created in the new context won't be visible in the original\n *   context.\n */\nsci.core.fork = (function sci$core$fork(ctx){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(null,\"env\",\"env\",-1815813235),(function (env){\nreturn cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(env));\n}));\n});\n/**\n * Evaluates string `s` in the context of `ctx` (as produced with\n *   `init`).\n */\nsci.core.eval_string_STAR_ = (function sci$core$eval_string_STAR_(ctx,s){\nreturn sci.impl.interpreter.eval_string_STAR_(ctx,s);\n});\n/**\n * Creates namespace object. Can be used in var metadata.\n */\nsci.core.create_ns = (function sci$core$create_ns(var_args){\nvar G__61612 = arguments.length;\nswitch (G__61612) {\ncase 1:\nreturn sci.core.create_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn sci.core.create_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.create_ns.cljs$core$IFn$_invoke$arity$1 = (function (sym){\nreturn sci.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym,null);\n}));\n\n(sci.core.create_ns.cljs$core$IFn$_invoke$arity$2 = (function (sym,meta){\nreturn sci.impl.vars.__GT_SciNamespace(sym,meta);\n}));\n\n(sci.core.create_ns.cljs$lang$maxFixedArity = 2);\n\n/**\n * Parses string `s` in the context of `ctx` (as produced with\n *   `init`).\n */\nsci.core.parse_string = (function sci$core$parse_string(ctx,s){\nreturn sci.impl.parser.parse_string(ctx,s);\n});\n/**\n * Coerces x into indexing pushback-reader to be used with\n *   parse-next. Accepts: string or java.io.Reader.\n */\nsci.core.reader = (function sci$core$reader(x){\nreturn sci.impl.parser.reader(x);\n});\nsci.core.get_line_number = (function sci$core$get_line_number(reader){\nreturn sci.impl.parser.get_line_number(reader);\n});\nsci.core.get_column_number = (function sci$core$get_column_number(reader){\nreturn sci.impl.parser.get_column_number(reader);\n});\n/**\n * Parses next form from reader\n */\nsci.core.parse_next = (function sci$core$parse_next(var_args){\nvar G__61631 = arguments.length;\nswitch (G__61631) {\ncase 2:\nreturn sci.core.parse_next.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.core.parse_next.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.core.parse_next.cljs$core$IFn$_invoke$arity$2 = (function (ctx,reader){\nreturn sci.core.parse_next.cljs$core$IFn$_invoke$arity$3(ctx,reader,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(sci.core.parse_next.cljs$core$IFn$_invoke$arity$3 = (function (ctx,reader,opts){\nvar v = sci.impl.parser.parse_next.cljs$core$IFn$_invoke$arity$3(ctx,reader,opts);\nif(cljs.core.truth_((sci.impl.utils.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? sci.impl.utils.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),v) : sci.impl.utils.kw_identical_QMARK_.call(null,new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),v)))){\nvar or__4212__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn new cljs.core.Keyword(\"sci.core\",\"eof\",\"sci.core/eof\",-808584945);\n}\n} else {\nreturn v;\n}\n}));\n\n(sci.core.parse_next.cljs$lang$maxFixedArity = 3);\n\n/**\n * Evaluates form (as produced by `parse-string` or `parse-next`) in the\n *   context of `ctx` (as produced with `init`). To allow namespace\n *   switches, establish root binding of `sci/ns` with `sci/binding` or\n *   `sci/with-bindings.`\n */\nsci.core.eval_form = (function sci$core$eval_form(ctx,form){\nvar ctx__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4212__auto__ = new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();\n}\n})());\nreturn sci.impl.interpreter.eval_form(ctx__$1,form);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","sci/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",13],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$with-bindings","~$sci.core","~$with-out-str","^J","~$copy-var","^J"],"~:excludes",["~#set",["^I","~$*2","~$pmap","~$alter-var-root","~$future","~$*1","~$create-ns","~$ns","~$*e","^K","~$with-in-str","~$binding","~$set!","~$*3","~$with-redefs"]],"~:macros",["^ ","^I",["^ ","~:arglists",["~#list",[["~$bindings-map","~$&","~$body"]]],"~:doc","Macro for binding sci vars. Must be called with map of sci dynamic\n  vars to values. Used in babashka.","^7",70,"^8",3,"^6","sci/core.cljc","~:name","~$sci.core/with-bindings","~:ns","^J","~:macro",true],"^L",["^ ","^11",["^12",[["~$sym","^U"]]],"^15","Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`.","^7",48,"^8",1,"^6","sci/core.cljc","^16","~$sci.core/copy-var","^18","^J","^19",true],"^R",["^ ","^11",["^12",[["~$&","^14"]]],"^15","Like clojure.core/future but also conveys sci bindings to the thread.","^7",129,"^8",3,"^6","sci/core.cljc","^16","~$sci.core/future","^18","^J","^19",true],"^K",["^ ","^11",["^12",[["~$&","^14"]]],"^15","Evaluates exprs in a context in which sci's *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.","^7",117,"^8",3,"^6","sci/core.cljc","^16","~$sci.core/with-out-str","^18","^J","^19",true],"^W",["^ ","^11",["^12",[["~$s","~$&","^14"]]],"^15","Evaluates body in a context in which sci's *in* is bound to a fresh\n  StringReader initialized with the string s.","^7",107,"^8",3,"^6","sci/core.cljc","^16","~$sci.core/with-in-str","^18","^J","^19",true],"^X",["^ ","^11",["^12",[["~$bindings","~$&","^14"]]],"^15","Macro for binding sci vars. Must be called with a vector of sci\n  dynamic vars to values.","^7",81,"^8",3,"^6","sci/core.cljc","^16","~$sci.core/binding","^18","^J","^19",true]],"^16","^J","~:op","^18","~:imports",null,"~:requires",["^ ","~$sci.impl.opts","^1D","~$t","~$sci.impl.types","~$sci.impl.macros","^1F","^1E","^1E","~$i","~$sci.impl.interpreter","~$vars","~$sci.impl.vars","~$sci.impl.parser","^1J","~$cljs.core","^1K","~$namespaces","~$sci.impl.namespaces","~$goog","^1N","~$macros","^1F","^1G","^1G","~$sci.impl.io","^1P","^1I","^1I","~$sci.impl.utils","^1Q","~$sio","^1P","~$parser","^1J","~$utils","^1Q","^1M","^1M","~$opts","^1D"],"~:seen",["^N",["~:require","~:require-macros"]],"~:uses",null,"^1X",["^ ","^J","^J","^1K","^1K","^1F","^1F","^1H","^1I","^1L","^1M","^1O","^1F","^1I","^1I","^1M","^1M"],"~:form",["^12",["^U","^J",["^12",["~:refer-clojure","~:exclude",["^I","^W","^K","^[","^X","^R","^P","^Q","^U","^T","^Y","^S","^O","^Z","^V"]]],["^12",["^1W",["^1G","~:as","~$i"],["^1P","^21","^1R"],["^1F","^21","^1O"],["^1M","^21","^1L"],["^1D","^21","^1U"],["^1J","^21","^1S"],["^1E","^21","~$t"],["^1Q","^21","^1T"],["^1I","^21","^1H"]]],["^12",["^1X",["^J","~:refer",["^I","^K","^L"]]]]]],"~:flags",["^ ","^1W",["^N",[]],"^1X",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^1N","^1K","^1G","^1P","^1F","^1M","^1D","^1J","^1E","^1Q","^1I"]],"^18","^J","~:resource-id",["~:shadow.build.classpath/resource","sci/core.cljc"],"~:compiled-at",1630429614990,"~:resource-name","sci/core.cljc","~:warnings",[],"~:source","(ns sci.core\n  (:refer-clojure :exclude [with-bindings with-in-str with-out-str\n                            with-redefs binding future pmap alter-var-root\n                            ns create-ns set! *1 *2 *3 *e])\n  (:require\n   [sci.impl.interpreter :as i]\n   [sci.impl.io :as sio]\n   [sci.impl.macros :as macros]\n   [sci.impl.namespaces :as namespaces]\n   [sci.impl.opts :as opts]\n   [sci.impl.parser :as parser]\n   [sci.impl.types :as t]\n   [sci.impl.utils :as utils]\n   [sci.impl.vars :as vars])\n  #?(:cljs (:require-macros\n            [sci.core :refer [with-bindings with-out-str copy-var]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn new-var\n  \"Returns a new sci var.\"\n  ([name] (doto (new-var name nil nil)\n            (vars/unbind)))\n  ([name init-val] (new-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar. init-val name meta false)))\n\n(defn new-dynamic-var\n  \"Same as new-var but adds :dynamic true to meta.\"\n  ([name] (doto (new-dynamic-var name nil nil)\n            (vars/unbind)))\n  ([name init-val] (new-dynamic-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar. init-val name (assoc meta :dynamic true) false)))\n\n(defn set!\n  \"Establish thread local binding of dynamic var\"\n  [dynamic-var v]\n  (t/setVal dynamic-var v))\n\n(defn new-macro-var\n  \"Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself.\"\n  ([name init-val] (new-macro-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar.\n                         (vary-meta init-val\n                                    assoc :sci/macro true)\n                         name (assoc meta :macro true) false)))\n\n(defmacro copy-var\n  \"Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`.\"\n  ([sym ns]\n   `(let [ns# ~ns\n          var# (var ~sym)\n          val# (deref var#)\n          m# (-> var# meta)\n          ns-name# (vars/getName ns#)\n          name# (:name m#)\n          name-sym# (symbol (str ns-name#) (str name#))\n          new-m# {:doc (:doc m#)\n                  :name name#\n                  :arglists (:arglists m#)\n                  :ns ns#}]\n      (cond (:dynamic m#)\n            (new-dynamic-var name# val# new-m#)\n            (:macro m#)\n            (new-macro-var name# val# new-m#)\n            :else (new-var name# val# new-m#)))))\n\n(macros/deftime\n  (defmacro with-bindings\n    \"Macro for binding sci vars. Must be called with map of sci dynamic\n  vars to values. Used in babashka.\"\n    [bindings-map & body]\n    `(let [bm# ~bindings-map]\n       (assert (map? bm#))\n       (vars/push-thread-bindings bm#) ;; important: outside try\n       (try\n         (do ~@body)\n         (finally (vars/pop-thread-bindings)))))\n\n  (defmacro binding\n    \"Macro for binding sci vars. Must be called with a vector of sci\n  dynamic vars to values.\"\n    [bindings & body]\n    (assert (vector? bindings))\n    (assert (even? (count bindings)))\n    `(with-bindings ~(apply hash-map bindings)\n       (do ~@body))))\n\n(def in \"Sci var that represents sci's `clojure.core/*in*`\" sio/in)\n(def out \"Sci var that represents sci's `clojure.core/*out*`\" sio/out)\n(def err \"Sci var that represents sci's `clojure.core/*err*`\" sio/err)\n(def ns \"Sci var that represents sci's `clojure.core/*ns*`\" vars/current-ns)\n(def file \"Sci var that represents sci's `clojure.core/*file*`\" vars/current-file)\n(def print-length \"Sci var that represents sci's `clojure.core/*print-length*`\" sio/print-length)\n(def print-level \"Sci var that represents sci's `clojure.core/*print-level*`\" sio/print-level)\n(def print-meta \"Sci var that represents sci's `clojure.core/*print-meta*`\" sio/print-meta)\n(def *1 namespaces/*1)\n(def *2 namespaces/*2)\n(def *3 namespaces/*3)\n(def *e namespaces/*e)\n\n;; REPL variables\n\n\n(macros/deftime\n  (defmacro with-in-str\n    \"Evaluates body in a context in which sci's *in* is bound to a fresh\n  StringReader initialized with the string s.\"\n    [s & body]\n    `(let [in# (-> (java.io.StringReader. ~s)\n                   (clojure.lang.LineNumberingPushbackReader.))]\n       (with-bindings {in in#}\n         (do ~@body)))))\n\n(macros/deftime\n  (defmacro with-out-str\n    \"Evaluates exprs in a context in which sci's *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.\"\n    [& body]\n    `(let [out# (macros/? :clj (java.io.StringWriter.)\n                          :cljs (goog.string/StringBuffer.))]\n       (with-bindings {out out#}\n         (do ~@body)\n         (str out#)))))\n\n(macros/deftime\n  (defmacro future\n    \"Like clojure.core/future but also conveys sci bindings to the thread.\"\n    [& body]\n    `(let [f# (-> (fn [] ~@body)\n                  (vars/binding-conveyor-fn))]\n       (future-call f#))))\n\n#?(:clj (defn pmap\n          \"Like clojure.core/pmap but also conveys sci bindings to the threads.\"\n          ([f coll]\n           (let [n (+ 2 (.. Runtime getRuntime availableProcessors))\n                 rets (map #(future (f %)) coll)\n                 step (fn step [[x & xs :as vs] fs]\n                        (lazy-seq\n                         (if-let [s (seq fs)]\n                           (cons (deref x) (step xs (rest s)))\n                           (map deref vs))))]\n             (step rets (drop n rets))))\n          ([f coll & colls]\n           (let [step (fn step [cs]\n                        (lazy-seq\n                         (let [ss (map seq cs)]\n                           (when (every? identity ss)\n                             (cons (map first ss) (step (map rest ss)))))))]\n             (pmap #(apply f %) (step (cons coll colls)))))))\n\n(defn alter-var-root\n  \"Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args.\"\n  [v f & args]\n  (apply vars/alter-var-root v f args))\n\n(defn eval-string\n  \"Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions.\"\n  ([s] (eval-string s nil))\n  ([s opts]\n   (i/eval-string s opts)))\n\n(defn init\n  \"Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future.\"\n  [opts]\n  (opts/init opts))\n\n(defn fork\n  \"Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context.\"\n  [ctx]\n  (update ctx :env (fn [env] (atom @env))))\n\n(defn eval-string*\n  \"Evaluates string `s` in the context of `ctx` (as produced with\n  `init`).\"\n  [ctx s]\n  (sci.impl.interpreter/eval-string* ctx s))\n\n(defn create-ns\n  \"Creates namespace object. Can be used in var metadata.\"\n  ([sym] (create-ns sym nil))\n  ([sym meta]\n   (vars/->SciNamespace sym meta)))\n\n(defn parse-string\n  \"Parses string `s` in the context of `ctx` (as produced with\n  `init`).\"\n  ([ctx s]\n   (parser/parse-string ctx s)))\n\n(defn reader\n  \"Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader.\"\n  [x]\n  (parser/reader x))\n\n(defn get-line-number [reader]\n  (parser/get-line-number reader))\n\n(defn get-column-number [reader]\n  (parser/get-column-number reader))\n\n(defn parse-next\n  \"Parses next form from reader\"\n  ([ctx reader] (parse-next ctx reader {}))\n  ([ctx reader opts]\n   (let [v (parser/parse-next ctx reader opts)]\n     (if (utils/kw-identical? parser/eof v)\n       (or (get opts :eof)\n           ::eof)\n       v))))\n\n(defn eval-form\n  \"Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`\"\n  [ctx form]\n  (let [ctx (assoc ctx :id (or (:id ctx) (gensym)))]\n    (i/eval-form ctx form)))\n\n;;;; Scratch\n\n(comment\n  (eval-string \"(inc x)\" {:bindings {'x 2}})\n  )\n","~:reader-features",["^N",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__61562","sci.core/new-var","js/Error","name","G__61563","sci.core.new_var","sci.impl.vars/unbind","init-val","cljs.core/meta","meta","sci.impl.vars/SciVar","G__61565","sci.core/new-dynamic-var","G__61566","sci.core.new_dynamic_var","cljs.core.assoc","sci.core/set!","dynamic-var","v","sci.impl.types/setVal","G__61568","sci.core/new-macro-var","sci.core.new_macro_var","cljs.core.vary_meta","cljs.core/assoc","sci.core/in","sci.impl.io/in","sci.core/out","sci.impl.io/out","sci.core/err","sci.impl.io/err","sci.core/ns","sci.impl.vars/current-ns","sci.core/file","sci.impl.vars/current-file","sci.core/print-length","sci.impl.io/print-length","sci.core/print-level","sci.impl.io/print-level","sci.core/print-meta","sci.impl.io/print-meta","sci.core/*1","sci.impl.namespaces/*1","sci.core/*2","sci.impl.namespaces/*2","sci.core/*3","sci.impl.namespaces/*3","sci.core/*e","sci.impl.namespaces/*e","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","sci.core/alter-var-root","seq61596","G__61597","cljs.core/first","cljs.core/next","G__61598","self__4805__auto__","f","args","cljs.core.apply","sci.impl.vars/alter-var-root","G__61600","sci.core/eval-string","s","sci.core.eval_string","opts","sci.impl.interpreter.eval_string","sci.core/init","sci.impl.opts/init","sci.core/fork","ctx","cljs.core.update","env","cljs.core/deref","cljs.core.atom","sci.core/eval-string*","sci.impl.interpreter/eval-string*","G__61612","sci.core/create-ns","sym","sci.core.create_ns","sci.impl.vars/->SciNamespace","sci.core/parse-string","sci.impl.parser/parse-string","sci.core/reader","x","sci.impl.parser/reader","sci.core/get-line-number","reader","sci.impl.parser/get-line-number","sci.core/get-column-number","sci.impl.parser/get-column-number","G__61631","sci.core/parse-next","sci.core.parse_next","sci.impl.parser.parse_next","sci.impl.utils/kw-identical?","sci.impl.parser/eof","or__4212__auto__","cljs.core.get","sci.core/eval-form","form","cljs.core.gensym","sci.impl.interpreter/eval-form"]],"~:used-vars",["^N",["~$sci.impl.parser/parse-next","~$sci.core/eval-string","~$sci.core/new-dynamic-var","~$sci.core/ns","~$sci.impl.namespaces/*e","~$sci.impl.vars/alter-var-root","~$sci.core/*3","~$sci.impl.vars/current-ns","~$sci.impl.parser/get-line-number","~$sci.core/err","~$cljs.core/IndexedSeq","~$cljs.core/deref","~$sci.impl.vars/current-file","~$sci.impl.io/in","~$cljs.core/apply","~$sci.impl.namespaces/*3","~$sci.impl.vars/->SciNamespace","~$cljs.core/atom","~$sci.impl.namespaces/*2","~$sci.impl.parser/parse-string","~$sci.core/eval-string*","~$sci.impl.parser/get-column-number","~$sci.core/get-line-number","~$sci.impl.opts/init","~$sci.core/*2","~$sci.impl.types/setVal","~$sci.impl.io/print-meta","~$sci.core/parse-next","~$sci.core/set!","~$sci.core/print-level","~$sci.core/get-column-number","~$sci.core/parse-string","~$cljs.core/vary-meta","~$cljs.core/update","~$sci.core/print-length","~$sci.core/eval-form","~$sci.core/new-var","~$sci.core/*1","~$sci.core/reader","~$sci.core/print-meta","~$sci.core/init","~$cljs.core/get","~$sci.impl.io/print-level","~$sci.impl.vars/SciVar","~$sci.impl.namespaces/*1","~$sci.impl.io/err","~$sci.impl.parser/reader","~$sci.impl.vars/unbind","~$sci.core/alter-var-root","~$cljs.core/meta","~$sci.core/out","~$cljs.core/next","~$sci.impl.interpreter/eval-string","~$sci.impl.io/out","~$cljs.core/assoc","~$sci.impl.parser/eof","~$sci.impl.io/print-length","~$sci.core/in","~$sci.core/create-ns","~$sci.impl.utils/kw-identical?","~$cljs.core/gensym","~$sci.impl.interpreter/eval-form","~$cljs.core/first","~$sci.core/file","~$sci.core/*e","~$sci.core/fork","~$js/Error","~$sci.core/new-macro-var","~$sci.impl.interpreter/eval-string*"]]],"~:cache-keys",["~#cmap",[["^27","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["^1N","~$goog.dom.HtmlElement"]]],["^27","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","~$clojure.string","~$goog.string"]]],["^27","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","~$goog.array","~$goog.asserts"]]],["^27","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^49","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^27","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4:","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4="]]],["^27","sci/impl/reify.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^1E","^1Q"]]],["^27","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4:"]]],["^27","sci/impl/unrestrict.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K"]]],["^27","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","sci/impl/namespaces.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","~$cljs.reader","~$clojure.set","^47","~$clojure.walk","~$sci.impl.core-protocols","~$sci.impl.hierarchies","^1P","^1F","~$sci.impl.multimethods","^1J","~$sci.impl.protocols","~$sci.impl.read","~$sci.impl.records","~$sci.impl.reify","^1E","^1Q","^1I"]]],["^27","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","~$cljs.tools.reader.impl.errors","^?","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^48","~$goog.string.StringBuffer"]]],["^27","sci/impl/io.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^48","~$sci.impl.unrestrict","^1I"]]],["^27","sci/impl/parser.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^?","~$sci.impl.interop","~$sci.impl.parser.edamame","^1Q","^1I"]]],["^27","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K"]]],["^27","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^?","^4O","^4P","^4N","^49","^48","^4R"]]],["^27","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","sci/impl/destructure.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K"]]],["^27","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4:"]]],["^27","sci/impl/macros.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K"]]],"~:SHADOW-TIMESTAMP",[1630418006000,1630418006000,1627026917000],["^27","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4:","~$goog.reflect"]]],["^27","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4:","~$goog.fs.blob","^4>","~$goog.html.SafeScript","~$goog.html.trustedtypes","^4@","^4A","^4B","^4C"]]],["^27","sci/impl/doseq_macro.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^1Q"]]],["^27","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^49","^4:","~$goog.html.SafeUrl","^4B","^4C","^4="]]],["^27","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4:","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4Y","~$goog.html.SafeStyle","^4[","^4?","~$goog.html.uncheckedconversions","^4B","^4="]]],["^27","sci/impl/read.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^?","^1P","^1J","^1Q","^1I"]]],["^27","clojure/walk.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K"]]],["^27","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^27","sci/impl/for_macro.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^1Q"]]],["^27","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^49","^4:","~$goog.dom.TagName","~$goog.dom.tags","^4Y","^53","~$goog.html.SafeStyleSheet","^4[","^4?","^4Z","^4@","^4A","~$goog.labs.userAgent.browser","^4<","^4B","^4C","^4="]]],["^27","sci/impl/types.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K"]]],["^27","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4<"]]],["^27","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^49"]]],["^27","cljs/reader.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^4<","^4Q","~$cljs.tools.reader.edn","^4R"]]],["^27","sci/impl/hierarchies.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^1I"]]],["^27","sci/impl/fns.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","~$sci.impl.faster","^1F","^1E","^1Q"]]],["^27","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^27","sci/impl/vars.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^1F","^1E","^4S","~$sci.lang"]]],["^27","sci/impl/parser/edamame.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^5;","^?","~$cljs.tools.reader.impl.inspect","^4O","^4P","^4D","^47","~$edamame.impl.read-fn","~$sci.impl.parser.edamame.syntax-quote","^4R"]]],["^27","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^49","^4:","^48","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^27","edamame/impl/read_fn.cljc"],["5997cd1b13c0ae3f6f81c0f77ff6c84c5a1943d2","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K"]]],["^27","sci/impl/resolve.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^47","^4T","^4L","^1Q","^1I"]]],["^27","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","sci/impl/parser/edamame/syntax_quote.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^47"]]],["^27","sci/impl/interpreter.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^?","~$sci.impl.analyzer","~$sci.impl.evaluator","^1D","^1J","^1E","^1Q","^1I"]]],["^27","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","sci/impl/core_protocols.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^1E","^1I"]]],["^27","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",[]]],["^27","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^49","^4<"]]],["^27","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^?","^47","^5@"]]],["^27","sci/impl/faster.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^1F"]]],["^27","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^48","^4R"]]],["^27","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","~$goog.dom.safe","^54","^4B","^4="]]],["^27","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4="]]],["^27","sci/core.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^1G","^1P","^1F","^1M","^1D","^1J","^1E","^1Q","^1I"]]],["^27","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^4O","^48","^4R"]]],["^27","sci/impl/multimethods.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^4H"]]],["^27","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^49","^4:","^51","~$goog.math"]]],["^27","sci/impl/opts.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^48","^1M","^1Q","^1I","^5?"]]],["^27","sci/impl/utils.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^47","^1E","^1I"]]],["^27","sci/impl/protocols.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^4I","^1E","^1Q","^1I"]]],["^27","sci/impl/evaluator.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^47","^5<","~$sci.impl.fns","^4T","^1F","^4L","^1E","^1Q","^1I"]]],["^27","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4:","^52","^4Y","^53","^59","^4[","^4?","^4B","^4=","^4@"]]],["^27","sci/lang.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K"]]],["^27","sci/impl/analyzer.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","~$sci.impl.destructure","~$sci.impl.doseq-macro","^5I","~$sci.impl.for-macro","^4T","^4L","~$sci.impl.resolve","^1E","^1Q","^1I"]]],["^27","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^4N","^?","^4O"]]],["^27","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N"]]],["^27","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","~$goog.math.Long","~$goog.math.Integer","^48","^4<","^49","~$goog.Uri","^4R"]]],["^27","sci/impl/records.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^47","^1Q","^1I"]]],["^27","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4B","^4C","^4Z","^4:"]]],["^27","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4B","^53","^4C","^49","^4<","^4:","^4="]]],["^27","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4W"]]],["^27","clojure/set.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K"]]],["^27","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4:","^48"]]],["^27","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^4:","^4C"]]],["^27","sci/impl/interop.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^42",["^ ","^43",null,"^44",["^N",[]],"^45",["^1N","^1K","^4<","^1I","^47"]]]]],"~:clj-info",["^ ","jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/multimethods.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/faster.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/records.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/vars.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/core_protocols.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/analyzer.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/namespaces.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/io.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/commons.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/fns.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/read.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/protocols.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/reader.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/reify.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/parser.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/binaryage/devtools/0.9.7/devtools-0.9.7.jar!/devtools/defaults.clj",1625668616000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/macros.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/interpreter.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/utils.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/hierarchies.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/evaluator.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/parser/edamame.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/interop.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/opts.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/core.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/types.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/resolve.cljc",1630429552000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","sci/core.cljc","^7",1,"^8",5,"^9",1,"^:",13],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",["^ ","^I","^J","^K","^J","^L","^J"],"^M",["^N",["^I","^O","^P","^Q","^R","^S","^T","^U","^V","^K","^W","^X","^Y","^Z","^["]],"^10",["^ ","^I",["^ ","^11",["^12",[["^13","~$&","^14"]]],"^15","Macro for binding sci vars. Must be called with map of sci dynamic\n  vars to values. Used in babashka.","^7",70,"^8",3,"^6","sci/core.cljc","^16","^17","^18","^J","^19",true],"^L",["^ ","^11",["^12",[["^1:","^U"]]],"^15","Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`.","^7",48,"^8",1,"^6","sci/core.cljc","^16","^1;","^18","^J","^19",true],"^R",["^ ","^11",["^12",[["~$&","^14"]]],"^15","Like clojure.core/future but also conveys sci bindings to the thread.","^7",129,"^8",3,"^6","sci/core.cljc","^16","^1<","^18","^J","^19",true],"^K",["^ ","^11",["^12",[["~$&","^14"]]],"^15","Evaluates exprs in a context in which sci's *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.","^7",117,"^8",3,"^6","sci/core.cljc","^16","^1=","^18","^J","^19",true],"^W",["^ ","^11",["^12",[["~$s","~$&","^14"]]],"^15","Evaluates body in a context in which sci's *in* is bound to a fresh\n  StringReader initialized with the string s.","^7",107,"^8",3,"^6","sci/core.cljc","^16","^1>","^18","^J","^19",true],"^X",["^ ","^11",["^12",[["^1?","~$&","^14"]]],"^15","Macro for binding sci vars. Must be called with a vector of sci\n  dynamic vars to values.","^7",81,"^8",3,"^6","sci/core.cljc","^16","^1@","^18","^J","^19",true]],"^16","^J","^1B",null,"^1C",["^ ","^1D","^1D","~$t","^1E","^1F","^1F","^1E","^1E","~$i","^1G","^1H","^1I","^1J","^1J","^1K","^1K","^1L","^1M","^1N","^1N","^1O","^1F","^1G","^1G","^1P","^1P","^1I","^1I","^1Q","^1Q","^1R","^1P","^1S","^1J","^1T","^1Q","^1M","^1M","^1U","^1D"],"^1V",["^N",["^1W","^1X"]],"~:shadow/js-access-global",["^N",["Error"]],"^1Y",null,"~:defs",["^ ","~$fork",["^ ","~:protocol-inline",null,"^5",["^ ","^6","sci/core.cljc","^7",199,"^8",7,"^9",199,"^:",11,"^11",["^12",["~$quote",["^12",[["~$ctx"]]]]],"^15","Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context."],"^16","^3X","^6","sci/core.cljc","^:",11,"~:method-params",["^12",[["^7="]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^8",1,"~:variadic?",false,"^7",199,"~:ret-tag",["^N",["~$clj","~$any"]],"^9",199,"~:max-fixed-arity",1,"~:fn-var",true,"^11",["^12",["^7<",["^12",[["^7="]]]]],"^15","Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context."],"~$parse-string",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",218,"^8",7,"^9",218,"^:",19,"^11",["^12",["^7<",["^12",[["^7=","~$s"]]]]],"^15","Parses string `s` in the context of `ctx` (as produced with\n  `init`)."],"^16","^36","^6","sci/core.cljc","^:",19,"^7>",["^12",[["^7=","~$s"]]],"^7?",null,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7",218,"^7B",["^N",["^7D","~$clj-nil"]],"^9",218,"^7E",2,"^7F",true,"^11",["^12",["^7<",["^12",[["^7=","~$s"]]]]],"^15","Parses string `s` in the context of `ctx` (as produced with\n  `init`)."],"~$new-var",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",20,"^8",7,"^9",20,"^:",14,"^11",["^12",["^7<",["^12",[["~$name"],["^7J","~$init-val"],["^7J","^7K","~$meta"]]]]],"^15","Returns a new sci var.","~:top-fn",["^ ","^7A",false,"~:fixed-arity",3,"^7E",3,"^7>",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]],"^11",["^12",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]]],"^7@",["^12",[null,null,null]]]],"^16","^3;","^6","sci/core.cljc","^:",14,"^7M",["^ ","^7A",false,"^7N",3,"^7E",3,"^7>",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]],"^11",["^12",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]]],"^7@",["^12",[null,null,null]]],"^7>",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]],"^7?",null,"^7N",3,"^7@",["^12",[null,null,null]],"^8",1,"^7A",false,"~:methods",[["^ ","^7N",1,"^7A",false,"~:tag","^7D"],["^ ","^7N",2,"^7A",false,"^7P","^7D"],["^ ","^7N",3,"^7A",false,"^7P","^3B"]],"^7",20,"^9",20,"^7E",3,"^7F",true,"^11",["^12",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]]],"^15","Returns a new sci var."],"^O",["^ ","^16","^2[","^6","sci/core.cljc","^7",99,"^8",1,"^9",99,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",99,"^8",6,"^9",99,"^:",8],"^7P","^3B"],"~$in",["^ ","^16","^3P","^6","sci/core.cljc","^7",90,"^8",1,"^9",90,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",90,"^8",6,"^9",90,"^:",8],"^15","Sci var that represents sci's `clojure.core/*in*`"],"^Q",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",155,"^8",7,"^9",155,"^:",21,"^11",["^12",["^7<",["^12",[["~$v","~$f","~$&","~$args"]]]]],"^15","Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args.","^7M",["^ ","^7A",true,"^7N",2,"^7E",2,"^7>",[["^12",["~$v","~$f","^7R"]]],"^11",["^12",[["~$v","~$f","~$&","^7R"]]],"^7@",["^12",[null]]]],"^16","^3G","^6","sci/core.cljc","^:",21,"^7M",["^ ","^7A",true,"^7N",2,"^7E",2,"^7>",[["^12",["~$v","~$f","^7R"]]],"^11",["^12",[["~$v","~$f","~$&","^7R"]]],"^7@",["^12",[null]]],"^7>",[["^12",["~$v","~$f","^7R"]]],"^7?",null,"^7N",2,"^7@",["^12",[null]],"^8",1,"^7A",true,"^7O",[["^ ","^7N",2,"^7A",true,"^7P","^7D"]],"^7",155,"^7B","^7D","^9",155,"^7E",2,"^7F",true,"^11",["^12",[["~$v","~$f","~$&","^7R"]]],"^15","Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args."],"~$new-macro-var",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",39,"^8",7,"^9",39,"^:",20,"^11",["^12",["^7<",["^12",[["^7J","^7K"],["^7J","^7K","^7L"]]]]],"^15","Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself.","^7M",["^ ","^7A",false,"^7N",3,"^7E",3,"^7>",[["^7J","^7K"],["^7J","^7K","^7L"]],"^11",["^12",[["^7J","^7K"],["^7J","^7K","^7L"]]],"^7@",["^12",[null,null]]]],"^16","^3Z","^6","sci/core.cljc","^:",20,"^7M",["^ ","^7A",false,"^7N",3,"^7E",3,"^7>",[["^7J","^7K"],["^7J","^7K","^7L"]],"^11",["^12",[["^7J","^7K"],["^7J","^7K","^7L"]]],"^7@",["^12",[null,null]]],"^7>",[["^7J","^7K"],["^7J","^7K","^7L"]],"^7?",null,"^7N",3,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7O",[["^ ","^7N",2,"^7A",false,"^7P","^7D"],["^ ","^7N",3,"^7A",false,"^7P","^3B"]],"^7",39,"^9",39,"^7E",3,"^7F",true,"^11",["^12",[["^7J","^7K"],["^7J","^7K","^7L"]]],"^15","Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself."],"^S",["^ ","^16","^3<","^6","sci/core.cljc","^7",98,"^8",1,"^9",98,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",98,"^8",6,"^9",98,"^:",8],"^7P","^3B"],"~$print-meta",["^ ","^5",["^ ","^6","sci/core.cljc","^7",97,"^8",6,"^9",97,"^:",16],"^16","^3>","^6","sci/core.cljc","^:",16,"^8",1,"^7",97,"^9",97,"^7P","^7D","^15","Sci var that represents sci's `clojure.core/*print-meta*`"],"~$init",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",191,"^8",7,"^9",191,"^:",11,"^11",["^12",["^7<",["^12",[["^1U"]]]]],"^15","Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future."],"^16","^3?","^6","sci/core.cljc","^:",11,"^7>",["^12",[["^1U"]]],"^7?",null,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7",191,"^7B",["^N",["^7C","^7D"]],"^9",191,"^7E",1,"^7F",true,"^11",["^12",["^7<",["^12",[["^1U"]]]]],"^15","Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future."],"^T",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",212,"^8",7,"^9",212,"^:",16,"^11",["^12",["^7<",["^12",[["^1:"],["^1:","^7L"]]]]],"^15","Creates namespace object. Can be used in var metadata.","^7M",["^ ","^7A",false,"^7N",2,"^7E",2,"^7>",[["^1:"],["^1:","^7L"]],"^11",["^12",[["^1:"],["^1:","^7L"]]],"^7@",["^12",[null,null]]]],"^16","^3Q","^6","sci/core.cljc","^:",16,"^7M",["^ ","^7A",false,"^7N",2,"^7E",2,"^7>",[["^1:"],["^1:","^7L"]],"^11",["^12",[["^1:"],["^1:","^7L"]]],"^7@",["^12",[null,null]]],"^7>",[["^1:"],["^1:","^7L"]],"^7?",null,"^7N",2,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7O",[["^ ","^7N",1,"^7A",false,"^7P","^7D"],["^ ","^7N",2,"^7A",false,"^7P","~$sci.impl.vars/SciNamespace"]],"^7",212,"^9",212,"^7E",2,"^7F",true,"^11",["^12",[["^1:"],["^1:","^7L"]]],"^15","Creates namespace object. Can be used in var metadata."],"^U",["^ ","^5",["^ ","^6","sci/core.cljc","^7",93,"^8",6,"^9",93,"^:",8],"^16","^2F","^6","sci/core.cljc","^:",8,"^8",1,"^7",93,"^9",93,"^7P","^7D","^15","Sci var that represents sci's `clojure.core/*ns*`"],"~$file",["^ ","^5",["^ ","^6","sci/core.cljc","^7",94,"^8",6,"^9",94,"^:",10],"^16","^3V","^6","sci/core.cljc","^:",10,"^8",1,"^7",94,"^9",94,"^7P","^7D","^15","Sci var that represents sci's `clojure.core/*file*`"],"~$err",["^ ","^16","^2L","^6","sci/core.cljc","^7",92,"^8",1,"^9",92,"^:",9,"^5",["^ ","^6","sci/core.cljc","^7",92,"^8",6,"^9",92,"^:",9],"^15","Sci var that represents sci's `clojure.core/*err*`"],"~$print-level",["^ ","^5",["^ ","^6","sci/core.cljc","^7",96,"^8",6,"^9",96,"^:",17],"^16","^34","^6","sci/core.cljc","^:",17,"^8",1,"^7",96,"^9",96,"^7P","^7D","^15","Sci var that represents sci's `clojure.core/*print-level*`"],"^V",["^ ","^16","^3W","^6","sci/core.cljc","^7",101,"^8",1,"^9",101,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",101,"^8",6,"^9",101,"^:",8],"^7P","^3B"],"~$get-column-number",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",233,"^8",7,"^9",233,"^:",24,"^11",["^12",["^7<",["^12",[["~$reader"]]]]]],"^16","^35","^6","sci/core.cljc","^:",24,"^7>",["^12",[["^7["]]],"^7?",null,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7",233,"^7B","^7D","^9",233,"^7E",1,"^7F",true,"^11",["^12",["^7<",["^12",[["^7["]]]]]],"~$eval-string",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",161,"^8",7,"^9",161,"^:",18,"^11",["^12",["^7<",["^12",[["~$s"],["~$s","^1U"]]]]],"^15","Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions.","^7M",["^ ","^7A",false,"^7N",2,"^7E",2,"^7>",[["~$s"],["~$s","^1U"]],"^11",["^12",[["~$s"],["~$s","^1U"]]],"^7@",["^12",[null,null]]]],"^16","^2D","^6","sci/core.cljc","^:",18,"^7M",["^ ","^7A",false,"^7N",2,"^7E",2,"^7>",[["~$s"],["~$s","^1U"]],"^11",["^12",[["~$s"],["~$s","^1U"]]],"^7@",["^12",[null,null]]],"^7>",[["~$s"],["~$s","^1U"]],"^7?",null,"^7N",2,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7O",[["^ ","^7N",1,"^7A",false,"^7P","^7D"],["^ ","^7N",2,"^7A",false,"^7P","^7D"]],"^7",161,"^9",161,"^7E",2,"^7F",true,"^11",["^12",[["~$s"],["~$s","^1U"]]],"^15","Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions."],"~$parse-next",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",236,"^8",7,"^9",236,"^:",17,"^11",["^12",["^7<",["^12",[["^7=","^7["],["^7=","^7[","^1U"]]]]],"^15","Parses next form from reader","^7M",["^ ","^7A",false,"^7N",3,"^7E",3,"^7>",[["^7=","^7["],["^7=","^7[","^1U"]],"^11",["^12",[["^7=","^7["],["^7=","^7[","^1U"]]],"^7@",["^12",[null,null]]]],"^16","^32","^6","sci/core.cljc","^:",17,"^7M",["^ ","^7A",false,"^7N",3,"^7E",3,"^7>",[["^7=","^7["],["^7=","^7[","^1U"]],"^11",["^12",[["^7=","^7["],["^7=","^7[","^1U"]]],"^7@",["^12",[null,null]]],"^7>",[["^7=","^7["],["^7=","^7[","^1U"]],"^7?",null,"^7N",3,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7O",[["^ ","^7N",2,"^7A",false,"^7P","^7D"],["^ ","^7N",3,"^7A",false,"^7P",["^N",["^7D","~$cljs.core/Keyword"]]]],"^7",236,"^9",236,"^7E",3,"^7F",true,"^11",["^12",[["^7=","^7["],["^7=","^7[","^1U"]]],"^15","Parses next form from reader"],"^Y",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",34,"^8",7,"^9",34,"^:",11,"^11",["^12",["^7<",["^12",[["~$dynamic-var","~$v"]]]]],"^15","Establish thread local binding of dynamic var"],"^16","^33","^6","sci/core.cljc","^:",11,"^7>",["^12",[["^83","~$v"]]],"^7?",null,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7",34,"^7B","^7D","^9",34,"^7E",2,"^7F",true,"^11",["^12",["^7<",["^12",[["^83","~$v"]]]]],"^15","Establish thread local binding of dynamic var"],"^Z",["^ ","^16","^2I","^6","sci/core.cljc","^7",100,"^8",1,"^9",100,"^:",8,"^5",["^ ","^6","sci/core.cljc","^7",100,"^8",6,"^9",100,"^:",8],"^7P","^3B"],"~$out",["^ ","^16","^3I","^6","sci/core.cljc","^7",91,"^8",1,"^9",91,"^:",9,"^5",["^ ","^6","sci/core.cljc","^7",91,"^8",6,"^9",91,"^:",9],"^15","Sci var that represents sci's `clojure.core/*out*`"],"~$print-length",["^ ","^5",["^ ","^6","sci/core.cljc","^7",95,"^8",6,"^9",95,"^:",18],"^16","^39","^6","sci/core.cljc","^:",18,"^8",1,"^7",95,"^9",95,"^7P","^7D","^15","Sci var that represents sci's `clojure.core/*print-length*`"],"~$eval-form",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",246,"^8",7,"^9",246,"^:",16,"^11",["^12",["^7<",["^12",[["^7=","~$form"]]]]],"^15","Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`"],"^16","^3:","^6","sci/core.cljc","^:",16,"^7>",["^12",[["^7=","^87"]]],"^7?",null,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7",246,"^7B",["^N",["^7D","^7H"]],"^9",246,"^7E",2,"^7F",true,"^11",["^12",["^7<",["^12",[["^7=","^87"]]]]],"^15","Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`"],"^7[",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",224,"^8",7,"^9",224,"^:",13,"^11",["^12",["^7<",["^12",[["~$x"]]]]],"^15","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"^16","^3=","^6","sci/core.cljc","^:",13,"^7>",["^12",[["~$x"]]],"^7?",null,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7",224,"^7B","^7D","^9",224,"^7E",1,"^7F",true,"^11",["^12",["^7<",["^12",[["~$x"]]]]],"^15","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"~$get-line-number",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",230,"^8",7,"^9",230,"^:",22,"^11",["^12",["^7<",["^12",[["^7["]]]]]],"^16","^2Y","^6","sci/core.cljc","^:",22,"^7>",["^12",[["^7["]]],"^7?",null,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7",230,"^7B","^7D","^9",230,"^7E",1,"^7F",true,"^11",["^12",["^7<",["^12",[["^7["]]]]]],"~$eval-string*",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",206,"^8",7,"^9",206,"^:",19,"^11",["^12",["^7<",["^12",[["^7=","~$s"]]]]],"^15","Evaluates string `s` in the context of `ctx` (as produced with\n  `init`)."],"^16","^2W","^6","sci/core.cljc","^:",19,"^7>",["^12",[["^7=","~$s"]]],"^7?",null,"^7@",["^12",[null,null]],"^8",1,"^7A",false,"^7",206,"^7B","^7D","^9",206,"^7E",2,"^7F",true,"^11",["^12",["^7<",["^12",[["^7=","~$s"]]]]],"^15","Evaluates string `s` in the context of `ctx` (as produced with\n  `init`)."],"~$new-dynamic-var",["^ ","^7;",null,"^5",["^ ","^6","sci/core.cljc","^7",27,"^8",7,"^9",27,"^:",22,"^11",["^12",["^7<",["^12",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]]]]],"^15","Same as new-var but adds :dynamic true to meta.","^7M",["^ ","^7A",false,"^7N",3,"^7E",3,"^7>",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]],"^11",["^12",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]]],"^7@",["^12",[null,null,null]]]],"^16","^2E","^6","sci/core.cljc","^:",22,"^7M",["^ ","^7A",false,"^7N",3,"^7E",3,"^7>",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]],"^11",["^12",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]]],"^7@",["^12",[null,null,null]]],"^7>",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]],"^7?",null,"^7N",3,"^7@",["^12",[null,null,null]],"^8",1,"^7A",false,"^7O",[["^ ","^7N",1,"^7A",false,"^7P","^7D"],["^ ","^7N",2,"^7A",false,"^7P","^7D"],["^ ","^7N",3,"^7A",false,"^7P","^3B"]],"^7",27,"^9",27,"^7E",3,"^7F",true,"^11",["^12",[["^7J"],["^7J","^7K"],["^7J","^7K","^7L"]]],"^15","Same as new-var but adds :dynamic true to meta."]],"^1X",["^ ","^J","^J","^1K","^1K","^1F","^1F","^1H","^1I","^1L","^1M","^1O","^1F","^1I","^1I","^1M","^1M"],"~:cljs.analyzer/constants",["^ ","^1V",["^N",["~:sci/macro","~:env","~:sci.core/eof","~:dynamic","^19","~:id","~:eof"]],"~:order",["^8?","^8<","^19","^8=","^8A","^8>","^8@"]],"^23",["^ ","^1W",["^N",[]],"^1X",["^N",[]]],"^24",["^ "],"^25",["^1N","^1K","^1G","^1P","^1F","^1M","^1D","^1J","^1E","^1Q","^1I"]],"^18","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^N",[]],"~:compiler-options",["^41",[["^8E","~:static-fns"],true,["^8E","~:shadow-tweaks"],null,["^8E","~:source-map-inline"],null,["^8E","~:elide-asserts"],false,["^8E","~:optimize-constants"],null,["^8E","^2:"],null,["^8E","~:external-config"],null,["^8E","~:tooling-config"],null,["^8E","~:emit-constants"],null,["^8E","~:load-tests"],null,["^8E","~:form-size-threshold"],null,["^8E","~:data-readers"],null,["^8E","~:infer-externs"],"~:auto",["^8E","^2<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8E","~:fn-invoke-direct"],null,["^8E","~:source-map"],"/dev/null"]]]