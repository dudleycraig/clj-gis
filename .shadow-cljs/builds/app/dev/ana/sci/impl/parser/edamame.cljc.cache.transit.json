["^ ","~:output",["^ ","~:js","goog.provide('sci.impl.parser.edamame');\nsci.impl.parser.edamame.edn_read = (function sci$impl$parser$edamame$edn_read(ctx,reader){\nvar tools_reader_opts = new cljs.core.Keyword(\"tools.reader\",\"opts\",\"tools.reader/opts\",-2121810901).cljs$core$IFn$_invoke$arity$1(ctx);\nreturn cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$2(tools_reader_opts,reader);\n});\nsci.impl.parser.edamame.dispatch_macro_QMARK_ = (function sci$impl$parser$edamame$dispatch_macro_QMARK_(ch){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [\"!\",null,\"\\\"\",null,\"#\",null,\"'\",null,\"(\",null,\":\",null,\"{\",null,\"^\",null,\"?\",null,\"_\",null], null), null),ch);\n});\nsci.impl.parser.edamame.read_token = new cljs.core.Var(function(){return cljs.tools.reader.edn.read_token;},new cljs.core.Symbol(\"cljs.tools.reader.edn\",\"read-token\",\"cljs.tools.reader.edn/read-token\",-1809266548,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"private\",\"private\",-558947994),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"top-fn\",\"top-fn\",-2056129173),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[true,new cljs.core.Symbol(null,\"cljs.tools.reader.edn\",\"cljs.tools.reader.edn\",-1275821532,null),new cljs.core.Symbol(null,\"read-token\",\"read-token\",392624627,null),\"cljs/tools/reader/edn.cljs\",18,new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"variadic?\",\"variadic?\",584179762),false,new cljs.core.Keyword(null,\"fixed-arity\",\"fixed-arity\",1586445869),4,new cljs.core.Keyword(null,\"max-fixed-arity\",\"max-fixed-arity\",-690205543),4,new cljs.core.Keyword(null,\"method-params\",\"method-params\",-980792179),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"rdr\",\"rdr\",190007785,null),new cljs.core.Symbol(null,\"kind\",\"kind\",923265724,null),new cljs.core.Symbol(null,\"initch\",\"initch\",946908919,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"rdr\",\"rdr\",190007785,null),new cljs.core.Symbol(null,\"kind\",\"kind\",923265724,null),new cljs.core.Symbol(null,\"initch\",\"initch\",946908919,null),new cljs.core.Symbol(null,\"validate-leading?\",\"validate-leading?\",1185429770,null)], null)], null),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"rdr\",\"rdr\",190007785,null),new cljs.core.Symbol(null,\"kind\",\"kind\",923265724,null),new cljs.core.Symbol(null,\"initch\",\"initch\",946908919,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"rdr\",\"rdr\",190007785,null),new cljs.core.Symbol(null,\"kind\",\"kind\",923265724,null),new cljs.core.Symbol(null,\"initch\",\"initch\",946908919,null),new cljs.core.Symbol(null,\"validate-leading?\",\"validate-leading?\",1185429770,null)], null)),new cljs.core.Keyword(null,\"arglists-meta\",\"arglists-meta\",1944829838),cljs.core.list(null,null)], null),1,42,42,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"rdr\",\"rdr\",190007785,null),new cljs.core.Symbol(null,\"kind\",\"kind\",923265724,null),new cljs.core.Symbol(null,\"initch\",\"initch\",946908919,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"rdr\",\"rdr\",190007785,null),new cljs.core.Symbol(null,\"kind\",\"kind\",923265724,null),new cljs.core.Symbol(null,\"initch\",\"initch\",946908919,null),new cljs.core.Symbol(null,\"validate-leading?\",\"validate-leading?\",1185429770,null)], null)),null,(cljs.core.truth_(cljs.tools.reader.edn.read_token)?cljs.tools.reader.edn.read_token.cljs$lang$test:null)]));\nsci.impl.parser.edamame.parse_symbol = new cljs.core.Var(function(){return cljs.tools.reader.impl.commons.parse_symbol;},new cljs.core.Symbol(\"cljs.tools.reader.impl.commons\",\"parse-symbol\",\"cljs.tools.reader.impl.commons/parse-symbol\",-903976395,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"cljs.tools.reader.impl.commons\",\"cljs.tools.reader.impl.commons\",1569241026,null),new cljs.core.Symbol(null,\"parse-symbol\",\"parse-symbol\",1608073451,null),\"cljs/tools/reader/impl/commons.cljs\",19,1,97,97,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"token\",\"token\",429068312,null)], null)),\"Parses a string into a vector of the namespace and symbol\",(cljs.core.truth_(cljs.tools.reader.impl.commons.parse_symbol)?cljs.tools.reader.impl.commons.parse_symbol.cljs$lang$test:null)]));\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nsci.impl.parser.edamame.Loc = (function (line,column,__meta,__extmap,__hash){\nthis.line = line;\nthis.column = column;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4461__auto__,k__4462__auto__){\nvar self__ = this;\nvar this__4461__auto____$1 = this;\nreturn this__4461__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4462__auto__,null);\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4463__auto__,k53252,else__4464__auto__){\nvar self__ = this;\nvar this__4463__auto____$1 = this;\nvar G__53260 = k53252;\nvar G__53260__$1 = (((G__53260 instanceof cljs.core.Keyword))?G__53260.fqn:null);\nswitch (G__53260__$1) {\ncase \"line\":\nreturn self__.line;\n\nbreak;\ncase \"column\":\nreturn self__.column;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k53252,else__4464__auto__);\n\n}\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4481__auto__,f__4482__auto__,init__4483__auto__){\nvar self__ = this;\nvar this__4481__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4484__auto__,p__53261){\nvar vec__53263 = p__53261;\nvar k__4485__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53263,(0),null);\nvar v__4486__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53263,(1),null);\nreturn (f__4482__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4482__auto__.cljs$core$IFn$_invoke$arity$3(ret__4484__auto__,k__4485__auto__,v__4486__auto__) : f__4482__auto__.call(null,ret__4484__auto__,k__4485__auto__,v__4486__auto__));\n}),init__4483__auto__,this__4481__auto____$1);\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4476__auto__,writer__4477__auto__,opts__4478__auto__){\nvar self__ = this;\nvar this__4476__auto____$1 = this;\nvar pr_pair__4479__auto__ = (function (keyval__4480__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4477__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4478__auto__,keyval__4480__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__4477__auto__,pr_pair__4479__auto__,\"#sci.impl.parser.edamame.Loc{\",\", \",\"}\",opts__4478__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"line\",\"line\",212345235),self__.line],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"column\",\"column\",2078222095),self__.column],null))], null),self__.__extmap));\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__53251){\nvar self__ = this;\nvar G__53251__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__53251__$1,2,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"column\",\"column\",2078222095)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4459__auto__){\nvar self__ = this;\nvar this__4459__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4456__auto__){\nvar self__ = this;\nvar this__4456__auto____$1 = this;\nreturn (new sci.impl.parser.edamame.Loc(self__.line,self__.column,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4465__auto__){\nvar self__ = this;\nvar this__4465__auto____$1 = this;\nreturn (2 + cljs.core.count(self__.__extmap));\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4457__auto__){\nvar self__ = this;\nvar this__4457__auto____$1 = this;\nvar h__4319__auto__ = self__.__hash;\nif((!((h__4319__auto__ == null)))){\nreturn h__4319__auto__;\n} else {\nvar h__4319__auto____$1 = (function (coll__4458__auto__){\nreturn (-952826147 ^ cljs.core.hash_unordered_coll(coll__4458__auto__));\n})(this__4457__auto____$1);\n(self__.__hash = h__4319__auto____$1);\n\nreturn h__4319__auto____$1;\n}\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this53253,other53254){\nvar self__ = this;\nvar this53253__$1 = this;\nreturn (((!((other53254 == null)))) && ((((this53253__$1.constructor === other53254.constructor)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this53253__$1.line,other53254.line)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this53253__$1.column,other53254.column)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this53253__$1.__extmap,other53254.__extmap)))))))));\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4471__auto__,k__4472__auto__){\nvar self__ = this;\nvar this__4471__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"column\",\"column\",2078222095),null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),null], null), null),k__4472__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4471__auto____$1),self__.__meta),k__4472__auto__);\n} else {\nreturn (new sci.impl.parser.edamame.Loc(self__.line,self__.column,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4472__auto__)),null));\n}\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (this__4468__auto__,k53252){\nvar self__ = this;\nvar this__4468__auto____$1 = this;\nvar G__53320 = k53252;\nvar G__53320__$1 = (((G__53320 instanceof cljs.core.Keyword))?G__53320.fqn:null);\nswitch (G__53320__$1) {\ncase \"line\":\ncase \"column\":\nreturn true;\n\nbreak;\ndefault:\nreturn cljs.core.contains_QMARK_(self__.__extmap,k53252);\n\n}\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4469__auto__,k__4470__auto__,G__53251){\nvar self__ = this;\nvar this__4469__auto____$1 = this;\nvar pred__53322 = cljs.core.keyword_identical_QMARK_;\nvar expr__53323 = k__4470__auto__;\nif(cljs.core.truth_((pred__53322.cljs$core$IFn$_invoke$arity$2 ? pred__53322.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"line\",\"line\",212345235),expr__53323) : pred__53322.call(null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),expr__53323)))){\nreturn (new sci.impl.parser.edamame.Loc(G__53251,self__.column,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__53322.cljs$core$IFn$_invoke$arity$2 ? pred__53322.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"column\",\"column\",2078222095),expr__53323) : pred__53322.call(null,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),expr__53323)))){\nreturn (new sci.impl.parser.edamame.Loc(self__.line,G__53251,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new sci.impl.parser.edamame.Loc(self__.line,self__.column,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4470__auto__,G__53251),null));\n}\n}\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4474__auto__){\nvar self__ = this;\nvar this__4474__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"line\",\"line\",212345235),self__.line,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"column\",\"column\",2078222095),self__.column,null))], null),self__.__extmap));\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4460__auto__,G__53251){\nvar self__ = this;\nvar this__4460__auto____$1 = this;\nreturn (new sci.impl.parser.edamame.Loc(self__.line,self__.column,G__53251,self__.__extmap,self__.__hash));\n}));\n\n(sci.impl.parser.edamame.Loc.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4466__auto__,entry__4467__auto__){\nvar self__ = this;\nvar this__4466__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4467__auto__)){\nreturn this__4466__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__4467__auto__,(0)),cljs.core._nth(entry__4467__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4466__auto____$1,entry__4467__auto__);\n}\n}));\n\n(sci.impl.parser.edamame.Loc.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"line\",\"line\",1852876762,null),new cljs.core.Symbol(null,\"column\",\"column\",-576213674,null)], null);\n}));\n\n(sci.impl.parser.edamame.Loc.cljs$lang$type = true);\n\n(sci.impl.parser.edamame.Loc.cljs$lang$ctorPrSeq = (function (this__4505__auto__){\nreturn (new cljs.core.List(null,\"sci.impl.parser.edamame/Loc\",null,(1),null));\n}));\n\n(sci.impl.parser.edamame.Loc.cljs$lang$ctorPrWriter = (function (this__4505__auto__,writer__4506__auto__){\nreturn cljs.core._write(writer__4506__auto__,\"sci.impl.parser.edamame/Loc\");\n}));\n\n/**\n * Positional factory function for sci.impl.parser.edamame/Loc.\n */\nsci.impl.parser.edamame.__GT_Loc = (function sci$impl$parser$edamame$__GT_Loc(line,column){\nreturn (new sci.impl.parser.edamame.Loc(line,column,null,null,null));\n});\n\n/**\n * Factory function for sci.impl.parser.edamame/Loc, taking a map of keywords to field values.\n */\nsci.impl.parser.edamame.map__GT_Loc = (function sci$impl$parser$edamame$map__GT_Loc(G__53255){\nvar extmap__4501__auto__ = (function (){var G__53400 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__53255,new cljs.core.Keyword(null,\"line\",\"line\",212345235),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"column\",\"column\",2078222095)], 0));\nif(cljs.core.record_QMARK_(G__53255)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__53400);\n} else {\nreturn G__53400;\n}\n})();\nreturn (new sci.impl.parser.edamame.Loc(new cljs.core.Keyword(null,\"line\",\"line\",212345235).cljs$core$IFn$_invoke$arity$1(G__53255),new cljs.core.Keyword(null,\"column\",\"column\",2078222095).cljs$core$IFn$_invoke$arity$1(G__53255),null,cljs.core.not_empty(extmap__4501__auto__),null));\n});\n\nsci.impl.parser.edamame.location = (function sci$impl$parser$edamame$location(reader){\nreturn sci.impl.parser.edamame.__GT_Loc(reader.cljs$tools$reader$reader_types$IndexingReader$get_line_number$arity$1(null),reader.cljs$tools$reader$reader_types$IndexingReader$get_column_number$arity$1(null));\n});\nsci.impl.parser.edamame.kw_identical_QMARK_ = (function sci$impl$parser$edamame$kw_identical_QMARK_(kw,v){\nreturn cljs.core.keyword_identical_QMARK_(kw,v);\n});\nsci.impl.parser.edamame.parse_comment = (function sci$impl$parser$edamame$parse_comment(reader){\ncljs.tools.reader.reader_types.read_line(reader);\n\nreturn reader;\n});\nsci.impl.parser.edamame.whitespace_QMARK_ = (function sci$impl$parser$edamame$whitespace_QMARK_(c){\nvar and__4210__auto__ = c;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn ((-1) < [\"\\r\",\"\\n\",\"\\t\",\" \",\",\"].indexOf(c));\n} else {\nreturn and__4210__auto__;\n}\n});\n/**\n * Skips whitespace. Returns reader. If end of stream is reached, returns nil.\n */\nsci.impl.parser.edamame.skip_whitespace = (function sci$impl$parser$edamame$skip_whitespace(_ctx,reader){\nwhile(true){\nvar temp__5753__auto__ = reader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar c = temp__5753__auto__;\nif(cljs.core.truth_(sci.impl.parser.edamame.whitespace_QMARK_(c))){\ncontinue;\n} else {\nreader.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2(null,c);\n\nreturn reader;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});\n/**\n * Throw reader exception, including line line/column. line/column is\n *   read from the reader but it can be overriden by passing loc\n *   optional parameter.\n */\nsci.impl.parser.edamame.throw_reader = (function sci$impl$parser$edamame$throw_reader(var_args){\nvar G__53426 = arguments.length;\nswitch (G__53426) {\ncase 3:\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 5:\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$3 = (function (ctx,reader,msg){\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$4(ctx,reader,msg,null);\n}));\n\n(sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$4 = (function (ctx,reader,msg,data){\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$5(ctx,reader,msg,data,null);\n}));\n\n(sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$5 = (function (_ctx,reader,msg,data,loc){\nvar c = new cljs.core.Keyword(null,\"column\",\"column\",2078222095).cljs$core$IFn$_invoke$arity$2(loc,cljs.tools.reader.reader_types.get_column_number(reader));\nvar l = new cljs.core.Keyword(null,\"line\",\"line\",212345235).cljs$core$IFn$_invoke$arity$2(loc,cljs.tools.reader.reader_types.get_line_number(reader));\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(msg,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"edamame\",\"error\",\"edamame/error\",882529634),new cljs.core.Keyword(null,\"line\",\"line\",212345235),l,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),c], null),data], 0)));\n}));\n\n(sci.impl.parser.edamame.throw_reader.cljs$lang$maxFixedArity = 5);\n\nsci.impl.parser.edamame.non_match = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(\"non-match\");\nsci.impl.parser.edamame.non_match_QMARK_ = (function sci$impl$parser$edamame$non_match_QMARK_(v){\nreturn (v === sci.impl.parser.edamame.non_match);\n});\nsci.impl.parser.edamame.throw_eof_while_reading = (function sci$impl$parser$edamame$throw_eof_while_reading(ctx,reader){\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$3(ctx,reader,\"EOF while reading\");\n});\nsci.impl.parser.edamame.parse_to_delimiter = (function sci$impl$parser$edamame$parse_to_delimiter(var_args){\nvar G__53441 = arguments.length;\nswitch (G__53441) {\ncase 3:\nreturn sci.impl.parser.edamame.parse_to_delimiter.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn sci.impl.parser.edamame.parse_to_delimiter.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.impl.parser.edamame.parse_to_delimiter.cljs$core$IFn$_invoke$arity$3 = (function (ctx,reader,delimiter){\nreturn sci.impl.parser.edamame.parse_to_delimiter.cljs$core$IFn$_invoke$arity$4(ctx,reader,delimiter,cljs.core.PersistentVector.EMPTY);\n}));\n\n(sci.impl.parser.edamame.parse_to_delimiter.cljs$core$IFn$_invoke$arity$4 = (function (ctx,reader,delimiter,into){\nvar line = reader.cljs$tools$reader$reader_types$IndexingReader$get_line_number$arity$1(null);\nvar column = reader.cljs$tools$reader$reader_types$IndexingReader$get_column_number$arity$1(null);\nvar opened = reader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\nvar ctx__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032),delimiter),new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"opened-delimiter\",\"sci.impl.parser.edamame/opened-delimiter\",-1411217799),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"char\",\"char\",-641587586),opened,new cljs.core.Keyword(null,\"line\",\"line\",212345235),line,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null));\nvar vals = cljs.core.transient$(into);\nwhile(true){\nvar next_val = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx__$1,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx__$1,reader));\nvar cond_splice_QMARK_ = (function (){var G__53484 = next_val;\nvar G__53484__$1 = (((G__53484 == null))?null:cljs.core.meta(G__53484));\nif((G__53484__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"cond-splice\",\"sci.impl.parser.edamame/cond-splice\",1998093786).cljs$core$IFn$_invoke$arity$1(G__53484__$1);\n}\n})();\nif(sci.impl.parser.edamame.kw_identical_QMARK_(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),next_val)){\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$4(ctx__$1,reader,[\"EOF while reading, expected \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(delimiter),\" to match \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(opened),\" at [\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(line),\",\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(column),\"]\"].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"edamame\",\"expected-delimiter\",\"edamame/expected-delimiter\",93379254),cljs.core.str.cljs$core$IFn$_invoke$arity$1(delimiter),new cljs.core.Keyword(\"edamame\",\"opened-delimiter\",\"edamame/opened-delimiter\",-1906008305),cljs.core.str.cljs$core$IFn$_invoke$arity$1(opened)], null));\n} else {\nif(sci.impl.parser.edamame.kw_identical_QMARK_(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032),next_val)){\nreturn cljs.core.persistent_BANG_(vals);\n} else {\nif(cljs.core.truth_(cond_splice_QMARK_)){\nvar seq__53488_54251 = cljs.core.seq(next_val);\nvar chunk__53489_54252 = null;\nvar count__53490_54253 = (0);\nvar i__53491_54254 = (0);\nwhile(true){\nif((i__53491_54254 < count__53490_54253)){\nvar v_54255 = chunk__53489_54252.cljs$core$IIndexed$_nth$arity$2(null,i__53491_54254);\ncljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(vals,v_54255);\n\n\nvar G__54256 = seq__53488_54251;\nvar G__54257 = chunk__53489_54252;\nvar G__54258 = count__53490_54253;\nvar G__54259 = (i__53491_54254 + (1));\nseq__53488_54251 = G__54256;\nchunk__53489_54252 = G__54257;\ncount__53490_54253 = G__54258;\ni__53491_54254 = G__54259;\ncontinue;\n} else {\nvar temp__5753__auto___54260 = cljs.core.seq(seq__53488_54251);\nif(temp__5753__auto___54260){\nvar seq__53488_54261__$1 = temp__5753__auto___54260;\nif(cljs.core.chunked_seq_QMARK_(seq__53488_54261__$1)){\nvar c__4638__auto___54263 = cljs.core.chunk_first(seq__53488_54261__$1);\nvar G__54264 = cljs.core.chunk_rest(seq__53488_54261__$1);\nvar G__54265 = c__4638__auto___54263;\nvar G__54266 = cljs.core.count(c__4638__auto___54263);\nvar G__54267 = (0);\nseq__53488_54251 = G__54264;\nchunk__53489_54252 = G__54265;\ncount__53490_54253 = G__54266;\ni__53491_54254 = G__54267;\ncontinue;\n} else {\nvar v_54268 = cljs.core.first(seq__53488_54261__$1);\ncljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(vals,v_54268);\n\n\nvar G__54269 = cljs.core.next(seq__53488_54261__$1);\nvar G__54270 = null;\nvar G__54271 = (0);\nvar G__54272 = (0);\nseq__53488_54251 = G__54269;\nchunk__53489_54252 = G__54270;\ncount__53490_54253 = G__54271;\ni__53491_54254 = G__54272;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar G__54274 = vals;\nvals = G__54274;\ncontinue;\n} else {\nif(sci.impl.parser.edamame.non_match_QMARK_(next_val)){\nvar G__54276 = vals;\nvals = G__54276;\ncontinue;\n} else {\nvar G__54277 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(vals,next_val);\nvals = G__54277;\ncontinue;\n\n}\n}\n}\n}\nbreak;\n}\n}));\n\n(sci.impl.parser.edamame.parse_to_delimiter.cljs$lang$maxFixedArity = 4);\n\nsci.impl.parser.edamame.parse_list = (function sci$impl$parser$edamame$parse_list(ctx,reader){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.list,sci.impl.parser.edamame.parse_to_delimiter.cljs$core$IFn$_invoke$arity$3(ctx,reader,\")\"));\n});\n/**\n * Modeled after tools.reader/read-regex.\n */\nsci.impl.parser.edamame.read_regex_pattern = (function sci$impl$parser$edamame$read_regex_pattern(ctx,reader){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nvar sb = (new goog.string.StringBuffer());\nvar ch = reader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\nwhile(true){\nif((\"\\\"\" === ch)){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);\n} else {\nif((ch == null)){\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$3(ctx,reader,\"Error while parsing regex\");\n} else {\nsb.append(ch);\n\nif((\"\\\\\" === ch)){\nvar ch_54278__$1 = reader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\nif((ch_54278__$1 == null)){\nsci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$3(ctx,reader,\"Error while parsing regex\");\n} else {\n}\n\nsb.append(ch_54278__$1);\n} else {\n}\n\nvar G__54279 = reader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\nch = G__54279;\ncontinue;\n}\n}\nbreak;\n}\n});\nsci.impl.parser.edamame.duplicate_keys_error = (function sci$impl$parser$edamame$duplicate_keys_error(msg,coll){\nvar duplicates = (function sci$impl$parser$edamame$duplicate_keys_error_$_duplicates(seq){\nvar iter__4611__auto__ = (function sci$impl$parser$edamame$duplicate_keys_error_$_duplicates_$_iter__53531(s__53532){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__53532__$1 = s__53532;\nwhile(true){\nvar temp__5753__auto__ = cljs.core.seq(s__53532__$1);\nif(temp__5753__auto__){\nvar s__53532__$2 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__53532__$2)){\nvar c__4609__auto__ = cljs.core.chunk_first(s__53532__$2);\nvar size__4610__auto__ = cljs.core.count(c__4609__auto__);\nvar b__53534 = cljs.core.chunk_buffer(size__4610__auto__);\nif((function (){var i__53533 = (0);\nwhile(true){\nif((i__53533 < size__4610__auto__)){\nvar vec__53538 = cljs.core._nth(c__4609__auto__,i__53533);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53538,(0),null);\nvar freq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53538,(1),null);\nif((freq > (1))){\ncljs.core.chunk_append(b__53534,id);\n\nvar G__54280 = (i__53533 + (1));\ni__53533 = G__54280;\ncontinue;\n} else {\nvar G__54281 = (i__53533 + (1));\ni__53533 = G__54281;\ncontinue;\n}\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__53534),sci$impl$parser$edamame$duplicate_keys_error_$_duplicates_$_iter__53531(cljs.core.chunk_rest(s__53532__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__53534),null);\n}\n} else {\nvar vec__53544 = cljs.core.first(s__53532__$2);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53544,(0),null);\nvar freq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53544,(1),null);\nif((freq > (1))){\nreturn cljs.core.cons(id,sci$impl$parser$edamame$duplicate_keys_error_$_duplicates_$_iter__53531(cljs.core.rest(s__53532__$2)));\n} else {\nvar G__54282 = cljs.core.rest(s__53532__$2);\ns__53532__$1 = G__54282;\ncontinue;\n}\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4611__auto__(cljs.core.frequencies(seq));\n});\nvar dups = duplicates(coll);\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.str,msg,(((cljs.core.count(dups) > (1)))?\"s\":null),\": \",cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\", \",dups));\n});\nsci.impl.parser.edamame.throw_dup_keys = (function sci$impl$parser$edamame$throw_dup_keys(ctx,reader,loc,kind,ks){\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$5(ctx,reader,sci.impl.parser.edamame.duplicate_keys_error([clojure.string.capitalize(cljs.core.name(kind)),\" literal contains duplicate key\"].join(''),ks),null,loc);\n});\nsci.impl.parser.edamame.parse_set = (function sci$impl$parser$edamame$parse_set(ctx,reader){\nvar start_loc = sci.impl.parser.edamame.location(reader);\nvar coll = sci.impl.parser.edamame.parse_to_delimiter.cljs$core$IFn$_invoke$arity$3(ctx,reader,\"}\");\nvar the_set = cljs.core.set(coll);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(coll),cljs.core.count(the_set))){\n} else {\nsci.impl.parser.edamame.throw_dup_keys(ctx,reader,start_loc,new cljs.core.Keyword(null,\"set\",\"set\",304602554),coll);\n}\n\nreturn the_set;\n});\nsci.impl.parser.edamame.parse_first_matching_condition = (function sci$impl$parser$edamame$parse_first_matching_condition(ctx,reader){\nvar features = new cljs.core.Keyword(null,\"features\",\"features\",-1146962336).cljs$core$IFn$_invoke$arity$1(ctx);\nvar match = sci.impl.parser.edamame.non_match;\nwhile(true){\nvar k = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nif(sci.impl.parser.edamame.kw_identical_QMARK_(k,new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032))){\nreturn match;\n} else {\nvar next_is_match_QMARK_ = ((sci.impl.parser.edamame.non_match_QMARK_(match)) && (((cljs.core.contains_QMARK_(features,k)) || (sci.impl.parser.edamame.kw_identical_QMARK_(k,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328))))));\nif(next_is_match_QMARK_){\nvar match__$1 = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nvar ctx__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"suppress\",\"sci.impl.parser.edamame/suppress\",1305195112),true);\nwhile(true){\nvar next_val_54294 = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx__$1,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx__$1,reader));\nif(sci.impl.parser.edamame.kw_identical_QMARK_(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032),next_val_54294)){\n} else {\nif(sci.impl.parser.edamame.kw_identical_QMARK_(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),next_val_54294)){\nvar delimiter_54297 = new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032).cljs$core$IFn$_invoke$arity$1(ctx__$1);\nvar map__53610_54298 = new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"opened-delimiter\",\"sci.impl.parser.edamame/opened-delimiter\",-1411217799).cljs$core$IFn$_invoke$arity$1(ctx__$1);\nvar map__53610_54299__$1 = cljs.core.__destructure_map(map__53610_54298);\nvar line_54300 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53610_54299__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\nvar column_54301 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53610_54299__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\nvar char_54302 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53610_54299__$1,new cljs.core.Keyword(null,\"char\",\"char\",-641587586));\nsci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$4(ctx__$1,reader,[\"EOF while reading, expected \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(delimiter_54297),\" to match \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(char_54302),\" at [\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(line_54300),\",\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(column_54301),\"]\"].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"edamame\",\"expected-delimiter\",\"edamame/expected-delimiter\",93379254),cljs.core.str.cljs$core$IFn$_invoke$arity$1(delimiter_54297),new cljs.core.Keyword(\"edamame\",\"opened-delimiter\",\"edamame/opened-delimiter\",-1906008305),cljs.core.str.cljs$core$IFn$_invoke$arity$1(char_54302)], null));\n} else {\ncontinue;\n}\n}\nbreak;\n}\n\nreturn match__$1;\n} else {\nvar G__53624_54309 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"suppress\",\"sci.impl.parser.edamame/suppress\",1305195112),true);\nvar G__53625_54310 = reader;\n(sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(G__53624_54309,G__53625_54310) : sci.impl.parser.edamame.parse_next.call(null,G__53624_54309,G__53625_54310));\n\nvar G__54311 = match;\nmatch = G__54311;\ncontinue;\n}\n}\nbreak;\n}\n});\nsci.impl.parser.edamame.parse_reader_conditional = (function sci$impl$parser$edamame$parse_reader_conditional(ctx,reader){\nsci.impl.parser.edamame.skip_whitespace(ctx,reader);\n\nvar opt = new cljs.core.Keyword(null,\"read-cond\",\"read-cond\",1056899244).cljs$core$IFn$_invoke$arity$1(ctx);\nvar splice_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"@\",reader.cljs$tools$reader$reader_types$Reader$peek_char$arity$1(null));\nif(splice_QMARK_){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n} else {\n}\n\nsci.impl.parser.edamame.skip_whitespace(ctx,reader);\n\nif(sci.impl.parser.edamame.kw_identical_QMARK_(new cljs.core.Keyword(null,\"preserve\",\"preserve\",1276846509),opt)){\nreturn cljs.tools.reader.impl.utils.reader_conditional((sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader)),splice_QMARK_);\n} else {\nif(cljs.core.fn_QMARK_(opt)){\nvar G__53663 = cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4((sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader)),cljs.core.assoc,new cljs.core.Keyword(\"edamame\",\"read-cond-splicing\",\"edamame/read-cond-splicing\",-1992728777),splice_QMARK_);\nreturn (opt.cljs$core$IFn$_invoke$arity$1 ? opt.cljs$core$IFn$_invoke$arity$1(G__53663) : opt.call(null,G__53663));\n} else {\nvar line = reader.cljs$tools$reader$reader_types$IndexingReader$get_line_number$arity$1(null);\nvar column = reader.cljs$tools$reader$reader_types$IndexingReader$get_column_number$arity$1(null);\nvar opened = reader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\nvar ctx__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032),\")\"),new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"opened-delimiter\",\"sci.impl.parser.edamame/opened-delimiter\",-1411217799),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"char\",\"char\",-641587586),opened,new cljs.core.Keyword(null,\"line\",\"line\",212345235),line,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null));\nvar match = sci.impl.parser.edamame.parse_first_matching_condition(ctx__$1,reader);\nif(sci.impl.parser.edamame.non_match_QMARK_(match)){\nreturn reader;\n} else {\nif(splice_QMARK_){\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(match,(function (p1__53644_SHARP_){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p1__53644_SHARP_,new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"cond-splice\",\"sci.impl.parser.edamame/cond-splice\",1998093786),true);\n}));\n} else {\nreturn match;\n\n}\n}\n\n}\n}\n});\nsci.impl.parser.edamame.get_auto_resolve = (function sci$impl$parser$edamame$get_auto_resolve(var_args){\nvar G__53666 = arguments.length;\nswitch (G__53666) {\ncase 3:\nreturn sci.impl.parser.edamame.get_auto_resolve.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn sci.impl.parser.edamame.get_auto_resolve.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.impl.parser.edamame.get_auto_resolve.cljs$core$IFn$_invoke$arity$3 = (function (ctx,reader,next_val){\nreturn sci.impl.parser.edamame.get_auto_resolve.cljs$core$IFn$_invoke$arity$4(ctx,reader,next_val,null);\n}));\n\n(sci.impl.parser.edamame.get_auto_resolve.cljs$core$IFn$_invoke$arity$4 = (function (ctx,reader,next_val,msg){\nvar temp__5751__auto__ = new cljs.core.Keyword(null,\"auto-resolve\",\"auto-resolve\",1851201983).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar v = temp__5751__auto__;\nreturn v;\n} else {\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$4(ctx,reader,(function (){var or__4212__auto__ = msg;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn \"Use `:auto-resolve` to resolve aliases.\";\n}\n})(),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_val)].join('')], null));\n}\n}));\n\n(sci.impl.parser.edamame.get_auto_resolve.cljs$lang$maxFixedArity = 4);\n\n/**\n * Returns namespace for given alias.\n */\nsci.impl.parser.edamame.auto_resolve = (function sci$impl$parser$edamame$auto_resolve(var_args){\nvar G__53679 = arguments.length;\nswitch (G__53679) {\ncase 5:\nreturn sci.impl.parser.edamame.auto_resolve.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ncase 6:\nreturn sci.impl.parser.edamame.auto_resolve.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.impl.parser.edamame.auto_resolve.cljs$core$IFn$_invoke$arity$5 = (function (ctx,m,kns,reader,next_val){\nreturn sci.impl.parser.edamame.auto_resolve.cljs$core$IFn$_invoke$arity$6(ctx,m,kns,reader,next_val,null);\n}));\n\n(sci.impl.parser.edamame.auto_resolve.cljs$core$IFn$_invoke$arity$6 = (function (ctx,m,kns,reader,next_val,msg){\nvar temp__5751__auto__ = (m.cljs$core$IFn$_invoke$arity$1 ? m.cljs$core$IFn$_invoke$arity$1(kns) : m.call(null,kns));\nif(cljs.core.truth_(temp__5751__auto__)){\nvar kns__$1 = temp__5751__auto__;\nreturn kns__$1;\n} else {\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$4(ctx,reader,(function (){var or__4212__auto__ = msg;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn [\"Alias `\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(kns)),\"` not found in `:auto-resolve`\"].join('');\n}\n})(),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_val)].join('')], null));\n}\n}));\n\n(sci.impl.parser.edamame.auto_resolve.cljs$lang$maxFixedArity = 6);\n\nsci.impl.parser.edamame.parse_namespaced_map = (function sci$impl$parser$edamame$parse_namespaced_map(ctx,reader){\nvar auto_resolved_QMARK_ = (((\":\" === reader.cljs$tools$reader$reader_types$Reader$peek_char$arity$1(null)))?(function (){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nreturn true;\n})()\n:null);\nvar current_ns_QMARK_ = (cljs.core.truth_(auto_resolved_QMARK_)?(\"{\" === reader.cljs$tools$reader$reader_types$Reader$peek_char$arity$1(null)):null);\nvar prefix = (cljs.core.truth_(auto_resolved_QMARK_)?(cljs.core.truth_(current_ns_QMARK_)?null:sci.impl.parser.edamame.edn_read(ctx,reader)):sci.impl.parser.edamame.edn_read(ctx,reader));\nvar the_map = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nif(cljs.core.truth_(auto_resolved_QMARK_)){\nvar ns = (cljs.core.truth_(current_ns_QMARK_)?new cljs.core.Keyword(null,\"current\",\"current\",-1088038603):cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.name(prefix)));\nvar f = sci.impl.parser.edamame.get_auto_resolve.cljs$core$IFn$_invoke$arity$3(ctx,reader,ns);\nvar resolved_ns = sci.impl.parser.edamame.auto_resolve.cljs$core$IFn$_invoke$arity$5(ctx,f,ns,reader,prefix);\nreturn cljs.core.zipmap(cljs.tools.reader.impl.utils.namespace_keys(cljs.core.str.cljs$core$IFn$_invoke$arity$1(resolved_ns),cljs.core.keys(the_map)),cljs.core.vals(the_map));\n} else {\nvar resolved_ns = cljs.core.name(prefix);\nreturn cljs.core.zipmap(cljs.tools.reader.impl.utils.namespace_keys(resolved_ns,cljs.core.keys(the_map)),cljs.core.vals(the_map));\n}\n});\nsci.impl.parser.edamame.parse_sharp = (function sci$impl$parser$edamame$parse_sharp(ctx,reader){\nvar c = reader.cljs$tools$reader$reader_types$Reader$peek_char$arity$1(null);\nvar G__53892 = c;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(null,G__53892)){\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$3(ctx,reader,\"Unexpected EOF.\");\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"!\",G__53892)){\nsci.impl.parser.edamame.parse_comment(reader);\n\nreturn reader;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"\\\"\",G__53892)){\nvar pat = sci.impl.parser.edamame.read_regex_pattern(ctx,reader);\nreturn cljs.core.re_pattern(pat);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"'\",G__53892)){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nvar next_val = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nif(sci.impl.parser.edamame.kw_identical_QMARK_(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),next_val)){\nsci.impl.parser.edamame.throw_eof_while_reading(ctx,reader);\n} else {\n}\n\nreturn (new cljs.core.List(null,new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),(new cljs.core.List(null,next_val,null,(1),null)),(2),null));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"(\",G__53892)){\nvar fn_expr = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nreturn edamame.impl.read_fn.read_fn(fn_expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\":\",G__53892)){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nreturn sci.impl.parser.edamame.parse_namespaced_map(ctx,reader);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"{\",G__53892)){\nreturn sci.impl.parser.edamame.parse_set(ctx,reader);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"=\",G__53892)){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nvar next_val = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nreturn (new cljs.core.List(null,new cljs.core.Symbol(null,\"read-eval\",\"read-eval\",-865701837,null),(new cljs.core.List(null,next_val,null,(1),null)),(2),null));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"?\",G__53892)){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"read-cond\",\"read-cond\",1056899244).cljs$core$IFn$_invoke$arity$1(ctx))){\n} else {\nsci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$3(ctx,reader,\"Conditional read not allowed.\");\n}\n\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nreturn sci.impl.parser.edamame.parse_reader_conditional(ctx,reader);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"_\",G__53892)){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\n(sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\n\nreturn reader;\n} else {\nif(sci.impl.parser.edamame.dispatch_macro_QMARK_(c)){\nreader.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2(null,\"#\");\n\nreturn sci.impl.parser.edamame.edn_read(ctx,reader);\n} else {\nvar suppress_QMARK_ = new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"suppress\",\"sci.impl.parser.edamame/suppress\",1305195112).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.truth_(suppress_QMARK_)){\n(sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\n\nreturn (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\n} else {\nvar sym = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nvar data = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nvar f = (function (){var or__4212__auto__ = (function (){var temp__5753__auto__ = new cljs.core.Keyword(null,\"readers\",\"readers\",-2118263030).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar readers = temp__5753__auto__;\nreturn (readers.cljs$core$IFn$_invoke$arity$1 ? readers.cljs$core$IFn$_invoke$arity$1(sym) : readers.call(null,sym));\n} else {\nreturn null;\n}\n})();\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nvar fexpr__53914 = cljs.core.deref(cljs.reader._STAR_tag_table_STAR_);\nreturn (fexpr__53914.cljs$core$IFn$_invoke$arity$1 ? fexpr__53914.cljs$core$IFn$_invoke$arity$1(sym) : fexpr__53914.call(null,sym));\n}\n})();\nif(cljs.core.truth_(f)){\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(data) : f.call(null,data));\n} else {\nthrow (new Error([\"No reader function for tag \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join('')));\n}\n}\n}\n\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n});\nsci.impl.parser.edamame.throw_odd_map = (function sci$impl$parser$edamame$throw_odd_map(ctx,reader,loc,elements){\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$5(ctx,reader,[\"The map literal starting with \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.tools.reader.impl.inspect.inspect.cljs$core$IFn$_invoke$arity$1(cljs.core.first(elements))),\" contains \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.count(elements)),\" form(s). Map literals must contain an even number of forms.\"].join(''),null,loc);\n});\nsci.impl.parser.edamame.parse_map = (function sci$impl$parser$edamame$parse_map(ctx,reader){\nvar start_loc = sci.impl.parser.edamame.location(reader);\nvar elements = sci.impl.parser.edamame.parse_to_delimiter.cljs$core$IFn$_invoke$arity$3(ctx,reader,\"}\");\nvar c = cljs.core.count(elements);\nif((c > (0))){\nif(cljs.core.odd_QMARK_(c)){\nsci.impl.parser.edamame.throw_odd_map(ctx,reader,start_loc,elements);\n} else {\n}\n\nvar ks_54346 = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),elements);\nif(cljs.core.truth_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.distinct_QMARK_,ks_54346))){\n} else {\nsci.impl.parser.edamame.throw_dup_keys(ctx,reader,start_loc,new cljs.core.Keyword(null,\"map\",\"map\",1371690461),ks_54346);\n}\n} else {\n}\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,elements);\n});\nsci.impl.parser.edamame.parse_keyword = (function sci$impl$parser$edamame$parse_keyword(ctx,reader){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nvar init_c = reader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\nif(cljs.core.truth_(sci.impl.parser.edamame.whitespace_QMARK_(init_c))){\nsci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$3(ctx,reader,\"Invalid token: :\");\n} else {\n}\n\nvar token = (sci.impl.parser.edamame.read_token.cljs$core$IFn$_invoke$arity$3 ? sci.impl.parser.edamame.read_token.cljs$core$IFn$_invoke$arity$3(reader,new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747),init_c) : sci.impl.parser.edamame.read_token.call(null,reader,new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747),init_c));\nvar auto_resolve_QMARK_ = (\":\" === token.charAt((0)));\nif(auto_resolve_QMARK_){\nvar token__$1 = ((auto_resolve_QMARK_)?cljs.core.subs.cljs$core$IFn$_invoke$arity$2(token,(1)):token);\nvar vec__53951 = (sci.impl.parser.edamame.parse_symbol.cljs$core$IFn$_invoke$arity$1 ? sci.impl.parser.edamame.parse_symbol.cljs$core$IFn$_invoke$arity$1(token__$1) : sci.impl.parser.edamame.parse_symbol.call(null,token__$1));\nvar token_ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53951,(0),null);\nvar token_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53951,(1),null);\nif(cljs.core.truth_(token_ns)){\nvar f = sci.impl.parser.edamame.get_auto_resolve.cljs$core$IFn$_invoke$arity$3(ctx,reader,token__$1);\nvar kns = sci.impl.parser.edamame.auto_resolve.cljs$core$IFn$_invoke$arity$5(ctx,f,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(token_ns),reader,token_ns);\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(kns),token_name);\n} else {\nvar f = sci.impl.parser.edamame.get_auto_resolve.cljs$core$IFn$_invoke$arity$4(ctx,reader,token__$1,\"Use `:auto-resolve` + `:current` to resolve current namespace.\");\nvar kns = sci.impl.parser.edamame.auto_resolve.cljs$core$IFn$_invoke$arity$6(ctx,f,new cljs.core.Keyword(null,\"current\",\"current\",-1088038603),reader,token__$1,\"Use `:auto-resolve` + `:current` to resolve current namespace.\");\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(kns),token_name);\n}\n} else {\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(token);\n}\n});\nsci.impl.parser.edamame.dispatch = (function sci$impl$parser$edamame$dispatch(ctx,reader,c){\nvar sharp_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"#\",c);\nif(sharp_QMARK_){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nreturn sci.impl.parser.edamame.parse_sharp(ctx,reader);\n} else {\nvar G__53972 = c;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(null,G__53972)){\nreturn new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"@\",G__53972)){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nvar next_val = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nreturn (new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"deref\",\"clojure.core/deref\",188719157,null),(new cljs.core.List(null,next_val,null,(1),null)),(2),null));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"`\",G__53972)){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nvar next_val = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nvar gensyms = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar ctx__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(null,\"gensyms\",\"gensyms\",248713782),gensyms);\nvar ret = sci.impl.parser.edamame.syntax_quote.syntax_quote(ctx__$1,reader,next_val);\nreturn ret;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"'\",G__53972)){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nvar next_val = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nif(sci.impl.parser.edamame.kw_identical_QMARK_(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),next_val)){\nsci.impl.parser.edamame.throw_eof_while_reading(ctx,reader);\n} else {\n}\n\nreturn (new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),(new cljs.core.List(null,next_val,null,(1),null)),(2),null));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"(\",G__53972)){\nreturn sci.impl.parser.edamame.parse_list(ctx,reader);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\")\",G__53972)){\nvar expected = new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(expected,c)){\nvar loc = sci.impl.parser.edamame.location(reader);\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$5(ctx,reader,[\"Unmatched delimiter: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(c),(cljs.core.truth_(expected)?[\", expected: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(expected),(function (){var temp__5753__auto__ = new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"opened-delimiter\",\"sci.impl.parser.edamame/opened-delimiter\",-1411217799).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar map__54012 = temp__5753__auto__;\nvar map__54012__$1 = cljs.core.__destructure_map(map__54012);\nvar line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54012__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\nvar column = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54012__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\nvar char$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54012__$1,new cljs.core.Keyword(null,\"char\",\"char\",-641587586));\nreturn [\" to match \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(char$),\" at \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [line,column], null))].join('');\n} else {\nreturn null;\n}\n})()].join(''):null)].join(''),ctx,loc);\n} else {\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nreturn new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032);\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\":\",G__53972)){\nreturn sci.impl.parser.edamame.parse_keyword(ctx,reader);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\";\",G__53972)){\nreturn sci.impl.parser.edamame.parse_comment(reader);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"[\",G__53972)){\nreturn sci.impl.parser.edamame.parse_to_delimiter.cljs$core$IFn$_invoke$arity$3(ctx,reader,\"]\");\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"{\",G__53972)){\nreturn sci.impl.parser.edamame.parse_map(ctx,reader);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"]\",G__53972)){\nvar expected = new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(expected,c)){\nvar loc = sci.impl.parser.edamame.location(reader);\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$5(ctx,reader,[\"Unmatched delimiter: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(c),(cljs.core.truth_(expected)?[\", expected: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(expected),(function (){var temp__5753__auto__ = new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"opened-delimiter\",\"sci.impl.parser.edamame/opened-delimiter\",-1411217799).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar map__54049 = temp__5753__auto__;\nvar map__54049__$1 = cljs.core.__destructure_map(map__54049);\nvar line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54049__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\nvar column = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54049__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\nvar char$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54049__$1,new cljs.core.Keyword(null,\"char\",\"char\",-641587586));\nreturn [\" to match \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(char$),\" at \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [line,column], null))].join('');\n} else {\nreturn null;\n}\n})()].join(''):null)].join(''),ctx,loc);\n} else {\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nreturn new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032);\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"}\",G__53972)){\nvar expected = new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(expected,c)){\nvar loc = sci.impl.parser.edamame.location(reader);\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nreturn sci.impl.parser.edamame.throw_reader.cljs$core$IFn$_invoke$arity$5(ctx,reader,[\"Unmatched delimiter: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(c),(cljs.core.truth_(expected)?[\", expected: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(expected),(function (){var temp__5753__auto__ = new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"opened-delimiter\",\"sci.impl.parser.edamame/opened-delimiter\",-1411217799).cljs$core$IFn$_invoke$arity$1(ctx);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar map__54081 = temp__5753__auto__;\nvar map__54081__$1 = cljs.core.__destructure_map(map__54081);\nvar line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54081__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\nvar column = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54081__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\nvar char$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54081__$1,new cljs.core.Keyword(null,\"char\",\"char\",-641587586));\nreturn [\" to match \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(char$),\" at \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [line,column], null))].join('');\n} else {\nreturn null;\n}\n})()].join(''):null)].join(''),ctx,loc);\n} else {\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nreturn new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032);\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"^\",G__53972)){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nvar meta_val = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$3 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$3(ctx,reader,true) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader,true));\nvar val_val = cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3((sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader)),cljs.core.merge,meta_val);\nreturn val_val;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"~\",G__53972)){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nvar nc = reader.cljs$tools$reader$reader_types$Reader$peek_char$arity$1(null);\nif((nc === \"@\")){\nreader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(null);\n\nvar next_val = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nreturn (new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"unquote-splicing\",\"clojure.core/unquote-splicing\",-552003150,null),(new cljs.core.List(null,next_val,null,(1),null)),(2),null));\n} else {\nvar next_val = (sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 ? sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,reader) : sci.impl.parser.edamame.parse_next.call(null,ctx,reader));\nreturn (new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"unquote\",\"clojure.core/unquote\",843087510,null),(new cljs.core.List(null,next_val,null,(1),null)),(2),null));\n}\n} else {\nreturn sci.impl.parser.edamame.edn_read(ctx,reader);\n\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n});\n/**\n * Resolves syntactical sugar in metadata\n */\nsci.impl.parser.edamame.desugar_meta = (function sci$impl$parser$edamame$desugar_meta(f){\nif((f instanceof cljs.core.Keyword)){\nreturn cljs.core.PersistentArrayMap.createAsIfByAssoc([f,true]);\n} else {\nif((f instanceof cljs.core.Symbol)){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),f], null);\n} else {\nif(typeof f === 'string'){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),f], null);\n} else {\nreturn f;\n\n}\n}\n}\n});\nsci.impl.parser.edamame.iobj_QMARK_ = (function sci$impl$parser$edamame$iobj_QMARK_(obj){\nif((!((obj == null)))){\nif((((obj.cljs$lang$protocol_mask$partition0$ & (262144))) || ((cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IWithMeta$)))){\nreturn true;\n} else {\nif((!obj.cljs$lang$protocol_mask$partition0$)){\nreturn cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta,obj);\n} else {\nreturn false;\n}\n}\n} else {\nreturn cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta,obj);\n}\n});\nsci.impl.parser.edamame.parse_next = (function sci$impl$parser$edamame$parse_next(var_args){\nvar G__54132 = arguments.length;\nswitch (G__54132) {\ncase 2:\nreturn sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2 = (function (ctx,reader){\nreturn sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$3(ctx,reader,null);\n}));\n\n(sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$3 = (function (ctx,reader,desugar){\nwhile(true){\nvar temp__5751__auto__ = (function (){var and__4210__auto__ = sci.impl.parser.edamame.skip_whitespace(ctx,reader);\nif(cljs.core.truth_(and__4210__auto__)){\nreturn cljs.tools.reader.reader_types.peek_char(reader);\n} else {\nreturn and__4210__auto__;\n}\n})();\nif(cljs.core.truth_(temp__5751__auto__)){\nvar c = temp__5751__auto__;\nvar loc = sci.impl.parser.edamame.location(reader);\nvar log_QMARK_ = new cljs.core.Keyword(null,\"source\",\"source\",-433931539).cljs$core$IFn$_invoke$arity$1(ctx);\nvar buf = ((function (ctx,reader,desugar,loc,log_QMARK_,c,temp__5751__auto__){\nreturn (function (){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"buffer\",\"buffer\",617295198).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(reader.frames)));\n});})(ctx,reader,desugar,loc,log_QMARK_,c,temp__5751__auto__))\n;\nvar offset = (cljs.core.truth_(log_QMARK_)?((buf()).length):null);\nvar obj = (cljs.core.truth_(log_QMARK_)?cljs.tools.reader.reader_types.log_source_STAR_(reader,((function (ctx,reader,desugar,loc,log_QMARK_,buf,offset,c,temp__5751__auto__){\nreturn (function (){\nreturn sci.impl.parser.edamame.dispatch(ctx,reader,c);\n});})(ctx,reader,desugar,loc,log_QMARK_,buf,offset,c,temp__5751__auto__))\n):sci.impl.parser.edamame.dispatch(ctx,reader,c));\nif((reader === obj)){\nvar G__54374 = ctx;\nvar G__54375 = reader;\nvar G__54376 = desugar;\nctx = G__54374;\nreader = G__54375;\ndesugar = G__54376;\ncontinue;\n} else {\nif(sci.impl.parser.edamame.kw_identical_QMARK_(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032),obj)){\nreturn obj;\n} else {\nvar iobj_QMARK__QMARK_ = sci.impl.parser.edamame.iobj_QMARK_(obj);\nvar src = (cljs.core.truth_(log_QMARK_)?cljs.core.subs.cljs$core$IFn$_invoke$arity$2(buf(),offset).trim():null);\nvar loc_QMARK_ = ((iobj_QMARK__QMARK_) && ((((obj instanceof cljs.core.Symbol)) || (cljs.core.seq_QMARK_(obj)))));\nvar line = ((loc_QMARK_)?loc.line:null);\nvar column = ((loc_QMARK_)?loc.column:null);\nvar obj__$1 = (cljs.core.truth_(desugar)?sci.impl.parser.edamame.desugar_meta(obj):obj);\nvar obj__$2 = ((loc_QMARK_)?cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(obj__$1,((function (ctx,reader,desugar,iobj_QMARK__QMARK_,src,loc_QMARK_,line,column,obj__$1,loc,log_QMARK_,buf,offset,obj,c,temp__5751__auto__){\nreturn (function (p1__54124_SHARP_){\nvar G__54164 = p1__54124_SHARP_;\nvar G__54164__$1 = ((loc_QMARK_)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__54164,new cljs.core.Keyword(null,\"line\",\"line\",212345235),line),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column):G__54164);\nif(cljs.core.truth_(src)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__54164__$1,new cljs.core.Keyword(null,\"source\",\"source\",-433931539),src);\n} else {\nreturn G__54164__$1;\n}\n});})(ctx,reader,desugar,iobj_QMARK__QMARK_,src,loc_QMARK_,line,column,obj__$1,loc,log_QMARK_,buf,offset,obj,c,temp__5751__auto__))\n):obj__$1\n);\nreturn obj__$2;\n}\n}\n} else {\nreturn new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517);\n}\nbreak;\n}\n}));\n\n(sci.impl.parser.edamame.parse_next.cljs$lang$maxFixedArity = 3);\n\n/**\n * Create reader for strings.\n */\nsci.impl.parser.edamame.string_reader = (function sci$impl$parser$edamame$string_reader(s){\nreturn cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$1(cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$1(s));\n});\nsci.impl.parser.edamame.parse_string = (function sci$impl$parser$edamame$parse_string(s,opts){\nvar src_QMARK_ = new cljs.core.Keyword(null,\"source\",\"source\",-433931539).cljs$core$IFn$_invoke$arity$1(opts);\nvar r = (cljs.core.truth_(src_QMARK_)?cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$1(s):sci.impl.parser.edamame.string_reader(s));\nvar ctx = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032),null);\nvar v = sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,r);\nif(sci.impl.parser.edamame.kw_identical_QMARK_(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),v)){\nreturn null;\n} else {\nreturn v;\n}\n});\nsci.impl.parser.edamame.parse_string_all = (function sci$impl$parser$edamame$parse_string_all(s,opts){\nvar r = sci.impl.parser.edamame.string_reader(s);\nvar ctx = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"expected-delimiter\",\"sci.impl.parser.edamame/expected-delimiter\",-687160032),null);\nvar ret = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nvar next_val = sci.impl.parser.edamame.parse_next.cljs$core$IFn$_invoke$arity$2(ctx,r);\nif(sci.impl.parser.edamame.kw_identical_QMARK_(new cljs.core.Keyword(\"sci.impl.parser.edamame\",\"eof\",\"sci.impl.parser.edamame/eof\",-917261517),next_val)){\nreturn cljs.core.persistent_BANG_(ret);\n} else {\nvar G__54379 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(ret,next_val);\nret = G__54379;\ncontinue;\n}\nbreak;\n}\n});\nsci.impl.parser.edamame.reader = (function sci$impl$parser$edamame$reader(x){\nvar string_reader = cljs.tools.reader.reader_types.string_reader(x);\nvar buf_len = (1);\nvar pushback_reader = (new cljs.tools.reader.reader_types.PushbackReader(string_reader,cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(buf_len),buf_len,buf_len));\nreturn cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$1(pushback_reader);\n});\nsci.impl.parser.edamame.get_line_number = (function sci$impl$parser$edamame$get_line_number(reader){\nreturn cljs.tools.reader.reader_types.get_line_number(reader);\n});\nsci.impl.parser.edamame.get_column_number = (function sci$impl$parser$edamame$get_column_number(reader){\nreturn cljs.tools.reader.reader_types.get_column_number(reader);\n});\nsci.impl.parser.edamame.source_logging_reader = (function sci$impl$parser$edamame$source_logging_reader(x){\nvar string_reader = cljs.tools.reader.reader_types.string_reader(x);\nvar buf_len = (1);\nvar pushback_reader = (new cljs.tools.reader.reader_types.PushbackReader(string_reader,cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(buf_len),buf_len,buf_len));\nreturn cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$1(pushback_reader);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:no-doc",true,"~:doc","This code is largely inspired by rewrite-clj(sc), so thanks to all\n  who contribured to those projects.","~:file","sci/impl/parser/edamame.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",28],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$sci.impl.parser.edamame","~:op","~:ns","~:imports",["^ ","~$StringBuffer","~$goog.string.StringBuffer"],"~:requires",["^ ","~$cljs.tools.reader.impl.commons","^U","~$i","~$cljs.tools.reader.impl.inspect","~$cljs.tools.reader.edn","^W","~$r","^A","~$cljs.core","^X","~$goog","^Y","^A","^A","^S","^S","~$sci.impl.parser.edamame.syntax-quote","^Z","^V","^V","~$commons","^U","^R","^S","~$cljs.tools.reader.impl.utils","^10","~$edamame.impl.read-fn","^11","~$str","~$clojure.string","^13","^13","~$cljs.reader","^14","~$edn","^W"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$reader-conditional","^10","~$namespace-keys","^10","~$*tag-table*","^14","~$read-fn","^11","~$syntax-quote","^Z"],"~:require-macros",["^ ","^X","^X","^14","^14"],"~:form",["~#list",["~$ns","^N","This code is largely inspired by rewrite-clj(sc), so thanks to all\n  who contribured to those projects.",["^ ","^6",true],["^1@",["^17",["^W","~:as","^15"],["^A","^1B","~$r"],["^V","^1B","~$i"],["^10","~:refer",["^19","^1:"]],["^U","^1B","^["],["^14","^1C",["^1;"]],["^13","^1B","^12"],["^11","^1C",["^1<"]],["^Z","^1C",["^1="]]]],["^1@",["~:import",["~$goog.string","^R"]]]]],"~:flags",["^ ","^17",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^Y","^X","^W","^A","^V","^10","^U","^14","^13","^11","^Z","^S"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","sci/impl/parser/edamame.cljc"],"~:compiled-at",1630429610587,"~:resource-name","sci/impl/parser/edamame.cljc","~:warnings",[],"~:source","(ns sci.impl.parser.edamame\n  \"This code is largely inspired by rewrite-clj(sc), so thanks to all\n  who contribured to those projects.\"\n  {:no-doc true}\n  (:require\n   #?(:clj  [clojure.tools.reader.edn :as edn]\n      :cljs [cljs.tools.reader.edn :as edn])\n   #?(:clj  [clojure.tools.reader.reader-types :as r]\n      :cljs [cljs.tools.reader.reader-types :as r])\n   #?(:clj  [clojure.tools.reader.impl.inspect :as i]\n      :cljs [cljs.tools.reader.impl.inspect :as i])\n   #?(:clj [clojure.tools.reader.impl.utils :refer [namespace-keys]]\n      :cljs [cljs.tools.reader.impl.utils :refer [reader-conditional namespace-keys]])\n   #?(:clj [clojure.tools.reader.impl.commons :as commons]\n      :cljs [cljs.tools.reader.impl.commons :as commons])\n   #?(:cljs [cljs.reader :refer [*tag-table*]])\n   [clojure.string :as str]\n   [edamame.impl.read-fn :refer [read-fn]]\n   [sci.impl.parser.edamame.syntax-quote :refer [syntax-quote]])\n  #?(:clj (:import [java.io Closeable]\n                   [clojure.tools.reader.reader_types SourceLoggingPushbackReader]))\n  #?(:cljs (:import [goog.string StringBuffer])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;;;; tools.reader\n\n;; This is used for reading tokens (numbers, strings, symbols, chars,\n;; ##Inf). We're falling back on the EDN reader to handle this. Tried inlining\n;; it, but saw no significant performance gain.\n(defn edn-read [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [tools-reader-opts (:tools.reader/opts ctx)]\n    (edn/read tools-reader-opts reader)))\n\n(defn dispatch-macro? [ch]\n  (contains? #{\\^  ;; deprecated\n               \\'\n               \\(\n               \\{\n               \\\"\n               \\!\n               \\_\n               \\?\n               \\:\n               \\#} ch))\n\n(def read-token #'edn/read-token)\n(def parse-symbol #'commons/parse-symbol)\n\n;;;; end tools.reader\n\n(defrecord Loc [line column])\n\n(defn location [#?(:cljs ^not-native reader :default reader)]\n  (->Loc\n   (r/get-line-number reader)\n   (r/get-column-number reader)))\n\n(defn kw-identical? [kw v]\n  (#?(:clj identical? :cljs keyword-identical?) kw v))\n\n(declare parse-next)\n\n(defn parse-comment\n  [#?(:cljs ^not-native reader :default reader)]\n  (r/read-line reader)\n  reader)\n\n#?(:cljs\n   (defn whitespace?\n     [c]\n     (and c (< -1 (.indexOf #js [\\return \\newline \\tab \\space \",\"] c)))))\n\n#?(:clj\n   (defmacro whitespace? [c]\n     `(and ~c (or (identical? ~c \\,)\n                  (Character/isWhitespace ~(with-meta c\n                                             {:tag 'java.lang.Character}))))))\n\n\n(defn skip-whitespace\n  \"Skips whitespace. Returns reader. If end of stream is reached, returns nil.\"\n  [_ctx #?(:cljs ^not-native reader :default reader)]\n  (loop []\n    (when-let [c (r/read-char reader)]\n      (if (whitespace? c)\n        (recur)\n        (do (r/unread reader c)\n            reader)))))\n\n(defn throw-reader\n  \"Throw reader exception, including line line/column. line/column is\n  read from the reader but it can be overriden by passing loc\n  optional parameter.\"\n  ([ctx #?(:cljs ^:not-native reader :default reader) msg]\n   (throw-reader ctx reader msg nil))\n  ([ctx #?(:cljs ^:not-native reader :default reader) msg data]\n   (throw-reader ctx reader msg data nil))\n  ([_ctx #?(:cljs ^:not-native reader :default reader) msg data loc]\n   (let [c (:column loc (r/get-column-number reader))\n         l (:line loc (r/get-line-number reader))]\n     (throw\n      (ex-info msg\n               (merge {:type :edamame/error\n                       :line l\n                       :column c} data))))))\n\n(def non-match (symbol \"non-match\"))\n\n(defn non-match? [v]\n  (identical? v non-match))\n\n(defn throw-eof-while-reading [ctx reader]\n  (throw-reader ctx reader \"EOF while reading\"))\n\n(defn parse-to-delimiter\n  ([ctx #?(:cljs ^not-native reader :default reader) delimiter]\n   (parse-to-delimiter ctx reader delimiter []))\n  ([ctx #?(:cljs ^not-native reader :default reader) delimiter into]\n   (let [line (r/get-line-number reader)\n         column (r/get-column-number reader)\n         opened (r/read-char reader)\n         ctx (-> ctx\n                 (assoc ::expected-delimiter delimiter)\n                 (assoc ::opened-delimiter {:char opened :line line :column column}))]\n     (loop [vals (transient into)]\n       (let [;; if next-val is uneval, we get back the expected delimiter...\n             next-val (parse-next ctx reader)\n             cond-splice? (some-> next-val meta ::cond-splice)]\n         (cond\n           (kw-identical? ::eof next-val)\n           (throw-reader ctx\n                         reader\n                         (str \"EOF while reading, expected \" delimiter \" to match \" opened \" at [\" line \",\" column \"]\")\n                         {:edamame/expected-delimiter (str delimiter)\n                          :edamame/opened-delimiter (str opened)})\n           (kw-identical? ::expected-delimiter next-val)\n           (persistent! vals)\n           cond-splice? (do (doseq [v next-val]\n                              (conj! vals v))\n                            (recur vals))\n           (non-match? next-val) (recur vals)\n           :else\n           (recur (conj! vals next-val))))))))\n\n(defn parse-list [ctx #?(:cljs ^not-native reader :default reader)]\n  (apply list (parse-to-delimiter ctx reader \\))))\n\n(defn read-regex-pattern\n  \"Modeled after tools.reader/read-regex.\"\n  [ctx #?(:cljs ^not-native reader :default reader)]\n  (r/read-char reader) ;; ignore leading double-quote\n  (let [sb #?(:clj (StringBuilder.)\n              :cljs (StringBuffer.))]\n    (loop [ch (r/read-char reader)]\n      (if (identical? \\\" ch)\n        #?(:clj (str sb)\n           :cljs (str sb))\n        (if (nil? ch)\n          (throw-reader ctx reader \"Error while parsing regex\")\n          (do\n            (.append sb ch )\n            (when (identical? \\\\ ch)\n              (let [ch (r/read-char reader)]\n                (when (nil? ch)\n                  (throw-reader ctx reader \"Error while parsing regex\"))\n                (.append sb ch)))\n            (recur (r/read-char reader))))))))\n\n(defn- duplicate-keys-error [msg coll]\n  ;; https://github.com/clojure/tools.reader/blob/97d5dac9f5e7c04d8fe6c4a52cd77d6ced560d76/src/main/cljs/cljs/tools/reader/impl/errors.cljs#L233\n  (letfn [(duplicates [seq]\n            (for [[id freq] (frequencies seq)\n                  :when (> freq 1)]\n              id))]\n    (let [dups (duplicates coll)]\n      (apply str msg\n             (when (> (count dups) 1) \"s\")\n             \": \" (interpose \", \" dups)))))\n\n(defn throw-dup-keys\n  [ctx #?(:cljs ^not-native reader :default reader) loc kind ks]\n  (throw-reader\n   ctx reader\n   (duplicate-keys-error\n    (str (str/capitalize (name kind)) \" literal contains duplicate key\")\n    ks)\n   nil\n   loc))\n\n(defn parse-set\n  [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [start-loc (location reader)\n        coll (parse-to-delimiter ctx reader \\})\n        the-set (set coll)]\n    (when-not (= (count coll) (count the-set))\n      (throw-dup-keys ctx reader start-loc :set coll))\n    the-set))\n\n(defn parse-first-matching-condition [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [features (:features ctx)]\n    (loop [match non-match]\n      (let [k (parse-next ctx reader)]\n        (if (kw-identical? k ::expected-delimiter)\n          match\n          (let [next-is-match? (and (non-match? match)\n                                    (or (contains? features k)\n                                        (kw-identical? k :default)))]\n            (if next-is-match?\n              (let [match (parse-next ctx reader)\n                    ctx (assoc ctx ::suppress true)]\n                (loop []\n                  (let [next-val (parse-next ctx reader)]\n                    (when-not (kw-identical? ::expected-delimiter\n                                             next-val)\n                      (if (kw-identical? ::eof next-val)\n                        (let [delimiter (::expected-delimiter ctx)\n                              {:keys [:line :column :char]} (::opened-delimiter ctx)]\n                          (throw-reader ctx\n                                        reader\n                                        (str \"EOF while reading, expected \" delimiter \" to match \" char \" at [\" line \",\" column \"]\")\n                                        {:edamame/expected-delimiter (str delimiter)\n                                         :edamame/opened-delimiter (str char)}))\n                        (recur)))))\n                match)\n              (do\n                ;; skip over next val and try next key\n                (parse-next (assoc ctx ::suppress true)\n                            reader)\n                (recur match)))))))))\n\n(defn parse-reader-conditional [ctx #?(:cljs ^not-native reader :default reader)]\n  (skip-whitespace ctx reader)\n  (let [opt (:read-cond ctx)\n        splice? (= \\@ (r/peek-char reader))]\n    (when splice? (r/read-char reader))\n    (skip-whitespace ctx reader)\n    (cond (kw-identical? :preserve opt)\n          (reader-conditional (parse-next ctx reader) splice?)\n          (fn? opt)\n          (opt (vary-meta\n                (parse-next ctx reader)\n                assoc :edamame/read-cond-splicing splice?))\n          :else\n          (let [line (r/get-line-number reader)\n                column (r/get-column-number reader)\n                opened (r/read-char reader)\n                ctx (-> ctx\n                        (assoc ::expected-delimiter \\))\n                        (assoc ::opened-delimiter {:char opened :line line :column column}))\n                match (parse-first-matching-condition ctx reader)]\n            (cond (non-match? match) reader\n                  splice? (vary-meta match\n                                     #(assoc % ::cond-splice true))\n                  :else match)))))\n\n(defn get-auto-resolve\n  ([ctx reader next-val]\n   (get-auto-resolve ctx reader next-val nil))\n  ([ctx reader next-val msg]\n   (if-let [v (:auto-resolve ctx)]\n     v\n     (throw-reader ctx reader\n                   (or msg \"Use `:auto-resolve` to resolve aliases.\")\n                   {:expr (str \":\" next-val)}))))\n\n(defn auto-resolve\n  \"Returns namespace for given alias.\"\n  ([ctx m kns reader next-val] (auto-resolve ctx m kns reader next-val nil))\n  ([ctx m kns reader next-val msg]\n   (if-let [kns (m kns)]\n     kns\n     (throw-reader ctx reader\n                   (or msg (str \"Alias `\" (symbol kns) \"` not found in `:auto-resolve`\"))\n                   {:expr (str \":\" next-val)}))))\n\n(defn parse-namespaced-map [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [auto-resolved? (when (identical? \\: (r/peek-char reader))\n                         (r/read-char reader)\n                         true)\n        current-ns? (when auto-resolved?\n                      (identical? \\{ (r/peek-char reader)))\n        prefix (if auto-resolved?\n                 (when-not current-ns?\n                   (edn-read ctx reader))\n                 (edn-read ctx reader))\n        the-map (parse-next ctx reader)]\n    (if auto-resolved?\n      (let [ns (if current-ns? :current (symbol (name prefix)))\n            f (get-auto-resolve ctx reader ns)\n            resolved-ns (auto-resolve ctx f ns reader prefix)]\n        (zipmap (namespace-keys (str resolved-ns) (keys the-map))\n                (vals the-map)))\n      (let [resolved-ns (name prefix)]\n        (zipmap (namespace-keys resolved-ns (keys the-map))\n                (vals the-map))))))\n\n(defn parse-sharp\n  [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [c (r/peek-char reader)]\n    (case c\n      nil (throw-reader ctx reader (str \"Unexpected EOF.\"))\n      \\\" (let [pat (read-regex-pattern ctx reader)]\n           (re-pattern pat))\n      \\( (let [fn-expr (parse-next ctx reader)]\n           (read-fn fn-expr))\n      \\' (do\n           (r/read-char reader) ;; ignore quote\n           (let [next-val (parse-next ctx reader)]\n             (when (kw-identical? ::eof next-val)\n               (throw-eof-while-reading ctx reader))\n             (list 'var next-val)))\n      \\= (do\n           (r/read-char reader) ;; ignore =\n           (let [next-val (parse-next ctx reader)]\n             (list 'read-eval next-val)))\n      \\{ (parse-set ctx reader)\n      \\_ (do\n           (r/read-char reader) ;; read _\n           (parse-next ctx reader) ;; ignore next form\n           reader)\n      \\? (do\n           (when-not (:read-cond ctx)\n             (throw-reader\n              ctx reader\n              (str \"Conditional read not allowed.\")))\n           (r/read-char reader) ;; ignore ?\n           (parse-reader-conditional ctx reader))\n      \\: (do\n           (r/read-char reader) ;; ignore :\n           (parse-namespaced-map ctx reader))\n      \\! (do\n           (parse-comment reader)\n           reader)\n      ;; catch-all\n      (if (dispatch-macro? c)\n        (do (r/unread reader \\#)\n            (edn-read ctx reader))\n        ;; reader tag\n        (let [suppress? (::suppress ctx)]\n          (if suppress?\n            (do\n              ;; read symbol\n              (parse-next ctx reader)\n              ;; read form\n              (parse-next ctx reader))\n            (let [sym (parse-next ctx reader)\n                  data (parse-next ctx reader)\n                  f (or (when-let [readers (:readers ctx)]\n                          (readers sym))\n                        #?(:clj (default-data-readers sym)\n                           :cljs (@*tag-table* sym)))]\n              (if f (f data)\n                  (throw (new #?(:clj Exception :cljs js/Error)\n                              (str \"No reader function for tag \" sym)))))))))))\n\n(defn throw-odd-map\n  [ctx #?(:cljs ^not-native reader :default reader) loc elements]\n  (throw-reader ctx reader\n                (str\n                 \"The map literal starting with \"\n                 (i/inspect (first elements))\n                 \" contains \"\n                 (count elements)\n                 \" form(s). Map literals must contain an even number of forms.\")\n                nil\n                loc))\n\n(defn parse-map\n  [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [start-loc (location reader)\n        elements (parse-to-delimiter ctx reader \\})\n        c (count elements)]\n    (when (pos? c)\n      (when (odd? c)\n        (throw-odd-map ctx reader start-loc elements))\n      (let [ks (take-nth 2 elements)]\n        (when-not (apply distinct? ks)\n          (throw-dup-keys ctx reader start-loc :map ks))))\n    (apply hash-map elements)))\n\n(defn parse-keyword [ctx #?(:cljs ^not-native reader :default reader)]\n  (r/read-char reader) ;; ignore :\n  (let [init-c (r/read-char reader)]\n    (when (whitespace? init-c)\n      (throw-reader ctx reader (str \"Invalid token: :\")))\n    (let [^String token (read-token reader :keyword init-c)\n          auto-resolve? (identical? \\: (.charAt token 0))]\n      (if auto-resolve?\n        (let [token (if auto-resolve? (subs token 1) token)\n              [token-ns token-name] (parse-symbol token)]\n          (if token-ns\n            (let [f (get-auto-resolve ctx reader token)\n                  kns (auto-resolve ctx f (symbol token-ns) reader token-ns)]\n              (keyword (str kns) token-name))\n            ;; resolve current ns\n            (let [f (get-auto-resolve ctx reader token \"Use `:auto-resolve` + `:current` to resolve current namespace.\")\n                  kns (auto-resolve ctx f :current reader token \"Use `:auto-resolve` + `:current` to resolve current namespace.\")]\n              (keyword (str kns) token-name))))\n        (keyword token)))))\n\n(defn dispatch\n  [ctx #?(:cljs ^not-native reader :default reader) c]\n  (let [sharp? (= \\# c)]\n    (if sharp? (do\n                 (r/read-char reader) ;; ignore sharp\n                 (parse-sharp ctx reader))\n        (case c\n          nil ::eof\n          \\@ (do (r/read-char reader) ;; skip @\n                 (let [next-val (parse-next ctx reader)]\n                   (list 'clojure.core/deref next-val)))\n          \\' (do\n               (r/read-char reader) ;; skip '\n               (let [next-val (parse-next ctx reader)]\n                 (when (kw-identical? ::eof next-val)\n                   (throw-eof-while-reading ctx reader))\n                 (list 'quote next-val)))\n          \\` (do\n               (r/read-char reader) ;; skip `\n               (let [next-val (parse-next ctx reader)\n                     gensyms (atom {})\n                     ctx (assoc ctx :gensyms gensyms)\n                     ret (syntax-quote ctx reader next-val)]\n                 ret))\n          \\~ (do\n               (r/read-char reader) ;; skip `\n               (let [nc (r/peek-char reader)]\n                 (if (identical? nc \\@)\n                   (do\n                     (r/read-char reader) ;; ignore @\n                     (let [next-val (parse-next ctx reader)]\n                       (list 'clojure.core/unquote-splicing next-val)))\n                   (let [next-val (parse-next ctx reader)]\n                     (list 'clojure.core/unquote next-val)))))\n          \\( (parse-list ctx reader)\n          \\[ (parse-to-delimiter ctx reader \\])\n          \\{ (parse-map ctx reader)\n          (\\} \\] \\)) (let [expected (::expected-delimiter ctx)]\n                       (if (not= expected c)\n                         (let [loc (location reader)]\n                           (r/read-char reader) ;; ignore unexpected\n                           ;; delimiter to be able to\n                           ;; continue reading, fix for\n                           ;; babashka socket REPL\n                           (throw-reader ctx reader\n                                         (str \"Unmatched delimiter: \" c\n                                              (when expected\n                                                (str \", expected: \" expected\n                                                     (when-let [{:keys [:line :column :char]} (::opened-delimiter ctx)]\n                                                       (str \" to match \" char \" at \" [line column])))))\n                                         ctx\n                                         loc))\n                         (do\n                           ;; read delimiter\n                           (r/read-char reader)\n                           ::expected-delimiter)))\n          \\; (parse-comment reader)\n          \\^ (do\n               (r/read-char reader) ;; ignore ^\n               (let [meta-val (parse-next ctx reader true)\n                     val-val (vary-meta (parse-next ctx reader)\n                                        merge meta-val)]\n                 val-val))\n          \\: (parse-keyword ctx reader)\n          (edn-read ctx reader)))))\n\n(defn desugar-meta\n  \"Resolves syntactical sugar in metadata\" ;; could be combined with some other desugar?\n  ([f]\n   (cond\n     (keyword? f) {f true}\n     (symbol? f)  {:tag f}\n     (string? f)  {:tag f}\n     :else        f)))\n\n(defn iobj? [obj]\n  #?(:clj\n     (instance? clojure.lang.IObj obj)\n     :cljs (satisfies? IWithMeta obj)))\n\n(defn parse-next\n  ([ctx reader] (parse-next ctx reader nil))\n  ([ctx reader desugar]\n   (if-let [c (and (skip-whitespace ctx reader)\n                   (r/peek-char reader))]\n     (let [loc (location reader)\n           log? (:source ctx)\n           buf (fn [] (str (:buffer @#?(:clj (.source-log-frames ^SourceLoggingPushbackReader reader)\n                                        :cljs (.-frames reader)))))\n           offset (when log? (count (buf)))\n           obj (if log?\n                 #?(:clj (r/log-source reader (dispatch ctx reader c))\n                    :cljs (r/log-source* reader #(dispatch ctx reader c)))\n                 (dispatch ctx reader c))]\n       (if (identical? reader obj)\n         (recur ctx reader desugar)\n         (if (kw-identical? ::expected-delimiter obj)\n           obj\n           (let [iobj?? (iobj? obj)\n                 src (when log?\n                       (.trim (subs (buf) offset)))\n                 loc? (or (and iobj??\n                               (or (symbol? obj)\n                                   (seq? obj))))\n                 line (when loc? (:line loc))\n                 column (when loc? (:column loc))\n                 obj (if desugar (desugar-meta obj) obj)\n                 obj (cond loc? (vary-meta obj\n                                           #(cond-> %\n                                              ;; Note: using 3-arity of assoc, because faster\n                                              loc? (-> (assoc :line line)\n                                                       (assoc :column column))\n                                              src (assoc :source src)))\n                           :else obj)]\n             obj))))\n     ::eof)))\n\n(defn string-reader\n  \"Create reader for strings.\"\n  [s]\n  (r/indexing-push-back-reader\n   (r/string-push-back-reader s)))\n\n(defn parse-string [s opts]\n  (let [src? (:source opts)\n        r (if src? (r/source-logging-push-back-reader s)\n              (string-reader s))\n        ctx (assoc opts ::expected-delimiter nil)\n        v (parse-next ctx r)]\n    (if (kw-identical? ::eof v) nil v)))\n\n(defn parse-string-all [s opts]\n  (let [^Closeable r (string-reader s)\n        ctx (assoc opts ::expected-delimiter nil)]\n    (loop [ret (transient [])]\n      (let [next-val (parse-next ctx r)]\n        (if (kw-identical? ::eof next-val)\n          (persistent! ret)\n          (recur (conj! ret next-val)))))))\n\n(defn reader\n  [x]\n  #?(:clj (r/indexing-push-back-reader (r/push-back-reader x))\n     :cljs (let [string-reader (r/string-reader x)\n                 buf-len 1\n                 pushback-reader (r/PushbackReader. string-reader\n                                                    (object-array buf-len)\n                                                    buf-len buf-len)]\n             (r/indexing-push-back-reader pushback-reader))))\n\n(defn get-line-number [reader]\n  (r/get-line-number reader))\n\n(defn get-column-number [reader]\n  (r/get-column-number reader))\n\n(defn source-logging-reader\n  [x]\n  #?(:clj (r/source-logging-push-back-reader (r/push-back-reader x))\n     :cljs (let [string-reader (r/string-reader x)\n                 buf-len 1\n                 pushback-reader (r/PushbackReader. string-reader\n                                                    (object-array buf-len)\n                                                    buf-len buf-len)]\n             (r/source-logging-push-back-reader pushback-reader))))\n\n;;;; Scratch\n\n(comment\n  )\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["sci.impl.parser.edamame/edn-read","ctx","reader","tools-reader-opts","cljs.tools.reader.edn.read","sci.impl.parser.edamame/dispatch-macro?","ch","cljs.core/contains?","cljs.tools.reader.edn/read-token","sci.impl.parser.edamame/read-token","cljs.tools.reader.impl.commons/parse-symbol","sci.impl.parser.edamame/parse-symbol","this__4461__auto__","k__4462__auto__","this__4463__auto__","k53252","else__4464__auto__","G__53260","cljs.core/Keyword","line","column","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__53261","vec__53263","k__4485__auto__","cljs.core.nth","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__53251","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","cljs.core/count","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this53253","other53254","cljs.core._EQ_","this__4471__auto__","k__4472__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","G__53320","this__4469__auto__","k__4470__auto__","pred__53322","cljs.core/keyword-identical?","expr__53323","cljs.core.assoc","this__4474__auto__","cljs.core/seq","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","sci.impl.parser.edamame/Loc","this__4505__auto__","cljs.core/List","writer__4506__auto__","cljs.core/-write","G__53255","extmap__4501__auto__","G__53400","cljs.core/record?","sci.impl.parser.edamame/->Loc","sci.impl.parser.edamame/map->Loc","sci.impl.parser.edamame/location","sci.impl.parser.edamame/kw-identical?","kw","v","sci.impl.parser.edamame/parse-comment","cljs.tools.reader.reader-types/read-line","sci.impl.parser.edamame/whitespace?","c","and__4210__auto__","sci.impl.parser.edamame/skip-whitespace","_ctx","temp__5753__auto__","var_args","G__53426","sci.impl.parser.edamame/throw-reader","js/Error","msg","sci.impl.parser.edamame.throw_reader","data","loc","cljs.tools.reader.reader-types/get-column-number","l","cljs.tools.reader.reader-types/get-line-number","cljs.core.ex_info","cljs.core.merge","sci.impl.parser.edamame/non-match","cljs.core.symbol","sci.impl.parser.edamame/non-match?","sci.impl.parser.edamame/throw-eof-while-reading","G__53441","sci.impl.parser.edamame/parse-to-delimiter","delimiter","sci.impl.parser.edamame.parse_to_delimiter","into","opened","vals","cljs.core/transient","next-val","sci.impl.parser.edamame/parse-next","cond-splice?","G__53484","cljs.core/meta","cljs.core/persistent!","seq__53488","chunk__53489","count__53490","i__53491","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","cljs.core.conj_BANG_","sci.impl.parser.edamame/parse-list","cljs.core.apply","cljs.core/list","sci.impl.parser.edamame/read-regex-pattern","sb","js/goog.string.StringBuffer","sci.impl.parser.edamame/duplicate-keys-error","coll","seq","iter__4611__auto__","s__53532","cljs.core/LazySeq","c__4609__auto__","size__4610__auto__","b__53534","cljs.core/chunk-buffer","i__53533","vec__53538","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__53531","vec__53544","cljs.core/cons","cljs.core/rest","id","freq","cljs.core/frequencies","dups","duplicates","cljs.core/str","cljs.core.interpose","sci.impl.parser.edamame/throw-dup-keys","kind","ks","clojure.string/capitalize","cljs.core/name","sci.impl.parser.edamame/parse-set","start-loc","the-set","cljs.core/set","sci.impl.parser.edamame/parse-first-matching-condition","features","match","k","next-is-match?","map__53610","cljs.core/--destructure-map","char","G__53624","G__53625","sci.impl.parser.edamame/parse-reader-conditional","opt","splice?","cljs.tools.reader.impl.utils/reader-conditional","cljs.core/fn?","G__53663","cljs.core.vary_meta","cljs.core/assoc","p1__53644#","G__53666","sci.impl.parser.edamame/get-auto-resolve","sci.impl.parser.edamame.get_auto_resolve","temp__5751__auto__","or__4212__auto__","G__53679","sci.impl.parser.edamame/auto-resolve","m","kns","sci.impl.parser.edamame.auto_resolve","sci.impl.parser.edamame/parse-namespaced-map","auto-resolved?","current-ns?","prefix","the-map","ns","f","resolved-ns","cljs.core/zipmap","cljs.tools.reader.impl.utils/namespace-keys","cljs.core/keys","cljs.core/vals","sci.impl.parser.edamame/parse-sharp","G__53892","pat","cljs.core/re-pattern","fn-expr","edamame.impl.read-fn/read-fn","suppress?","sym","readers","fexpr__53914","cljs.core/deref","cljs.reader/*tag-table*","sci.impl.parser.edamame/throw-odd-map","elements","cljs.tools.reader.impl.inspect.inspect","sci.impl.parser.edamame/parse-map","cljs.core/odd?","cljs.core.take_nth","cljs.core/distinct?","cljs.core/hash-map","sci.impl.parser.edamame/parse-keyword","init-c","token","auto-resolve?","vec__53951","cljs.core.subs","token-ns","token-name","cljs.core.keyword","sci.impl.parser.edamame/dispatch","sharp?","G__53972","gensyms","cljs.core.atom","ret","sci.impl.parser.edamame.syntax-quote/syntax-quote","nc","expected","cljs.core.not_EQ_","map__54012","map__54049","map__54081","meta-val","val-val","cljs.core/merge","sci.impl.parser.edamame/desugar-meta","cljs.core/Symbol","sci.impl.parser.edamame/iobj?","obj","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWithMeta","G__54132","sci.impl.parser.edamame.parse_next","desugar","cljs.tools.reader.reader-types/peek-char","log?","buf","offset","cljs.tools.reader.reader-types/log-source*","iobj??","src","loc?","cljs.core/seq?","p1__54124#","G__54164","sci.impl.parser.edamame/string-reader","s","cljs.tools.reader.reader_types.indexing_push_back_reader","cljs.tools.reader.reader_types.string_push_back_reader","sci.impl.parser.edamame/parse-string","opts","src?","r","cljs.tools.reader.reader_types.source_logging_push_back_reader","sci.impl.parser.edamame/parse-string-all","sci.impl.parser.edamame/reader","x","string-reader","cljs.tools.reader.reader-types/string-reader","buf-len","pushback-reader","cljs.tools.reader.reader-types/PushbackReader","cljs.core.object_array","sci.impl.parser.edamame/get-line-number","sci.impl.parser.edamame/get-column-number","sci.impl.parser.edamame/source-logging-reader"]],"~:used-vars",["^L",["~$sci.impl.parser.edamame.syntax-quote/syntax-quote","~$sci.impl.parser.edamame/dispatch","~$sci.impl.parser.edamame/parse-namespaced-map","~$sci.impl.parser.edamame/parse-next","~$cljs.core/--destructure-map","~$cljs.tools.reader.reader-types/read-line","~$sci.impl.parser.edamame/throw-reader","~$sci.impl.parser.edamame/parse-sharp","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/rest","~$sci.impl.parser.edamame/iobj?","~$cljs.tools.reader.edn/read","~$cljs.core/keyword","~$cljs.core/str","~$cljs.core/odd?","~$sci.impl.parser.edamame/get-auto-resolve","~$cljs.core/pr-sequential-writer","~$sci.impl.parser.edamame/edn-read","~$cljs.core/vector?","~$sci.impl.parser.edamame/source-logging-reader","~$cljs.core/=","~$cljs.core/keys","~$cljs.tools.reader.reader-types/read-char","~$cljs.core/-assoc","~$cljs.tools.reader.reader-types/get-column-number","~$cljs.core/-write","~$sci.impl.parser.edamame/map->Loc","~$cljs.tools.reader.impl.utils/reader-conditional","~$cljs.core/-iterator","~$cljs.tools.reader.reader-types/source-logging-push-back-reader","~$sci.impl.parser.edamame/get-line-number","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/hash-map","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$cljs.core/Keyword","~$cljs.core/object-array","~$cljs.core/chunk","~$sci.impl.parser.edamame/parse-keyword","~$cljs.core/not=","~$cljs.core/MapEntry","~$sci.impl.parser.edamame/throw-dup-keys","~$cljs.core/dissoc","~$cljs.core/keyword-identical?","~$edamame.impl.read-fn/read-fn","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$cljs.core/atom","~$sci.impl.parser.edamame/whitespace?","~$cljs.core/-with-meta","~$sci.impl.parser.edamame/get-column-number","~$cljs.core/concat","~$cljs.core/take-nth","~$sci.impl.parser.edamame/parse-string","~$sci.impl.parser.edamame/read-token","~$cljs.tools.reader.reader-types/indexing-push-back-reader","~$cljs.tools.reader.edn/read-token","~$cljs.core/set","~$sci.impl.parser.edamame/non-match?","~$cljs.tools.reader.reader-types/string-push-back-reader","~$cljs.core/native-satisfies?","~$sci.impl.parser.edamame/->Loc","~$sci.impl.parser.edamame/throw-eof-while-reading","~$cljs.core/contains?","~$sci.impl.parser.edamame/non-match","~$cljs.core/into","~$cljs.reader/*tag-table*","~$cljs.core/vary-meta","~$cljs.core/re-pattern","~$cljs.core/zipmap","~$cljs.core/-conj","~$sci.impl.parser.edamame/auto-resolve","~$cljs.core/fn?","~$cljs.tools.reader.reader-types/string-reader","~$cljs.core/PersistentVector","~$cljs.core/List","~$cljs.core/vals","~$sci.impl.parser.edamame/parse-first-matching-condition","~$sci.impl.parser.edamame/parse-string-all","~$cljs.core/get","~$cljs.tools.reader.impl.inspect/inspect","~$cljs.core/chunk-append","~$cljs.core/-nth","~$cljs.core/not-empty","~$sci.impl.parser.edamame/parse-map","~$sci.impl.parser.edamame/parse-symbol","~$cljs.core/symbol","~$cljs.core/distinct?","~$cljs.core/conj!","~$sci.impl.parser.edamame/reader","~$cljs.core/frequencies","~$cljs.core/record?","~$sci.impl.parser.edamame/desugar-meta","~$cljs.core/persistent!","~$cljs.core/-lookup","~$cljs.tools.reader.impl.commons/parse-symbol","~$cljs.tools.reader.reader-types/log-source*","~$cljs.tools.reader.reader-types/get-line-number","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/meta","~$sci.impl.parser.edamame/parse-comment","~$cljs.tools.reader.reader-types/peek-char","~$cljs.tools.reader.reader-types/unread","~$cljs.core/nil-iter","~$sci.impl.parser.edamame/Loc","~$sci.impl.parser.edamame/read-regex-pattern","~$cljs.core/next","~$cljs.core/RecordIter","~$cljs.core/transient","~$cljs.core/chunk-cons","~$cljs.core/not","~$js/goog.string.StringBuffer","~$cljs.core/cons","~$cljs.core/assoc","~$cljs.core/interpose","~$cljs.tools.reader.impl.utils/namespace-keys","~$cljs.core/chunk-buffer","~$cljs.core/Symbol","~$sci.impl.parser.edamame/dispatch-macro?","~$sci.impl.parser.edamame/string-reader","~$sci.impl.parser.edamame/duplicate-keys-error","~$sci.impl.parser.edamame/kw-identical?","~$sci.impl.parser.edamame/location","~$clojure.string/capitalize","~$cljs.core/hash-unordered-coll","~$sci.impl.parser.edamame/parse-to-delimiter","~$cljs.core/first","~$cljs.core/seq?","~$sci.impl.parser.edamame/throw-odd-map","~$cljs.core/IWithMeta","~$sci.impl.parser.edamame/parse-list","~$cljs.core/list","~$cljs.core/name","~$cljs.core/subs","~$cljs.core/merge","~$js/Error","~$cljs.tools.reader.reader-types/PushbackReader","~$sci.impl.parser.edamame/skip-whitespace","~$cljs.core/chunked-seq?","~$sci.impl.parser.edamame/parse-reader-conditional","~$sci.impl.parser.edamame/parse-set"]]],"~:cache-keys",["~#cmap",[["^1J","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^Y","~$goog.dom.HtmlElement"]]],["^1J","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X","^13","^1E"]]],["^1J","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","~$goog.array","~$goog.asserts"]]],["^1J","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5>","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1J","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5?","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^5B"]]],["^1J","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5?"]]],["^1J","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X","~$cljs.tools.reader.impl.errors","^A","^10","^U","~$cljs.tools.reader","^1E","^S"]]],["^1J","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X"]]],["^1J","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X","^A","^10","^U","^5I","^5>","^1E","^S"]]],["^1J","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5?"]]],"~:SHADOW-TIMESTAMP",[1630418006000,1630418006000,1627026917000],["^1J","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5?","~$goog.reflect"]]],["^1J","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5?","~$goog.fs.blob","^5C","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5E","^5F","^5G","^5H"]]],["^1J","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5>","^5?","~$goog.html.SafeUrl","^5G","^5H","^5B"]]],["^1J","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5?","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^5N","~$goog.html.SafeStyle","^5P","^5D","~$goog.html.uncheckedconversions","^5G","^5B"]]],["^1J","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1J","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5>","^5?","~$goog.dom.TagName","~$goog.dom.tags","^5N","^5T","~$goog.html.SafeStyleSheet","^5P","^5D","^5O","^5E","^5F","~$goog.labs.userAgent.browser","^5A","^5G","^5H","^5B"]]],["^1J","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5A"]]],["^1J","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5>"]]],["^1J","cljs/reader.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X","^5A","^5J","^W","^S"]]],["^1J","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1J","sci/impl/parser/edamame.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X","^W","^A","^V","^10","^U","^14","^13","^11","^Z","^S"]]],["^1J","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5>","^5?","^1E","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1J","edamame/impl/read_fn.cljc"],["5997cd1b13c0ae3f6f81c0f77ff6c84c5a1943d2","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X"]]],["^1J","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","sci/impl/parser/edamame/syntax_quote.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X","^13"]]],["^1J","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",[]]],["^1J","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5>","^5A"]]],["^1J","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X","^A","^13","^V"]]],["^1J","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X","^1E","^S"]]],["^1J","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","~$goog.dom.safe","^5U","^5G","^5B"]]],["^1J","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5B"]]],["^1J","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X","^10","^1E","^S"]]],["^1J","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5>","^5?","^5R","~$goog.math"]]],["^1J","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5?","^5S","^5N","^5T","^5Z","^5P","^5D","^5G","^5B","^5E"]]],["^1J","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^X","^5I","^A","^10"]]],["^1J","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y"]]],["^1J","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","~$goog.math.Long","~$goog.math.Integer","^1E","^5A","^5>","~$goog.Uri","^S"]]],["^1J","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5G","^5H","^5O","^5?"]]],["^1J","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5G","^5T","^5H","^5>","^5A","^5?","^5B"]]],["^1J","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5L"]]],["^1J","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5?","^1E"]]],["^1J","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^59",["^ ","^5:",null,"^5;",["^L",[]],"^5<",["^Y","^5?","^5H"]]]]],"~:clj-info",["^ ","jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/reader.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/binaryage/devtools/0.9.7/devtools-0.9.7.jar!/devtools/defaults.clj",1625668616000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1627026915000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6",true,"^7","This code is largely inspired by rewrite-clj(sc), so thanks to all\n  who contribured to those projects.","^8","sci/impl/parser/edamame.cljc","^9",1,"^:",5,"^;",1,"^<",28],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",["^ ","^R","^S"],"^T",["^ ","^U","^U","~$i","^V","^W","^W","~$r","^A","^X","^X","^Y","^Y","^A","^A","^S","^S","^Z","^Z","^V","^V","^[","^U","^R","^S","^10","^10","^11","^11","^12","^13","^13","^13","^14","^14","^15","^W"],"^16",["^L",["^17"]],"~:shadow/js-access-global",["^L",["Error"]],"^18",["^ ","^19","^10","^1:","^10","^1;","^14","^1<","^11","^1=","^Z"],"~:defs",["^ ","~$whitespace?",["^ ","~:protocol-inline",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",70,"^:",10,"^;",70,"^<",21,"~:arglists",["^1@",["~$quote",["^1@",[["~$c"]]]]]],"^M","^31","^8","sci/impl/parser/edamame.cljc","^<",21,"~:method-params",["^1@",[["~$c"]]],"~:protocol-impl",null,"~:arglists-meta",["^1@",[null,null]],"^:",4,"~:variadic?",false,"^9",70,"~:ret-tag",["^L",[null,"~$boolean"]],"^;",70,"~:max-fixed-arity",1,"~:fn-var",true,"^75",["^1@",["^76",["^1@",[["~$c"]]]]]],"~$throw-dup-keys",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",181,"^:",7,"^;",181,"^<",21,"^75",["^1@",["^76",["^1@",[["~$ctx","~$reader","~$loc","~$kind","~$ks"]]]]]],"^M","^2V","^8","sci/impl/parser/edamame.cljc","^<",21,"^77",["^1@",[["^7@","^7A","^7B","^7C","^7D"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",181,"^7;","~$ignore","^;",181,"^7=",5,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A","^7B","^7C","^7D"]]]]]],"~$duplicate-keys-error",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",170,"^:",8,"^;",170,"^<",28,"~:private",true,"^75",["^1@",["^76",["^1@",[["~$msg","~$coll"]]]]]],"^7G",true,"^M","^4N","^8","sci/impl/parser/edamame.cljc","^<",28,"^77",["^1@",[["^7H","^7I"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",170,"^;",170,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7H","^7I"]]]]]],"~$parse-string",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",525,"^:",7,"^;",525,"^<",19,"^75",["^1@",["^76",["^1@",[["~$s","~$opts"]]]]]],"^M","^36","^8","sci/impl/parser/edamame.cljc","^<",19,"^77",["^1@",[["~$s","^7K"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",525,"^7;",["^L",["~$any","~$clj-nil"]],"^;",525,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["~$s","^7K"]]]]]],"~$parse-to-delimiter",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",116,"^:",7,"^;",116,"^<",25,"^75",["^1@",["^76",["^1@",[["^7@","^7A","~$delimiter"],["^7@","^7A","^7O","~$into"]]]]],"~:top-fn",["^ ","^7:",false,"~:fixed-arity",4,"^7=",4,"^77",[["^7@","^7A","^7O"],["^7@","^7A","^7O","^7P"]],"^75",["^1@",[["^7@","^7A","^7O"],["^7@","^7A","^7O","^7P"]]],"^79",["^1@",[null,null]]]],"^M","^4S","^8","sci/impl/parser/edamame.cljc","^<",25,"^7Q",["^ ","^7:",false,"^7R",4,"^7=",4,"^77",[["^7@","^7A","^7O"],["^7@","^7A","^7O","^7P"]],"^75",["^1@",[["^7@","^7A","^7O"],["^7@","^7A","^7O","^7P"]]],"^79",["^1@",[null,null]]],"^77",[["^7@","^7A","^7O"],["^7@","^7A","^7O","^7P"]],"^78",null,"^7R",4,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"~:methods",[["^ ","^7R",3,"^7:",false,"~:tag","^7L"],["^ ","^7R",4,"^7:",false,"^7T",["^L",["~$clj","^7L"]]]],"^9",116,"^;",116,"^7=",4,"^7>",true,"^75",["^1@",[["^7@","^7A","^7O"],["^7@","^7A","^7O","^7P"]]]],"~$location",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",54,"^:",7,"^;",54,"^<",15,"^75",["^1@",["^76",["^1@",[["^7A"]]]]]],"^M","^4P","^8","sci/impl/parser/edamame.cljc","^<",15,"^77",["^1@",[["^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",54,"^7;","^4>","^;",54,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7A"]]]]]],"~$throw-eof-while-reading",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",113,"^:",7,"^;",113,"^<",30,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"^M","^3?","^8","sci/impl/parser/edamame.cljc","^<",30,"^77",["^1@",[["^7@","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",113,"^7;","^7L","^;",113,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"~$->Loc",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^<",15,"^:",12,"~:internal-ctor",true,"~:factory","~:positional","^9",52,"^;",52,"^75",["^1@",["^76",["^1@",[["~$line","~$column"]]]]],"^7","Positional factory function for sci.impl.parser.edamame/Loc."],"^M","^3>","^8","sci/impl/parser/edamame.cljc","^<",15,"^77",["^1@",[["^80","^81"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7Y",true,"^7:",false,"^7Z","^7[","^9",52,"^7;","^4>","^;",52,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^80","^81"]]]]],"^7","Positional factory function for sci.impl.parser.edamame/Loc."],"~$parse-list",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",146,"^:",7,"^;",146,"^<",17,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"^M","^4X","^8","sci/impl/parser/edamame.cljc","^<",17,"^77",["^1@",[["^7@","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",146,"^7;","^7L","^;",146,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"~$auto-resolve",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",267,"^:",7,"^;",267,"^<",19,"^75",["^1@",["^76",["^1@",[["^7@","~$m","~$kns","^7A","~$next-val"],["^7@","~$m","^84","^7A","^85","^7H"]]]]],"^7","Returns namespace for given alias.","^7Q",["^ ","^7:",false,"^7R",6,"^7=",6,"^77",[["^7@","~$m","^84","^7A","^85"],["^7@","~$m","^84","^7A","^85","^7H"]],"^75",["^1@",[["^7@","~$m","^84","^7A","^85"],["^7@","~$m","^84","^7A","^85","^7H"]]],"^79",["^1@",[null,null]]]],"^M","^3H","^8","sci/impl/parser/edamame.cljc","^<",19,"^7Q",["^ ","^7:",false,"^7R",6,"^7=",6,"^77",[["^7@","~$m","^84","^7A","^85"],["^7@","~$m","^84","^7A","^85","^7H"]],"^75",["^1@",[["^7@","~$m","^84","^7A","^85"],["^7@","~$m","^84","^7A","^85","^7H"]]],"^79",["^1@",[null,null]]],"^77",[["^7@","~$m","^84","^7A","^85"],["^7@","~$m","^84","^7A","^85","^7H"]],"^78",null,"^7R",6,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^7S",[["^ ","^7R",5,"^7:",false,"^7T","^7L"],["^ ","^7R",6,"^7:",false,"^7T","^7L"]],"^9",267,"^;",267,"^7=",6,"^7>",true,"^75",["^1@",[["^7@","~$m","^84","^7A","^85"],["^7@","~$m","^84","^7A","^85","^7H"]]],"^7","Returns namespace for given alias."],"~$parse-sharp",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",298,"^:",7,"^;",298,"^<",18,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"^M","^21","^8","sci/impl/parser/edamame.cljc","^<",18,"^77",["^1@",[["^7@","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",298,"^7;",["^L",[null,"~$js/RegExp","^7U","^7L","~$cljs.core/ISet","~$cljs.tools.reader.impl.utils/ReaderConditional","^3L","~$not-native","~$cljs.core/MetaFn","^7M"]],"^;",298,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"~$throw-reader",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",91,"^:",7,"^;",91,"^<",19,"^75",["^1@",["^76",["^1@",[["^7@","^7A","^7H"],["^7@","^7A","^7H","~$data"],["~$_ctx","^7A","^7H","^8=","^7B"]]]]],"^7","Throw reader exception, including line line/column. line/column is\n  read from the reader but it can be overriden by passing loc\n  optional parameter.","^7Q",["^ ","^7:",false,"^7R",5,"^7=",5,"^77",[["^7@","^7A","^7H"],["^7@","^7A","^7H","^8="],["^8>","^7A","^7H","^8=","^7B"]],"^75",["^1@",[["^7@","^7A","^7H"],["^7@","^7A","^7H","^8="],["^8>","^7A","^7H","^8=","^7B"]]],"^79",["^1@",[null,null,null]]]],"^M","^20","^8","sci/impl/parser/edamame.cljc","^<",19,"^7Q",["^ ","^7:",false,"^7R",5,"^7=",5,"^77",[["^7@","^7A","^7H"],["^7@","^7A","^7H","^8="],["^8>","^7A","^7H","^8=","^7B"]],"^75",["^1@",[["^7@","^7A","^7H"],["^7@","^7A","^7H","^8="],["^8>","^7A","^7H","^8=","^7B"]]],"^79",["^1@",[null,null,null]]],"^77",[["^7@","^7A","^7H"],["^7@","^7A","^7H","^8="],["^8>","^7A","^7H","^8=","^7B"]],"^78",null,"^7R",5,"^79",["^1@",[null,null,null]],"^:",1,"^7:",false,"^7S",[["^ ","^7R",3,"^7:",false,"^7T","^7L"],["^ ","^7R",4,"^7:",false,"^7T","^7L"],["^ ","^7R",5,"^7:",false,"^7T","^7E"]],"^9",91,"^;",91,"^7=",5,"^7>",true,"^75",["^1@",[["^7@","^7A","^7H"],["^7@","^7A","^7H","^8="],["^8>","^7A","^7H","^8=","^7B"]]],"^7","Throw reader exception, including line line/column. line/column is\n  read from the reader but it can be overriden by passing loc\n  optional parameter."],"~$parse-first-matching-condition",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",200,"^:",7,"^;",200,"^<",37,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"^M","^3N","^8","sci/impl/parser/edamame.cljc","^<",37,"^77",["^1@",[["^7@","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",200,"^7;","^7L","^;",200,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"~$iobj?",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",477,"^:",7,"^;",477,"^<",12,"^75",["^1@",["^76",["^1@",[["~$obj"]]]]]],"^M","^24","^8","sci/impl/parser/edamame.cljc","^<",12,"^77",["^1@",[["^8A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",477,"^7;","^7<","^;",477,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["^8A"]]]]]],"~$get-auto-resolve",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",257,"^:",7,"^;",257,"^<",23,"^75",["^1@",["^76",["^1@",[["^7@","^7A","^85"],["^7@","^7A","^85","^7H"]]]]],"^7Q",["^ ","^7:",false,"^7R",4,"^7=",4,"^77",[["^7@","^7A","^85"],["^7@","^7A","^85","^7H"]],"^75",["^1@",[["^7@","^7A","^85"],["^7@","^7A","^85","^7H"]]],"^79",["^1@",[null,null]]]],"^M","^29","^8","sci/impl/parser/edamame.cljc","^<",23,"^7Q",["^ ","^7:",false,"^7R",4,"^7=",4,"^77",[["^7@","^7A","^85"],["^7@","^7A","^85","^7H"]],"^75",["^1@",[["^7@","^7A","^85"],["^7@","^7A","^85","^7H"]]],"^79",["^1@",[null,null]]],"^77",[["^7@","^7A","^85"],["^7@","^7A","^85","^7H"]],"^78",null,"^7R",4,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^7S",[["^ ","^7R",3,"^7:",false,"^7T","^7L"],["^ ","^7R",4,"^7:",false,"^7T","^7L"]],"^9",257,"^;",257,"^7=",4,"^7>",true,"^75",["^1@",[["^7@","^7A","^85"],["^7@","^7A","^85","^7H"]]]],"~$parse-symbol",["^ ","^M","^3V","^8","sci/impl/parser/edamame.cljc","^9",48,"^:",1,"^;",48,"^<",18,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",48,"^:",6,"^;",48,"^<",18]],"~$parse-map",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",369,"^:",7,"^;",369,"^<",16,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"^M","^3U","^8","sci/impl/parser/edamame.cljc","^<",16,"^77",["^1@",[["^7@","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",369,"^7;","^7L","^;",369,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"~$desugar-meta",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",468,"^:",7,"^;",468,"^<",19,"^75",["^1@",["^76",["^1@",[["~$f"]]]]],"^7","Resolves syntactical sugar in metadata"],"^M","^41","^8","sci/impl/parser/edamame.cljc","^<",19,"^77",["^1@",[["~$f"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",468,"^7;",["^L",[null,"~$cljs.core/IMap"]],"^;",468,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["~$f"]]]]],"^7","Resolves syntactical sugar in metadata"],"~$edn-read",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",31,"^:",7,"^;",31,"^<",15,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"^M","^2;","^8","sci/impl/parser/edamame.cljc","^<",15,"^77",["^1@",[["^7@","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",31,"^7;","^7L","^;",31,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"~$source-logging-reader",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",558,"^:",7,"^;",558,"^<",28,"^75",["^1@",["^76",["^1@",[["~$x"]]]]]],"^M","^2=","^8","sci/impl/parser/edamame.cljc","^<",28,"^77",["^1@",[["~$x"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",558,"^7;","^7L","^;",558,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["~$x"]]]]]],"~$parse-keyword",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",382,"^:",7,"^;",382,"^<",20,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"^M","^2S","^8","sci/impl/parser/edamame.cljc","^<",20,"^77",["^1@",[["^7@","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",382,"^7;",["^L",["^2P","^7M"]],"^;",382,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"~$dispatch-macro?",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",35,"^:",7,"^;",35,"^<",22,"^75",["^1@",["^76",["^1@",[["~$ch"]]]]]],"^M","^4L","^8","sci/impl/parser/edamame.cljc","^<",22,"^77",["^1@",[["^8K"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",35,"^7;","^7<","^;",35,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["^8K"]]]]]],"~$string-reader",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",519,"^:",7,"^;",519,"^<",20,"^75",["^1@",["^76",["^1@",[["~$s"]]]]],"^7","Create reader for strings."],"^M","^4M","^8","sci/impl/parser/edamame.cljc","^<",20,"^77",["^1@",[["~$s"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",519,"^7;","^7L","^;",519,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["~$s"]]]]],"^7","Create reader for strings."],"~$get-column-number",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",555,"^:",7,"^;",555,"^<",24,"^75",["^1@",["^76",["^1@",[["^7A"]]]]]],"^M","^33","^8","sci/impl/parser/edamame.cljc","^<",24,"^77",["^1@",[["^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",555,"^7;","^7L","^;",555,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7A"]]]]]],"~$read-token",["^ ","^M","^37","^8","sci/impl/parser/edamame.cljc","^9",47,"^:",1,"^;",47,"^<",16,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",47,"^:",6,"^;",47,"^<",16]],"~$kw-identical?",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",59,"^:",7,"^;",59,"^<",20,"^75",["^1@",["^76",["^1@",[["~$kw","~$v"]]]]]],"^M","^4O","^8","sci/impl/parser/edamame.cljc","^<",20,"^77",["^1@",[["^8P","~$v"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",59,"^7;","^7<","^;",59,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^8P","~$v"]]]]]],"~$throw-odd-map",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",357,"^:",7,"^;",357,"^<",20,"^75",["^1@",["^76",["^1@",[["^7@","^7A","^7B","~$elements"]]]]]],"^M","^4V","^8","sci/impl/parser/edamame.cljc","^<",20,"^77",["^1@",[["^7@","^7A","^7B","^8R"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",357,"^7;","^7E","^;",357,"^7=",4,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A","^7B","^8R"]]]]]],"~$non-match?",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",110,"^:",7,"^;",110,"^<",17,"^75",["^1@",["^76",["^1@",[["~$v"]]]]]],"^M","^3;","^8","sci/impl/parser/edamame.cljc","^<",17,"^77",["^1@",[["~$v"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",110,"^7;","^7<","^;",110,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["~$v"]]]]]],"~$non-match",["^ ","^M","^3A","^8","sci/impl/parser/edamame.cljc","^9",108,"^:",1,"^;",108,"^<",15,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",108,"^:",6,"^;",108,"^<",15],"^7T",["^L",["^7L","^4K"]]],"~$parse-reader-conditional",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",232,"^:",7,"^;",232,"^<",31,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"^M","^55","^8","sci/impl/parser/edamame.cljc","^<",31,"^77",["^1@",[["^7@","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",232,"^7;",["^L",["^7U","^7L","^89","^8:","^8;","^7M"]],"^;",232,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"~$parse-set",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",191,"^:",7,"^;",191,"^<",16,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"^M","^56","^8","sci/impl/parser/edamame.cljc","^<",16,"^77",["^1@",[["^7@","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",191,"^7;",["^L",["^7U","^7L","^88","^8;","^7M"]],"^;",191,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"~$skip-whitespace",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",81,"^:",7,"^;",81,"^<",22,"^75",["^1@",["^76",["^1@",[["^8>","^7A"]]]]],"^7","Skips whitespace. Returns reader. If end of stream is reached, returns nil."],"^M","^53","^8","sci/impl/parser/edamame.cljc","^<",22,"^77",["^1@",[["^8>","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",81,"^7;",["^L",["^8:","^7M"]],"^;",81,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^8>","^7A"]]]]],"^7","Skips whitespace. Returns reader. If end of stream is reached, returns nil."],"~$parse-namespaced-map",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",277,"^:",7,"^;",277,"^<",27,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"^M","^1X","^8","sci/impl/parser/edamame.cljc","^<",27,"^77",["^1@",[["^7@","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",277,"^7;","^7U","^;",277,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]]],"~$dispatch",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",402,"^:",7,"^;",402,"^<",15,"^75",["^1@",["^76",["^1@",[["^7@","^7A","~$c"]]]]]],"^M","^1W","^8","sci/impl/parser/edamame.cljc","^<",15,"^77",["^1@",[["^7@","^7A","~$c"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",402,"^7;",["^L",[null,"^87","^7U","^7L","^2P","^88","^89","^3L","^8:","^8;","^7M"]],"^;",402,"^7=",3,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A","~$c"]]]]]],"~$parse-next",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",482,"^:",7,"^;",482,"^<",17,"^75",["^1@",["^76",["^1@",[["^7@","^7A"],["^7@","^7A","~$desugar"]]]]],"^7Q",["^ ","^7:",false,"^7R",3,"^7=",3,"^77",[["^7@","^7A"],["^7@","^7A","^8["]],"^75",["^1@",[["^7@","^7A"],["^7@","^7A","^8["]]],"^79",["^1@",[null,null]]]],"^M","^1Y","^8","sci/impl/parser/edamame.cljc","^<",17,"^7Q",["^ ","^7:",false,"^7R",3,"^7=",3,"^77",[["^7@","^7A"],["^7@","^7A","^8["]],"^75",["^1@",[["^7@","^7A"],["^7@","^7A","^8["]]],"^79",["^1@",[null,null]]],"^77",[["^7@","^7A"],["^7@","^7A","^8["]],"^78",null,"^7R",3,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^7S",[["^ ","^7R",2,"^7:",false,"^7T","^7L"],["^ ","^7R",3,"^7:",false,"^7T",["^L",[null,"^87","^7U","^7L","^2P","^88","^89","^3L","^8:","^8;","^8F","^7M"]]]],"^9",482,"^;",482,"^7=",3,"^7>",true,"^75",["^1@",[["^7@","^7A"],["^7@","^7A","^8["]]]],"~$parse-string-all",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",533,"^:",7,"^;",533,"^<",23,"^75",["^1@",["^76",["^1@",[["~$s","^7K"]]]]]],"^M","^3O","^8","sci/impl/parser/edamame.cljc","^<",23,"^77",["^1@",[["~$s","^7K"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",533,"^7;","^7U","^;",533,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["~$s","^7K"]]]]]],"^7A",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",542,"^:",7,"^;",542,"^<",13,"^75",["^1@",["^76",["^1@",[["~$x"]]]]]],"^M","^3Z","^8","sci/impl/parser/edamame.cljc","^<",13,"^77",["^1@",[["~$x"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",542,"^7;","^7L","^;",542,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["~$x"]]]]]],"~$get-line-number",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",552,"^:",7,"^;",552,"^<",22,"^75",["^1@",["^76",["^1@",[["^7A"]]]]]],"^M","^2H","^8","sci/impl/parser/edamame.cljc","^<",22,"^77",["^1@",[["^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",552,"^7;","^7L","^;",552,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7A"]]]]]],"~$parse-comment",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",64,"^:",7,"^;",64,"^<",20,"^75",["^1@",["^76",["^1@",[["^7A"]]]]]],"^M","^4:","^8","sci/impl/parser/edamame.cljc","^<",20,"^77",["^1@",[["^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",64,"^7;","^8:","^;",64,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7A"]]]]]],"~$map->Loc",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^<",15,"^:",12,"^7Y",true,"^7Z","~:map","^9",52,"^;",52,"^75",["^1@",["^76",["^1@",[["~$G__53255"]]]]],"^7","Factory function for sci.impl.parser.edamame/Loc, taking a map of keywords to field values."],"^M","^2D","^8","sci/impl/parser/edamame.cljc","^<",15,"^77",["^1@",[["^95"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7Y",true,"^7:",false,"^7Z","^94","^9",52,"^7;","^4>","^;",52,"^7=",1,"^7>",true,"^75",["^1@",["^76",["^1@",[["^95"]]]]],"^7","Factory function for sci.impl.parser.edamame/Loc, taking a map of keywords to field values."],"~$Loc",["^ ","~:num-fields",2,"~:protocols",["^L",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","^4W","~$cljs.core/IAssociative","^8F","~$cljs.core/ILookup"]],"^M","^4>","^8","sci/impl/parser/edamame.cljc","^<",15,"~:type",true,"^:",12,"^7Y",true,"^9",52,"~:record",true,"^;",52,"^7T","~$function","~:skip-protocol-flag",["^L",["^99","^9:","^9;","^9<","^9=","^9>","^9?","^9@","^9A","^9B","^9C","^4W","^9D","^8F","^9E"]]],"~$read-regex-pattern",["^ ","^74",null,"^5",["^ ","^8","sci/impl/parser/edamame.cljc","^9",149,"^:",7,"^;",149,"^<",25,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]],"^7","Modeled after tools.reader/read-regex."],"^M","^4?","^8","sci/impl/parser/edamame.cljc","^<",25,"^77",["^1@",[["^7@","^7A"]]],"^78",null,"^79",["^1@",[null,null]],"^:",1,"^7:",false,"^9",149,"^7;",["^L",["^7L","~$string"]],"^;",149,"^7=",2,"^7>",true,"^75",["^1@",["^76",["^1@",[["^7@","^7A"]]]]],"^7","Modeled after tools.reader/read-regex."]],"^1>",["^ ","^X","^X","^14","^14"],"~:cljs.analyzer/constants",["^ ","^16",["^L",["~:sci.impl.parser.edamame/expected-delimiter","~:features","~:edamame/error","^U","^W","^7G","~:else","~:default","~:sci.impl.parser.edamame/suppress","^P","^M","~$rdr","~$validate-leading?","^8","~:readers","^<","~:tools.reader/opts","^8C","^7Q","^39","~:read-cond","^9F","^77","~:preserve","^7R","^1N","^79","~:edamame/opened-delimiter","^:","^7:","~$clojure.core/unquote-splicing","~$read-eval","^9","~:expr","^8N","~:sci.impl.parser.edamame/eof","~:keyword","~$clojure.core/deref","~:current","^44","^81","~:gensyms","~$clojure.core/unquote","~:edamame/expected-delimiter","^;","~$initch","~:edamame/read-cond-splicing","~$token","^7=","~:sci.impl.parser.edamame/opened-delimiter","^7T","~$var","^76","~:set","~:sci.impl.parser.edamame/cond-splice","^75","^80","^7","^7C","^94","~:test","~:buffer","~:char","~:auto-resolve"]],"~:order~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^58",[["^:F","~:static-fns"],true,["^:F","~:shadow-tweaks"],null,["^:F","~:source-map-inline"],null,["^:F","~:elide-asserts"],false,["^:F","~:optimize-constants"],null,["^:F","^1M"],null,["^:F","~:external-config"],null,["^:F","~:tooling-config"],null,["^:F","~:emit-constants"],null,["^:F","~:load-tests"],null,["^:F","~:form-size-threshold"],null,["^:F","~:data-readers"],null,["^:F","~:infer-externs"],"~:auto",["^:F","^1O"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^:F","~:fn-invoke-direct"],null,["^:F","~:source-map"],"/dev/null"]]]