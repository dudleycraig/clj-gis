["^ ","~:output",["^ ","~:js","goog.provide('sci.impl.analyzer');\nsci.impl.analyzer.special_syms = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [new cljs.core.Symbol(null,\"try\",\"try\",-1273693247,null),\"null\",new cljs.core.Symbol(null,\"finally\",\"finally\",-1065347064,null),\"null\",new cljs.core.Symbol(null,\"do\",\"do\",1686842252,null),\"null\",new cljs.core.Symbol(null,\"if\",\"if\",1181717262,null),\"null\",new cljs.core.Symbol(null,\"new\",\"new\",-444906321,null),\"null\",new cljs.core.Symbol(null,\"recur\",\"recur\",1202958259,null),\"null\",new cljs.core.Symbol(null,\"set!\",\"set!\",250714521,null),\"null\",new cljs.core.Symbol(null,\".\",\".\",1975675962,null),\"null\",new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),\"null\",new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),\"null\",new cljs.core.Symbol(null,\"catch\",\"catch\",-1616370245,null),\"null\",new cljs.core.Symbol(null,\"throw\",\"throw\",595905694,null),\"null\",new cljs.core.Symbol(null,\"def\",\"def\",597100991,null),\"null\"], null), null);\nsci.impl.analyzer.throw_error_with_location = (function sci$impl$analyzer$throw_error_with_location(msg,node){\nreturn sci.impl.utils.throw_error_with_location.cljs$core$IFn$_invoke$arity$3(msg,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"phase\",\"phase\",575722892),\"analysis\"], null));\n});\n\nsci.impl.analyzer.macroexpand_1 = (function sci$impl$analyzer$macroexpand_1(ctx,expr){\nvar original_expr = expr;\nif(cljs.core.seq_QMARK_(expr)){\nvar op = cljs.core.first(expr);\nif((op instanceof cljs.core.Symbol)){\nif(cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(sci.impl.analyzer.special_syms,op))){\nreturn expr;\n} else {\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null,\"for\",\"for\",316745208,null),null], null), null),op)){\nvar G__54402 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(\"sci.impl\",\"macroexpanding\",\"sci.impl/macroexpanding\",2113471825),true);\nvar G__54403 = expr;\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(G__54402,G__54403) : sci.impl.analyzer.analyze.call(null,G__54402,G__54403));\n} else {\nvar f = sci.impl.resolve.resolve_symbol.cljs$core$IFn$_invoke$arity$3(ctx,op,true);\nvar f__$1 = (cljs.core.truth_((function (){var and__4210__auto__ = sci.impl.vars.var_QMARK_(f);\nif(and__4210__auto__){\nreturn sci.impl.vars.isMacro(f);\n} else {\nreturn and__4210__auto__;\n}\n})())?cljs.core.deref(f):f);\nif(cljs.core.truth_(sci.impl.utils.macro_QMARK_(f__$1))){\nvar f__$2 = (((sci.impl.utils.needs_ctx === (function (){var G__54404 = f__$1;\nvar G__54404__$1 = (((G__54404 == null))?null:cljs.core.meta(G__54404));\nif((G__54404__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"sci.impl\",\"op\",\"sci.impl/op\",950953978).cljs$core$IFn$_invoke$arity$1(G__54404__$1);\n}\n})()))?cljs.core.partial.cljs$core$IFn$_invoke$arity$2(f__$1,ctx):f__$1);\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f__$2,original_expr,new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192).cljs$core$IFn$_invoke$arity$1(ctx),cljs.core.rest(expr));\n} else {\nreturn expr;\n}\n\n}\n}\n} else {\nreturn expr;\n}\n} else {\nreturn expr;\n}\n});\nsci.impl.analyzer.macroexpand = (function sci$impl$analyzer$macroexpand(ctx,form){\nvar ex = sci.impl.analyzer.macroexpand_1(ctx,form);\nif((ex === form)){\nreturn form;\n} else {\nreturn (sci.impl.analyzer.macroexpand.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.macroexpand.cljs$core$IFn$_invoke$arity$2(ctx,ex) : sci.impl.analyzer.macroexpand.call(null,ctx,ex));\n}\n});\ncljs.core.vreset_BANG_(sci.impl.utils.macroexpand_STAR_,sci.impl.analyzer.macroexpand);\ncljs.core.vreset_BANG_(sci.impl.utils.macroexpand_1_STAR_,sci.impl.analyzer.macroexpand_1);\nsci.impl.analyzer.analyze_children = (function sci$impl$analyzer$analyze_children(ctx,children){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__54407_SHARP_){\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,p1__54407_SHARP_) : sci.impl.analyzer.analyze.call(null,ctx,p1__54407_SHARP_));\n}),children);\n});\nsci.impl.analyzer.maybe_destructured = (function sci$impl$analyzer$maybe_destructured(params,body){\nif(cljs.core.every_QMARK_(cljs.core.symbol_QMARK_,params)){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"params\",\"params\",710516235),params,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),body], null);\n} else {\nvar params__$1 = params;\nvar new_params = cljs.core.with_meta(cljs.core.PersistentVector.EMPTY,cljs.core.meta(params__$1));\nvar lets = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.truth_(params__$1)){\nif((cljs.core.first(params__$1) instanceof cljs.core.Symbol)){\nvar G__54897 = cljs.core.next(params__$1);\nvar G__54898 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_params,cljs.core.first(params__$1));\nvar G__54899 = lets;\nparams__$1 = G__54897;\nnew_params = G__54898;\nlets = G__54899;\ncontinue;\n} else {\nvar gparam = cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(\"p__\");\nvar G__54900 = cljs.core.next(params__$1);\nvar G__54901 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_params,gparam);\nvar G__54902 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(lets,cljs.core.first(params__$1)),gparam);\nparams__$1 = G__54900;\nnew_params = G__54901;\nlets = G__54902;\ncontinue;\n}\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"params\",\"params\",710516235),new_params,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"let\",\"cljs.core/let\",-308701135,null),null,(1),null)),(new cljs.core.List(null,lets,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0))))], null)], null);\n}\nbreak;\n}\n}\n});\nsci.impl.analyzer.expand_fn_args_PLUS_body = (function sci$impl$analyzer$expand_fn_args_PLUS_body(p__54430,fn_name,p__54431,macro_QMARK_){\nvar map__54434 = p__54430;\nvar map__54434__$1 = cljs.core.__destructure_map(map__54434);\nvar ctx = map__54434__$1;\nvar fn_expr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54434__$1,new cljs.core.Keyword(null,\"fn-expr\",\"fn-expr\",-933027985));\nvar vec__54436 = p__54431;\nvar seq__54437 = cljs.core.seq(vec__54436);\nvar first__54438 = cljs.core.first(seq__54437);\nvar seq__54437__$1 = cljs.core.next(seq__54437);\nvar binding_vector = first__54438;\nvar body_exprs = seq__54437__$1;\nif(cljs.core.truth_(binding_vector)){\n} else {\nsci.impl.analyzer.throw_error_with_location(\"Parameter declaration missing.\",fn_expr);\n}\n\nif(cljs.core.vector_QMARK_(binding_vector)){\n} else {\nsci.impl.analyzer.throw_error_with_location(\"Parameter declaration should be a vector\",fn_expr);\n}\n\nvar binding_vector__$1 = (cljs.core.truth_(macro_QMARK_)?cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"&form\",\"&form\",1482799337,null),new cljs.core.Symbol(null,\"&env\",\"&env\",-919163083,null)], null),binding_vector):binding_vector);\nvar fixed_args = cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__54414_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"&\",\"&\",-2144855648,null),p1__54414_SHARP_);\n}),binding_vector__$1);\nvar fixed_arity = cljs.core.count(fixed_args);\nvar var_arg_name = cljs.core.second(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__54415_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"&\",\"&\",-2144855648,null),p1__54415_SHARP_);\n}),binding_vector__$1));\nvar next_body = cljs.core.next(body_exprs);\nvar conds = ((next_body)?(function (){var e = cljs.core.first(body_exprs);\nif(cljs.core.map_QMARK_(e)){\nreturn e;\n} else {\nreturn null;\n}\n})():null);\nvar body_exprs__$1 = (cljs.core.truth_(conds)?next_body:body_exprs);\nvar conds__$1 = (function (){var or__4212__auto__ = conds;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn cljs.core.meta(binding_vector__$1);\n}\n})();\nvar pre = new cljs.core.Keyword(null,\"pre\",\"pre\",2118456869).cljs$core$IFn$_invoke$arity$1(conds__$1);\nvar post = new cljs.core.Keyword(null,\"post\",\"post\",269697687).cljs$core$IFn$_invoke$arity$1(conds__$1);\nvar body_exprs__$2 = (cljs.core.truth_(post)?cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"let\",\"cljs.core/let\",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),null,(1),null)),(new cljs.core.List(null,((((1) < cljs.core.count(body_exprs__$1)))?cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,\"do\",\"do\",1686842252,null),null,(1),null)),body_exprs__$1))):cljs.core.first(body_exprs__$1)),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (c){\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"assert\",\"cljs.core/assert\",1075777968,null),null,(1),null)),(new cljs.core.List(null,c,null,(1),null)))));\n}),post),(new cljs.core.List(null,new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),null,(1),null))], 0)))),null,(1),null))))):body_exprs__$1);\nvar body_exprs__$3 = (cljs.core.truth_(pre)?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (c){\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"assert\",\"cljs.core/assert\",1075777968,null),null,(1),null)),(new cljs.core.List(null,c,null,(1),null)))));\n}),pre),body_exprs__$2):body_exprs__$2);\nvar map__54441 = sci.impl.analyzer.maybe_destructured(binding_vector__$1,body_exprs__$3);\nvar map__54441__$1 = cljs.core.__destructure_map(map__54441);\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54441__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54441__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar ctx__$1 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(ctx,new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192),cljs.core.merge,cljs.core.zipmap(params,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(null)));\nvar body__$1 = sci.impl.analyzer.analyze_children(ctx__$1,body);\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"sci.impl\",\"body\",\"sci.impl/body\",-1493886648),body__$1,new cljs.core.Keyword(\"sci.impl\",\"params\",\"sci.impl/params\",-175360738),params,new cljs.core.Keyword(\"sci.impl\",\"fixed-arity\",\"sci.impl/fixed-arity\",-1251617052),fixed_arity,new cljs.core.Keyword(\"sci.impl\",\"var-arg-name\",\"sci.impl/var-arg-name\",1800498100),var_arg_name,new cljs.core.Keyword(\"sci.impl\",\"fn-name\",\"sci.impl/fn-name\",-1172300569),fn_name], null);\n});\nsci.impl.analyzer.analyzed_fn_meta = (function sci$impl$analyzer$analyzed_fn_meta(ctx,m){\nvar meta_needs_eval_QMARK_ = (cljs.core.count(m) > (2));\nvar m__$1 = ((meta_needs_eval_QMARK_)?sci.impl.utils.mark_eval((sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,m) : sci.impl.analyzer.analyze.call(null,ctx,m))):m);\nreturn m__$1;\n});\nsci.impl.analyzer.expand_fn = (function sci$impl$analyzer$expand_fn(ctx,p__54459,macro_QMARK_){\nvar vec__54461 = p__54459;\nvar seq__54462 = cljs.core.seq(vec__54461);\nvar first__54463 = cljs.core.first(seq__54462);\nvar seq__54462__$1 = cljs.core.next(seq__54462);\nvar _fn = first__54463;\nvar first__54463__$1 = cljs.core.first(seq__54462__$1);\nvar seq__54462__$2 = cljs.core.next(seq__54462__$1);\nvar name_QMARK_ = first__54463__$1;\nvar body = seq__54462__$2;\nvar fn_expr = vec__54461;\nvar ctx__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(null,\"fn-expr\",\"fn-expr\",-933027985),fn_expr);\nvar fn_name = (((name_QMARK_ instanceof cljs.core.Symbol))?name_QMARK_:null);\nvar body__$1 = (cljs.core.truth_(fn_name)?body:cljs.core.cons(name_QMARK_,body));\nvar bodies = ((cljs.core.seq_QMARK_(cljs.core.first(body__$1)))?body__$1:new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [body__$1], null));\nvar ctx__$2 = (cljs.core.truth_(fn_name)?cljs.core.assoc_in(ctx__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192),fn_name], null),null):ctx__$1);\nvar analyzed_bodies = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__54470,body__$2){\nvar map__54472 = p__54470;\nvar map__54472__$1 = cljs.core.__destructure_map(map__54472);\nvar acc = map__54472__$1;\nvar max_fixed = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54472__$1,new cljs.core.Keyword(null,\"max-fixed\",\"max-fixed\",166770124));\nvar min_varargs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54472__$1,new cljs.core.Keyword(null,\"min-varargs\",\"min-varargs\",1999010596));\nvar arglist = cljs.core.first(body__$2);\nvar body__$3 = sci.impl.analyzer.expand_fn_args_PLUS_body(ctx__$2,fn_name,body__$2,macro_QMARK_);\nvar body__$4 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(body__$3,new cljs.core.Keyword(\"sci.impl\",\"arglist\",\"sci.impl/arglist\",2082561957),arglist);\nvar var_arg_name = new cljs.core.Keyword(\"sci.impl\",\"var-arg-name\",\"sci.impl/var-arg-name\",1800498100).cljs$core$IFn$_invoke$arity$1(body__$4);\nvar fixed_arity = new cljs.core.Keyword(\"sci.impl\",\"fixed-arity\",\"sci.impl/fixed-arity\",-1251617052).cljs$core$IFn$_invoke$arity$1(body__$4);\nvar new_min_varargs = (cljs.core.truth_(var_arg_name)?fixed_arity:null);\nif(cljs.core.truth_((function (){var and__4210__auto__ = var_arg_name;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn min_varargs;\n} else {\nreturn and__4210__auto__;\n}\n})())){\nsci.impl.analyzer.throw_error_with_location(\"Can't have more than 1 variadic overload\",fn_expr);\n} else {\n}\n\nif(cljs.core.truth_((function (){var and__4210__auto__ = cljs.core.not(var_arg_name);\nif(and__4210__auto__){\nvar and__4210__auto____$1 = min_varargs;\nif(cljs.core.truth_(and__4210__auto____$1)){\nreturn (fixed_arity > min_varargs);\n} else {\nreturn and__4210__auto____$1;\n}\n} else {\nreturn and__4210__auto__;\n}\n})())){\nsci.impl.analyzer.throw_error_with_location(\"Can't have fixed arity function with more params than variadic function\",fn_expr);\n} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(acc,new cljs.core.Keyword(null,\"min-varargs\",\"min-varargs\",1999010596),new_min_varargs,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"max-fixed\",\"max-fixed\",166770124),(function (){var x__4295__auto__ = new cljs.core.Keyword(\"sci.impl\",\"fixed-arity\",\"sci.impl/fixed-arity\",-1251617052).cljs$core$IFn$_invoke$arity$1(body__$4);\nvar y__4296__auto__ = max_fixed;\nreturn ((x__4295__auto__ > y__4296__auto__) ? x__4295__auto__ : y__4296__auto__);\n})()], 0)),new cljs.core.Keyword(null,\"bodies\",\"bodies\",-1295887172),cljs.core.conj,body__$4),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.conj,arglist);\n}),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"bodies\",\"bodies\",-1295887172),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"min-var-args\",\"min-var-args\",-1883389660),null,new cljs.core.Keyword(null,\"max-fixed\",\"max-fixed\",166770124),(-1)], null),bodies);\nvar arities = new cljs.core.Keyword(null,\"bodies\",\"bodies\",-1295887172).cljs$core$IFn$_invoke$arity$1(analyzed_bodies);\nvar arglists = new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754).cljs$core$IFn$_invoke$arity$1(analyzed_bodies);\nvar fn_meta = cljs.core.meta(fn_expr);\nvar ana_fn_meta = sci.impl.analyzer.analyzed_fn_meta(ctx__$2,fn_meta);\nvar fn_meta__$1 = (((fn_meta === ana_fn_meta))?null:cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(ana_fn_meta,new cljs.core.Keyword(null,\"line\",\"line\",212345235),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514)], 0)));\nreturn cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"sci.impl\",\"fn-bodies\",\"sci.impl/fn-bodies\",134751661),arities,new cljs.core.Keyword(\"sci.impl\",\"fn-name\",\"sci.impl/fn-name\",-1172300569),fn_name,new cljs.core.Keyword(\"sci.impl\",\"arglists\",\"sci.impl/arglists\",-802264395),arglists,new cljs.core.Keyword(\"sci.impl\",\"fn\",\"sci.impl/fn\",1695180073),true,new cljs.core.Keyword(\"sci.impl\",\"fn-meta\",\"sci.impl/fn-meta\",1093684639),fn_meta__$1], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"sci.impl\",\"op\",\"sci.impl/op\",950953978),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)], null));\n});\nsci.impl.analyzer.expand_let_STAR_ = (function sci$impl$analyzer$expand_let_STAR_(ctx,destructured_let_bindings,exprs){\nvar vec__54537 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__54553,p__54554){\nvar vec__54560 = p__54553;\nvar ctx__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54560,(0),null);\nvar new_let_bindings = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54560,(1),null);\nvar vec__54564 = p__54554;\nvar binding_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54564,(0),null);\nvar binding_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54564,(1),null);\nvar v = (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx__$1,binding_value) : sci.impl.analyzer.analyze.call(null,ctx__$1,binding_value));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.update.cljs$core$IFn$_invoke$arity$5(ctx__$1,new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192),cljs.core.assoc,binding_name,v),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(new_let_bindings,binding_name,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([v], 0))], null);\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ctx,cljs.core.PersistentVector.EMPTY], null),cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),destructured_let_bindings));\nvar ctx__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54537,(0),null);\nvar new_let_bindings = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54537,(1),null);\nvar body = sci.impl.analyzer.analyze_children(ctx__$1,exprs);\nreturn cljs.core.with_meta((function (ctx__$2){\nreturn sci.impl.evaluator.eval_let(ctx__$2,new_let_bindings,body);\n}),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"sci.impl\",\"op\",\"sci.impl/op\",950953978),sci.impl.utils.evaluate], null));\n});\n/**\n * The let macro from clojure.core\n */\nsci.impl.analyzer.expand_let = (function sci$impl$analyzer$expand_let(ctx,p__54581){\nvar vec__54582 = p__54581;\nvar seq__54583 = cljs.core.seq(vec__54582);\nvar first__54584 = cljs.core.first(seq__54583);\nvar seq__54583__$1 = cljs.core.next(seq__54583);\nvar _let = first__54584;\nvar first__54584__$1 = cljs.core.first(seq__54583__$1);\nvar seq__54583__$2 = cljs.core.next(seq__54583__$1);\nvar let_bindings = first__54584__$1;\nvar exprs = seq__54583__$2;\nvar let_bindings__$1 = sci.impl.destructure.destructure(let_bindings);\nreturn sci.impl.analyzer.expand_let_STAR_(ctx,let_bindings__$1,exprs);\n});\nsci.impl.analyzer.expand_def = (function sci$impl$analyzer$expand_def(ctx,expr){\nvar vec__54591 = expr;\nvar _def = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54591,(0),null);\nvar var_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54591,(1),null);\nvar _QMARK_docstring = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54591,(2),null);\nvar _QMARK_init = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54591,(3),null);\nvar G__54596_54932 = ctx;\nvar G__54597_54933 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,var_name], null);\n(sci.impl.analyzer.expand_declare.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.expand_declare.cljs$core$IFn$_invoke$arity$2(G__54596_54932,G__54597_54933) : sci.impl.analyzer.expand_declare.call(null,G__54596_54932,G__54597_54933));\n\nif(cljs.core.simple_symbol_QMARK_(var_name)){\n} else {\nsci.impl.analyzer.throw_error_with_location(\"Var name should be simple symbol.\",expr);\n}\n\nvar arg_count = cljs.core.count(expr);\nvar docstring = ((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((4),arg_count)) && (typeof _QMARK_docstring === 'string')))?_QMARK_docstring:null);\nvar expected_arg_count = (cljs.core.truth_(docstring)?(4):(3));\nif((arg_count <= expected_arg_count)){\n} else {\nthrow (new Error(\"Too many arguments to def\"));\n}\n\nvar init = (cljs.core.truth_(docstring)?_QMARK_init:_QMARK_docstring);\nvar init__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),arg_count))?new cljs.core.Keyword(\"sci.impl\",\"var.unbound\",\"sci.impl/var.unbound\",-1824207647):(sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,init) : sci.impl.analyzer.analyze.call(null,ctx,init)));\nvar m = cljs.core.meta(var_name);\nvar m__$1 = (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,m) : sci.impl.analyzer.analyze.call(null,ctx,m));\nvar m__$2 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m__$1,new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),cljs.core.deref(sci.impl.vars.current_ns));\nvar m__$3 = (cljs.core.truth_(docstring)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m__$2,new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),docstring):m__$2);\nvar var_name__$1 = cljs.core.with_meta(var_name,m__$3);\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,new cljs.core.Symbol(null,\"def\",\"def\",597100991,null),(new cljs.core.List(null,var_name__$1,(new cljs.core.List(null,init__$1,null,(1),null)),(2),null)),(3),null)));\n});\nsci.impl.analyzer.expand_defn = (function sci$impl$analyzer$expand_defn(ctx,p__54611){\nvar vec__54613 = p__54611;\nvar seq__54614 = cljs.core.seq(vec__54613);\nvar first__54615 = cljs.core.first(seq__54614);\nvar seq__54614__$1 = cljs.core.next(seq__54614);\nvar op = first__54615;\nvar first__54615__$1 = cljs.core.first(seq__54614__$1);\nvar seq__54614__$2 = cljs.core.next(seq__54614__$1);\nvar fn_name = first__54615__$1;\nvar body = seq__54614__$2;\nvar expr = vec__54613;\nif(cljs.core.simple_symbol_QMARK_(fn_name)){\n} else {\nsci.impl.analyzer.throw_error_with_location(\"Var name should be simple symbol.\",expr);\n}\n\nvar G__54619_54937 = ctx;\nvar G__54620_54938 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,fn_name], null);\n(sci.impl.analyzer.expand_declare.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.expand_declare.cljs$core$IFn$_invoke$arity$2(G__54619_54937,G__54620_54938) : sci.impl.analyzer.expand_declare.call(null,G__54619_54937,G__54620_54938));\n\nvar macro_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"defmacro\",cljs.core.name(op));\nvar vec__54623 = cljs.core.split_with(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.not,cljs.core.sequential_QMARK_),body);\nvar pre_body = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54623,(0),null);\nvar body__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54623,(1),null);\nvar _ = ((cljs.core.empty_QMARK_(body__$1))?sci.impl.analyzer.throw_error_with_location(\"Parameter declaration missing.\",expr):null);\nvar docstring = (function (){var temp__5753__auto__ = cljs.core.first(pre_body);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar ds = temp__5753__auto__;\nif(typeof ds === 'string'){\nreturn ds;\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n})();\nvar meta_map = (function (){var temp__5753__auto__ = cljs.core.last(pre_body);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar m = temp__5753__auto__;\nif(cljs.core.map_QMARK_(m)){\nreturn m;\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n})();\nvar meta_map__$1 = (function (){var G__54633 = ctx;\nvar G__54634 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.meta(fn_name),cljs.core.meta(expr),meta_map], 0));\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(G__54633,G__54634) : sci.impl.analyzer.analyze.call(null,G__54633,G__54634));\n})();\nvar fn_body = cljs.core.with_meta(cljs.core.cons(new cljs.core.Symbol(null,\"fn\",\"fn\",465265323,null),body__$1),cljs.core.meta(expr));\nvar f = sci.impl.analyzer.expand_fn(ctx,fn_body,macro_QMARK_);\nvar arglists = cljs.core.seq(new cljs.core.Keyword(\"sci.impl\",\"arglists\",\"sci.impl/arglists\",-802264395).cljs$core$IFn$_invoke$arity$1(f));\nvar meta_map__$2 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(meta_map__$1,new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),cljs.core.deref(sci.impl.vars.current_ns),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),arglists], 0));\nvar fn_name__$1 = cljs.core.with_meta(fn_name,(function (){var G__54640 = meta_map__$2;\nvar G__54640__$1 = (cljs.core.truth_(docstring)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__54640,new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),docstring):G__54640);\nif(macro_QMARK_){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__54640__$1,new cljs.core.Keyword(null,\"macro\",\"macro\",-867863404),true);\n} else {\nreturn G__54640__$1;\n}\n})());\nvar f__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(f,new cljs.core.Keyword(\"sci\",\"macro\",\"sci/macro\",-868536151),macro_QMARK_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"sci.impl\",\"fn-name\",\"sci.impl/fn-name\",-1172300569),fn_name__$1,new cljs.core.Keyword(\"sci.impl\",\"var\",\"sci.impl/var\",-2041185552),true], 0));\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,new cljs.core.Symbol(null,\"def\",\"def\",597100991,null),(new cljs.core.List(null,fn_name__$1,(new cljs.core.List(null,f__$1,null,(1),null)),(2),null)),(3),null)));\n});\nsci.impl.analyzer.expand_loop = (function sci$impl$analyzer$expand_loop(ctx,expr){\nvar bv = cljs.core.second(expr);\nvar arg_names = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),bv);\nvar init_vals = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),cljs.core.rest(bv));\nvar vec__54647 = ((cljs.core.every_QMARK_(cljs.core.symbol_QMARK_,arg_names))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [bv,arg_names], null):(function (){var syms = cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(cljs.core.count(arg_names),(function (){\nreturn cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();\n}));\nvar bv1 = cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,syms,init_vals);\nvar bv2 = cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,arg_names,syms);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.cat,cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(bv1,bv2)),syms], null);\n})());\nvar bv__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54647,(0),null);\nvar syms = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54647,(1),null);\nvar body = cljs.core.nnext(expr);\nvar expansion = (new cljs.core.List(null,new cljs.core.Symbol(null,\"let\",\"let\",358118826,null),(new cljs.core.List(null,bv__$1,(new cljs.core.List(null,cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(arg_names),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),syms),null,(1),null)),(2),null)),(3),null));\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,expansion) : sci.impl.analyzer.analyze.call(null,ctx,expansion));\n});\nsci.impl.analyzer.expand_lazy_seq = (function sci$impl$analyzer$expand_lazy_seq(ctx,expr){\nvar body = cljs.core.rest(expr);\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"lazy-seq\",\"cljs.core/lazy-seq\",627681297,null),(new cljs.core.List(null,(function (){var G__54659 = ctx;\nvar G__54660 = (new cljs.core.List(null,new cljs.core.Symbol(null,\"fn\",\"fn\",465265323,null),(new cljs.core.List(null,cljs.core.PersistentVector.EMPTY,(new cljs.core.List(null,cljs.core.cons(new cljs.core.Symbol(null,\"do\",\"do\",1686842252,null),body),null,(1),null)),(2),null)),(3),null));\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(G__54659,G__54660) : sci.impl.analyzer.analyze.call(null,G__54659,G__54660));\n})(),null,(1),null)),(2),null)));\n});\nsci.impl.analyzer.expand_if = (function sci$impl$analyzer$expand_if(ctx,p__54663){\nvar vec__54664 = p__54663;\nvar seq__54665 = cljs.core.seq(vec__54664);\nvar first__54666 = cljs.core.first(seq__54665);\nvar seq__54665__$1 = cljs.core.next(seq__54665);\nvar _if = first__54666;\nvar exprs = seq__54665__$1;\nvar expr = vec__54664;\nvar G__54668 = cljs.core.count(exprs);\nswitch (G__54668) {\ncase (0):\ncase (1):\nreturn sci.impl.analyzer.throw_error_with_location(\"Too few arguments to if\",expr);\n\nbreak;\ncase (2):\ncase (3):\nvar vec__54670 = sci.impl.analyzer.analyze_children(ctx,exprs);\nvar cond = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54670,(0),null);\nvar then = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54670,(1),null);\nvar else$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54670,(2),null);\nreturn cljs.core.with_meta((function (ctx__$1){\nreturn sci.impl.evaluator.eval_if(ctx__$1,cond,then,else$);\n}),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"sci.impl\",\"op\",\"sci.impl/op\",950953978),sci.impl.utils.evaluate], null));\n\nbreak;\ndefault:\nreturn sci.impl.analyzer.throw_error_with_location(\"Too many arguments to if\",expr);\n\n}\n});\nsci.impl.analyzer.expand_case = (function sci$impl$analyzer$expand_case(ctx,expr){\nvar v = (function (){var G__54674 = ctx;\nvar G__54675 = cljs.core.second(expr);\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(G__54674,G__54675) : sci.impl.analyzer.analyze.call(null,G__54674,G__54675));\n})();\nvar clauses = cljs.core.nnext(expr);\nvar match_clauses = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),clauses);\nvar result_clauses = sci.impl.analyzer.analyze_children(ctx,cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),cljs.core.rest(clauses)));\nvar default$ = ((cljs.core.odd_QMARK_(cljs.core.count(clauses)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"val\",\"val\",128701612),(function (){var G__54679 = ctx;\nvar G__54680 = cljs.core.last(clauses);\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(G__54679,G__54680) : sci.impl.analyzer.analyze.call(null,G__54679,G__54680));\n})()], null):null);\nvar cases = cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(match_clauses,result_clauses);\nvar assoc_new = (function (m,k,v__$1){\nif((!(cljs.core.contains_QMARK_(m,k)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,v__$1);\n} else {\nreturn sci.impl.analyzer.throw_error_with_location([\"Duplicate case test constant \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(k)].join(''),expr);\n}\n});\nvar case_map = (function (){var cases__$1 = cljs.core.seq(cases);\nvar ret_map = cljs.core.PersistentArrayMap.EMPTY;\nwhile(true){\nif(cases__$1){\nvar vec__54690 = cases__$1;\nvar seq__54691 = cljs.core.seq(vec__54690);\nvar first__54692 = cljs.core.first(seq__54691);\nvar seq__54691__$1 = cljs.core.next(seq__54691);\nvar k = first__54692;\nvar first__54692__$1 = cljs.core.first(seq__54691__$1);\nvar seq__54691__$2 = cljs.core.next(seq__54691__$1);\nvar v__$1 = first__54692__$1;\nvar cases__$2 = seq__54691__$2;\nif(cljs.core.list_QMARK_(k)){\nvar G__54957 = cases__$2;\nvar G__54958 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (cases__$1,ret_map,vec__54690,seq__54691,first__54692,seq__54691__$1,k,first__54692__$1,seq__54691__$2,v__$1,cases__$2,v,clauses,match_clauses,result_clauses,default$,cases,assoc_new){\nreturn (function (acc,k__$1){\nreturn assoc_new(acc,k__$1,v__$1);\n});})(cases__$1,ret_map,vec__54690,seq__54691,first__54692,seq__54691__$1,k,first__54692__$1,seq__54691__$2,v__$1,cases__$2,v,clauses,match_clauses,result_clauses,default$,cases,assoc_new))\n,ret_map,k);\ncases__$1 = G__54957;\nret_map = G__54958;\ncontinue;\n} else {\nvar G__54959 = cases__$2;\nvar G__54960 = assoc_new(ret_map,k,v__$1);\ncases__$1 = G__54959;\nret_map = G__54960;\ncontinue;\n}\n} else {\nreturn ret_map;\n}\nbreak;\n}\n})();\nvar ret = sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,new cljs.core.Symbol(null,\"case\",\"case\",-1510733573,null),(new cljs.core.List(null,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"case-map\",\"case-map\",955082964),case_map,new cljs.core.Keyword(null,\"case-val\",\"case-val\",880926521),v,new cljs.core.Keyword(null,\"case-default\",\"case-default\",1140470708),default$], null),(new cljs.core.List(null,default$,null,(1),null)),(2),null)),(3),null)));\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(ret);\n});\nsci.impl.analyzer.expand_try = (function sci$impl$analyzer$expand_try(ctx,p__54699){\nvar vec__54700 = p__54699;\nvar seq__54701 = cljs.core.seq(vec__54700);\nvar first__54702 = cljs.core.first(seq__54701);\nvar seq__54701__$1 = cljs.core.next(seq__54701);\nvar _try = first__54702;\nvar body = seq__54701__$1;\nvar vec__54704 = (function (){var exprs = cljs.core.seq(body);\nvar body_exprs = cljs.core.PersistentVector.EMPTY;\nvar catch_exprs = cljs.core.PersistentVector.EMPTY;\nvar finally_expr = null;\nwhile(true){\nif(exprs){\nvar expr = cljs.core.first(exprs);\nvar exprs__$1 = cljs.core.next(exprs);\nif(((cljs.core.seq_QMARK_(expr)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"catch\",\"catch\",-1616370245,null),cljs.core.first(expr))))){\nvar G__54963 = exprs__$1;\nvar G__54964 = body_exprs;\nvar G__54965 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(catch_exprs,expr);\nvar G__54966 = finally_expr;\nexprs = G__54963;\nbody_exprs = G__54964;\ncatch_exprs = G__54965;\nfinally_expr = G__54966;\ncontinue;\n} else {\nif(((cljs.core.not(exprs__$1)) && (((cljs.core.seq_QMARK_(expr)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"finally\",\"finally\",-1065347064,null),cljs.core.first(expr))))))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [body_exprs,catch_exprs,expr], null);\n} else {\nvar G__54967 = exprs__$1;\nvar G__54968 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(body_exprs,expr);\nvar G__54969 = catch_exprs;\nvar G__54970 = finally_expr;\nexprs = G__54967;\nbody_exprs = G__54968;\ncatch_exprs = G__54969;\nfinally_expr = G__54970;\ncontinue;\n\n}\n}\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [body_exprs,catch_exprs,finally_expr], null);\n}\nbreak;\n}\n})();\nvar body_exprs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54704,(0),null);\nvar catches = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54704,(1),null);\nvar finally$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54704,(2),null);\nvar body__$1 = (function (){var G__54714 = ctx;\nvar G__54715 = cljs.core.cons(new cljs.core.Symbol(null,\"do\",\"do\",1686842252,null),body_exprs);\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(G__54714,G__54715) : sci.impl.analyzer.analyze.call(null,G__54714,G__54715));\n})();\nvar catches__$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (c){\nvar vec__54718 = c;\nvar seq__54719 = cljs.core.seq(vec__54718);\nvar first__54720 = cljs.core.first(seq__54719);\nvar seq__54719__$1 = cljs.core.next(seq__54719);\nvar _ = first__54720;\nvar first__54720__$1 = cljs.core.first(seq__54719__$1);\nvar seq__54719__$2 = cljs.core.next(seq__54719__$1);\nvar ex = first__54720__$1;\nvar first__54720__$2 = cljs.core.first(seq__54719__$2);\nvar seq__54719__$3 = cljs.core.next(seq__54719__$2);\nvar binding = first__54720__$2;\nvar body__$2 = seq__54719__$3;\nvar temp__5751__auto__ = sci.impl.interop.resolve_class(ctx,ex);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar clazz = temp__5751__auto__;\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),clazz,new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),binding,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),(function (){var G__54722 = cljs.core.assoc_in(ctx,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192),binding], null),null);\nvar G__54723 = cljs.core.cons(new cljs.core.Symbol(null,\"do\",\"do\",1686842252,null),body__$2);\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(G__54722,G__54723) : sci.impl.analyzer.analyze.call(null,G__54722,G__54723));\n})()], null);\n} else {\nreturn sci.impl.analyzer.throw_error_with_location([\"Unable to resolve classname: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ex)].join(''),ex);\n}\n}),catches);\nvar finally$__$1 = (cljs.core.truth_(finally$)?(function (){var G__54724 = ctx;\nvar G__54725 = cljs.core.cons(new cljs.core.Symbol(null,\"do\",\"do\",1686842252,null),cljs.core.rest(finally$));\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(G__54724,G__54725) : sci.impl.analyzer.analyze.call(null,G__54724,G__54725));\n})():null);\nreturn cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"sci.impl\",\"try\",\"sci.impl/try\",2142624741),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),body__$1,new cljs.core.Keyword(null,\"catches\",\"catches\",-1478797617),catches__$1,new cljs.core.Keyword(null,\"finally\",\"finally\",1589088705),finally$__$1], null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"sci.impl\",\"op\",\"sci.impl/op\",950953978),new cljs.core.Keyword(null,\"try\",\"try\",1380742522)], null));\n});\nsci.impl.analyzer.expand_declare = (function sci$impl$analyzer$expand_declare(ctx,p__54728){\nvar vec__54730 = p__54728;\nvar seq__54731 = cljs.core.seq(vec__54730);\nvar first__54732 = cljs.core.first(seq__54731);\nvar seq__54731__$1 = cljs.core.next(seq__54731);\nvar _declare = first__54732;\nvar names = seq__54731__$1;\nvar expr = vec__54730;\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"env\",\"env\",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx),(function (env){\nvar cnn = sci.impl.vars.current_ns_name();\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"namespaces\",\"namespaces\",-1444157469),cnn], null),(function (current_ns){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,name){\nvar temp__5751__auto__ = acc.get(name);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar x = temp__5751__auto__;\nvar temp__5751__auto____$1 = (function (){var G__54733 = x;\nvar G__54733__$1 = (((G__54733 == null))?null:cljs.core.meta(G__54733));\nif((G__54733__$1 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(G__54733__$1);\n}\n})();\nif(cljs.core.truth_(temp__5751__auto____$1)){\nvar prev_ns = temp__5751__auto____$1;\nvar current_ns_name = sci.impl.vars.current_ns_name();\nif((!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(sci.impl.vars.getName(prev_ns),current_ns_name)))){\nreturn sci.impl.analyzer.throw_error_with_location([cljs.core.str.cljs$core$IFn$_invoke$arity$1(name),\" already refers to \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),\" in namespace \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(current_ns_name)].join(''),expr);\n} else {\nreturn acc;\n}\n} else {\nreturn acc;\n}\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,name,(function (){var G__54737 = sci.impl.vars.__GT_SciVar(null,cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnn),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.meta(name),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),name,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),cljs.core.deref(sci.impl.vars.current_ns),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),cljs.core.deref(sci.impl.vars.current_file)], 0)),false);\nG__54737.sci$impl$vars$IVar$unbind$arity$1(null);\n\nreturn G__54737;\n})());\n}\n}),current_ns,names);\n}));\n}));\n\nreturn null;\n});\nsci.impl.analyzer.expand_dot = (function sci$impl$analyzer$expand_dot(ctx,p__54745){\nvar vec__54746 = p__54745;\nvar seq__54747 = cljs.core.seq(vec__54746);\nvar first__54748 = cljs.core.first(seq__54747);\nvar seq__54747__$1 = cljs.core.next(seq__54747);\nvar _dot = first__54748;\nvar first__54748__$1 = cljs.core.first(seq__54747__$1);\nvar seq__54747__$2 = cljs.core.next(seq__54747__$1);\nvar instance_expr = first__54748__$1;\nvar first__54748__$2 = cljs.core.first(seq__54747__$2);\nvar seq__54747__$3 = cljs.core.next(seq__54747__$2);\nvar method_expr = first__54748__$2;\nvar args = seq__54747__$3;\nvar _expr = vec__54746;\nvar vec__54749 = ((cljs.core.seq_QMARK_(method_expr))?method_expr:cljs.core.cons(method_expr,args));\nvar seq__54750 = cljs.core.seq(vec__54749);\nvar first__54751 = cljs.core.first(seq__54750);\nvar seq__54750__$1 = cljs.core.next(seq__54750);\nvar method_expr__$1 = first__54751;\nvar args__$1 = seq__54750__$1;\nvar instance_expr__$1 = (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,instance_expr) : sci.impl.analyzer.analyze.call(null,ctx,instance_expr));\nvar instance_expr__$2 = sci.impl.utils.vary_meta_STAR_(instance_expr__$1,(function (m){\nvar temp__5751__auto__ = new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(m);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar t = temp__5751__auto__;\nvar clazz = (function (){var or__4212__auto__ = sci.impl.interop.resolve_class(ctx,t);\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nvar or__4212__auto____$1 = sci.impl.records.resolve_record_class(ctx,t);\nif(cljs.core.truth_(or__4212__auto____$1)){\nreturn or__4212__auto____$1;\n} else {\nreturn sci.impl.analyzer.throw_error_with_location([\"Unable to resolve classname: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(t)].join(''),t);\n}\n}\n})();\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new cljs.core.Keyword(null,\"tag-class\",\"tag-class\",714967874),clazz);\n} else {\nreturn m;\n}\n}));\nvar method_expr__$2 = cljs.core.name(method_expr__$1);\nvar args__$2 = ((args__$1)?sci.impl.analyzer.analyze_children(ctx,args__$1):null);\nvar res = sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,\".\",\".\",1975675962,null),null,(1),null)),(new cljs.core.List(null,instance_expr__$2,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,method_expr__$2,null,(1),null)),(new cljs.core.List(null,args__$2,null,(1),null))], 0)))));\nreturn res;\n});\n/**\n * Expands (. x method)\n */\nsci.impl.analyzer.expand_dot_STAR__STAR_ = (function sci$impl$analyzer$expand_dot_STAR__STAR_(ctx,expr){\nif((cljs.core.count(expr) < (3))){\nthrow (new Error(\"Malformed member expression, expecting (.member target ...)\"));\n} else {\n}\n\nreturn sci.impl.analyzer.expand_dot(ctx,expr);\n});\n/**\n * Expands (.foo x)\n */\nsci.impl.analyzer.expand_dot_STAR_ = (function sci$impl$analyzer$expand_dot_STAR_(ctx,p__54769){\nvar vec__54770 = p__54769;\nvar seq__54771 = cljs.core.seq(vec__54770);\nvar first__54772 = cljs.core.first(seq__54771);\nvar seq__54771__$1 = cljs.core.next(seq__54771);\nvar method_name = first__54772;\nvar first__54772__$1 = cljs.core.first(seq__54771__$1);\nvar seq__54771__$2 = cljs.core.next(seq__54771__$1);\nvar obj = first__54772__$1;\nvar args = seq__54771__$2;\nvar expr = vec__54770;\nif((cljs.core.count(expr) < (2))){\nthrow (new Error(\"Malformed member expression, expecting (.member target ...)\"));\n} else {\n}\n\nreturn sci.impl.analyzer.expand_dot(ctx,(new cljs.core.List(null,new cljs.core.Symbol(null,\".\",\".\",1975675962,null),(new cljs.core.List(null,obj,(new cljs.core.List(null,cljs.core.cons(cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(cljs.core.name(method_name),(1))),args),null,(1),null)),(2),null)),(3),null)));\n});\nsci.impl.analyzer.expand_new = (function sci$impl$analyzer$expand_new(ctx,p__54774){\nvar vec__54778 = p__54774;\nvar seq__54779 = cljs.core.seq(vec__54778);\nvar first__54780 = cljs.core.first(seq__54779);\nvar seq__54779__$1 = cljs.core.next(seq__54779);\nvar _new = first__54780;\nvar first__54780__$1 = cljs.core.first(seq__54779__$1);\nvar seq__54779__$2 = cljs.core.next(seq__54779__$1);\nvar class_sym = first__54780__$1;\nvar args = seq__54779__$2;\nvar _expr = vec__54778;\nvar temp__5751__auto__ = sci.impl.interop.resolve_class_opts(ctx,class_sym);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar map__54781 = temp__5751__auto__;\nvar map__54781__$1 = cljs.core.__destructure_map(map__54781);\nvar _opts = map__54781__$1;\nvar constructor$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__54781__$1,new cljs.core.Keyword(null,\"constructor\",\"constructor\",-1953928811));\nvar args__$1 = sci.impl.analyzer.analyze_children(ctx,args);\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,new cljs.core.Symbol(null,\"new\",\"new\",-444906321,null),(new cljs.core.List(null,constructor$,(new cljs.core.List(null,args__$1,null,(1),null)),(2),null)),(3),null)));\n} else {\nvar temp__5751__auto____$1 = sci.impl.records.resolve_record_class(ctx,class_sym);\nif(cljs.core.truth_(temp__5751__auto____$1)){\nvar record = temp__5751__auto____$1;\nvar args__$1 = sci.impl.analyzer.analyze_children(ctx,args);\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"sci.impl.record\",\"constructor\",\"sci.impl.record/constructor\",-2025684209).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(record)),args__$1));\n} else {\nreturn sci.impl.analyzer.throw_error_with_location([\"Unable to resolve classname: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_sym)].join(''),class_sym);\n}\n}\n});\nsci.impl.analyzer.expand_constructor = (function sci$impl$analyzer$expand_constructor(ctx,p__54787){\nvar vec__54789 = p__54787;\nvar seq__54790 = cljs.core.seq(vec__54789);\nvar first__54791 = cljs.core.first(seq__54790);\nvar seq__54790__$1 = cljs.core.next(seq__54790);\nvar constructor_sym = first__54791;\nvar args = seq__54790__$1;\nvar constructor_name = cljs.core.name(constructor_sym);\nvar class_sym = cljs.core.with_meta(cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(constructor_name,(0),(((constructor_name).length) - (1)))),cljs.core.meta(constructor_sym));\nreturn sci.impl.analyzer.expand_new(ctx,cljs.core.with_meta(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,\"new\",\"new\",-444906321,null),class_sym,args),cljs.core.meta(constructor_sym)));\n});\nsci.impl.analyzer.analyze_ns_form = (function sci$impl$analyzer$analyze_ns_form(ctx,p__54797){\nvar vec__54798 = p__54797;\nvar seq__54799 = cljs.core.seq(vec__54798);\nvar first__54800 = cljs.core.first(seq__54799);\nvar seq__54799__$1 = cljs.core.next(seq__54799);\nvar _ns = first__54800;\nvar first__54800__$1 = cljs.core.first(seq__54799__$1);\nvar seq__54799__$2 = cljs.core.next(seq__54799__$1);\nvar ns_name = first__54800__$1;\nvar exprs = seq__54799__$2;\nif((ns_name instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error([\"Namespace name must be symbol, got: \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ns_name], 0))].join('')));\n}\n\nvar vec__54802 = (function (){var fexpr = cljs.core.first(exprs);\nif(typeof fexpr === 'string'){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [fexpr,cljs.core.next(exprs)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,exprs], null);\n}\n})();\nvar docstring = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54802,(0),null);\nvar exprs__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54802,(1),null);\nvar vec__54805 = (function (){var m = cljs.core.first(exprs__$1);\nif(cljs.core.map_QMARK_(m)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m,cljs.core.next(exprs__$1)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,exprs__$1], null);\n}\n})();\nvar attr_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54805,(0),null);\nvar exprs__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54805,(1),null);\nvar attr_map__$1 = (cljs.core.truth_(docstring)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(attr_map,new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),docstring):attr_map);\nsci.impl.utils.set_namespace_BANG_(ctx,ns_name,attr_map__$1);\n\nvar exprs__$3 = exprs__$2;\nvar ret = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.truth_(exprs__$3)){\nvar vec__54817 = cljs.core.first(exprs__$3);\nvar seq__54818 = cljs.core.seq(vec__54817);\nvar first__54819 = cljs.core.first(seq__54818);\nvar seq__54818__$1 = cljs.core.next(seq__54818);\nvar k = first__54819;\nvar args = seq__54818__$1;\nvar expr = vec__54817;\nvar G__54822 = k;\nvar G__54822__$1 = (((G__54822 instanceof cljs.core.Keyword))?G__54822.fqn:null);\nswitch (G__54822__$1) {\ncase \"require\":\ncase \"use\":\nvar G__54994 = cljs.core.next(exprs__$3);\nvar G__54995 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret,sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(cljs.core.with_meta(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.name(k)),args),cljs.core.meta(expr))));\nexprs__$3 = G__54994;\nret = G__54995;\ncontinue;\n\nbreak;\ncase \"import\":\nvar G__54996 = cljs.core.next(exprs__$3);\nvar G__54997 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret,sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(cljs.core.with_meta(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"import\",\"import\",241030818,null),args),cljs.core.meta(expr))));\nexprs__$3 = G__54996;\nret = G__54997;\ncontinue;\n\nbreak;\ncase \"refer-clojure\":\nvar G__54998 = cljs.core.next(exprs__$3);\nvar G__54999 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret,sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(cljs.core.with_meta(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,\"refer\",\"refer\",676235974,null),new cljs.core.Symbol(null,\"clojure.core\",\"clojure.core\",-189332625,null),args),cljs.core.meta(expr))));\nexprs__$3 = G__54998;\nret = G__54999;\ncontinue;\n\nbreak;\ncase \"gen-class\":\nvar G__55000 = cljs.core.next(exprs__$3);\nvar G__55001 = ret;\nexprs__$3 = G__55000;\nret = G__55001;\ncontinue;\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__54822__$1)].join('')));\n\n}\n} else {\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"do\",\"do\",1686842252,null),ret));\n}\nbreak;\n}\n});\nsci.impl.analyzer.analyze_var = (function sci$impl$analyzer$analyze_var(ctx,p__54827){\nvar vec__54829 = p__54827;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54829,(0),null);\nvar var_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54829,(1),null);\nreturn sci.impl.resolve.resolve_symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(\"sci.impl\",\"prevent-deref\",\"sci.impl/prevent-deref\",-1401491385),true),var_name);\n});\nsci.impl.analyzer.analyze_set_BANG_ = (function sci$impl$analyzer$analyze_set_BANG_(ctx,p__54833){\nvar vec__54834 = p__54833;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54834,(0),null);\nvar obj = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54834,(1),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__54834,(2),null);\nvar obj__$1 = (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,obj) : sci.impl.analyzer.analyze.call(null,ctx,obj));\nvar v__$1 = (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,v) : sci.impl.analyzer.analyze.call(null,ctx,v));\nvar obj__$2 = sci.impl.types.getVal(obj__$1);\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,new cljs.core.Symbol(null,\"set!\",\"set!\",250714521,null),(new cljs.core.List(null,obj__$2,(new cljs.core.List(null,v__$1,null,(1),null)),(2),null)),(3),null)));\n});\nsci.impl.analyzer.analyze_call = (function sci$impl$analyzer$analyze_call(ctx,expr,top_level_QMARK_){\nvar f = cljs.core.first(expr);\nif((f instanceof cljs.core.Symbol)){\nvar special_sym = cljs.core.get.cljs$core$IFn$_invoke$arity$2(sci.impl.analyzer.special_syms,f);\nvar _ = (cljs.core.truth_(special_sym)?sci.impl.resolve.check_permission_BANG_(ctx,special_sym,f,null):null);\nvar f__$1 = (function (){var or__4212__auto__ = special_sym;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn sci.impl.resolve.resolve_symbol.cljs$core$IFn$_invoke$arity$3(ctx,f,true);\n}\n})();\nvar f_meta = cljs.core.meta(f__$1);\nvar eval_QMARK_ = (function (){var and__4210__auto__ = f_meta;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn new cljs.core.Keyword(\"sci.impl\",\"op\",\"sci.impl/op\",950953978).cljs$core$IFn$_invoke$arity$1(f_meta);\n} else {\nreturn and__4210__auto__;\n}\n})();\nif(cljs.core.truth_((function (){var and__4210__auto__ = f_meta;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn new cljs.core.Keyword(\"sci.impl.analyzer\",\"static-access\",\"sci.impl.analyzer/static-access\",-79014000).cljs$core$IFn$_invoke$arity$1(f_meta);\n} else {\nreturn and__4210__auto__;\n}\n})())){\nreturn sci.impl.analyzer.expand_dot_STAR__STAR_(ctx,cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(null,\".\",\".\",1975675962,null),cljs.core.first(f__$1),cljs.core.second(f__$1),cljs.core.rest(expr)));\n} else {\nif(cljs.core.truth_((function (){var and__4210__auto__ = cljs.core.not(eval_QMARK_);\nif(and__4210__auto__){\nvar or__4212__auto__ = special_sym;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn cljs.core.contains_QMARK_(sci.impl.utils.ana_macros,f__$1);\n}\n} else {\nreturn and__4210__auto__;\n}\n})())){\nvar G__54847 = f__$1;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\".\",\".\",1975675962,null),G__54847)){\nreturn sci.impl.analyzer.expand_dot_STAR__STAR_(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"import\",\"import\",241030818,null),G__54847)){\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"case\",\"case\",-1510733573,null),G__54847)){\nreturn sci.impl.analyzer.expand_case(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),G__54847)){\nreturn sci.impl.analyzer.expand_fn(ctx,expr,false);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"if\",\"if\",1181717262,null),G__54847)){\nreturn sci.impl.analyzer.expand_if(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"defmacro\",\"defmacro\",2054157304,null),G__54847)){\nvar ret = sci.impl.analyzer.expand_defn(ctx,expr);\nreturn ret;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"defn\",\"defn\",-126010802,null),G__54847)){\nvar ret = sci.impl.analyzer.expand_defn(ctx,expr);\nreturn ret;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"do\",\"do\",1686842252,null),G__54847)){\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(cljs.core.cons(new cljs.core.Symbol(null,\"do\",\"do\",1686842252,null),sci.impl.analyzer.analyze_children(ctx,cljs.core.rest(expr))));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"loop\",\"loop\",1244978678,null),G__54847)){\nreturn sci.impl.analyzer.expand_loop(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"doseq\",\"doseq\",221164135,null),G__54847)){\nvar G__54858 = ctx;\nvar G__54859 = sci.impl.doseq_macro.expand_doseq(ctx,expr);\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(G__54858,G__54859) : sci.impl.analyzer.analyze.call(null,G__54858,G__54859));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"expand-constructor\",\"expand-constructor\",-343741576,null),G__54847)){\nreturn sci.impl.analyzer.expand_constructor(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"def\",\"def\",597100991,null),G__54847)){\nreturn sci.impl.analyzer.expand_def(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"declare\",\"declare\",654042991,null),G__54847)){\nreturn sci.impl.analyzer.expand_declare(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),G__54847)){\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"expand-dot*\",\"expand-dot*\",-1946890561,null),G__54847)){\nreturn sci.impl.analyzer.expand_dot_STAR_(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"ns\",\"ns\",2082130287,null),G__54847)){\nreturn sci.impl.analyzer.analyze_ns_form(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"for\",\"for\",316745208,null),G__54847)){\nvar res = sci.impl.for_macro.expand_for(ctx,expr);\nif(cljs.core.truth_(new cljs.core.Keyword(\"sci.impl\",\"macroexpanding\",\"sci.impl/macroexpanding\",2113471825).cljs$core$IFn$_invoke$arity$1(ctx))){\nreturn res;\n} else {\nreturn (sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,res) : sci.impl.analyzer.analyze.call(null,ctx,res));\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"let\",\"let\",358118826,null),G__54847)){\nreturn sci.impl.analyzer.expand_let(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"fn\",\"fn\",465265323,null),G__54847)){\nreturn sci.impl.analyzer.expand_fn(ctx,expr,false);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"set!\",\"set!\",250714521,null),G__54847)){\nreturn sci.impl.analyzer.analyze_set_BANG_(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"new\",\"new\",-444906321,null),G__54847)){\nreturn sci.impl.analyzer.expand_new(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),G__54847)){\nreturn sci.impl.analyzer.analyze_var(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"lazy-seq\",\"lazy-seq\",489632906,null),G__54847)){\nreturn sci.impl.analyzer.expand_lazy_seq(ctx,expr);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"try\",\"try\",-1273693247,null),G__54847)){\nreturn sci.impl.analyzer.expand_try(ctx,expr);\n} else {\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(cljs.core.cons(f__$1,sci.impl.analyzer.analyze_children(ctx,cljs.core.rest(expr))));\n\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n} else {\ntry{if(cljs.core.truth_(sci.impl.utils.macro_QMARK_(f__$1))){\nvar needs_ctx_QMARK_ = (sci.impl.utils.needs_ctx === new cljs.core.Keyword(\"sci.impl\",\"op\",\"sci.impl/op\",950953978).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(f__$1)));\nvar v = ((needs_ctx_QMARK_)?cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f__$1,expr,new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192).cljs$core$IFn$_invoke$arity$1(ctx),ctx,cljs.core.rest(expr)):cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f__$1,expr,new cljs.core.Keyword(null,\"bindings\",\"bindings\",1271397192).cljs$core$IFn$_invoke$arity$1(ctx),cljs.core.rest(expr)));\nvar expanded = (cljs.core.truth_(new cljs.core.Keyword(\"sci.impl\",\"macroexpanding\",\"sci.impl/macroexpanding\",2113471825).cljs$core$IFn$_invoke$arity$1(ctx))?v:(cljs.core.truth_((function (){var and__4210__auto__ = top_level_QMARK_;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn ((cljs.core.seq_QMARK_(v)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"do\",\"do\",1686842252,null),cljs.core.first(v))));\n} else {\nreturn and__4210__auto__;\n}\n})())?sci.impl.types.__GT_EvalForm(v):(sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 ? sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,v) : sci.impl.analyzer.analyze.call(null,ctx,v))\n));\nreturn expanded;\n} else {\nvar temp__5751__auto__ = new cljs.core.Keyword(\"sci.impl\",\"inlined\",\"sci.impl/inlined\",-478453593).cljs$core$IFn$_invoke$arity$1(f_meta);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar f__$2 = temp__5751__auto__;\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$3(cljs.core.cons(f__$2,sci.impl.analyzer.analyze_children(ctx,cljs.core.rest(expr))),new cljs.core.Keyword(\"sci.impl\",\"f-meta\",\"sci.impl/f-meta\",-1735495322),f_meta);\n} else {\nreturn sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(cljs.core.cons(f__$1,sci.impl.analyzer.analyze_children(ctx,cljs.core.rest(expr))));\n}\n}\n}catch (e54868){if((e54868 instanceof Error)){\nvar e = e54868;\nreturn sci.impl.utils.rethrow_with_location_of_node(ctx,e,sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(cljs.core.with_meta(cljs.core.cons(f__$1,cljs.core.rest(expr)),cljs.core.meta(expr))));\n} else {\nthrow e54868;\n\n}\n}\n}\n}\n} else {\nvar ret = sci.impl.utils.mark_eval_call.cljs$core$IFn$_invoke$arity$1(sci.impl.analyzer.analyze_children(ctx,expr));\nreturn ret;\n}\n});\nsci.impl.analyzer.constant_colls = true;\nsci.impl.analyzer.analyze = (function sci$impl$analyzer$analyze(var_args){\nvar G__54876 = arguments.length;\nswitch (G__54876) {\ncase 2:\nreturn sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 = (function (ctx,expr){\nreturn sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$3(ctx,expr,false);\n}));\n\n(sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$3 = (function (ctx,expr,top_level_QMARK_){\nvar m = cljs.core.meta(expr);\nvar ret = ((sci.impl.utils.constant_QMARK_(expr))?expr:(((expr instanceof cljs.core.Symbol))?(function (){var v = sci.impl.resolve.resolve_symbol.cljs$core$IFn$_invoke$arity$3(ctx,expr,false);\nif(sci.impl.utils.constant_QMARK_(v)){\nreturn v;\n} else {\nif(sci.impl.vars.var_QMARK_(v)){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"const\",\"const\",1709929842).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v)))){\nreturn cljs.core.deref(v);\n} else {\nif(cljs.core.truth_(sci.impl.vars.isMacro(v))){\nthrow (new Error([\"Can't take value of a macro: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(v),\"\"].join('')));\n} else {\nreturn sci.impl.types.__GT_EvalVar(v);\n}\n}\n} else {\nreturn sci.impl.utils.merge_meta(v,m);\n\n}\n}\n})():((cljs.core.record_QMARK_(expr))?expr:((cljs.core.map_QMARK_(expr))?(function (){var ks = cljs.core.keys(expr);\nvar vs = cljs.core.vals(expr);\nvar constant_map_QMARK_ = ((true) && (((cljs.core.every_QMARK_(sci.impl.utils.constant_QMARK_,ks)) && (cljs.core.every_QMARK_(sci.impl.utils.constant_QMARK_,vs)))));\nvar analyzed_map = ((constant_map_QMARK_)?expr:cljs.core.zipmap(sci.impl.analyzer.analyze_children(ctx,ks),sci.impl.analyzer.analyze_children(ctx,vs)));\nvar analyzed_meta = (cljs.core.truth_(m)?sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,m):null);\nvar analyzed_meta__$1 = ((((constant_map_QMARK_) && ((m === analyzed_meta))))?analyzed_meta:cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(analyzed_meta,new cljs.core.Keyword(\"sci.impl\",\"op\",\"sci.impl/op\",950953978),new cljs.core.Keyword(null,\"eval\",\"eval\",-1103567905)));\nif(cljs.core.truth_(analyzed_meta__$1)){\nreturn cljs.core.with_meta(analyzed_map,analyzed_meta__$1);\n} else {\nreturn analyzed_map;\n}\n})():((((cljs.core.vector_QMARK_(expr)) || (cljs.core.set_QMARK_(expr))))?(function (){var constant_coll_QMARK_ = ((true) && (cljs.core.every_QMARK_(sci.impl.utils.constant_QMARK_,expr)));\nvar analyzed_coll = ((constant_coll_QMARK_)?expr:cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(expr),sci.impl.analyzer.analyze_children(ctx,expr)));\nvar analyzed_meta = (cljs.core.truth_(m)?sci.impl.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(ctx,m):null);\nvar analyzed_meta__$1 = ((((constant_coll_QMARK_) && ((m === analyzed_meta))))?analyzed_meta:cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(analyzed_meta,new cljs.core.Keyword(\"sci.impl\",\"op\",\"sci.impl/op\",950953978),new cljs.core.Keyword(null,\"eval\",\"eval\",-1103567905)));\nif(cljs.core.truth_(analyzed_meta__$1)){\nreturn cljs.core.with_meta(analyzed_coll,analyzed_meta__$1);\n} else {\nreturn analyzed_coll;\n}\n})():((cljs.core.seq_QMARK_(expr))?((cljs.core.seq(expr))?sci.impl.utils.merge_meta(sci.impl.analyzer.analyze_call(ctx,expr,top_level_QMARK_),m):expr):expr\n))))));\nreturn ret;\n}));\n\n(sci.impl.analyzer.analyze.cljs$lang$maxFixedArity = 3);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:no-doc",true,"~:file","sci/impl/analyzer.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.tools.reader.reader-types","~$cljs.tools.reader.reader-types","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",["~$macroexpand","~$macroexpand-1","~$macroexpand-all","~$destructure"]],"~:name","~$sci.impl.analyzer","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$sci.impl.types","^V","~$eval","~$sci.impl.evaluator","~$vars","~$sci.impl.vars","^X","^X","~$sci.impl.for-macro","^[","~$cljs.core","^10","~$goog","^11","~$sci.impl.doseq-macro","^12","~$sci.impl.records","^13","~$sci.impl.interop","^14","^Z","^Z","~$sci.impl.utils","^15","~$types","^V","~$sci.impl.resolve","^17","~$records","^13","~$interop","^14","~$sci.impl.destructure","^1:","~$utils","^15","~$resolve","^17"],"~:seen",["^K",["~:require"]],"~:uses",["^ ","~$set-namespace!","^15","~$merge-meta","^15","~$expand-doseq","^12","~$mark-eval","^15","~$expand-for","^[","~$rethrow-with-location-of-node","^15","~$constant?","^15","~$ana-macros","^15","~$mark-eval-call","^15","^O","^1:","~$macro?","^15"],"~:require-macros",["^ ","^10","^10","^W","^X","^Y","^Z","^X","^X","^Z","^Z"],"~:form",["~#list",["~$ns","^Q",["^ ","^6",true],["^1L",["~:refer-clojure","~:exclude",["^O","^L","^N","^M"]]],["^1L",["^1>",["^1:","~:refer",["^O"]],["^12","^1P",["^1B"]],["^X","~:as","^W"],["^[","^1P",["^1D"]],["^14","^1Q","^19"],["^13","^1Q","^18"],["^17","^1Q","^1<"],["^V","^1Q","^16"],["^15","^1Q","^1;","^1P",["^1C","^1H","^1F","^1E","^1A","^1@","^1I","^1G"]],["^Z","^1Q","^Y"]]]]],"~:flags",["^ ","^1>",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^11","^10","^1:","^12","^X","^[","^14","^13","^17","^V","^15","^Z"]],"^S","^Q","~:resource-id",["~:shadow.build.classpath/resource","sci/impl/analyzer.cljc"],"~:compiled-at",1630429610908,"~:resource-name","sci/impl/analyzer.cljc","~:warnings",[],"~:source","(ns sci.impl.analyzer\n  {:no-doc true}\n  (:refer-clojure :exclude [destructure macroexpand macroexpand-all macroexpand-1])\n  (:require\n   #?(:clj [clojure.string :as str])\n   [sci.impl.destructure :refer [destructure]]\n   [sci.impl.doseq-macro :refer [expand-doseq]]\n   [sci.impl.evaluator :as eval]\n   [sci.impl.for-macro :refer [expand-for]]\n   [sci.impl.interop :as interop]\n   [sci.impl.records :as records]\n   [sci.impl.resolve :as resolve]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils :refer\n    [mark-eval mark-eval-call constant?\n     rethrow-with-location-of-node\n     merge-meta set-namespace!\n     macro? ana-macros]]\n   [sci.impl.vars :as vars])\n  #?(:clj (:import [sci.impl Reflector])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; derived from (keys (. clojure.lang.Compiler specials))\n;; (& monitor-exit case* try reify* finally loop* do letfn* if clojure.core/import* new deftype* let* fn* recur set! . var quote catch throw monitor-enter def)\n(def special-syms '#{try finally do if new recur quote catch throw def . var set!})\n\n(defn- throw-error-with-location [msg node]\n  (utils/throw-error-with-location msg node {:phase \"analysis\"}))\n\n(declare analyze analyze-call)\n\n;;;; Macros\n\n(defn macroexpand-1 [ctx expr]\n  (let [original-expr expr]\n    (if (seq? expr)\n      (let [op (first expr)]\n        (if (symbol? op)\n          (cond (get special-syms op) expr\n                (contains? #{'for} op) (analyze (assoc ctx :sci.impl/macroexpanding true)\n                                                    expr)\n                :else\n                (let [f (resolve/resolve-symbol ctx op true)\n                      f (if (and (vars/var? f)\n                                 (vars/isMacro f))\n                          @f f)]\n                  (if (macro? f)\n                    (let [f (if (identical? utils/needs-ctx (some-> f meta :sci.impl/op))\n                              (partial f ctx)\n                              f)]\n                      (apply f original-expr (:bindings ctx) (rest expr)))\n                    expr)))\n          expr))\n      expr)))\n\n(defn macroexpand\n  [ctx form]\n  (let [ex (macroexpand-1 ctx form)]\n    (if (identical? ex form)\n      form\n      (macroexpand ctx ex))))\n\n(vreset! utils/macroexpand* macroexpand)\n(vreset! utils/macroexpand-1* macroexpand-1)\n\n;;;; End macros\n\n(defn analyze-children [ctx children]\n  (mapv #(analyze ctx %) children))\n\n(defn maybe-destructured\n  [params body]\n  (if (every? symbol? params)\n    {:params params\n     :body body}\n    (loop [params params\n           new-params (with-meta [] (meta params))\n           lets []]\n      (if params\n        (if (symbol? (first params))\n          (recur (next params) (conj new-params (first params)) lets)\n          (let [gparam (gensym \"p__\")]\n            (recur (next params) (conj new-params gparam)\n                   (-> lets (conj (first params)) (conj gparam)))))\n        {:params new-params\n         :body [`(let ~lets\n                   ~@body)]}))))\n\n(defn expand-fn-args+body [{:keys [:fn-expr] :as ctx} fn-name [binding-vector & body-exprs] macro?]\n  (when-not binding-vector\n    (throw-error-with-location \"Parameter declaration missing.\" fn-expr))\n  (when-not (vector? binding-vector)\n    (throw-error-with-location \"Parameter declaration should be a vector\" fn-expr))\n  (let [binding-vector (if macro? (into ['&form '&env] binding-vector)\n                           binding-vector)\n        fixed-args (take-while #(not= '& %) binding-vector)\n        fixed-arity (count fixed-args)\n        var-arg-name (second (drop-while #(not= '& %) binding-vector))\n        next-body (next body-exprs)\n        conds (when next-body\n                (let [e (first body-exprs)]\n                  (when (map? e) e)))\n        body-exprs (if conds next-body body-exprs)\n        conds (or conds (meta binding-vector))\n        pre (:pre conds)\n        post (:post conds)\n        body-exprs (if post\n                     `((let [~'% ~(if (< 1 (count body-exprs))\n                                    `(do ~@body-exprs)\n                                    (first body-exprs))]\n                         ~@(map (fn* [c] `(assert ~c)) post)\n                         ~'%))\n                     body-exprs)\n        body-exprs (if pre\n                     (concat (map (fn* [c] `(assert ~c)) pre)\n                             body-exprs)\n                     body-exprs)\n        {:keys [:params :body]} (maybe-destructured binding-vector body-exprs)\n        ctx (update ctx :bindings merge (zipmap params\n                                                (repeat nil)))\n        body (analyze-children ctx body)]\n    #:sci.impl{:body body\n               :params params\n               :fixed-arity fixed-arity\n               :var-arg-name var-arg-name\n               :fn-name fn-name}))\n\n(defn analyzed-fn-meta [ctx m]\n  (let [;; seq expr has location info with 2 keys\n        meta-needs-eval? (> (count m) 2)\n        m (if meta-needs-eval? (mark-eval (analyze ctx m))\n              m)]\n    m))\n\n(defn expand-fn [ctx [_fn name? & body :as fn-expr] macro?]\n  (let [ctx (assoc ctx :fn-expr fn-expr)\n        fn-name (if (symbol? name?)\n                  name?\n                  nil)\n        body (if fn-name\n               body\n               (cons name? body))\n        ;; fn-name (or fn-name (gensym* \"fn\"))\n        bodies (if (seq? (first body))\n                 body\n                 [body])\n        ctx (if fn-name (assoc-in ctx [:bindings fn-name] nil)\n                ctx)\n        analyzed-bodies (reduce\n                         (fn [{:keys [:max-fixed :min-varargs] :as acc} body]\n                           (let [arglist (first body)\n                                 body (expand-fn-args+body ctx fn-name body macro?)\n                                 body (assoc body :sci.impl/arglist arglist)\n                                 var-arg-name (:sci.impl/var-arg-name body)\n                                 fixed-arity (:sci.impl/fixed-arity body)\n                                 new-min-varargs (when var-arg-name fixed-arity)]\n                             (when (and var-arg-name min-varargs)\n                               (throw-error-with-location \"Can't have more than 1 variadic overload\" fn-expr))\n                             (when (and (not var-arg-name) min-varargs (> fixed-arity min-varargs))\n                               (throw-error-with-location\n                                \"Can't have fixed arity function with more params than variadic function\" fn-expr))\n                             (-> acc\n                                 (assoc :min-varargs new-min-varargs\n                                        :max-fixed (max (:sci.impl/fixed-arity body)\n                                                        max-fixed))\n                                 (update :bodies conj body)\n                                 (update :arglists conj arglist))))\n                         {:bodies []\n                          :arglists []\n                          :min-var-args nil\n                          :max-fixed -1} bodies)\n        arities (:bodies analyzed-bodies)\n        arglists (:arglists analyzed-bodies)\n        fn-meta (meta fn-expr)\n        ana-fn-meta (analyzed-fn-meta ctx fn-meta)\n        fn-meta (when-not (identical? fn-meta ana-fn-meta)\n                  ;; fn-meta contains more than only location info\n                  (-> ana-fn-meta (dissoc :line :end-line :column :end-column)))]\n    (with-meta #:sci.impl{:fn-bodies arities\n                          :fn-name fn-name\n                          :arglists arglists\n                          :fn true\n                          :fn-meta fn-meta}\n      {:sci.impl/op :fn})))\n\n(defn expand-let*\n  [ctx destructured-let-bindings exprs]\n  (let [[ctx new-let-bindings]\n        (reduce\n         (fn [[ctx new-let-bindings] [binding-name binding-value]]\n           (let [v (analyze ctx binding-value)]\n             [(update ctx :bindings assoc binding-name v)\n              (conj new-let-bindings binding-name v)]))\n         [ctx []]\n         (partition 2 destructured-let-bindings))\n        body (analyze-children ctx exprs)]\n    (with-meta\n      (fn [ctx]\n        (eval/eval-let ctx new-let-bindings body))\n      {:sci.impl/op utils/evaluate})))\n\n(defn expand-let\n  \"The let macro from clojure.core\"\n  [ctx [_let let-bindings  & exprs]]\n  (let [let-bindings (destructure let-bindings)]\n    (expand-let* ctx let-bindings exprs)))\n\n(declare expand-declare)\n\n(defn expand-def\n  [ctx expr]\n  (let [[_def var-name ?docstring ?init] expr]\n    (expand-declare ctx [nil var-name])\n    (when-not (simple-symbol? var-name)\n      (throw-error-with-location \"Var name should be simple symbol.\" expr))\n    (let [arg-count (count expr)\n          docstring (when (and (= 4 arg-count)\n                               (string? ?docstring))\n                      ?docstring)\n          expected-arg-count (if docstring 4 3)]\n      (when-not (<= arg-count expected-arg-count)\n        (throw (new #?(:clj  IllegalArgumentException\n                       :cljs js/Error)\n                    \"Too many arguments to def\")))\n      (let [init (if docstring ?init ?docstring)\n            init (if (= 2 arg-count)\n                   :sci.impl/var.unbound\n                   (analyze ctx init))\n            m (meta var-name)\n            m (analyze ctx m)\n            m (assoc m :ns @vars/current-ns)\n            m (if docstring (assoc m :doc docstring) m)\n            var-name (with-meta var-name m)]\n        (mark-eval-call (list 'def var-name init))))))\n\n(defn expand-defn [ctx [op fn-name & body :as expr]]\n  (when-not (simple-symbol? fn-name)\n    (throw-error-with-location \"Var name should be simple symbol.\" expr))\n  (expand-declare ctx [nil fn-name])\n  (let [macro? (= \"defmacro\" (name op))\n        [pre-body body] (split-with (comp not sequential?) body)\n        _ (when (empty? body)\n            (throw-error-with-location \"Parameter declaration missing.\" expr))\n        docstring (when-let [ds (first pre-body)]\n                    (when (string? ds) ds))\n        meta-map (when-let [m (last pre-body)]\n                   (when (map? m) m))\n        meta-map (analyze ctx (merge (meta fn-name) (meta expr) meta-map))\n        fn-body (with-meta (cons 'fn body)\n                  (meta expr))\n        f (expand-fn ctx fn-body macro?)\n        arglists (seq (:sci.impl/arglists f))\n        meta-map (assoc meta-map\n                        :ns @vars/current-ns\n                        :arglists arglists)\n        fn-name (with-meta fn-name\n                  (cond-> meta-map\n                    docstring (assoc :doc docstring)\n                    macro? (assoc :macro true)))\n        f (assoc f\n                 :sci/macro macro?\n                 :sci.impl/fn-name fn-name\n                 :sci.impl/var true)]\n    (mark-eval-call (list 'def fn-name f))))\n\n(defn expand-loop\n  [ctx expr]\n  (let [bv (second expr)\n        arg-names (take-nth 2 bv)\n        init-vals (take-nth 2 (rest bv))\n        [bv syms] (if (every? symbol? arg-names)\n                    [bv arg-names]\n                    (let [syms (repeatedly (count arg-names) #(gensym))\n                          bv1 (map vector syms init-vals)\n                          bv2  (map vector arg-names syms)]\n                      [(into [] cat (interleave bv1 bv2)) syms]))\n        body (nnext expr)\n        expansion (list 'let bv\n                        (list* `(fn ~(vec arg-names) ~@body)\n                               syms))]\n    (analyze ctx expansion)))\n\n(defn expand-lazy-seq\n  [ctx expr]\n  (let [body (rest expr)]\n    (mark-eval-call\n     (list `lazy-seq\n           (analyze ctx\n                    ;; expand-fn will take care of the analysis of the body\n                    (list 'fn [] (cons 'do body)))))))\n\n(defn expand-if\n  [ctx [_if & exprs :as expr]]\n  (case (count exprs)\n    (0 1) (throw-error-with-location \"Too few arguments to if\" expr)\n    (2 3) (let [[cond then else] (analyze-children ctx exprs)]\n            (with-meta\n              (fn [ctx]\n                (eval/eval-if ctx cond then else))\n              {:sci.impl/op utils/evaluate}))\n    (throw-error-with-location \"Too many arguments to if\" expr)))\n\n(defn expand-case\n  [ctx expr]\n  (let [v (analyze ctx (second expr))\n        clauses (nnext expr)\n        match-clauses (take-nth 2 clauses)\n        result-clauses (analyze-children ctx (take-nth 2 (rest clauses)))\n        default (when (odd? (count clauses))\n                  [:val (analyze ctx (last clauses))])\n        cases (interleave match-clauses result-clauses)\n        assoc-new (fn [m k v]\n                    (if-not (contains? m k)\n                      (assoc m k v)\n                      (throw-error-with-location (str \"Duplicate case test constant \" k)\n                                                 expr)))\n        case-map (loop [cases (seq cases)\n                        ret-map {}]\n                   (if cases\n                     (let [[k v & cases] cases]\n                       (if (list? k)\n                         (recur\n                          cases\n                          (reduce (fn [acc k]\n                                    (assoc-new acc k v))\n                                  ret-map\n                                  k))\n                         (recur\n                          cases\n                          (assoc-new ret-map k v))))\n                     ret-map))\n        ret (mark-eval-call (list 'case\n                                  {:case-map case-map\n                                   :case-val v\n                                   :case-default default}\n                                  default))]\n    (mark-eval-call ret)))\n\n(defn expand-try\n  [ctx [_try & body]]\n  (let [[body-exprs\n         catches\n         finally]\n        (loop [exprs #_[expr & exprs :as all-exprs] (seq body)\n               body-exprs []\n               catch-exprs []\n               finally-expr nil]\n          (if exprs\n            (let [expr (first exprs)\n                  exprs (next exprs)]\n              (cond (and (seq? expr) (= 'catch (first expr)))\n                    (recur exprs body-exprs (conj catch-exprs expr) finally-expr)\n                    (and (not exprs) (and (seq? expr) (= 'finally (first expr))))\n                    [body-exprs catch-exprs expr]\n                    :else\n                    ;; TODO: cannot add body expression when catch is not empty\n                    ;; TODO: can't have finally as non-last expression\n                    (recur exprs (conj body-exprs expr) catch-exprs finally-expr)))\n            [body-exprs catch-exprs finally-expr]))\n        body (analyze ctx (cons 'do body-exprs))\n        catches (mapv (fn [c]\n                        (let [[_ ex binding & body] c]\n                          (if-let [clazz (interop/resolve-class ctx ex)]\n                            {:class clazz\n                             :binding binding\n                             :body (analyze (assoc-in ctx [:bindings binding] nil)\n                                            (cons 'do body))}\n                            (throw-error-with-location (str \"Unable to resolve classname: \" ex) ex))))\n                      catches)\n        finally (when finally\n                  (analyze ctx (cons 'do (rest finally))))]\n    (with-meta\n      {:sci.impl/try\n       {:body body\n        :catches catches\n        :finally finally}}\n      {:sci.impl/op :try})))\n\n(defn expand-declare [ctx [_declare & names :as expr]]\n  (swap! (:env ctx)\n         (fn [env]\n           (let [cnn (vars/current-ns-name)]\n             (update-in env [:namespaces cnn]\n                        (fn [current-ns]\n                          (reduce (fn [acc name]\n                                    (if-let [x (.get ^java.util.Map acc name)]\n                                      (if-let [prev-ns (some-> x meta :ns)]\n                                        (let [current-ns-name (vars/current-ns-name)]\n                                          (if-not (= (vars/getName prev-ns)\n                                                     current-ns-name)\n                                            (throw-error-with-location\n                                             (str name \" already refers to \"\n                                                  x \" in namespace \"\n                                                  current-ns-name)\n                                             expr)\n                                            ;; when the previous bound thing\n                                            ;; didn't have an ns, just assume\n                                            ;; things are ok to redefine\n                                            acc))\n                                        ;; declare does not override an existing var\n                                        acc)\n                                      (assoc acc name\n                                             (doto (vars/->SciVar nil (symbol (str cnn)\n                                                                              (str name))\n                                                                  (assoc (meta name)\n                                                                         :name name\n                                                                         :ns @vars/current-ns\n                                                                         :file @vars/current-file)\n                                                                  false)\n                                               (vars/unbind)))))\n                                  current-ns\n                                  names))))))\n  nil)\n\n;;;; Interop\n\n(defn expand-dot [ctx [_dot instance-expr method-expr & args :as _expr]]\n  (let [[method-expr & args] (if (seq? method-expr) method-expr\n                                 (cons method-expr args))\n        instance-expr (analyze ctx instance-expr)\n        instance-expr (utils/vary-meta*\n                       instance-expr\n                       (fn [m]\n                         (if-let [t (:tag m)]\n                           (let [clazz (or (interop/resolve-class ctx t)\n                                           (records/resolve-record-class ctx t)\n                                           (throw-error-with-location\n                                            (str \"Unable to resolve classname: \" t) t))]\n                             (assoc m :tag-class clazz))\n                           m)))\n        method-expr (name method-expr)\n        args (when args (analyze-children ctx args))\n        res #?(:clj (if (class? instance-expr)\n                      (if (nil? args)\n                        (if (str/starts-with? method-expr \"-\")\n                          (with-meta [instance-expr (subs method-expr 1)]\n                            {:sci.impl/op :static-access})\n                          ;; https://clojure.org/reference/java_interop\n                          ;; If the second operand is a symbol and no args are\n                          ;; supplied it is taken to be a field access - the\n                          ;; name of the field is the name of the symbol, and\n                          ;; the value of the expression is the value of the\n                          ;; field, unless there is a no argument public method\n                          ;; of the same name, in which case it resolves to a\n                          ;; call to the method.\n                          (if-let [_\n                                   (try (Reflector/getStaticField ^Class instance-expr ^String method-expr)\n                                        (catch IllegalArgumentException _ nil))]\n                            (with-meta [instance-expr method-expr]\n                              {:sci.impl/op :static-access})\n                            (mark-eval-call\n                             `(~(with-meta [instance-expr method-expr]\n                                  {:sci.impl/op :static-access}) ~@args))))\n                        (mark-eval-call\n                         `(~(with-meta [instance-expr method-expr]\n                              {:sci.impl/op :static-access}) ~@args)))\n                      (mark-eval-call `(~'. ~instance-expr ~method-expr ~args)))\n               :cljs (mark-eval-call `(~'. ~instance-expr ~method-expr ~args)))]\n    res))\n\n(defn expand-dot**\n  \"Expands (. x method)\"\n  [ctx expr]\n  (when (< (count expr) 3)\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"Malformed member expression, expecting (.member target ...)\")))\n  (expand-dot ctx expr))\n\n(defn expand-dot*\n  \"Expands (.foo x)\"\n  [ctx [method-name obj & args :as expr]]\n  (when (< (count expr) 2)\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"Malformed member expression, expecting (.member target ...)\")))\n  (expand-dot ctx (list '. obj (cons (symbol (subs (name method-name) 1)) args))))\n\n(defn expand-new [ctx [_new class-sym & args :as _expr]]\n  (if-let [#?(:clj {:keys [:class] :as _opts}\n              :cljs {:keys [:constructor] :as _opts}) (interop/resolve-class-opts ctx class-sym)]\n    (let [args (analyze-children ctx args)] ;; analyze args!\n      (mark-eval-call (list 'new #?(:clj class :cljs constructor) args)))\n    (if-let [record (records/resolve-record-class ctx class-sym)]\n      (let [args (analyze-children ctx args)]\n        (mark-eval-call (list* (:sci.impl.record/constructor (meta record)) args)))\n      (throw-error-with-location (str \"Unable to resolve classname: \" class-sym) class-sym))))\n\n(defn expand-constructor [ctx [constructor-sym & args]]\n  (let [constructor-name (name constructor-sym)\n        class-sym (with-meta (symbol (subs constructor-name 0\n                                           (dec (count constructor-name))))\n                    (meta constructor-sym))]\n    (expand-new ctx (with-meta (list* 'new class-sym args)\n                      (meta constructor-sym)))))\n\n;;;; End interop\n\n;;;; Namespaces\n\n(defn analyze-ns-form [ctx [_ns ns-name & exprs]]\n  (when-not (symbol? ns-name)\n    (throw (new #?(:clj IllegalArgumentException\n                   :cljs js/Error)\n                (str \"Namespace name must be symbol, got: \" (pr-str ns-name)))))\n  (let [[docstring exprs]\n        (let [fexpr (first exprs)]\n          (if (string? fexpr)\n            [fexpr (next exprs)]\n            [nil exprs]))\n        ;; skip attr-map\n        [attr-map exprs]\n        (let [m (first exprs)]\n          (if (map? m)\n            [m (next exprs)]\n            [nil exprs]))\n        attr-map (if docstring\n                   (assoc attr-map :doc docstring)\n                   attr-map)]\n    (set-namespace! ctx ns-name attr-map)\n    (loop [exprs exprs\n           ret []]\n      (if exprs\n        (let [[k & args :as expr] (first exprs)]\n          (case k\n            (:require :use)\n            (recur (next exprs)\n                   (conj ret\n                         (mark-eval-call\n                          (with-meta (list* (symbol (name k)) args)\n                            (meta expr)))))\n            :import (recur (next exprs) (conj ret (mark-eval-call\n                                                   (with-meta (list* 'import args)\n                                                     (meta expr)))))\n            :refer-clojure (recur (next exprs)\n                                  (conj ret\n                                        (mark-eval-call\n                                         (with-meta (list* 'refer 'clojure.core args)\n                                           (meta expr)))))\n            :gen-class ;; ignore\n            (recur (next exprs) ret)))\n        (mark-eval-call (list* 'do ret))))))\n\n;;;; End namespaces\n\n\n;;;; Vars\n\n(defn analyze-var [ctx [_ var-name]]\n  (resolve/resolve-symbol (assoc ctx :sci.impl/prevent-deref true) var-name))\n\n(defn analyze-set! [ctx [_ obj v]]\n  (let [obj (analyze ctx obj)\n        v (analyze ctx v)\n        obj (types/getVal obj)]\n    (mark-eval-call (list 'set! obj v))))\n\n;;;; End vars\n\n(defn analyze-call [ctx expr top-level?]\n  (let [f (first expr)]\n    (if (symbol? f)\n      (let [;; in call position Clojure prioritizes special symbols over\n            ;; bindings\n            special-sym (get special-syms f)\n            _ (when special-sym (resolve/check-permission! ctx special-sym f nil))\n            f (or special-sym\n                  (resolve/resolve-symbol ctx f true))\n            #_#_f (if (and (vars/var? f)\n                           (vars/isMacro f))\n                    f f)\n            f-meta (meta f)\n            eval? (and f-meta (:sci.impl/op f-meta))]\n        (cond (and f-meta (::static-access f-meta))\n              (expand-dot** ctx (list* '. (first f) (second f) (rest expr)))\n              (and (not eval?) ;; the symbol is not a binding\n                   (or\n                    special-sym\n                    (contains? ana-macros f)))\n              (case f\n                ;; we treat every subexpression of a top-level do as a separate\n                ;; analysis/interpretation unit so we hand this over to the\n                ;; interpreter again, which will invoke analysis + evaluation on\n                ;; every sub expression\n                do (mark-eval-call (cons 'do\n                                         (analyze-children ctx (rest expr))))\n                let (expand-let ctx expr)\n                (fn fn*) (expand-fn ctx expr false)\n                def (expand-def ctx expr)\n                ;; NOTE: defn / defmacro aren't implemented as normal macros yet\n                (defn defmacro) (let [ret (expand-defn ctx expr)]\n                                  ret)\n                ;; TODO: implement as normal macro in namespaces.cljc\n                loop (expand-loop ctx expr)\n                lazy-seq (expand-lazy-seq ctx expr)\n                for (let [res (expand-for ctx expr)]\n                      (if (:sci.impl/macroexpanding ctx)\n                        res\n                        (analyze ctx res)))\n                doseq (analyze ctx (expand-doseq ctx expr))\n                if (expand-if ctx expr)\n                case (expand-case ctx expr)\n                try (expand-try ctx expr)\n                declare (expand-declare ctx expr)\n                expand-dot* (expand-dot* ctx expr)\n                . (expand-dot** ctx expr)\n                expand-constructor (expand-constructor ctx expr)\n                new (expand-new ctx expr)\n                ns (analyze-ns-form ctx expr)\n                var (analyze-var ctx expr)\n                set! (analyze-set! ctx expr)\n                (import quote) (mark-eval-call expr) ;; don't analyze children\n                ;; else:\n                (mark-eval-call (cons f (analyze-children ctx (rest expr)))))\n              :else\n              (try\n                (if (macro? f)\n                  (let [needs-ctx? (identical? utils/needs-ctx\n                                               (:sci.impl/op (meta f)))\n                        v (if needs-ctx?\n                            (apply f expr\n                                   (:bindings ctx)\n                                   ctx\n                                   (rest expr))\n                            (apply f expr\n                                   (:bindings ctx) (rest expr)))\n                        expanded (cond (:sci.impl/macroexpanding ctx) v\n                                       (and top-level? (seq? v) (= 'do (first v)))\n                                       ;; hand back control to eval-form for\n                                       ;; interleaved analysis and eval\n                                       (types/->EvalForm v)\n                                       :else (analyze ctx v))]\n                    expanded)\n                  (if-let [f (:sci.impl/inlined f-meta)]\n                    (mark-eval-call (cons f (analyze-children ctx (rest expr)))\n                                    :sci.impl/f-meta f-meta)\n                    (mark-eval-call (cons f (analyze-children ctx (rest expr))))))\n                (catch #?(:clj Exception :cljs js/Error) e\n                  (rethrow-with-location-of-node ctx e\n                                                 ;; adding metadata for error reporting\n                                                 (mark-eval-call\n                                                  (with-meta (cons f (rest expr))\n                                                    (meta expr))))))))\n      (let [ret (mark-eval-call (analyze-children ctx expr))]\n        ret))))\n\n(def ^:const constant-colls true) ;; see GH #452\n\n(defn analyze\n  ([ctx expr]\n   (analyze ctx expr false))\n  ([ctx expr top-level?]\n   ;; (prn :ana expr)\n   (let [m (meta expr)\n         ret (cond (constant? expr) expr ;; constants do not carry metadata\n                   (symbol? expr) (let [v (resolve/resolve-symbol ctx expr false)]\n                                    (cond (constant? v) v\n                                          (vars/var? v)\n                                          (if (:const (meta v))\n                                            @v\n                                            (if (vars/isMacro v)\n                                              (throw (new #?(:clj IllegalStateException :cljs js/Error)\n                                                          (str \"Can't take value of a macro: \" v \"\")))\n                                              (types/->EvalVar v)))\n                                          :else (merge-meta v m)))\n                   ;; don't evaluate records, this check needs to go before map?\n                   ;; since a record is also a map\n                   (record? expr) expr\n                   (map? expr)\n                   (let [ks (keys expr)\n                         vs (vals expr)\n                         constant-map? (and constant-colls\n                                            (every? constant? ks)\n                                            (every? constant? vs))\n                         analyzed-map (if constant-map?\n                                        expr\n                                        ;; potential place for optimization\n                                        (zipmap (analyze-children ctx ks)\n                                                (analyze-children ctx vs)))\n                         analyzed-meta (when m (analyze ctx m))\n                         analyzed-meta (if (and constant-map?\n                                                ;; meta was also a constant-map\n                                                (identical? m analyzed-meta))\n                                         analyzed-meta\n                                         (assoc analyzed-meta :sci.impl/op :eval))]\n                     (if analyzed-meta\n                       (with-meta analyzed-map analyzed-meta)\n                       analyzed-map))\n                   (or (vector? expr) (set? expr))\n                   (let [constant-coll? (and constant-colls\n                                             (every? constant? expr))\n                         analyzed-coll (if constant-coll?\n                                         expr\n                                         (into (empty expr) (analyze-children ctx expr)))\n                         analyzed-meta (when m (analyze ctx m))\n                         analyzed-meta (if (and constant-coll?\n                                                (identical? m analyzed-meta))\n                                         analyzed-meta\n                                         (assoc analyzed-meta :sci.impl/op :eval))]\n                     (if analyzed-meta\n                       (with-meta analyzed-coll analyzed-meta)\n                       analyzed-coll))\n                   (seq? expr) (if (seq expr)\n                                 (merge-meta (analyze-call ctx expr top-level?) m)\n                                 ;; the empty list\n                                 expr)\n                   :else\n                   expr)]\n     ret)))\n\n;;;; Scratch\n\n(comment\n  )\n","~:reader-features",["^K",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["sci.impl.analyzer/special-syms","sci.impl.analyzer/throw-error-with-location","msg","node","sci.impl.utils.throw_error_with_location","sci.impl.analyzer/macroexpand-1","ctx","expr","original-expr","cljs.core/seq?","op","cljs.core/first","cljs.core/Symbol","cljs.core.get","cljs.core/contains?","G__54402","G__54403","sci.impl.analyzer/analyze","cljs.core.assoc","f","sci.impl.resolve.resolve_symbol","cljs.core/deref","and__4210__auto__","sci.impl.vars/var?","sci.impl.vars/isMacro","sci.impl.utils/macro?","sci.impl.utils/needs-ctx","G__54404","cljs.core/meta","cljs.core.partial","cljs.core.apply","cljs.core/rest","sci.impl.analyzer/macroexpand","form","ex","cljs.core/vreset!","sci.impl.utils/macroexpand*","sci.impl.utils/macroexpand-1*","sci.impl.analyzer/analyze-children","children","p1__54407#","cljs.core.mapv","sci.impl.analyzer/maybe-destructured","params","body","cljs.core/every?","cljs.core/symbol?","new-params","cljs.core/with-meta","lets","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/next","cljs.core.conj","gparam","cljs.core.gensym","p__54430","p__54431","map__54434","cljs.core/--destructure-map","fn-expr","vec__54436","seq__54437","first__54438","sci.impl.analyzer/expand-fn-args+body","fn-name","binding-vector","body-exprs","macro?","cljs.core/vector?","map__54441","cljs.core.into","fixed-args","p1__54414#","cljs.core.take_while","cljs.core.not_EQ_","fixed-arity","cljs.core/count","var-arg-name","cljs.core/second","p1__54415#","cljs.core.drop_while","next-body","conds","e","cljs.core/map?","or__4212__auto__","pre","post","cljs.core/vec","cljs.core.map","c","cljs.core.update","cljs.core/merge","cljs.core/zipmap","cljs.core.repeat","sci.impl.analyzer/analyzed-fn-meta","m","meta-needs-eval?","sci.impl.utils/mark-eval","p__54459","vec__54461","seq__54462","first__54463","sci.impl.analyzer/expand-fn","_fn","name?","cljs.core/cons","bodies","cljs.core/assoc-in","analyzed-bodies","cljs.core.reduce","p__54470","map__54472","max-fixed","min-varargs","acc","arglist","new-min-varargs","cljs.core/not","x__4295__auto__","y__4296__auto__","cljs.core/conj","arities","arglists","fn-meta","ana-fn-meta","cljs.core.dissoc","sci.impl.analyzer/expand-let*","destructured-let-bindings","exprs","vec__54537","cljs.core.nth","new-let-bindings","p__54553","p__54554","vec__54560","vec__54564","binding-name","binding-value","v","cljs.core/assoc","cljs.core.partition","sci.impl.evaluator/eval-let","sci.impl.utils/evaluate","p__54581","vec__54582","seq__54583","first__54584","sci.impl.analyzer/expand-let","_let","let-bindings","sci.impl.destructure/destructure","sci.impl.analyzer/expand-def","vec__54591","_def","var-name","?docstring","?init","G__54596","G__54597","sci.impl.analyzer/expand-declare","cljs.core/simple-symbol?","arg-count","docstring","cljs.core._EQ_","expected-arg-count","js/Error","init","sci.impl.vars/current-ns","sci.impl.utils.mark_eval_call","p__54611","vec__54613","seq__54614","first__54615","sci.impl.analyzer/expand-defn","G__54619","G__54620","vec__54623","cljs.core/name","pre-body","cljs.core/split-with","cljs.core.comp","cljs.core/sequential?","_","cljs.core/empty?","temp__5753__auto__","ds","meta-map","cljs.core/last","G__54633","G__54634","cljs.core.merge","fn-body","G__54640","sci.impl.analyzer/expand-loop","vec__54647","bv","arg-names","cljs.core.take_nth","init-vals","syms","cljs.core.repeatedly","bv1","cljs.core/vector","bv2","cljs.core/cat","cljs.core.interleave","cljs.core/nnext","expansion","cljs.core.list_STAR_","sci.impl.analyzer/expand-lazy-seq","G__54659","G__54660","p__54663","vec__54664","seq__54665","first__54666","sci.impl.analyzer/expand-if","_if","G__54668","vec__54670","cond","then","else","sci.impl.evaluator/eval-if","sci.impl.analyzer/expand-case","G__54674","G__54675","clauses","match-clauses","result-clauses","default","cljs.core/odd?","G__54679","G__54680","cases","assoc-new","k","case-map","ret-map","vec__54690","seq__54691","first__54692","cljs.core/list?","ret","p__54699","vec__54700","seq__54701","first__54702","sci.impl.analyzer/expand-try","_try","vec__54704","catches","finally","catch-exprs","finally-expr","G__54714","G__54715","vec__54718","seq__54719","first__54720","binding","temp__5751__auto__","clazz","sci.impl.interop/resolve-class","G__54722","G__54723","G__54724","G__54725","p__54728","vec__54730","seq__54731","first__54732","_declare","names","cljs.core.swap_BANG_","env","cnn","sci.impl.vars/current-ns-name","cljs.core.update_in","current-ns","name","x","prev-ns","G__54733","current-ns-name","sci.impl.vars/getName","G__54737","sci.impl.vars/->SciVar","cljs.core.symbol","sci.impl.vars/current-file","p__54745","vec__54746","seq__54747","first__54748","sci.impl.analyzer/expand-dot","_dot","instance-expr","method-expr","args","_expr","vec__54749","seq__54750","first__54751","sci.impl.utils/vary-meta*","t","sci.impl.records/resolve-record-class","res","sci.impl.analyzer/expand-dot**","p__54769","vec__54770","seq__54771","first__54772","sci.impl.analyzer/expand-dot*","method-name","obj","cljs.core.subs","p__54774","vec__54778","seq__54779","first__54780","sci.impl.analyzer/expand-new","_new","class-sym","map__54781","constructor","_opts","sci.impl.interop/resolve-class-opts","record","p__54787","vec__54789","seq__54790","first__54791","sci.impl.analyzer/expand-constructor","constructor-sym","constructor-name","p__54797","vec__54798","seq__54799","first__54800","sci.impl.analyzer/analyze-ns-form","_ns","ns-name","cljs.core.pr_str","vec__54802","vec__54805","fexpr","attr-map","sci.impl.utils/set-namespace!","vec__54817","seq__54818","first__54819","G__54822","cljs.core/Keyword","p__54827","vec__54829","sci.impl.analyzer/analyze-var","p__54833","vec__54834","sci.impl.analyzer/analyze-set!","sci.impl.types/getVal","sci.impl.analyzer/analyze-call","top-level?","special-sym","sci.impl.resolve/check-permission!","f-meta","eval?","sci.impl.utils/ana-macros","G__54847","sci.impl.for-macro/expand-for","G__54858","G__54859","sci.impl.doseq-macro/expand-doseq","e54868","needs-ctx?","expanded","sci.impl.types/->EvalForm","sci.impl.utils/rethrow-with-location-of-node","sci.impl.analyzer/constant-colls","var_args","G__54876","sci.impl.analyzer.analyze","sci.impl.utils/constant?","sci.impl.types/->EvalVar","sci.impl.utils/merge-meta","cljs.core/record?","ks","cljs.core/keys","vs","cljs.core/vals","constant-map?","analyzed-map","analyzed-meta","cljs.core/set?","constant-coll?","analyzed-coll","cljs.core/empty"]],"~:used-vars",["^K",["~$cljs.core/--destructure-map","~$sci.impl.analyzer/expand-dot*","~$sci.impl.vars/isMacro","~$sci.impl.evaluator/eval-if","~$sci.impl.utils/mark-eval-call","~$cljs.core/comp","~$cljs.core/rest","~$sci.impl.analyzer/special-syms","~$sci.impl.analyzer/macroexpand","~$sci.impl.analyzer/expand-def","~$cljs.core/sequential?","~$cljs.core/odd?","~$sci.impl.vars/getName","~$cljs.core/simple-symbol?","~$sci.impl.analyzer/analyze-children","~$sci.impl.analyzer/expand-loop","~$cljs.core/vector?","~$cljs.core/repeatedly","~$cljs.core/=","~$sci.impl.utils/evaluate","~$cljs.core/keys","~$sci.impl.analyzer/expand-let","~$cljs.core/partial","~$cljs.core/take-while","~$sci.impl.analyzer/throw-error-with-location","~$sci.impl.vars/current-ns","~$cljs.core/drop-while","~$sci.impl.utils/vary-meta*","~$sci.impl.analyzer/analyze","~$cljs.core/count","~$cljs.core/deref","~$sci.impl.vars/current-file","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/Keyword","~$sci.impl.utils/set-namespace!","~$cljs.core/last","~$sci.impl.resolve/check-permission!","~$cljs.core/vreset!","~$cljs.core/mapv","~$cljs.core/not=","~$cljs.core/dissoc","~$sci.impl.interop/resolve-class-opts","~$sci.impl.analyzer/expand-defn","~$sci.impl.analyzer/expand-dot","~$cljs.core/concat","~$sci.impl.utils/merge-meta","~$cljs.core/pr-str","~$cljs.core/take-nth","~$sci.impl.analyzer/expand-declare","~$sci.impl.types/getVal","~$sci.impl.resolve/resolve-symbol","~$sci.impl.vars/var?","~$cljs.core/empty?","~$sci.impl.interop/resolve-class","~$sci.impl.analyzer/expand-fn-args+body","~$cljs.core/contains?","~$sci.impl.utils/macroexpand*","~$cljs.core/into","~$cljs.core/map?","~$sci.impl.analyzer/expand-new","~$cljs.core/conj","~$sci.impl.vars/current-ns-name","~$cljs.core/zipmap","~$cljs.core/update","~$cljs.core/with-meta","~$cljs.core/map","~$sci.impl.records/resolve-record-class","~$sci.impl.utils/ana-macros","~$sci.impl.analyzer/macroexpand-1","~$cljs.core/List","~$cljs.core/empty","~$cljs.core/vals","~$cljs.core/swap!","~$sci.impl.destructure/destructure","~$sci.impl.analyzer/analyze-call","~$cljs.core/get","~$sci.impl.analyzer/expand-let*","~$cljs.core/partition","~$cljs.core/cat","~$cljs.core/symbol","~$sci.impl.vars/unbind","~$cljs.core/record?","~$cljs.core/nnext","~$sci.impl.utils/rethrow-with-location-of-node","~$sci.impl.analyzer/expand-if","~$sci.impl.utils/macro?","~$cljs.core/set?","~$sci.impl.utils/constant?","~$cljs.core/nth","~$cljs.core/meta","~$cljs.core/list?","~$cljs.core/second","~$sci.impl.types/->EvalVar","~$cljs.core/interleave","~$cljs.core/split-with","~$sci.impl.utils/macroexpand-1*","~$cljs.core/next","~$cljs.core/vec","~$cljs.core/sequence","~$cljs.core/not","~$sci.impl.types/->EvalForm","~$sci.impl.for-macro/expand-for","~$cljs.core/cons","~$cljs.core/assoc","~$sci.impl.doseq-macro/expand-doseq","~$cljs.core/assoc-in","~$sci.impl.analyzer/constant-colls","~$cljs.core/Symbol","~$cljs.core/symbol?","~$cljs.core/repeat","~$sci.impl.evaluator/eval-let","~$sci.impl.analyzer/maybe-destructured","~$sci.impl.analyzer/expand-constructor","~$sci.impl.analyzer/expand-dot**","~$sci.impl.analyzer/expand-lazy-seq","~$sci.impl.analyzer/analyze-ns-form","~$cljs.core/gensym","~$cljs.core/first","~$cljs.core/seq?","~$sci.impl.utils/needs-ctx","~$sci.impl.analyzer/expand-case","~$sci.impl.utils/throw-error-with-location","~$sci.impl.analyzer/expand-fn","~$cljs.core/name","~$sci.impl.vars/->SciVar","~$cljs.core/subs","~$cljs.core/merge","~$cljs.core/every?","~$cljs.core/update-in","~$js/Error","~$cljs.core/list*","~$sci.impl.utils/mark-eval","~$cljs.core/vector","~$sci.impl.analyzer/analyze-var","~$sci.impl.analyzer/expand-try","~$sci.impl.analyzer/analyze-set!","~$sci.impl.analyzer/analyzed-fn-meta"]]],"~:cache-keys",["~#cmap",[["^1V","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^11","~$goog.dom.HtmlElement"]]],["^1V","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","~$goog.array","~$goog.asserts"]]],["^1V","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5D","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1V","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5E","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^5H"]]],["^1V","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5E"]]],["^1V","sci/impl/unrestrict.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10"]]],["^1V","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","sci/impl/destructure.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10"]]],["^1V","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5E"]]],["^1V","sci/impl/macros.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10"]]],"~:SHADOW-TIMESTAMP",[1630418006000,1630418006000,1627026917000],["^1V","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5E","~$goog.reflect"]]],["^1V","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5E","~$goog.fs.blob","^5I","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5K","^5L","^5M","^5N"]]],["^1V","sci/impl/doseq_macro.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","^15"]]],["^1V","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5D","^5E","~$goog.html.SafeUrl","^5M","^5N","^5H"]]],["^1V","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5E","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^5R","~$goog.html.SafeStyle","^5T","^5J","~$goog.html.uncheckedconversions","^5M","^5H"]]],["^1V","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1V","sci/impl/for_macro.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","^15"]]],["^1V","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5D","^5E","~$goog.dom.TagName","~$goog.dom.tags","^5R","^5X","~$goog.html.SafeStyleSheet","^5T","^5J","^5S","^5K","^5L","~$goog.labs.userAgent.browser","^5G","^5M","^5N","^5H"]]],["^1V","sci/impl/types.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10"]]],["^1V","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5G"]]],["^1V","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5D"]]],["^1V","sci/impl/fns.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","~$sci.impl.faster","~$sci.impl.macros","^V","^15"]]],["^1V","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1V","sci/impl/vars.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","^65","^V","~$sci.impl.unrestrict","~$sci.lang"]]],["^1V","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5D","^5E","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1V","sci/impl/resolve.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","~$clojure.string","^14","^13","^15","^Z"]]],["^1V","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",[]]],["^1V","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5D","^5G"]]],["^1V","sci/impl/faster.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","^65"]]],["^1V","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","^6:","~$goog.string.StringBuffer"]]],["^1V","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","~$goog.dom.safe","^5Y","^5M","^5H"]]],["^1V","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5H"]]],["^1V","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5D","^5E","^5V","~$goog.math"]]],["^1V","sci/impl/utils.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","^6@","^V","^Z"]]],["^1V","sci/impl/evaluator.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","^6@","^64","~$sci.impl.fns","^14","^65","^13","^V","^15","^Z"]]],["^1V","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5E","^5W","^5R","^5X","^62","^5T","^5J","^5M","^5H","^5K"]]],["^1V","sci/lang.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10"]]],["^1V","sci/impl/analyzer.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","^1:","^12","^X","^[","^14","^13","^17","^V","^15","^Z"]]],["^1V","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11"]]],["^1V","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","~$goog.math.Long","~$goog.math.Integer","^6:","^5G","^5D","~$goog.Uri","^6A"]]],["^1V","sci/impl/records.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","^6@","^15","^Z"]]],["^1V","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5M","^5N","^5S","^5E"]]],["^1V","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5M","^5X","^5N","^5D","^5G","^5E","^5H"]]],["^1V","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5P"]]],["^1V","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5E","^6:"]]],["^1V","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^5E","^5N"]]],["^1V","sci/impl/interop.cljc"],["96e39dcbc3fb3a41c6bf2e628303cf0f534b28a3","^5?",["^ ","^5@",null,"^5A",["^K",[]],"^5B",["^11","^10","^5G","^Z","^6@"]]]]],"~:clj-info",["^ ","jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/faster.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/records.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/vars.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/fns.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/binaryage/devtools/0.9.7/devtools-0.9.7.jar!/devtools/defaults.clj",1625668616000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/macros.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/utils.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/evaluator.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1625242111000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1627026915000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/interop.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1627026917000,"jar:file:/home/dudley/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1627026917000,"jar:file:/home/dudley/.m2/repository/borkdude/sci/0.2.1-alpha.1/sci-0.2.1-alpha.1.jar!/sci/impl/types.cljc",1630429552000,"jar:file:/home/dudley/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1627026915000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6",true,"^7","sci/impl/analyzer.cljc","^8",1,"^9",5,"^:",1,"^;",22],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",["^L","^M","^N","^O"]],"^P","^Q","^T",null,"^U",["^ ","^V","^V","^W","^X","^Y","^Z","^X","^X","^[","^[","^10","^10","^11","^11","^12","^12","^13","^13","^14","^14","^Z","^Z","^15","^15","^16","^V","^17","^17","^18","^13","^19","^14","^1:","^1:","^1;","^15","^1<","^17"],"^1=",["^K",["^1>"]],"~:shadow/js-access-global",["^K",["Error"]],"^1?",["^ ","^1@","^15","^1A","^15","^1B","^12","^1C","^15","^1D","^[","^1E","^15","^1F","^15","^1G","^15","^1H","^15","^O","^1:","^1I","^15"],"~:defs",["^ ","^L",["^ ","~:protocol-inline",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",57,"^9",7,"^:",57,"^;",18,"~:arglists",["^1L",["~$quote",["^1L",[["~$ctx","~$form"]]]]]],"^P","^2>","^7","sci/impl/analyzer.cljc","^;",18,"~:method-params",["^1L",[["^7I","^7J"]]],"~:protocol-impl",null,"~:arglists-meta",["^1L",[null,null]],"^9",1,"~:variadic?",false,"^8",57,"~:ret-tag",["^K",[null,"~$any"]],"^:",57,"~:max-fixed-arity",2,"~:fn-var",true,"^7G",["^1L",["^7H",["^1L",[["^7I","^7J"]]]]]],"~$special-syms",["^ ","^P","^2=","^7","sci/impl/analyzer.cljc","^8",26,"^9",1,"^:",26,"^;",18,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",26,"^9",6,"^:",26,"^;",18],"~:tag","~$cljs.core/ISet"],"~$analyze-children",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",69,"^9",7,"^:",69,"^;",23,"^7G",["^1L",["^7H",["^1L",[["^7I","~$children"]]]]]],"^P","^2D","^7","sci/impl/analyzer.cljc","^;",23,"^7K",["^1L",[["^7I","^7W"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",69,"^7O","~$clj","^:",69,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I","^7W"]]]]]],"~$expand-def",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",211,"^9",7,"^:",211,"^;",17,"^7G",["^1L",["^7H",["^1L",[["^7I","~$expr"]]]]]],"^P","^2?","^7","sci/impl/analyzer.cljc","^;",17,"^7K",["^1L",[["^7I","^7Z"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",211,"^7O",["^K",["^7X","~$cljs.core/MetaFn","~$clj-nil"]],"^:",211,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"]]]]]],"~$expand-loop",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",267,"^9",7,"^:",267,"^;",18,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"]]]]]],"^P","^2E","^7","sci/impl/analyzer.cljc","^;",18,"^7K",["^1L",[["^7I","^7Z"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",267,"^7O","^7P","^:",267,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"]]]]]],"~$expand-let",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",203,"^9",7,"^:",203,"^;",17,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_let","~$let-bindings","~$&","~$exprs"]]]]]],"~:doc","The let macro from clojure.core"],"^P","^2K","^7","sci/impl/analyzer.cljc","^;",17,"^7K",["^1L",[["^7I","~$p__54581"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",203,"^7O",["^K",["^7X","^7[","^80"]],"^:",203,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["^83","^84","~$&","^85"]]]]]],"^86","The let macro from clojure.core"],"~$throw-error-with-location",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",28,"^9",8,"^:",28,"^;",33,"~:private",true,"^7G",["^1L",["^7H",["^1L",[["~$msg","~$node"]]]]]],"^89",true,"^P","^2N","^7","sci/impl/analyzer.cljc","^;",33,"^7K",["^1L",[["^8:","^8;"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",28,"^7O","~$ignore","^:",28,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^8:","^8;"]]]]]],"~$analyze",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",648,"^9",7,"^:",648,"^;",14,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"],["^7I","^7Z","~$top-level?"]]]]],"~:top-fn",["^ ","^7N",false,"~:fixed-arity",3,"^7Q",3,"^7K",[["^7I","^7Z"],["^7I","^7Z","^8>"]],"^7G",["^1L",[["^7I","^7Z"],["^7I","^7Z","^8>"]]],"^7M",["^1L",[null,null]]]],"^P","^2R","^7","sci/impl/analyzer.cljc","^;",14,"^8?",["^ ","^7N",false,"^8@",3,"^7Q",3,"^7K",[["^7I","^7Z"],["^7I","^7Z","^8>"]],"^7G",["^1L",[["^7I","^7Z"],["^7I","^7Z","^8>"]]],"^7M",["^1L",[null,null]]],"^7K",[["^7I","^7Z"],["^7I","^7Z","^8>"]],"^7L",null,"^8@",3,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"~:methods",[["^ ","^8@",2,"^7N",false,"^7T","^7P"],["^ ","^8@",3,"^7N",false,"^7T",["^K",[null,"~$cljs.core/IRecord","~$seq","^7X","^7P","~$sci.impl.types/EvalVar","^7[","^80"]]]],"^8",648,"^:",648,"^7Q",3,"^7R",true,"^7G",["^1L",[["^7I","^7Z"],["^7I","^7Z","^8>"]]]],"~$expand-defn",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",237,"^9",7,"^:",237,"^;",18,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$op","~$fn-name","~$&","~$body","^1Q","^7Z"]]]]]]],"^P","^36","^7","sci/impl/analyzer.cljc","^;",18,"^7K",["^1L",[["^7I","~$p__54611"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",237,"^7O",["^K",["^7X","^7[","^80"]],"^:",237,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["^8F","^8G","~$&","^8H","^1Q","^7Z"]]]]]]],"~$expand-dot",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",418,"^9",7,"^:",418,"^;",17,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_dot","~$instance-expr","~$method-expr","~$&","~$args","^1Q","~$_expr"]]]]]]],"^P","^37","^7","sci/impl/analyzer.cljc","^;",17,"^7K",["^1L",[["^7I","~$p__54745"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",418,"^7O",["^K",["^7X","^7[","^80"]],"^:",418,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["^8K","^8L","^8M","~$&","^8N","^1Q","^8O"]]]]]]],"~$expand-declare",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",380,"^9",7,"^:",380,"^;",21,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_declare","~$&","~$names","^1Q","^7Z"]]]]]]],"^P","^3<","^7","sci/impl/analyzer.cljc","^;",21,"^7K",["^1L",[["^7I","~$p__54728"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",380,"^7O","^80","^:",380,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["^8R","~$&","^8S","^1Q","^7Z"]]]]]]],"~$expand-fn-args+body",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",90,"^9",7,"^:",90,"^;",26,"^7G",["^1L",["^7H",["^1L",[[["^ ","~:keys",["~:fn-expr"],"^1Q","^7I"],"^8G",["~$binding-vector","~$&","~$body-exprs"],"^1I"]]]]]],"^P","^3B","^7","sci/impl/analyzer.cljc","^;",26,"^7K",["^1L",[["~$p__54430","^8G","~$p__54431","^1I"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",90,"^7O","~$cljs.core/IMap","^:",90,"^7Q",4,"^7R",true,"^7G",["^1L",["^7H",["^1L",[[["^ ","^8V",["^8W"],"^1Q","^7I"],"^8G",["^8X","~$&","^8Y"],"^1I"]]]]]],"~$expand-new",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",478,"^9",7,"^:",478,"^;",17,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_new","~$class-sym","~$&","^8N","^1Q","^8O"]]]]]]],"^P","^3G","^7","sci/impl/analyzer.cljc","^;",17,"^7K",["^1L",[["^7I","~$p__54774"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",478,"^7O",["^K",["^7X","^7[","^80"]],"^:",478,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["^92","^93","~$&","^8N","^1Q","^8O"]]]]]]],"~$expand-let*",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",187,"^9",7,"^:",187,"^;",18,"^7G",["^1L",["^7H",["^1L",[["^7I","~$destructured-let-bindings","^85"]]]]]],"^P","^3X","^7","sci/impl/analyzer.cljc","^;",18,"^7K",["^1L",[["^7I","^96","^85"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",187,"^7O",["^K",["^7X","^7[","^80"]],"^:",187,"^7Q",3,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I","^96","^85"]]]]]],"~$analyze-call",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",559,"^9",7,"^:",559,"^;",19,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z","^8>"]]]]]],"^P","^3V","^7","sci/impl/analyzer.cljc","^;",19,"^7K",["^1L",[["^7I","^7Z","^8>"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",559,"^7O",["^K",[null,"^8C","^7X","~$cljs.core/IList","^7P","^7[","^80"]],"^:",559,"^7Q",3,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z","^8>"]]]]]],"^M",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",35,"^9",7,"^:",35,"^;",20,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"]]]]]],"^P","^3P","^7","sci/impl/analyzer.cljc","^;",20,"^7K",["^1L",[["^7I","^7Z"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",35,"^7O",["^K",[null,"^8C","^7P"]],"^:",35,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"]]]]]],"~$maybe-destructured",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",72,"^9",7,"^:",72,"^;",25,"^7G",["^1L",["^7H",["^1L",[["~$params","^8H"]]]]]],"^P","^4O","^7","sci/impl/analyzer.cljc","^;",25,"^7K",["^1L",[["^9:","^8H"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",72,"^7O","^90","^:",72,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^9:","^8H"]]]]]],"~$constant-colls",["^ ","^5",["^ ","^7","sci/impl/analyzer.cljc","^8",646,"^9",14,"^:",646,"^;",28,"~:const",true],"^P","^4J","^7","sci/impl/analyzer.cljc","^;",28,"~:const-expr",["^ ","^R","^9<","~:val",true,"~:env",["^ ","~:context","~:expr"],"^1K",true,"^7T","~$boolean"],"^9",1,"^9<",true,"^8",646,"^:",646,"^7T","^9B"],"~$expand-if",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",293,"^9",7,"^:",293,"^;",16,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_if","~$&","^85","^1Q","^7Z"]]]]]]],"^P","^44","^7","sci/impl/analyzer.cljc","^;",16,"^7K",["^1L",[["^7I","~$p__54663"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",293,"^:",293,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["^9D","~$&","^85","^1Q","^7Z"]]]]]]],"~$expand-constructor",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",488,"^9",7,"^:",488,"^;",25,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$constructor-sym","~$&","^8N"]]]]]]],"^P","^4P","^7","sci/impl/analyzer.cljc","^;",25,"^7K",["^1L",[["^7I","~$p__54787"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",488,"^7O",["^K",["^7X","^7[","^80"]],"^:",488,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["^9G","~$&","^8N"]]]]]]],"~$analyze-var",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",548,"^9",7,"^:",548,"^;",18,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_","~$var-name"]]]]]]],"^P","^59","^7","sci/impl/analyzer.cljc","^;",18,"^7K",["^1L",[["^7I","~$p__54827"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",548,"^7O","^7P","^:",548,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_","^9J"]]]]]]],"~$expand-dot**",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",462,"^9",7,"^:",462,"^;",19,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"]]]]],"^86","Expands (. x method)"],"^P","^4Q","^7","sci/impl/analyzer.cljc","^;",19,"^7K",["^1L",[["^7I","^7Z"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",462,"^7O",["^K",["^7X","^7[","^80"]],"^:",462,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"]]]]],"^86","Expands (. x method)"],"~$analyze-ns-form",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",500,"^9",7,"^:",500,"^;",22,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_ns","~$ns-name","~$&","^85"]]]]]]],"^P","^4S","^7","sci/impl/analyzer.cljc","^;",22,"^7K",["^1L",[["^7I","~$p__54797"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",500,"^7O",["^K",[null,"^7X","^7[","^80"]],"^:",500,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["^9N","^9O","~$&","^85"]]]]]]],"~$expand-try",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",340,"^9",7,"^:",340,"^;",17,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_try","~$&","^8H"]]]]]]],"^P","^5:","^7","sci/impl/analyzer.cljc","^;",17,"^7K",["^1L",[["^7I","~$p__54699"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",340,"^7O",["^K",["^7X","^7[","^80"]],"^:",340,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["^9R","~$&","^8H"]]]]]]],"~$expand-fn",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",136,"^9",7,"^:",136,"^;",16,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_fn","~$name?","~$&","^8H","^1Q","~$fn-expr"],"^1I"]]]]]],"^P","^4Z","^7","sci/impl/analyzer.cljc","^;",16,"^7K",["^1L",[["^7I","~$p__54459","^1I"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",136,"^7O",["^K",["^7X","^7[","^80"]],"^:",136,"^7Q",3,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["^9U","^9V","~$&","^8H","^1Q","^9W"],"^1I"]]]]]],"~$analyzed-fn-meta",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",129,"^9",7,"^:",129,"^;",23,"^7G",["^1L",["^7H",["^1L",[["^7I","~$m"]]]]]],"^P","^5<","^7","sci/impl/analyzer.cljc","^;",23,"^7K",["^1L",[["^7I","~$m"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",129,"^7O",["^K",[null,"^7X","^7[","^80"]],"^:",129,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I","~$m"]]]]]],"~$analyze-set!",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",551,"^9",7,"^:",551,"^;",19,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_","~$obj","~$v"]]]]]]],"^P","^5;","^7","sci/impl/analyzer.cljc","^;",19,"^7K",["^1L",[["^7I","~$p__54833"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",551,"^7O",["^K",["^7X","^7[","^80"]],"^:",551,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$_","^9[","~$v"]]]]]]],"~$expand-case",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",304,"^9",7,"^:",304,"^;",18,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"]]]]]],"^P","^4X","^7","sci/impl/analyzer.cljc","^;",18,"^7K",["^1L",[["^7I","^7Z"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",304,"^7O",["^K",["^7X","^7[","^80"]],"^:",304,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"]]]]]],"~$expand-lazy-seq",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",284,"^9",7,"^:",284,"^;",22,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"]]]]]],"^P","^4R","^7","sci/impl/analyzer.cljc","^;",22,"^7K",["^1L",[["^7I","^7Z"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",284,"^7O",["^K",["^7X","^7[","^80"]],"^:",284,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I","^7Z"]]]]]],"~$expand-dot*",["^ ","^7F",null,"^5",["^ ","^7","sci/impl/analyzer.cljc","^8",470,"^9",7,"^:",470,"^;",18,"^7G",["^1L",["^7H",["^1L",[["^7I",["~$method-name","^9[","~$&","^8N","^1Q","^7Z"]]]]]],"^86","Expands (.foo x)"],"^P","^27","^7","sci/impl/analyzer.cljc","^;",18,"^7K",["^1L",[["^7I","~$p__54769"]]],"^7L",null,"^7M",["^1L",[null,null]],"^9",1,"^7N",false,"^8",470,"^7O",["^K",["^7X","^7[","^80"]],"^:",470,"^7Q",2,"^7R",true,"^7G",["^1L",["^7H",["^1L",[["^7I",["^:4","^9[","~$&","^8N","^1Q","^7Z"]]]]]],"^86","Expands (.foo x)"]],"^1J",["^ ","^10","^10","^W","^X","^Y","^Z","^X","^X","^Z","^Z"],"~:cljs.analyzer/constants",["^ ","^1=",["^K",["~$&","~:sci.impl/var.unbound","~:finally","~$try","~$import","~:tag-class","~:namespaces","~:fn","~:min-var-args","~:sci.impl/fixed-arity","~:min-varargs","~:pre","~:sci.impl/arglist","~:sci.impl/try","~:sci.impl/f-meta","~:else","~$refer","~:sci.impl/prevent-deref","~:sci.impl/inlined","~:sci.impl/fn-name","~$doseq","~$finally","~:sci.impl/body","^S","~:bindings","^P","~:sci/macro","~$&form","~:sci.impl/fn","~$lazy-seq","~$let","^7","^;","~:params","~$fn","^9>","~:phase","~:max-fixed","~$do","~:sci.impl/fn-bodies","^9?","~$defn","~$if","~$%","~$new","^1M","~:catches","~:sci.impl.record/constructor","^9","~$clojure.core","^8W","~$declare","~$cljs.core/assert","~:sci.impl/var","~:sci.impl.analyzer/static-access","~$cljs.core/lazy-seq","~$cljs.core/let","~:sci.impl/macroexpanding","~:binding","^9<","^8","~$fn*","~$recur","~:macro","~:case-map","~:class","~:case-default","~:sci.impl/var-arg-name","~:constructor","~:sci.impl/arglists","~$&env","~$cljs.core/fn","~$loop","^:","~:post","~$for","^9F","~$defmacro","~$set!","^7T","~:case-val","~$.","~$var","^7H","~:try","^7G","~:sci.impl/op","~$case","~$catch","~:body","^86","~:bodies","~$throw","~:sci.impl/params","~:sci.impl/fn-meta","~$def","^:3","~:eval"]],"~:order",["^:9","^:K","^:W","^:Z","^:[","^;<","^;J","~$.","^;L","^7H","^;P","^;S","^;V","^:U","^;H","^;9","^:E","^;N","^:M","^:S","^;Q","^;8","^8W","^:O","^;D","~$&","^:A","^;G","~~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^5>",[["^;[","~:static-fns"],true,["^;[","~:shadow-tweaks"],null,["^;[","~:source-map-inline"],null,["^;[","~:elide-asserts"],false,["^;[","~:optimize-constants"],null,["^;[","^1Y"],null,["^;[","~:external-config"],null,["^;[","~:tooling-config"],null,["^;[","~:emit-constants"],null,["^;[","~:load-tests"],null,["^;[","~:form-size-threshold"],null,["^;[","~:data-readers"],null,["^;[","~:infer-externs"],"~:auto",["^;[","^1["],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^;[","~:fn-invoke-direct"],null,["^;[","~:source-map"],"/dev/null"]]]